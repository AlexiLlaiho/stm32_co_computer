
stm32_co_computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009750  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08009860  08009860  00019860  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009df4  08009df4  00020290  2**0
                  CONTENTS
  4 .ARM          00000000  08009df4  08009df4  00020290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009df4  08009df4  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009df4  08009df4  00019df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009df8  08009df8  00019df8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08009dfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011fc  20000290  0800a08c  00020290  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000148c  0800a08c  0002148c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139e8  00000000  00000000  000202b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303b  00000000  00000000  00033ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00036ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00037e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a7c2  00000000  00000000  00038e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a2c  00000000  00000000  0005360a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094360  00000000  00000000  00065036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9396  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f34  00000000  00000000  000f93ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000290 	.word	0x20000290
 800012c:	00000000 	.word	0x00000000
 8000130:	08009848 	.word	0x08009848

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000294 	.word	0x20000294
 800014c:	08009848 	.word	0x08009848

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	4605      	mov	r5, r0
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4628      	mov	r0, r5
 8000b72:	2200      	movs	r2, #0
 8000b74:	2300      	movs	r3, #0
 8000b76:	f7ff ff21 	bl	80009bc <__aeabi_dcmplt>
 8000b7a:	b928      	cbnz	r0, 8000b88 <__aeabi_d2lz+0x20>
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	4621      	mov	r1, r4
 8000b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b84:	f000 b80a 	b.w	8000b9c <__aeabi_d2ulz>
 8000b88:	4628      	mov	r0, r5
 8000b8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000b8e:	f000 f805 	bl	8000b9c <__aeabi_d2ulz>
 8000b92:	4240      	negs	r0, r0
 8000b94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b98:	bd38      	pop	{r3, r4, r5, pc}
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2ulz>:
 8000b9c:	b5d0      	push	{r4, r6, r7, lr}
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <__aeabi_d2ulz+0x34>)
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	460f      	mov	r7, r1
 8000ba6:	f7ff fc97 	bl	80004d8 <__aeabi_dmul>
 8000baa:	f7ff ff6d 	bl	8000a88 <__aeabi_d2uiz>
 8000bae:	4604      	mov	r4, r0
 8000bb0:	f7ff fc18 	bl	80003e4 <__aeabi_ui2d>
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <__aeabi_d2ulz+0x38>)
 8000bb8:	f7ff fc8e 	bl	80004d8 <__aeabi_dmul>
 8000bbc:	4602      	mov	r2, r0
 8000bbe:	460b      	mov	r3, r1
 8000bc0:	4630      	mov	r0, r6
 8000bc2:	4639      	mov	r1, r7
 8000bc4:	f7ff fad0 	bl	8000168 <__aeabi_dsub>
 8000bc8:	f7ff ff5e 	bl	8000a88 <__aeabi_d2uiz>
 8000bcc:	4621      	mov	r1, r4
 8000bce:	bdd0      	pop	{r4, r6, r7, pc}
 8000bd0:	3df00000 	.word	0x3df00000
 8000bd4:	41f00000 	.word	0x41f00000

08000bd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	60f8      	str	r0, [r7, #12]
 8000be0:	60b9      	str	r1, [r7, #8]
 8000be2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <vApplicationGetIdleTaskMemory+0x28>)
 8000be8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <vApplicationGetIdleTaskMemory+0x2c>)
 8000bee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2280      	movs	r2, #128	; 0x80
 8000bf4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bf6:	bf00      	nop
 8000bf8:	3714      	adds	r7, #20
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	200002ac 	.word	0x200002ac
 8000c04:	20000300 	.word	0x20000300

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b5b0      	push	{r4, r5, r7, lr}
 8000c0a:	b090      	sub	sp, #64	; 0x40
 8000c0c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0e:	f000 fcf1 	bl	80015f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c12:	f000 f861 	bl	8000cd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c16:	f000 f965 	bl	8000ee4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c1a:	f000 f899 	bl	8000d50 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c1e:	f000 f8e3 	bl	8000de8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c22:	f000 f90b 	bl	8000e3c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000c26:	f000 f933 	bl	8000e90 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 8000c2a:	4b21      	ldr	r3, [pc, #132]	; (8000cb0 <main+0xa8>)
 8000c2c:	f107 0420 	add.w	r4, r7, #32
 8000c30:	461d      	mov	r5, r3
 8000c32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000c3e:	f107 0320 	add.w	r3, r7, #32
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 faa9 	bl	800319c <osThreadCreate>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <main+0xac>)
 8000c4e:	6013      	str	r3, [r2, #0]

  osThreadDef(ledTask, StartLedTask, osPriorityNormal, 0, 128);
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <main+0xb0>)
 8000c52:	1d3c      	adds	r4, r7, #4
 8000c54:	461d      	mov	r5, r3
 8000c56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2100      	movs	r1, #0
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 fa98 	bl	800319c <osThreadCreate>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <main+0xb4>)
 8000c70:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1, rgps_data, 1);
 8000c72:	2201      	movs	r2, #1
 8000c74:	4912      	ldr	r1, [pc, #72]	; (8000cc0 <main+0xb8>)
 8000c76:	4813      	ldr	r0, [pc, #76]	; (8000cc4 <main+0xbc>)
 8000c78:	f001 ff6d 	bl	8002b56 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT (&huart2, str1, 1);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	4912      	ldr	r1, [pc, #72]	; (8000cc8 <main+0xc0>)
 8000c80:	4812      	ldr	r0, [pc, #72]	; (8000ccc <main+0xc4>)
 8000c82:	f001 ff24 	bl	8002ace <HAL_UART_Transmit_IT>
  uint8_t *p_buff = to_pc_gps_data;
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <main+0xc8>)
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_UART_Transmit_IT (&huart3, p_buff, strlen(to_pc_gps_data));
 8000c8a:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <main+0xc8>)
 8000c8c:	f7ff fa60 	bl	8000150 <strlen>
 8000c90:	4603      	mov	r3, r0
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	461a      	mov	r2, r3
 8000c96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000c98:	480e      	ldr	r0, [pc, #56]	; (8000cd4 <main+0xcc>)
 8000c9a:	f001 ff18 	bl	8002ace <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart3, rgps_data, 1);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4907      	ldr	r1, [pc, #28]	; (8000cc0 <main+0xb8>)
 8000ca2:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <main+0xcc>)
 8000ca4:	f001 ff57 	bl	8002b56 <HAL_UART_Receive_IT>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ca8:	f002 fa71 	bl	800318e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <main+0xa4>
 8000cae:	bf00      	nop
 8000cb0:	08009874 	.word	0x08009874
 8000cb4:	200012f8 	.word	0x200012f8
 8000cb8:	08009890 	.word	0x08009890
 8000cbc:	2000133c 	.word	0x2000133c
 8000cc0:	20000504 	.word	0x20000504
 8000cc4:	20001340 	.word	0x20001340
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	200013c8 	.word	0x200013c8
 8000cd0:	20000090 	.word	0x20000090
 8000cd4:	200012fc 	.word	0x200012fc

08000cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b090      	sub	sp, #64	; 0x40
 8000cdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cde:	f107 0318 	add.w	r3, r7, #24
 8000ce2:	2228      	movs	r2, #40	; 0x28
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fd72 	bl	80047d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d02:	2310      	movs	r3, #16
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0a:	f107 0318 	add.w	r3, r7, #24
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 f80c 	bl	8001d2c <HAL_RCC_OscConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d1a:	f000 fa0d 	bl	8001138 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d1e:	230f      	movs	r3, #15
 8000d20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d32:	1d3b      	adds	r3, r7, #4
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f001 fa78 	bl	800222c <HAL_RCC_ClockConfig>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d42:	f000 f9f9 	bl	8001138 <Error_Handler>
  }
}
 8000d46:	bf00      	nop
 8000d48:	3740      	adds	r7, #64	; 0x40
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	463b      	mov	r3, r7
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d86:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d94:	4813      	ldr	r0, [pc, #76]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000d96:	f001 fbe3 	bl	8002560 <HAL_TIM_Base_Init>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000da0:	f000 f9ca 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000da8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	4619      	mov	r1, r3
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000db2:	f001 fc24 	bl	80025fe <HAL_TIM_ConfigClockSource>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000dbc:	f000 f9bc 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dc8:	463b      	mov	r3, r7
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_TIM2_Init+0x94>)
 8000dce:	f001 fdd3 	bl	8002978 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000dd8:	f000 f9ae 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20001380 	.word	0x20001380

08000de8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <MX_USART1_UART_Init+0x50>)
 8000df0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000df4:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000df8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e06:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e0c:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	220c      	movs	r2, #12
 8000e10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e12:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_USART1_UART_Init+0x4c>)
 8000e20:	f001 fe08 	bl	8002a34 <HAL_UART_Init>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e2a:	f000 f985 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20001340 	.word	0x20001340
 8000e38:	40013800 	.word	0x40013800

08000e3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_USART2_UART_Init+0x50>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e48:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e74:	f001 fdde 	bl	8002a34 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e7e:	f000 f95b 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200013c8 	.word	0x200013c8
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART3_UART_Init+0x4c>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <MX_USART3_UART_Init+0x50>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <MX_USART3_UART_Init+0x4c>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART3_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART3_UART_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART3_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART3_UART_Init+0x4c>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART3_UART_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART3_UART_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_USART3_UART_Init+0x4c>)
 8000ec8:	f001 fdb4 	bl	8002a34 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000ed2:	f000 f931 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200012fc 	.word	0x200012fc
 8000ee0:	40004800 	.word	0x40004800

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ef8:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000efe:	f043 0320 	orr.w	r3, r3, #32
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0320 	and.w	r3, r3, #32
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a11      	ldr	r2, [pc, #68]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_GPIO_Init+0x90>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f46:	480c      	ldr	r0, [pc, #48]	; (8000f78 <MX_GPIO_Init+0x94>)
 8000f48:	f000 febe 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 0310 	add.w	r3, r7, #16
 8000f62:	4619      	mov	r1, r3
 8000f64:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_GPIO_Init+0x94>)
 8000f66:	f000 fd2b 	bl	80019c0 <HAL_GPIO_Init>

}
 8000f6a:	bf00      	nop
 8000f6c:	3720      	adds	r7, #32
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010c00 	.word	0x40010c00

08000f7c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a2c      	ldr	r2, [pc, #176]	; (800103c <HAL_UART_RxCpltCallback+0xc0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d147      	bne.n	800101e <HAL_UART_RxCpltCallback+0xa2>
	{
		if (*(rgps_data + rgps_i) == '$') // $
 8000f8e:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <HAL_UART_RxCpltCallback+0xc4>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <HAL_UART_RxCpltCallback+0xc8>)
 8000f96:	4413      	add	r3, r2
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b24      	cmp	r3, #36	; 0x24
 8000f9c:	d10c      	bne.n	8000fb8 <HAL_UART_RxCpltCallback+0x3c>
		{
			start_byte = true;
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	; (8001048 <HAL_UART_RxCpltCallback+0xcc>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
			end_byte = false;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	; (800104c <HAL_UART_RxCpltCallback+0xd0>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	701a      	strb	r2, [r3, #0]
			++rgps_i;
 8000faa:	4b25      	ldr	r3, [pc, #148]	; (8001040 <HAL_UART_RxCpltCallback+0xc4>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4b23      	ldr	r3, [pc, #140]	; (8001040 <HAL_UART_RxCpltCallback+0xc4>)
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e027      	b.n	8001008 <HAL_UART_RxCpltCallback+0x8c>
		}
		else if ((start_byte) && (*(rgps_data + rgps_i) != 0x2A)) //*
 8000fb8:	4b23      	ldr	r3, [pc, #140]	; (8001048 <HAL_UART_RxCpltCallback+0xcc>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d00e      	beq.n	8000fde <HAL_UART_RxCpltCallback+0x62>
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_UART_RxCpltCallback+0xc4>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <HAL_UART_RxCpltCallback+0xc8>)
 8000fc8:	4413      	add	r3, r2
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8000fce:	d006      	beq.n	8000fde <HAL_UART_RxCpltCallback+0x62>
		{
			++rgps_i;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <HAL_UART_RxCpltCallback+0xc4>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b19      	ldr	r3, [pc, #100]	; (8001040 <HAL_UART_RxCpltCallback+0xc4>)
 8000fda:	701a      	strb	r2, [r3, #0]
 8000fdc:	e014      	b.n	8001008 <HAL_UART_RxCpltCallback+0x8c>
		}
		else if ((start_byte) && (*(rgps_data + rgps_i) == '*'))
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_UART_RxCpltCallback+0xcc>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d010      	beq.n	8001008 <HAL_UART_RxCpltCallback+0x8c>
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_UART_RxCpltCallback+0xc4>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_UART_RxCpltCallback+0xc8>)
 8000fee:	4413      	add	r3, r2
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8000ff4:	d108      	bne.n	8001008 <HAL_UART_RxCpltCallback+0x8c>
		{
			start_byte = false;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <HAL_UART_RxCpltCallback+0xcc>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
			end_byte = true;
 8000ffc:	4b13      	ldr	r3, [pc, #76]	; (800104c <HAL_UART_RxCpltCallback+0xd0>)
 8000ffe:	2201      	movs	r2, #1
 8001000:	701a      	strb	r2, [r3, #0]
			rgps_i = 0;
 8001002:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <HAL_UART_RxCpltCallback+0xc4>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, (rgps_data + rgps_i), 1);
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_UART_RxCpltCallback+0xc4>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b0d      	ldr	r3, [pc, #52]	; (8001044 <HAL_UART_RxCpltCallback+0xc8>)
 8001010:	4413      	add	r3, r2
 8001012:	2201      	movs	r2, #1
 8001014:	4619      	mov	r1, r3
 8001016:	480e      	ldr	r0, [pc, #56]	; (8001050 <HAL_UART_RxCpltCallback+0xd4>)
 8001018:	f001 fd9d 	bl	8002b56 <HAL_UART_Receive_IT>
	}
	else if(huart->Instance == USART3)
	{
		HAL_UART_Receive_IT(&huart3, rgcs_data, 1);
	}
}
 800101c:	e009      	b.n	8001032 <HAL_UART_RxCpltCallback+0xb6>
	else if(huart->Instance == USART3)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4a0c      	ldr	r2, [pc, #48]	; (8001054 <HAL_UART_RxCpltCallback+0xd8>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d104      	bne.n	8001032 <HAL_UART_RxCpltCallback+0xb6>
		HAL_UART_Receive_IT(&huart3, rgcs_data, 1);
 8001028:	2201      	movs	r2, #1
 800102a:	490b      	ldr	r1, [pc, #44]	; (8001058 <HAL_UART_RxCpltCallback+0xdc>)
 800102c:	480b      	ldr	r0, [pc, #44]	; (800105c <HAL_UART_RxCpltCallback+0xe0>)
 800102e:	f001 fd92 	bl	8002b56 <HAL_UART_Receive_IT>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40013800 	.word	0x40013800
 8001040:	2000059c 	.word	0x2000059c
 8001044:	20000504 	.word	0x20000504
 8001048:	20000500 	.word	0x20000500
 800104c:	20000501 	.word	0x20000501
 8001050:	20001340 	.word	0x20001340
 8001054:	40004800 	.word	0x40004800
 8001058:	20000550 	.word	0x20000550
 800105c:	200012fc 	.word	0x200012fc

08001060 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a13      	ldr	r2, [pc, #76]	; (80010bc <HAL_UART_TxCpltCallback+0x5c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d120      	bne.n	80010b4 <HAL_UART_TxCpltCallback+0x54>
  {
	  if(incr_i == 0)
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_UART_TxCpltCallback+0x60>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d10b      	bne.n	8001092 <HAL_UART_TxCpltCallback+0x32>
	  {
		  HAL_UART_Transmit_IT(&huart2, str3, 10);
 800107a:	220a      	movs	r2, #10
 800107c:	4911      	ldr	r1, [pc, #68]	; (80010c4 <HAL_UART_TxCpltCallback+0x64>)
 800107e:	4812      	ldr	r0, [pc, #72]	; (80010c8 <HAL_UART_TxCpltCallback+0x68>)
 8001080:	f001 fd25 	bl	8002ace <HAL_UART_Transmit_IT>
		  ++incr_i;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <HAL_UART_TxCpltCallback+0x60>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <HAL_UART_TxCpltCallback+0x60>)
 800108e:	701a      	strb	r2, [r3, #0]
  }
  else if(huart->Instance == USART3)
  {

  }
}
 8001090:	e010      	b.n	80010b4 <HAL_UART_TxCpltCallback+0x54>
	  else if(incr_i == 1)
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <HAL_UART_TxCpltCallback+0x60>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d10c      	bne.n	80010b4 <HAL_UART_TxCpltCallback+0x54>
		  HAL_UART_Transmit_IT(&huart2, str1, strlen(str1));
 800109a:	480c      	ldr	r0, [pc, #48]	; (80010cc <HAL_UART_TxCpltCallback+0x6c>)
 800109c:	f7ff f858 	bl	8000150 <strlen>
 80010a0:	4603      	mov	r3, r0
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	461a      	mov	r2, r3
 80010a6:	4909      	ldr	r1, [pc, #36]	; (80010cc <HAL_UART_TxCpltCallback+0x6c>)
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <HAL_UART_TxCpltCallback+0x68>)
 80010aa:	f001 fd10 	bl	8002ace <HAL_UART_Transmit_IT>
		  incr_i = 0;
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_UART_TxCpltCallback+0x60>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40004400 	.word	0x40004400
 80010c0:	2000059b 	.word	0x2000059b
 80010c4:	20000048 	.word	0x20000048
 80010c8:	200013c8 	.word	0x200013c8
 80010cc:	20000000 	.word	0x20000000

080010d0 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartLedTask(void const * argument)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80010d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <StartLedTask+0x1c>)
 80010de:	f000 fe0b 	bl	8001cf8 <HAL_GPIO_TogglePin>
	  osDelay(250);
 80010e2:	20fa      	movs	r0, #250	; 0xfa
 80010e4:	f002 f8a6 	bl	8003234 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80010e8:	e7f6      	b.n	80010d8 <StartLedTask+0x8>
 80010ea:	bf00      	nop
 80010ec:	40010c00 	.word	0x40010c00

080010f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		if(end_byte == true)
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <StartDefaultTask+0x3c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d011      	beq.n	8001124 <StartDefaultTask+0x34>
		{
			GPRMS_Analyze(rgps_data);
 8001100:	480b      	ldr	r0, [pc, #44]	; (8001130 <StartDefaultTask+0x40>)
 8001102:	f003 fa25 	bl	8004550 <GPRMS_Analyze>
			uint8_t lenght = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	72fb      	strb	r3, [r7, #11]
			uint8_t *p_coordinates_packet = raw_data_packet(&lenght);
 800110a:	f107 030b 	add.w	r3, r7, #11
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fa56 	bl	80045c0 <raw_data_packet>
 8001114:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit_IT(&huart3, p_coordinates_packet, lenght);
 8001116:	7afb      	ldrb	r3, [r7, #11]
 8001118:	b29b      	uxth	r3, r3
 800111a:	461a      	mov	r2, r3
 800111c:	68f9      	ldr	r1, [r7, #12]
 800111e:	4805      	ldr	r0, [pc, #20]	; (8001134 <StartDefaultTask+0x44>)
 8001120:	f001 fcd5 	bl	8002ace <HAL_UART_Transmit_IT>
		}
		osDelay(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f002 f885 	bl	8003234 <osDelay>
		if(end_byte == true)
 800112a:	e7e5      	b.n	80010f8 <StartDefaultTask+0x8>
 800112c:	20000501 	.word	0x20000501
 8001130:	20000504 	.word	0x20000504
 8001134:	200012fc 	.word	0x200012fc

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  asm("nop");
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <Error_Handler+0x8>

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114a:	4b18      	ldr	r3, [pc, #96]	; (80011ac <HAL_MspInit+0x68>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a17      	ldr	r2, [pc, #92]	; (80011ac <HAL_MspInit+0x68>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_MspInit+0x68>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_MspInit+0x68>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a11      	ldr	r2, [pc, #68]	; (80011ac <HAL_MspInit+0x68>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_MspInit+0x68>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	210f      	movs	r1, #15
 800117e:	f06f 0001 	mvn.w	r0, #1
 8001182:	f000 fb70 	bl	8001866 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <HAL_MspInit+0x6c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4a04      	ldr	r2, [pc, #16]	; (80011b0 <HAL_MspInit+0x6c>)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b085      	sub	sp, #20
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011c4:	d10b      	bne.n	80011de <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <HAL_TIM_Base_MspInit+0x34>)
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	4a07      	ldr	r2, [pc, #28]	; (80011e8 <HAL_TIM_Base_MspInit+0x34>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	61d3      	str	r3, [r2, #28]
 80011d2:	4b05      	ldr	r3, [pc, #20]	; (80011e8 <HAL_TIM_Base_MspInit+0x34>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr
 80011e8:	40021000 	.word	0x40021000

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a5f      	ldr	r2, [pc, #380]	; (8001384 <HAL_UART_MspInit+0x198>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d13a      	bne.n	8001282 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800120c:	4b5e      	ldr	r3, [pc, #376]	; (8001388 <HAL_UART_MspInit+0x19c>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a5d      	ldr	r2, [pc, #372]	; (8001388 <HAL_UART_MspInit+0x19c>)
 8001212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b5b      	ldr	r3, [pc, #364]	; (8001388 <HAL_UART_MspInit+0x19c>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b58      	ldr	r3, [pc, #352]	; (8001388 <HAL_UART_MspInit+0x19c>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a57      	ldr	r2, [pc, #348]	; (8001388 <HAL_UART_MspInit+0x19c>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b55      	ldr	r3, [pc, #340]	; (8001388 <HAL_UART_MspInit+0x19c>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800123c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	4619      	mov	r1, r3
 8001250:	484e      	ldr	r0, [pc, #312]	; (800138c <HAL_UART_MspInit+0x1a0>)
 8001252:	f000 fbb5 	bl	80019c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4619      	mov	r1, r3
 800126a:	4848      	ldr	r0, [pc, #288]	; (800138c <HAL_UART_MspInit+0x1a0>)
 800126c:	f000 fba8 	bl	80019c0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2105      	movs	r1, #5
 8001274:	2025      	movs	r0, #37	; 0x25
 8001276:	f000 faf6 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800127a:	2025      	movs	r0, #37	; 0x25
 800127c:	f000 fb0f 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001280:	e07c      	b.n	800137c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a42      	ldr	r2, [pc, #264]	; (8001390 <HAL_UART_MspInit+0x1a4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d138      	bne.n	80012fe <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 800128c:	4b3e      	ldr	r3, [pc, #248]	; (8001388 <HAL_UART_MspInit+0x19c>)
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	4a3d      	ldr	r2, [pc, #244]	; (8001388 <HAL_UART_MspInit+0x19c>)
 8001292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001296:	61d3      	str	r3, [r2, #28]
 8001298:	4b3b      	ldr	r3, [pc, #236]	; (8001388 <HAL_UART_MspInit+0x19c>)
 800129a:	69db      	ldr	r3, [r3, #28]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a4:	4b38      	ldr	r3, [pc, #224]	; (8001388 <HAL_UART_MspInit+0x19c>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4a37      	ldr	r2, [pc, #220]	; (8001388 <HAL_UART_MspInit+0x19c>)
 80012aa:	f043 0304 	orr.w	r3, r3, #4
 80012ae:	6193      	str	r3, [r2, #24]
 80012b0:	4b35      	ldr	r3, [pc, #212]	; (8001388 <HAL_UART_MspInit+0x19c>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f003 0304 	and.w	r3, r3, #4
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012bc:	2304      	movs	r3, #4
 80012be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	2302      	movs	r3, #2
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4619      	mov	r1, r3
 80012ce:	482f      	ldr	r0, [pc, #188]	; (800138c <HAL_UART_MspInit+0x1a0>)
 80012d0:	f000 fb76 	bl	80019c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012d4:	2308      	movs	r3, #8
 80012d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012d8:	2300      	movs	r3, #0
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e0:	f107 0320 	add.w	r3, r7, #32
 80012e4:	4619      	mov	r1, r3
 80012e6:	4829      	ldr	r0, [pc, #164]	; (800138c <HAL_UART_MspInit+0x1a0>)
 80012e8:	f000 fb6a 	bl	80019c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2105      	movs	r1, #5
 80012f0:	2026      	movs	r0, #38	; 0x26
 80012f2:	f000 fab8 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012f6:	2026      	movs	r0, #38	; 0x26
 80012f8:	f000 fad1 	bl	800189e <HAL_NVIC_EnableIRQ>
}
 80012fc:	e03e      	b.n	800137c <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_UART_MspInit+0x1a8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d139      	bne.n	800137c <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001308:	4b1f      	ldr	r3, [pc, #124]	; (8001388 <HAL_UART_MspInit+0x19c>)
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	4a1e      	ldr	r2, [pc, #120]	; (8001388 <HAL_UART_MspInit+0x19c>)
 800130e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001312:	61d3      	str	r3, [r2, #28]
 8001314:	4b1c      	ldr	r3, [pc, #112]	; (8001388 <HAL_UART_MspInit+0x19c>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001320:	4b19      	ldr	r3, [pc, #100]	; (8001388 <HAL_UART_MspInit+0x19c>)
 8001322:	699b      	ldr	r3, [r3, #24]
 8001324:	4a18      	ldr	r2, [pc, #96]	; (8001388 <HAL_UART_MspInit+0x19c>)
 8001326:	f043 0308 	orr.w	r3, r3, #8
 800132a:	6193      	str	r3, [r2, #24]
 800132c:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_UART_MspInit+0x19c>)
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	f003 0308 	and.w	r3, r3, #8
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	4619      	mov	r1, r3
 800134c:	4812      	ldr	r0, [pc, #72]	; (8001398 <HAL_UART_MspInit+0x1ac>)
 800134e:	f000 fb37 	bl	80019c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001352:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	4619      	mov	r1, r3
 8001366:	480c      	ldr	r0, [pc, #48]	; (8001398 <HAL_UART_MspInit+0x1ac>)
 8001368:	f000 fb2a 	bl	80019c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2105      	movs	r1, #5
 8001370:	2027      	movs	r0, #39	; 0x27
 8001372:	f000 fa78 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001376:	2027      	movs	r0, #39	; 0x27
 8001378:	f000 fa91 	bl	800189e <HAL_NVIC_EnableIRQ>
}
 800137c:	bf00      	nop
 800137e:	3730      	adds	r7, #48	; 0x30
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40013800 	.word	0x40013800
 8001388:	40021000 	.word	0x40021000
 800138c:	40010800 	.word	0x40010800
 8001390:	40004400 	.word	0x40004400
 8001394:	40004800 	.word	0x40004800
 8001398:	40010c00 	.word	0x40010c00

0800139c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <NMI_Handler+0x4>

080013a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013a2:	b480      	push	{r7}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013a6:	e7fe      	b.n	80013a6 <HardFault_Handler+0x4>

080013a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <MemManage_Handler+0x4>

080013ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <BusFault_Handler+0x4>

080013b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <UsageFault_Handler+0x4>

080013ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr

080013c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ca:	f000 f959 	bl	8001680 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013ce:	f002 fcaf 	bl	8003d30 <xTaskGetSchedulerState>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d001      	beq.n	80013dc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013d8:	f002 fe9e 	bl	8004118 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}

080013e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80013e4:	4802      	ldr	r0, [pc, #8]	; (80013f0 <USART1_IRQHandler+0x10>)
 80013e6:	f001 fc0b 	bl	8002c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20001340 	.word	0x20001340

080013f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013f8:	4802      	ldr	r0, [pc, #8]	; (8001404 <USART2_IRQHandler+0x10>)
 80013fa:	f001 fc01 	bl	8002c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200013c8 	.word	0x200013c8

08001408 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <USART3_IRQHandler+0x10>)
 800140e:	f001 fbf7 	bl	8002c00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200012fc 	.word	0x200012fc

0800141c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
	return 1;
 8001420:	2301      	movs	r3, #1
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr

0800142a <_kill>:

int _kill(int pid, int sig)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001434:	f003 f994 	bl	8004760 <__errno>
 8001438:	4603      	mov	r3, r0
 800143a:	2216      	movs	r2, #22
 800143c:	601a      	str	r2, [r3, #0]
	return -1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <_exit>:

void _exit (int status)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001452:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff ffe7 	bl	800142a <_kill>
	while (1) {}		/* Make sure we hang here */
 800145c:	e7fe      	b.n	800145c <_exit+0x12>

0800145e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b086      	sub	sp, #24
 8001462:	af00      	add	r7, sp, #0
 8001464:	60f8      	str	r0, [r7, #12]
 8001466:	60b9      	str	r1, [r7, #8]
 8001468:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	2300      	movs	r3, #0
 800146c:	617b      	str	r3, [r7, #20]
 800146e:	e00a      	b.n	8001486 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001470:	f3af 8000 	nop.w
 8001474:	4601      	mov	r1, r0
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	1c5a      	adds	r2, r3, #1
 800147a:	60ba      	str	r2, [r7, #8]
 800147c:	b2ca      	uxtb	r2, r1
 800147e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	3301      	adds	r3, #1
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	429a      	cmp	r2, r3
 800148c:	dbf0      	blt.n	8001470 <_read+0x12>
	}

return len;
 800148e:	687b      	ldr	r3, [r7, #4]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e009      	b.n	80014be <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1c5a      	adds	r2, r3, #1
 80014ae:	60ba      	str	r2, [r7, #8]
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dbf1      	blt.n	80014aa <_write+0x12>
	}
	return len;
 80014c6:	687b      	ldr	r3, [r7, #4]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <_close>:

int _close(int file)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	return -1;
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr

080014e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014f6:	605a      	str	r2, [r3, #4]
	return 0;
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <_isatty>:

int _isatty(int file)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	return 1;
 800150c:	2301      	movs	r3, #1
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
	return 0;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <_sbrk+0x5c>)
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <_sbrk+0x60>)
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <_sbrk+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <_sbrk+0x64>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <_sbrk+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	429a      	cmp	r2, r3
 800155e:	d207      	bcs.n	8001570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001560:	f003 f8fe 	bl	8004760 <__errno>
 8001564:	4603      	mov	r3, r0
 8001566:	220c      	movs	r2, #12
 8001568:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156e:	e009      	b.n	8001584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <_sbrk+0x64>)
 8001580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20005000 	.word	0x20005000
 8001590:	00000400 	.word	0x00000400
 8001594:	200005a0 	.word	0x200005a0
 8001598:	20001490 	.word	0x20001490

0800159c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015a8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015aa:	e003      	b.n	80015b4 <LoopCopyDataInit>

080015ac <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80015ae:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015b0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015b2:	3104      	adds	r1, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015b4:	480a      	ldr	r0, [pc, #40]	; (80015e0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80015b8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015ba:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015bc:	d3f6      	bcc.n	80015ac <CopyDataInit>
  ldr r2, =_sbss
 80015be:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80015c0:	e002      	b.n	80015c8 <LoopFillZerobss>

080015c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80015c4:	f842 3b04 	str.w	r3, [r2], #4

080015c8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80015c8:	4b08      	ldr	r3, [pc, #32]	; (80015ec <LoopFillZerobss+0x24>)
  cmp r2, r3
 80015ca:	429a      	cmp	r2, r3
  bcc FillZerobss
 80015cc:	d3f9      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ce:	f7ff ffe5 	bl	800159c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d2:	f003 f8cb 	bl	800476c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015d6:	f7ff fb17 	bl	8000c08 <main>
  bx lr
 80015da:	4770      	bx	lr
  ldr r3, =_sidata
 80015dc:	08009dfc 	.word	0x08009dfc
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80015e4:	20000290 	.word	0x20000290
  ldr r2, =_sbss
 80015e8:	20000290 	.word	0x20000290
  ldr r3, = _ebss
 80015ec:	2000148c 	.word	0x2000148c

080015f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f0:	e7fe      	b.n	80015f0 <ADC1_2_IRQHandler>
	...

080015f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <HAL_Init+0x28>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_Init+0x28>)
 80015fe:	f043 0310 	orr.w	r3, r3, #16
 8001602:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f923 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160a:	200f      	movs	r0, #15
 800160c:	f000 f808 	bl	8001620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001610:	f7ff fd98 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40022000 	.word	0x40022000

08001620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_InitTick+0x54>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x58>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001636:	fbb3 f3f1 	udiv	r3, r3, r1
 800163a:	fbb2 f3f3 	udiv	r3, r2, r3
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f93b 	bl	80018ba <HAL_SYSTICK_Config>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
 800164c:	e00e      	b.n	800166c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2b0f      	cmp	r3, #15
 8001652:	d80a      	bhi.n	800166a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001654:	2200      	movs	r2, #0
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165c:	f000 f903 	bl	8001866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001660:	4a06      	ldr	r2, [pc, #24]	; (800167c <HAL_InitTick+0x5c>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	e000      	b.n	800166c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
}
 800166c:	4618      	mov	r0, r3
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200000a0 	.word	0x200000a0
 8001678:	200000a8 	.word	0x200000a8
 800167c:	200000a4 	.word	0x200000a4

08001680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_IncTick+0x1c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	461a      	mov	r2, r3
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x20>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <HAL_IncTick+0x20>)
 8001692:	6013      	str	r3, [r2, #0]
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr
 800169c:	200000a8 	.word	0x200000a8
 80016a0:	20001408 	.word	0x20001408

080016a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b02      	ldr	r3, [pc, #8]	; (80016b4 <HAL_GetTick+0x10>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	20001408 	.word	0x20001408

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	; (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db0b      	blt.n	8001746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	f003 021f 	and.w	r2, r3, #31
 8001734:	4906      	ldr	r1, [pc, #24]	; (8001750 <__NVIC_EnableIRQ+0x34>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2001      	movs	r0, #1
 800173e:	fa00 f202 	lsl.w	r2, r0, r2
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800181c:	d301      	bcc.n	8001822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181e:	2301      	movs	r3, #1
 8001820:	e00f      	b.n	8001842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <SysTick_Config+0x40>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182a:	210f      	movs	r1, #15
 800182c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001830:	f7ff ff90 	bl	8001754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <SysTick_Config+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Config+0x40>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff2d 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff42 	bl	8001700 <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff90 	bl	80017a8 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5f 	bl	8001754 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff35 	bl	800171c <__NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa2 	bl	800180c <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d005      	beq.n	80018f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2204      	movs	r2, #4
 80018ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	73fb      	strb	r3, [r7, #15]
 80018f4:	e051      	b.n	800199a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 020e 	bic.w	r2, r2, #14
 8001904:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0201 	bic.w	r2, r2, #1
 8001914:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <HAL_DMA_Abort_IT+0xd0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d029      	beq.n	8001974 <HAL_DMA_Abort_IT+0xa0>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a20      	ldr	r2, [pc, #128]	; (80019a8 <HAL_DMA_Abort_IT+0xd4>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d022      	beq.n	8001970 <HAL_DMA_Abort_IT+0x9c>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <HAL_DMA_Abort_IT+0xd8>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d01a      	beq.n	800196a <HAL_DMA_Abort_IT+0x96>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a1d      	ldr	r2, [pc, #116]	; (80019b0 <HAL_DMA_Abort_IT+0xdc>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d012      	beq.n	8001964 <HAL_DMA_Abort_IT+0x90>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a1c      	ldr	r2, [pc, #112]	; (80019b4 <HAL_DMA_Abort_IT+0xe0>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d00a      	beq.n	800195e <HAL_DMA_Abort_IT+0x8a>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a1a      	ldr	r2, [pc, #104]	; (80019b8 <HAL_DMA_Abort_IT+0xe4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d102      	bne.n	8001958 <HAL_DMA_Abort_IT+0x84>
 8001952:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001956:	e00e      	b.n	8001976 <HAL_DMA_Abort_IT+0xa2>
 8001958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800195c:	e00b      	b.n	8001976 <HAL_DMA_Abort_IT+0xa2>
 800195e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001962:	e008      	b.n	8001976 <HAL_DMA_Abort_IT+0xa2>
 8001964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001968:	e005      	b.n	8001976 <HAL_DMA_Abort_IT+0xa2>
 800196a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800196e:	e002      	b.n	8001976 <HAL_DMA_Abort_IT+0xa2>
 8001970:	2310      	movs	r3, #16
 8001972:	e000      	b.n	8001976 <HAL_DMA_Abort_IT+0xa2>
 8001974:	2301      	movs	r3, #1
 8001976:	4a11      	ldr	r2, [pc, #68]	; (80019bc <HAL_DMA_Abort_IT+0xe8>)
 8001978:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4798      	blx	r3
    } 
  }
  return status;
 800199a:	7bfb      	ldrb	r3, [r7, #15]
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40020008 	.word	0x40020008
 80019a8:	4002001c 	.word	0x4002001c
 80019ac:	40020030 	.word	0x40020030
 80019b0:	40020044 	.word	0x40020044
 80019b4:	40020058 	.word	0x40020058
 80019b8:	4002006c 	.word	0x4002006c
 80019bc:	40020000 	.word	0x40020000

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b08b      	sub	sp, #44	; 0x2c
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d2:	e169      	b.n	8001ca8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019d4:	2201      	movs	r2, #1
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	f040 8158 	bne.w	8001ca2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4a9a      	ldr	r2, [pc, #616]	; (8001c60 <HAL_GPIO_Init+0x2a0>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d05e      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 80019fc:	4a98      	ldr	r2, [pc, #608]	; (8001c60 <HAL_GPIO_Init+0x2a0>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d875      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a02:	4a98      	ldr	r2, [pc, #608]	; (8001c64 <HAL_GPIO_Init+0x2a4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d058      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a08:	4a96      	ldr	r2, [pc, #600]	; (8001c64 <HAL_GPIO_Init+0x2a4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d86f      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a0e:	4a96      	ldr	r2, [pc, #600]	; (8001c68 <HAL_GPIO_Init+0x2a8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d052      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a14:	4a94      	ldr	r2, [pc, #592]	; (8001c68 <HAL_GPIO_Init+0x2a8>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d869      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a1a:	4a94      	ldr	r2, [pc, #592]	; (8001c6c <HAL_GPIO_Init+0x2ac>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d04c      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a20:	4a92      	ldr	r2, [pc, #584]	; (8001c6c <HAL_GPIO_Init+0x2ac>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d863      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a26:	4a92      	ldr	r2, [pc, #584]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d046      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
 8001a2c:	4a90      	ldr	r2, [pc, #576]	; (8001c70 <HAL_GPIO_Init+0x2b0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d85d      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a32:	2b12      	cmp	r3, #18
 8001a34:	d82a      	bhi.n	8001a8c <HAL_GPIO_Init+0xcc>
 8001a36:	2b12      	cmp	r3, #18
 8001a38:	d859      	bhi.n	8001aee <HAL_GPIO_Init+0x12e>
 8001a3a:	a201      	add	r2, pc, #4	; (adr r2, 8001a40 <HAL_GPIO_Init+0x80>)
 8001a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a40:	08001abb 	.word	0x08001abb
 8001a44:	08001a95 	.word	0x08001a95
 8001a48:	08001aa7 	.word	0x08001aa7
 8001a4c:	08001ae9 	.word	0x08001ae9
 8001a50:	08001aef 	.word	0x08001aef
 8001a54:	08001aef 	.word	0x08001aef
 8001a58:	08001aef 	.word	0x08001aef
 8001a5c:	08001aef 	.word	0x08001aef
 8001a60:	08001aef 	.word	0x08001aef
 8001a64:	08001aef 	.word	0x08001aef
 8001a68:	08001aef 	.word	0x08001aef
 8001a6c:	08001aef 	.word	0x08001aef
 8001a70:	08001aef 	.word	0x08001aef
 8001a74:	08001aef 	.word	0x08001aef
 8001a78:	08001aef 	.word	0x08001aef
 8001a7c:	08001aef 	.word	0x08001aef
 8001a80:	08001aef 	.word	0x08001aef
 8001a84:	08001a9d 	.word	0x08001a9d
 8001a88:	08001ab1 	.word	0x08001ab1
 8001a8c:	4a79      	ldr	r2, [pc, #484]	; (8001c74 <HAL_GPIO_Init+0x2b4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a92:	e02c      	b.n	8001aee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	623b      	str	r3, [r7, #32]
          break;
 8001a9a:	e029      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	623b      	str	r3, [r7, #32]
          break;
 8001aa4:	e024      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	3308      	adds	r3, #8
 8001aac:	623b      	str	r3, [r7, #32]
          break;
 8001aae:	e01f      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	330c      	adds	r3, #12
 8001ab6:	623b      	str	r3, [r7, #32]
          break;
 8001ab8:	e01a      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d102      	bne.n	8001ac8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	623b      	str	r3, [r7, #32]
          break;
 8001ac6:	e013      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d105      	bne.n	8001adc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ad0:	2308      	movs	r3, #8
 8001ad2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	611a      	str	r2, [r3, #16]
          break;
 8001ada:	e009      	b.n	8001af0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	615a      	str	r2, [r3, #20]
          break;
 8001ae6:	e003      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	623b      	str	r3, [r7, #32]
          break;
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x130>
          break;
 8001aee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	2bff      	cmp	r3, #255	; 0xff
 8001af4:	d801      	bhi.n	8001afa <HAL_GPIO_Init+0x13a>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	e001      	b.n	8001afe <HAL_GPIO_Init+0x13e>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3304      	adds	r3, #4
 8001afe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	2bff      	cmp	r3, #255	; 0xff
 8001b04:	d802      	bhi.n	8001b0c <HAL_GPIO_Init+0x14c>
 8001b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b08:	009b      	lsls	r3, r3, #2
 8001b0a:	e002      	b.n	8001b12 <HAL_GPIO_Init+0x152>
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	3b08      	subs	r3, #8
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	210f      	movs	r1, #15
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	401a      	ands	r2, r3
 8001b24:	6a39      	ldr	r1, [r7, #32]
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	431a      	orrs	r2, r3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 80b1 	beq.w	8001ca2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b40:	4b4d      	ldr	r3, [pc, #308]	; (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	4a4c      	ldr	r2, [pc, #304]	; (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6193      	str	r3, [r2, #24]
 8001b4c:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b58:	4a48      	ldr	r2, [pc, #288]	; (8001c7c <HAL_GPIO_Init+0x2bc>)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	3302      	adds	r3, #2
 8001b60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	220f      	movs	r2, #15
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a40      	ldr	r2, [pc, #256]	; (8001c80 <HAL_GPIO_Init+0x2c0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d013      	beq.n	8001bac <HAL_GPIO_Init+0x1ec>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a3f      	ldr	r2, [pc, #252]	; (8001c84 <HAL_GPIO_Init+0x2c4>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d00d      	beq.n	8001ba8 <HAL_GPIO_Init+0x1e8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a3e      	ldr	r2, [pc, #248]	; (8001c88 <HAL_GPIO_Init+0x2c8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d007      	beq.n	8001ba4 <HAL_GPIO_Init+0x1e4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a3d      	ldr	r2, [pc, #244]	; (8001c8c <HAL_GPIO_Init+0x2cc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_GPIO_Init+0x1e0>
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e006      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	e004      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e002      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e000      	b.n	8001bae <HAL_GPIO_Init+0x1ee>
 8001bac:	2300      	movs	r3, #0
 8001bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bb0:	f002 0203 	and.w	r2, r2, #3
 8001bb4:	0092      	lsls	r2, r2, #2
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	68fa      	ldr	r2, [r7, #12]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bbe:	492f      	ldr	r1, [pc, #188]	; (8001c7c <HAL_GPIO_Init+0x2bc>)
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	68fa      	ldr	r2, [r7, #12]
 8001bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001bd8:	4b2d      	ldr	r3, [pc, #180]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	492c      	ldr	r1, [pc, #176]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	600b      	str	r3, [r1, #0]
 8001be4:	e006      	b.n	8001bf4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001be6:	4b2a      	ldr	r3, [pc, #168]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	43db      	mvns	r3, r3
 8001bee:	4928      	ldr	r1, [pc, #160]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d006      	beq.n	8001c0e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c00:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4922      	ldr	r1, [pc, #136]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	604b      	str	r3, [r1, #4]
 8001c0c:	e006      	b.n	8001c1c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c0e:	4b20      	ldr	r3, [pc, #128]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	43db      	mvns	r3, r3
 8001c16:	491e      	ldr	r1, [pc, #120]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c18:	4013      	ands	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d006      	beq.n	8001c36 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	689a      	ldr	r2, [r3, #8]
 8001c2c:	4918      	ldr	r1, [pc, #96]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	608b      	str	r3, [r1, #8]
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c36:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	4914      	ldr	r1, [pc, #80]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d021      	beq.n	8001c94 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	490e      	ldr	r1, [pc, #56]	; (8001c90 <HAL_GPIO_Init+0x2d0>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	60cb      	str	r3, [r1, #12]
 8001c5c:	e021      	b.n	8001ca2 <HAL_GPIO_Init+0x2e2>
 8001c5e:	bf00      	nop
 8001c60:	10320000 	.word	0x10320000
 8001c64:	10310000 	.word	0x10310000
 8001c68:	10220000 	.word	0x10220000
 8001c6c:	10210000 	.word	0x10210000
 8001c70:	10120000 	.word	0x10120000
 8001c74:	10110000 	.word	0x10110000
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010000 	.word	0x40010000
 8001c80:	40010800 	.word	0x40010800
 8001c84:	40010c00 	.word	0x40010c00
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	40011400 	.word	0x40011400
 8001c90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c94:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	4909      	ldr	r1, [pc, #36]	; (8001cc4 <HAL_GPIO_Init+0x304>)
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	3301      	adds	r3, #1
 8001ca6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f47f ae8e 	bne.w	80019d4 <HAL_GPIO_Init+0x14>
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	372c      	adds	r7, #44	; 0x2c
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr
 8001cc4:	40010400 	.word	0x40010400

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ce4:	e003      	b.n	8001cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	041a      	lsls	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	611a      	str	r2, [r3, #16]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4013      	ands	r3, r2
 8001d10:	041a      	lsls	r2, r3, #16
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	43d9      	mvns	r1, r3
 8001d16:	887b      	ldrh	r3, [r7, #2]
 8001d18:	400b      	ands	r3, r1
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	611a      	str	r2, [r3, #16]
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bc80      	pop	{r7}
 8001d28:	4770      	bx	lr
	...

08001d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e26c      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	f000 8087 	beq.w	8001e5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d4c:	4b92      	ldr	r3, [pc, #584]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d00c      	beq.n	8001d72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d58:	4b8f      	ldr	r3, [pc, #572]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d112      	bne.n	8001d8a <HAL_RCC_OscConfig+0x5e>
 8001d64:	4b8c      	ldr	r3, [pc, #560]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d70:	d10b      	bne.n	8001d8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d72:	4b89      	ldr	r3, [pc, #548]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d06c      	beq.n	8001e58 <HAL_RCC_OscConfig+0x12c>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d168      	bne.n	8001e58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e246      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d92:	d106      	bne.n	8001da2 <HAL_RCC_OscConfig+0x76>
 8001d94:	4b80      	ldr	r3, [pc, #512]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a7f      	ldr	r2, [pc, #508]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e02e      	b.n	8001e00 <HAL_RCC_OscConfig+0xd4>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x98>
 8001daa:	4b7b      	ldr	r3, [pc, #492]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7a      	ldr	r2, [pc, #488]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b78      	ldr	r3, [pc, #480]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a77      	ldr	r2, [pc, #476]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e01d      	b.n	8001e00 <HAL_RCC_OscConfig+0xd4>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dcc:	d10c      	bne.n	8001de8 <HAL_RCC_OscConfig+0xbc>
 8001dce:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a71      	ldr	r2, [pc, #452]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a6e      	ldr	r2, [pc, #440]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_OscConfig+0xd4>
 8001de8:	4b6b      	ldr	r3, [pc, #428]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a6a      	ldr	r2, [pc, #424]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a67      	ldr	r2, [pc, #412]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fc4c 	bl	80016a4 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fc48 	bl	80016a4 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1fa      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0xe4>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e30:	f7ff fc38 	bl	80016a4 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff fc34 	bl	80016a4 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e1e6      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x10c>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d063      	beq.n	8001f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e66:	4b4c      	ldr	r3, [pc, #304]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00b      	beq.n	8001e8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e72:	4b49      	ldr	r3, [pc, #292]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d11c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x18c>
 8001e7e:	4b46      	ldr	r3, [pc, #280]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d116      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8a:	4b43      	ldr	r3, [pc, #268]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x176>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d001      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e1ba      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea2:	4b3d      	ldr	r3, [pc, #244]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	695b      	ldr	r3, [r3, #20]
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4939      	ldr	r1, [pc, #228]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eb6:	e03a      	b.n	8001f2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d020      	beq.n	8001f02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_OscConfig+0x270>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec6:	f7ff fbed 	bl	80016a4 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff fbe9 	bl	80016a4 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e19b      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee0:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4927      	ldr	r1, [pc, #156]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	600b      	str	r3, [r1, #0]
 8001f00:	e015      	b.n	8001f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f02:	4b26      	ldr	r3, [pc, #152]	; (8001f9c <HAL_RCC_OscConfig+0x270>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fbcc 	bl	80016a4 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff fbc8 	bl	80016a4 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e17a      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d03a      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d019      	beq.n	8001f76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_RCC_OscConfig+0x274>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7ff fbac 	bl	80016a4 <HAL_GetTick>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f50:	f7ff fba8 	bl	80016a4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e15a      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f000 fad8 	bl	8002524 <RCC_Delay>
 8001f74:	e01c      	b.n	8001fb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f76:	4b0a      	ldr	r3, [pc, #40]	; (8001fa0 <HAL_RCC_OscConfig+0x274>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7c:	f7ff fb92 	bl	80016a4 <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f82:	e00f      	b.n	8001fa4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff fb8e 	bl	80016a4 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d908      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e140      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	42420000 	.word	0x42420000
 8001fa0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	4b9e      	ldr	r3, [pc, #632]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1e9      	bne.n	8001f84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80a6 	beq.w	800210a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b97      	ldr	r3, [pc, #604]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8001fc4:	69db      	ldr	r3, [r3, #28]
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10d      	bne.n	8001fea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b94      	ldr	r3, [pc, #592]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	4a93      	ldr	r2, [pc, #588]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	61d3      	str	r3, [r2, #28]
 8001fda:	4b91      	ldr	r3, [pc, #580]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fea:	4b8e      	ldr	r3, [pc, #568]	; (8002224 <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d118      	bne.n	8002028 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ff6:	4b8b      	ldr	r3, [pc, #556]	; (8002224 <HAL_RCC_OscConfig+0x4f8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a8a      	ldr	r2, [pc, #552]	; (8002224 <HAL_RCC_OscConfig+0x4f8>)
 8001ffc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002000:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002002:	f7ff fb4f 	bl	80016a4 <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200a:	f7ff fb4b 	bl	80016a4 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b64      	cmp	r3, #100	; 0x64
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e0fd      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	4b81      	ldr	r3, [pc, #516]	; (8002224 <HAL_RCC_OscConfig+0x4f8>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x312>
 8002030:	4b7b      	ldr	r3, [pc, #492]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	4a7a      	ldr	r2, [pc, #488]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	6213      	str	r3, [r2, #32]
 800203c:	e02d      	b.n	800209a <HAL_RCC_OscConfig+0x36e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x334>
 8002046:	4b76      	ldr	r3, [pc, #472]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002048:	6a1b      	ldr	r3, [r3, #32]
 800204a:	4a75      	ldr	r2, [pc, #468]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	6213      	str	r3, [r2, #32]
 8002052:	4b73      	ldr	r3, [pc, #460]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a72      	ldr	r2, [pc, #456]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	f023 0304 	bic.w	r3, r3, #4
 800205c:	6213      	str	r3, [r2, #32]
 800205e:	e01c      	b.n	800209a <HAL_RCC_OscConfig+0x36e>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d10c      	bne.n	8002082 <HAL_RCC_OscConfig+0x356>
 8002068:	4b6d      	ldr	r3, [pc, #436]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	4a6c      	ldr	r2, [pc, #432]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6213      	str	r3, [r2, #32]
 8002074:	4b6a      	ldr	r3, [pc, #424]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a69      	ldr	r2, [pc, #420]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	e00b      	b.n	800209a <HAL_RCC_OscConfig+0x36e>
 8002082:	4b67      	ldr	r3, [pc, #412]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a66      	ldr	r2, [pc, #408]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	4b64      	ldr	r3, [pc, #400]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a63      	ldr	r2, [pc, #396]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d015      	beq.n	80020ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7ff faff 	bl	80016a4 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7ff fafb 	bl	80016a4 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0ab      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	4b57      	ldr	r3, [pc, #348]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ee      	beq.n	80020aa <HAL_RCC_OscConfig+0x37e>
 80020cc:	e014      	b.n	80020f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fae9 	bl	80016a4 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7ff fae5 	bl	80016a4 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e095      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ec:	4b4c      	ldr	r3, [pc, #304]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ee      	bne.n	80020d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d105      	bne.n	800210a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	4b48      	ldr	r3, [pc, #288]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4a47      	ldr	r2, [pc, #284]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002108:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8081 	beq.w	8002216 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002114:	4b42      	ldr	r3, [pc, #264]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b08      	cmp	r3, #8
 800211e:	d061      	beq.n	80021e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69db      	ldr	r3, [r3, #28]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d146      	bne.n	80021b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <HAL_RCC_OscConfig+0x4fc>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7ff fab9 	bl	80016a4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002136:	f7ff fab5 	bl	80016a4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e067      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002148:	4b35      	ldr	r3, [pc, #212]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800215c:	d108      	bne.n	8002170 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800215e:	4b30      	ldr	r3, [pc, #192]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	492d      	ldr	r1, [pc, #180]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	4313      	orrs	r3, r2
 800216e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a19      	ldr	r1, [r3, #32]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	430b      	orrs	r3, r1
 8002182:	4927      	ldr	r1, [pc, #156]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_RCC_OscConfig+0x4fc>)
 800218a:	2201      	movs	r2, #1
 800218c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218e:	f7ff fa89 	bl	80016a4 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7ff fa85 	bl	80016a4 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e037      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a8:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d0f0      	beq.n	8002196 <HAL_RCC_OscConfig+0x46a>
 80021b4:	e02f      	b.n	8002216 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_RCC_OscConfig+0x4fc>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021bc:	f7ff fa72 	bl	80016a4 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c4:	f7ff fa6e 	bl	80016a4 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e020      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x498>
 80021e2:	e018      	b.n	8002216 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	69db      	ldr	r3, [r3, #28]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e013      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_RCC_OscConfig+0x4f4>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	429a      	cmp	r2, r3
 8002202:	d106      	bne.n	8002212 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	40007000 	.word	0x40007000
 8002228:	42420060 	.word	0x42420060

0800222c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0d0      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002240:	4b6a      	ldr	r3, [pc, #424]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d910      	bls.n	8002270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b67      	ldr	r3, [pc, #412]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4965      	ldr	r1, [pc, #404]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225e:	4b63      	ldr	r3, [pc, #396]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0b8      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d020      	beq.n	80022be <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002288:	4b59      	ldr	r3, [pc, #356]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4a58      	ldr	r2, [pc, #352]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002292:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a0:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	4a52      	ldr	r2, [pc, #328]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022aa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ac:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	494d      	ldr	r1, [pc, #308]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d040      	beq.n	800234c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d107      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d115      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e07f      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d107      	bne.n	80022fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e073      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e06b      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230a:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f023 0203 	bic.w	r2, r3, #3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4936      	ldr	r1, [pc, #216]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	4313      	orrs	r3, r2
 800231a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800231c:	f7ff f9c2 	bl	80016a4 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002322:	e00a      	b.n	800233a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002324:	f7ff f9be 	bl	80016a4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e053      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 020c 	and.w	r2, r3, #12
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	429a      	cmp	r2, r3
 800234a:	d1eb      	bne.n	8002324 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800234c:	4b27      	ldr	r3, [pc, #156]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d210      	bcs.n	800237c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235a:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 0207 	bic.w	r2, r3, #7
 8002362:	4922      	ldr	r1, [pc, #136]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	4313      	orrs	r3, r2
 8002368:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e032      	b.n	80023e2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0304 	and.w	r3, r3, #4
 8002384:	2b00      	cmp	r3, #0
 8002386:	d008      	beq.n	800239a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002388:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4916      	ldr	r1, [pc, #88]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023a6:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	490e      	ldr	r1, [pc, #56]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ba:	f000 f821 	bl	8002400 <HAL_RCC_GetSysClockFreq>
 80023be:	4602      	mov	r2, r0
 80023c0:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	490a      	ldr	r1, [pc, #40]	; (80023f4 <HAL_RCC_ClockConfig+0x1c8>)
 80023cc:	5ccb      	ldrb	r3, [r1, r3]
 80023ce:	fa22 f303 	lsr.w	r3, r2, r3
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <HAL_RCC_ClockConfig+0x1cc>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023d6:	4b09      	ldr	r3, [pc, #36]	; (80023fc <HAL_RCC_ClockConfig+0x1d0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff f920 	bl	8001620 <HAL_InitTick>

  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40022000 	.word	0x40022000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	08009914 	.word	0x08009914
 80023f8:	200000a0 	.word	0x200000a0
 80023fc:	200000a4 	.word	0x200000a4

08002400 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002400:	b490      	push	{r4, r7}
 8002402:	b08a      	sub	sp, #40	; 0x28
 8002404:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002408:	1d3c      	adds	r4, r7, #4
 800240a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800240c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002410:	f240 2301 	movw	r3, #513	; 0x201
 8002414:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	; 0x24
 8002422:	2300      	movs	r3, #0
 8002424:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b04      	cmp	r3, #4
 8002438:	d002      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0x40>
 800243a:	2b08      	cmp	r3, #8
 800243c:	d003      	beq.n	8002446 <HAL_RCC_GetSysClockFreq+0x46>
 800243e:	e02d      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002440:	4b1d      	ldr	r3, [pc, #116]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002442:	623b      	str	r3, [r7, #32]
      break;
 8002444:	e02d      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	0c9b      	lsrs	r3, r3, #18
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002452:	4413      	add	r3, r2
 8002454:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002458:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d013      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	0c5b      	lsrs	r3, r3, #17
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002472:	4413      	add	r3, r2
 8002474:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002478:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800247e:	fb02 f203 	mul.w	r2, r2, r3
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	e004      	b.n	8002496 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002490:	fb02 f303 	mul.w	r3, r2, r3
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	623b      	str	r3, [r7, #32]
      break;
 800249a:	e002      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800249e:	623b      	str	r3, [r7, #32]
      break;
 80024a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a2:	6a3b      	ldr	r3, [r7, #32]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3728      	adds	r7, #40	; 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc90      	pop	{r4, r7}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	080098ac 	.word	0x080098ac
 80024b4:	40021000 	.word	0x40021000
 80024b8:	007a1200 	.word	0x007a1200
 80024bc:	003d0900 	.word	0x003d0900

080024c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c4:	4b02      	ldr	r3, [pc, #8]	; (80024d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr
 80024d0:	200000a0 	.word	0x200000a0

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024d8:	f7ff fff2 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000
 80024f8:	08009924 	.word	0x08009924

080024fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002500:	f7ff ffde 	bl	80024c0 <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	0adb      	lsrs	r3, r3, #11
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	08009924 	.word	0x08009924

08002524 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800252c:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <RCC_Delay+0x34>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <RCC_Delay+0x38>)
 8002532:	fba2 2303 	umull	r2, r3, r2, r3
 8002536:	0a5b      	lsrs	r3, r3, #9
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002540:	bf00      	nop
  }
  while (Delay --);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	1e5a      	subs	r2, r3, #1
 8002546:	60fa      	str	r2, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1f9      	bne.n	8002540 <RCC_Delay+0x1c>
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	3714      	adds	r7, #20
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	200000a0 	.word	0x200000a0
 800255c:	10624dd3 	.word	0x10624dd3

08002560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e041      	b.n	80025f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fe14 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f000 f8f2 	bl	8002788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025fe:	b580      	push	{r7, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
 8002606:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260e:	2b01      	cmp	r3, #1
 8002610:	d101      	bne.n	8002616 <HAL_TIM_ConfigClockSource+0x18>
 8002612:	2302      	movs	r3, #2
 8002614:	e0b3      	b.n	800277e <HAL_TIM_ConfigClockSource+0x180>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002634:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800263c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264e:	d03e      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0xd0>
 8002650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002654:	f200 8087 	bhi.w	8002766 <HAL_TIM_ConfigClockSource+0x168>
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	f000 8085 	beq.w	800276a <HAL_TIM_ConfigClockSource+0x16c>
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002664:	d87f      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x168>
 8002666:	2b70      	cmp	r3, #112	; 0x70
 8002668:	d01a      	beq.n	80026a0 <HAL_TIM_ConfigClockSource+0xa2>
 800266a:	2b70      	cmp	r3, #112	; 0x70
 800266c:	d87b      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x168>
 800266e:	2b60      	cmp	r3, #96	; 0x60
 8002670:	d050      	beq.n	8002714 <HAL_TIM_ConfigClockSource+0x116>
 8002672:	2b60      	cmp	r3, #96	; 0x60
 8002674:	d877      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x168>
 8002676:	2b50      	cmp	r3, #80	; 0x50
 8002678:	d03c      	beq.n	80026f4 <HAL_TIM_ConfigClockSource+0xf6>
 800267a:	2b50      	cmp	r3, #80	; 0x50
 800267c:	d873      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x168>
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d058      	beq.n	8002734 <HAL_TIM_ConfigClockSource+0x136>
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d86f      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x168>
 8002686:	2b30      	cmp	r3, #48	; 0x30
 8002688:	d064      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0x156>
 800268a:	2b30      	cmp	r3, #48	; 0x30
 800268c:	d86b      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x168>
 800268e:	2b20      	cmp	r3, #32
 8002690:	d060      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0x156>
 8002692:	2b20      	cmp	r3, #32
 8002694:	d867      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x168>
 8002696:	2b00      	cmp	r3, #0
 8002698:	d05c      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0x156>
 800269a:	2b10      	cmp	r3, #16
 800269c:	d05a      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800269e:	e062      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f000 f943 	bl	800293a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	609a      	str	r2, [r3, #8]
      break;
 80026cc:	e04e      	b.n	800276c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f000 f92c 	bl	800293a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026f0:	609a      	str	r2, [r3, #8]
      break;
 80026f2:	e03b      	b.n	800276c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6859      	ldr	r1, [r3, #4]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	461a      	mov	r2, r3
 8002702:	f000 f8a3 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2150      	movs	r1, #80	; 0x50
 800270c:	4618      	mov	r0, r3
 800270e:	f000 f8fa 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002712:	e02b      	b.n	800276c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	461a      	mov	r2, r3
 8002722:	f000 f8c1 	bl	80028a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2160      	movs	r1, #96	; 0x60
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f8ea 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002732:	e01b      	b.n	800276c <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	461a      	mov	r2, r3
 8002742:	f000 f883 	bl	800284c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2140      	movs	r1, #64	; 0x40
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f8da 	bl	8002906 <TIM_ITRx_SetConfig>
      break;
 8002752:	e00b      	b.n	800276c <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 f8d1 	bl	8002906 <TIM_ITRx_SetConfig>
        break;
 8002764:	e002      	b.n	800276c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002766:	bf00      	nop
 8002768:	e000      	b.n	800276c <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800276a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a29      	ldr	r2, [pc, #164]	; (8002840 <TIM_Base_SetConfig+0xb8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0x30>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0x30>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a26      	ldr	r2, [pc, #152]	; (8002844 <TIM_Base_SetConfig+0xbc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0x30>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a25      	ldr	r2, [pc, #148]	; (8002848 <TIM_Base_SetConfig+0xc0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d108      	bne.n	80027ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <TIM_Base_SetConfig+0xb8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00b      	beq.n	80027ea <TIM_Base_SetConfig+0x62>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d007      	beq.n	80027ea <TIM_Base_SetConfig+0x62>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <TIM_Base_SetConfig+0xbc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d003      	beq.n	80027ea <TIM_Base_SetConfig+0x62>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <TIM_Base_SetConfig+0xc0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d108      	bne.n	80027fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a07      	ldr	r2, [pc, #28]	; (8002840 <TIM_Base_SetConfig+0xb8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	615a      	str	r2, [r3, #20]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40000400 	.word	0x40000400
 8002848:	40000800 	.word	0x40000800

0800284c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b087      	sub	sp, #28
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f023 0201 	bic.w	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f023 030a 	bic.w	r3, r3, #10
 8002888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	621a      	str	r2, [r3, #32]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	f023 0210 	bic.w	r2, r3, #16
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	699b      	ldr	r3, [r3, #24]
 80028c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	031b      	lsls	r3, r3, #12
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	4313      	orrs	r3, r2
 80028dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	bf00      	nop
 80028fe:	371c      	adds	r7, #28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	f043 0307 	orr.w	r3, r3, #7
 8002928:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	609a      	str	r2, [r3, #8]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	bc80      	pop	{r7}
 8002938:	4770      	bx	lr

0800293a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800293a:	b480      	push	{r7}
 800293c:	b087      	sub	sp, #28
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002954:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	021a      	lsls	r2, r3, #8
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	431a      	orrs	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	4313      	orrs	r3, r2
 8002962:	697a      	ldr	r2, [r7, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	609a      	str	r2, [r3, #8]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800298c:	2302      	movs	r3, #2
 800298e:	e046      	b.n	8002a1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a16      	ldr	r2, [pc, #88]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d00e      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029dc:	d009      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a10      	ldr	r2, [pc, #64]	; (8002a30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10c      	bne.n	8002a0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3714      	adds	r7, #20
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	40012c00 	.word	0x40012c00
 8002a2c:	40000400 	.word	0x40000400
 8002a30:	40000800 	.word	0x40000800

08002a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e03f      	b.n	8002ac6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fe fbc6 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2224      	movs	r2, #36	; 0x24
 8002a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fae3 	bl	8003044 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695a      	ldr	r2, [r3, #20]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2220      	movs	r2, #32
 8002ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b085      	sub	sp, #20
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d130      	bne.n	8002b4a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d002      	beq.n	8002af4 <HAL_UART_Transmit_IT+0x26>
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e029      	b.n	8002b4c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d101      	bne.n	8002b06 <HAL_UART_Transmit_IT+0x38>
 8002b02:	2302      	movs	r3, #2
 8002b04:	e022      	b.n	8002b4c <HAL_UART_Transmit_IT+0x7e>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	88fa      	ldrh	r2, [r7, #6]
 8002b18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	88fa      	ldrh	r2, [r7, #6]
 8002b1e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2221      	movs	r2, #33	; 0x21
 8002b2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b44:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b46:	2300      	movs	r3, #0
 8002b48:	e000      	b.n	8002b4c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002b4a:	2302      	movs	r3, #2
  }
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3714      	adds	r7, #20
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bc80      	pop	{r7}
 8002b54:	4770      	bx	lr

08002b56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b56:	b480      	push	{r7}
 8002b58:	b085      	sub	sp, #20
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	4613      	mov	r3, r2
 8002b62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d140      	bne.n	8002bf2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_UART_Receive_IT+0x26>
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e039      	b.n	8002bf4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Receive_IT+0x38>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e032      	b.n	8002bf4 <HAL_UART_Receive_IT+0x9e>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2222      	movs	r2, #34	; 0x22
 8002bb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bcc:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	695a      	ldr	r2, [r3, #20]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f042 0220 	orr.w	r2, r2, #32
 8002bec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	e000      	b.n	8002bf4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002bf2:	2302      	movs	r3, #2
  }
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10d      	bne.n	8002c52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	f003 0320 	and.w	r3, r3, #32
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_UART_IRQHandler+0x52>
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f979 	bl	8002f42 <UART_Receive_IT>
      return;
 8002c50:	e0d0      	b.n	8002df4 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80b0 	beq.w	8002dba <HAL_UART_IRQHandler+0x1ba>
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d105      	bne.n	8002c70 <HAL_UART_IRQHandler+0x70>
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80a5 	beq.w	8002dba <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00a      	beq.n	8002c90 <HAL_UART_IRQHandler+0x90>
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d005      	beq.n	8002c90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	f043 0201 	orr.w	r2, r3, #1
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <HAL_UART_IRQHandler+0xb0>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	f043 0202 	orr.w	r2, r3, #2
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00a      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xd0>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d005      	beq.n	8002cd0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	f043 0204 	orr.w	r2, r3, #4
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f003 0308 	and.w	r3, r3, #8
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00f      	beq.n	8002cfa <HAL_UART_IRQHandler+0xfa>
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	f003 0320 	and.w	r3, r3, #32
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <HAL_UART_IRQHandler+0xee>
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	f043 0208 	orr.w	r2, r3, #8
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d077      	beq.n	8002df2 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_UART_IRQHandler+0x11c>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 f913 	bl	8002f42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	bf14      	ite	ne
 8002d2a:	2301      	movne	r3, #1
 8002d2c:	2300      	moveq	r3, #0
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <HAL_UART_IRQHandler+0x144>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d031      	beq.n	8002da8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f864 	bl	8002e12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d023      	beq.n	8002da0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d66:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d013      	beq.n	8002d98 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d74:	4a21      	ldr	r2, [pc, #132]	; (8002dfc <HAL_UART_IRQHandler+0x1fc>)
 8002d76:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe fda9 	bl	80018d4 <HAL_DMA_Abort_IT>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d016      	beq.n	8002db6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d92:	4610      	mov	r0, r2
 8002d94:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d96:	e00e      	b.n	8002db6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f831 	bl	8002e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9e:	e00a      	b.n	8002db6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 f82d 	bl	8002e00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da6:	e006      	b.n	8002db6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f829 	bl	8002e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002db4:	e01d      	b.n	8002df2 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db6:	bf00      	nop
    return;
 8002db8:	e01b      	b.n	8002df2 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d008      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x1d6>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f850 	bl	8002e74 <UART_Transmit_IT>
    return;
 8002dd4:	e00e      	b.n	8002df4 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d009      	beq.n	8002df4 <HAL_UART_IRQHandler+0x1f4>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d004      	beq.n	8002df4 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f891 	bl	8002f12 <UART_EndTransmit_IT>
    return;
 8002df0:	e000      	b.n	8002df4 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002df2:	bf00      	nop
  }
}
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	08002e4d 	.word	0x08002e4d

08002e00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e08:	bf00      	nop
 8002e0a:	370c      	adds	r7, #12
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bc80      	pop	{r7}
 8002e10:	4770      	bx	lr

08002e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b083      	sub	sp, #12
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e28:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e42:	bf00      	nop
 8002e44:	370c      	adds	r7, #12
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr

08002e4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff ffca 	bl	8002e00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b21      	cmp	r3, #33	; 0x21
 8002e86:	d13e      	bne.n	8002f06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e90:	d114      	bne.n	8002ebc <UART_Transmit_IT+0x48>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d110      	bne.n	8002ebc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	1c9a      	adds	r2, r3, #2
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	621a      	str	r2, [r3, #32]
 8002eba:	e008      	b.n	8002ece <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	1c59      	adds	r1, r3, #1
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6211      	str	r1, [r2, #32]
 8002ec6:	781a      	ldrb	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	3b01      	subs	r3, #1
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	4619      	mov	r1, r3
 8002edc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10f      	bne.n	8002f02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68da      	ldr	r2, [r3, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ef0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3714      	adds	r7, #20
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bc80      	pop	{r7}
 8002f10:	4770      	bx	lr

08002f12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f12:	b580      	push	{r7, lr}
 8002f14:	b082      	sub	sp, #8
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2220      	movs	r2, #32
 8002f2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fe f894 	bl	8001060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b084      	sub	sp, #16
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b22      	cmp	r3, #34	; 0x22
 8002f54:	d170      	bne.n	8003038 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5e:	d117      	bne.n	8002f90 <UART_Receive_IT+0x4e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d113      	bne.n	8002f90 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f88:	1c9a      	adds	r2, r3, #2
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f8e:	e026      	b.n	8002fde <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f94:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa2:	d007      	beq.n	8002fb4 <UART_Receive_IT+0x72>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <UART_Receive_IT+0x80>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d106      	bne.n	8002fc2 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	701a      	strb	r2, [r3, #0]
 8002fc0:	e008      	b.n	8002fd4 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002fce:	b2da      	uxtb	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	4619      	mov	r1, r3
 8002fec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d120      	bne.n	8003034 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0220 	bic.w	r2, r2, #32
 8003000:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003010:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695a      	ldr	r2, [r3, #20]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f7fd ffa6 	bl	8000f7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003030:	2300      	movs	r3, #0
 8003032:	e002      	b.n	800303a <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	e000      	b.n	800303a <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003038:	2302      	movs	r3, #2
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	431a      	orrs	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	4313      	orrs	r3, r2
 8003072:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800307e:	f023 030c 	bic.w	r3, r3, #12
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	68b9      	ldr	r1, [r7, #8]
 8003088:	430b      	orrs	r3, r1
 800308a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2c      	ldr	r2, [pc, #176]	; (8003158 <UART_SetConfig+0x114>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d103      	bne.n	80030b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030ac:	f7ff fa26 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	e002      	b.n	80030ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030b4:	f7ff fa0e 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 80030b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4613      	mov	r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	4413      	add	r3, r2
 80030c2:	009a      	lsls	r2, r3, #2
 80030c4:	441a      	add	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	4a22      	ldr	r2, [pc, #136]	; (800315c <UART_SetConfig+0x118>)
 80030d2:	fba2 2303 	umull	r2, r3, r2, r3
 80030d6:	095b      	lsrs	r3, r3, #5
 80030d8:	0119      	lsls	r1, r3, #4
 80030da:	68fa      	ldr	r2, [r7, #12]
 80030dc:	4613      	mov	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4413      	add	r3, r2
 80030e2:	009a      	lsls	r2, r3, #2
 80030e4:	441a      	add	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80030f0:	4b1a      	ldr	r3, [pc, #104]	; (800315c <UART_SetConfig+0x118>)
 80030f2:	fba3 0302 	umull	r0, r3, r3, r2
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	2064      	movs	r0, #100	; 0x64
 80030fa:	fb00 f303 	mul.w	r3, r0, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	3332      	adds	r3, #50	; 0x32
 8003104:	4a15      	ldr	r2, [pc, #84]	; (800315c <UART_SetConfig+0x118>)
 8003106:	fba2 2303 	umull	r2, r3, r2, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003110:	4419      	add	r1, r3
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	009a      	lsls	r2, r3, #2
 800311c:	441a      	add	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	fbb2 f2f3 	udiv	r2, r2, r3
 8003128:	4b0c      	ldr	r3, [pc, #48]	; (800315c <UART_SetConfig+0x118>)
 800312a:	fba3 0302 	umull	r0, r3, r3, r2
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	2064      	movs	r0, #100	; 0x64
 8003132:	fb00 f303 	mul.w	r3, r0, r3
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	011b      	lsls	r3, r3, #4
 800313a:	3332      	adds	r3, #50	; 0x32
 800313c:	4a07      	ldr	r2, [pc, #28]	; (800315c <UART_SetConfig+0x118>)
 800313e:	fba2 2303 	umull	r2, r3, r2, r3
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	f003 020f 	and.w	r2, r3, #15
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	440a      	add	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003150:	bf00      	nop
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40013800 	.word	0x40013800
 800315c:	51eb851f 	.word	0x51eb851f

08003160 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	4603      	mov	r3, r0
 8003168:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800316a:	2300      	movs	r3, #0
 800316c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800316e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003172:	2b84      	cmp	r3, #132	; 0x84
 8003174:	d005      	beq.n	8003182 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003176:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4413      	add	r3, r2
 800317e:	3303      	adds	r3, #3
 8003180:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr

0800318e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003192:	f000 fad1 	bl	8003738 <vTaskStartScheduler>
  
  return osOK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}

0800319c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800319c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af04      	add	r7, sp, #16
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d020      	beq.n	80031f0 <osThreadCreate+0x54>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01c      	beq.n	80031f0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685c      	ldr	r4, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681d      	ldr	r5, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691e      	ldr	r6, [r3, #16]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ffc9 	bl	8003160 <makeFreeRtosPriority>
 80031ce:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031d8:	9202      	str	r2, [sp, #8]
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	9100      	str	r1, [sp, #0]
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	4632      	mov	r2, r6
 80031e2:	4629      	mov	r1, r5
 80031e4:	4620      	mov	r0, r4
 80031e6:	f000 f8e8 	bl	80033ba <xTaskCreateStatic>
 80031ea:	4603      	mov	r3, r0
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e01c      	b.n	800322a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685c      	ldr	r4, [r3, #4]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80031fc:	b29e      	uxth	r6, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ffab 	bl	8003160 <makeFreeRtosPriority>
 800320a:	4602      	mov	r2, r0
 800320c:	f107 030c 	add.w	r3, r7, #12
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	9200      	str	r2, [sp, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	4632      	mov	r2, r6
 8003218:	4629      	mov	r1, r5
 800321a:	4620      	mov	r0, r4
 800321c:	f000 f929 	bl	8003472 <xTaskCreate>
 8003220:	4603      	mov	r3, r0
 8003222:	2b01      	cmp	r3, #1
 8003224:	d001      	beq.n	800322a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003226:	2300      	movs	r3, #0
 8003228:	e000      	b.n	800322c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800322a:	68fb      	ldr	r3, [r7, #12]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003234 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <osDelay+0x16>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	e000      	b.n	800324c <osDelay+0x18>
 800324a:	2301      	movs	r3, #1
 800324c:	4618      	mov	r0, r3
 800324e:	f000 fa3f 	bl	80036d0 <vTaskDelay>
  
  return osOK;
 8003252:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f103 0208 	add.w	r2, r3, #8
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003274:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f103 0208 	add.w	r2, r3, #8
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f103 0208 	add.w	r2, r3, #8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	bc80      	pop	{r7}
 8003298:	4770      	bx	lr

0800329a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bc80      	pop	{r7}
 80032b0:	4770      	bx	lr

080032b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032b2:	b480      	push	{r7}
 80032b4:	b085      	sub	sp, #20
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
 80032ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	601a      	str	r2, [r3, #0]
}
 80032ee:	bf00      	nop
 80032f0:	3714      	adds	r7, #20
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bc80      	pop	{r7}
 80032f6:	4770      	bx	lr

080032f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800330e:	d103      	bne.n	8003318 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	60fb      	str	r3, [r7, #12]
 8003316:	e00c      	b.n	8003332 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3308      	adds	r3, #8
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	e002      	b.n	8003326 <vListInsert+0x2e>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	d2f6      	bcs.n	8003320 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	683a      	ldr	r2, [r7, #0]
 800334c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	601a      	str	r2, [r3, #0]
}
 800335e:	bf00      	nop
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	6892      	ldr	r2, [r2, #8]
 800337e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6852      	ldr	r2, [r2, #4]
 8003388:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	d103      	bne.n	800339c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	1e5a      	subs	r2, r3, #1
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3714      	adds	r7, #20
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bc80      	pop	{r7}
 80033b8:	4770      	bx	lr

080033ba <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b08e      	sub	sp, #56	; 0x38
 80033be:	af04      	add	r7, sp, #16
 80033c0:	60f8      	str	r0, [r7, #12]
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80033c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10a      	bne.n	80033e4 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80033ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80033e0:	bf00      	nop
 80033e2:	e7fe      	b.n	80033e2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <xTaskCreateStatic+0x46>
	__asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	61fb      	str	r3, [r7, #28]
}
 80033fc:	bf00      	nop
 80033fe:	e7fe      	b.n	80033fe <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003400:	2354      	movs	r3, #84	; 0x54
 8003402:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	2b54      	cmp	r3, #84	; 0x54
 8003408:	d00a      	beq.n	8003420 <xTaskCreateStatic+0x66>
	__asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	61bb      	str	r3, [r7, #24]
}
 800341c:	bf00      	nop
 800341e:	e7fe      	b.n	800341e <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003422:	2b00      	cmp	r3, #0
 8003424:	d01e      	beq.n	8003464 <xTaskCreateStatic+0xaa>
 8003426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01b      	beq.n	8003464 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800342c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003434:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003438:	2202      	movs	r2, #2
 800343a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800343e:	2300      	movs	r3, #0
 8003440:	9303      	str	r3, [sp, #12]
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	9302      	str	r3, [sp, #8]
 8003446:	f107 0314 	add.w	r3, r7, #20
 800344a:	9301      	str	r3, [sp, #4]
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f850 	bl	80034fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800345c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800345e:	f000 f8cd 	bl	80035fc <prvAddNewTaskToReadyList>
 8003462:	e001      	b.n	8003468 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003468:	697b      	ldr	r3, [r7, #20]
	}
 800346a:	4618      	mov	r0, r3
 800346c:	3728      	adds	r7, #40	; 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003472:	b580      	push	{r7, lr}
 8003474:	b08c      	sub	sp, #48	; 0x30
 8003476:	af04      	add	r7, sp, #16
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	603b      	str	r3, [r7, #0]
 800347e:	4613      	mov	r3, r2
 8003480:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4618      	mov	r0, r3
 8003488:	f000 fe8a 	bl	80041a0 <pvPortMalloc>
 800348c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00e      	beq.n	80034b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003494:	2054      	movs	r0, #84	; 0x54
 8003496:	f000 fe83 	bl	80041a0 <pvPortMalloc>
 800349a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	697a      	ldr	r2, [r7, #20]
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
 80034a8:	e005      	b.n	80034b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80034aa:	6978      	ldr	r0, [r7, #20]
 80034ac:	f000 ff3c 	bl	8004328 <vPortFree>
 80034b0:	e001      	b.n	80034b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d017      	beq.n	80034ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034c4:	88fa      	ldrh	r2, [r7, #6]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9303      	str	r3, [sp, #12]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	9302      	str	r3, [sp, #8]
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	9301      	str	r3, [sp, #4]
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 f80e 	bl	80034fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034e0:	69f8      	ldr	r0, [r7, #28]
 80034e2:	f000 f88b 	bl	80035fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e002      	b.n	80034f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034f2:	69bb      	ldr	r3, [r7, #24]
	}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3720      	adds	r7, #32
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b088      	sub	sp, #32
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800350a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003514:	3b01      	subs	r3, #1
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f023 0307 	bic.w	r3, r3, #7
 8003522:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <prvInitialiseNewTask+0x48>
	__asm volatile
 800352e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	617b      	str	r3, [r7, #20]
}
 8003540:	bf00      	nop
 8003542:	e7fe      	b.n	8003542 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003544:	2300      	movs	r3, #0
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e012      	b.n	8003570 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	4413      	add	r3, r2
 8003550:	7819      	ldrb	r1, [r3, #0]
 8003552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	4413      	add	r3, r2
 8003558:	3334      	adds	r3, #52	; 0x34
 800355a:	460a      	mov	r2, r1
 800355c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4413      	add	r3, r2
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d006      	beq.n	8003578 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3301      	adds	r3, #1
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2b0f      	cmp	r3, #15
 8003574:	d9e9      	bls.n	800354a <prvInitialiseNewTask+0x4e>
 8003576:	e000      	b.n	800357a <prvInitialiseNewTask+0x7e>
		{
			break;
 8003578:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003584:	2b06      	cmp	r3, #6
 8003586:	d901      	bls.n	800358c <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003588:	2306      	movs	r3, #6
 800358a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003590:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003596:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	2200      	movs	r2, #0
 800359c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800359e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a0:	3304      	adds	r3, #4
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7ff fe79 	bl	800329a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035aa:	3318      	adds	r3, #24
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fe74 	bl	800329a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	f1c3 0207 	rsb	r2, r3, #7
 80035be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	2200      	movs	r2, #0
 80035cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	68f9      	ldr	r1, [r7, #12]
 80035da:	69b8      	ldr	r0, [r7, #24]
 80035dc:	f000 fc2c 	bl	8003e38 <pxPortInitialiseStack>
 80035e0:	4602      	mov	r2, r0
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80035e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035f2:	bf00      	nop
 80035f4:	3720      	adds	r7, #32
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
	...

080035fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003604:	f000 fd0a 	bl	800401c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003608:	4b2a      	ldr	r3, [pc, #168]	; (80036b4 <prvAddNewTaskToReadyList+0xb8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	4a29      	ldr	r2, [pc, #164]	; (80036b4 <prvAddNewTaskToReadyList+0xb8>)
 8003610:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003612:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <prvAddNewTaskToReadyList+0xbc>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800361a:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <prvAddNewTaskToReadyList+0xbc>)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003620:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <prvAddNewTaskToReadyList+0xb8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d110      	bne.n	800364a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003628:	f000 fac0 	bl	8003bac <prvInitialiseTaskLists>
 800362c:	e00d      	b.n	800364a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800362e:	4b23      	ldr	r3, [pc, #140]	; (80036bc <prvAddNewTaskToReadyList+0xc0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003636:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <prvAddNewTaskToReadyList+0xbc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	429a      	cmp	r2, r3
 8003642:	d802      	bhi.n	800364a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003644:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <prvAddNewTaskToReadyList+0xbc>)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <prvAddNewTaskToReadyList+0xc4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3301      	adds	r3, #1
 8003650:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <prvAddNewTaskToReadyList+0xc4>)
 8003652:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	2201      	movs	r2, #1
 800365a:	409a      	lsls	r2, r3
 800365c:	4b19      	ldr	r3, [pc, #100]	; (80036c4 <prvAddNewTaskToReadyList+0xc8>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	4a18      	ldr	r2, [pc, #96]	; (80036c4 <prvAddNewTaskToReadyList+0xc8>)
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800366a:	4613      	mov	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	4413      	add	r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	4a15      	ldr	r2, [pc, #84]	; (80036c8 <prvAddNewTaskToReadyList+0xcc>)
 8003674:	441a      	add	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f7ff fe18 	bl	80032b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003682:	f000 fcfb 	bl	800407c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003686:	4b0d      	ldr	r3, [pc, #52]	; (80036bc <prvAddNewTaskToReadyList+0xc0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00e      	beq.n	80036ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800368e:	4b0a      	ldr	r3, [pc, #40]	; (80036b8 <prvAddNewTaskToReadyList+0xbc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	429a      	cmp	r2, r3
 800369a:	d207      	bcs.n	80036ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <prvAddNewTaskToReadyList+0xd0>)
 800369e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036ac:	bf00      	nop
 80036ae:	3708      	adds	r7, #8
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	200006a4 	.word	0x200006a4
 80036b8:	200005a4 	.word	0x200005a4
 80036bc:	200006b0 	.word	0x200006b0
 80036c0:	200006c0 	.word	0x200006c0
 80036c4:	200006ac 	.word	0x200006ac
 80036c8:	200005a8 	.word	0x200005a8
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d017      	beq.n	8003712 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80036e2:	4b13      	ldr	r3, [pc, #76]	; (8003730 <vTaskDelay+0x60>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <vTaskDelay+0x30>
	__asm volatile
 80036ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	60bb      	str	r3, [r7, #8]
}
 80036fc:	bf00      	nop
 80036fe:	e7fe      	b.n	80036fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003700:	f000 f87a 	bl	80037f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003704:	2100      	movs	r1, #0
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fb30 	bl	8003d6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800370c:	f000 f882 	bl	8003814 <xTaskResumeAll>
 8003710:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d107      	bne.n	8003728 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <vTaskDelay+0x64>)
 800371a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200006cc 	.word	0x200006cc
 8003734:	e000ed04 	.word	0xe000ed04

08003738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003746:	463a      	mov	r2, r7
 8003748:	1d39      	adds	r1, r7, #4
 800374a:	f107 0308 	add.w	r3, r7, #8
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd fa42 	bl	8000bd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003754:	6839      	ldr	r1, [r7, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	9202      	str	r2, [sp, #8]
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	2300      	movs	r3, #0
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2300      	movs	r3, #0
 8003764:	460a      	mov	r2, r1
 8003766:	491e      	ldr	r1, [pc, #120]	; (80037e0 <vTaskStartScheduler+0xa8>)
 8003768:	481e      	ldr	r0, [pc, #120]	; (80037e4 <vTaskStartScheduler+0xac>)
 800376a:	f7ff fe26 	bl	80033ba <xTaskCreateStatic>
 800376e:	4603      	mov	r3, r0
 8003770:	4a1d      	ldr	r2, [pc, #116]	; (80037e8 <vTaskStartScheduler+0xb0>)
 8003772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003774:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <vTaskStartScheduler+0xb0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800377c:	2301      	movs	r3, #1
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	e001      	b.n	8003786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d116      	bne.n	80037ba <vTaskStartScheduler+0x82>
	__asm volatile
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	f383 8811 	msr	BASEPRI, r3
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	f3bf 8f4f 	dsb	sy
 800379c:	613b      	str	r3, [r7, #16]
}
 800379e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80037a0:	4b12      	ldr	r3, [pc, #72]	; (80037ec <vTaskStartScheduler+0xb4>)
 80037a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80037a8:	4b11      	ldr	r3, [pc, #68]	; (80037f0 <vTaskStartScheduler+0xb8>)
 80037aa:	2201      	movs	r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80037ae:	4b11      	ldr	r3, [pc, #68]	; (80037f4 <vTaskStartScheduler+0xbc>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80037b4:	f000 fbc0 	bl	8003f38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80037b8:	e00e      	b.n	80037d8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c0:	d10a      	bne.n	80037d8 <vTaskStartScheduler+0xa0>
	__asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	60fb      	str	r3, [r7, #12]
}
 80037d4:	bf00      	nop
 80037d6:	e7fe      	b.n	80037d6 <vTaskStartScheduler+0x9e>
}
 80037d8:	bf00      	nop
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	080098bc 	.word	0x080098bc
 80037e4:	08003b7d 	.word	0x08003b7d
 80037e8:	200006c8 	.word	0x200006c8
 80037ec:	200006c4 	.word	0x200006c4
 80037f0:	200006b0 	.word	0x200006b0
 80037f4:	200006a8 	.word	0x200006a8

080037f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80037fc:	4b04      	ldr	r3, [pc, #16]	; (8003810 <vTaskSuspendAll+0x18>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3301      	adds	r3, #1
 8003802:	4a03      	ldr	r2, [pc, #12]	; (8003810 <vTaskSuspendAll+0x18>)
 8003804:	6013      	str	r3, [r2, #0]
}
 8003806:	bf00      	nop
 8003808:	46bd      	mov	sp, r7
 800380a:	bc80      	pop	{r7}
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	200006cc 	.word	0x200006cc

08003814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800381e:	2300      	movs	r3, #0
 8003820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <xTaskResumeAll+0x114>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <xTaskResumeAll+0x2c>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	603b      	str	r3, [r7, #0]
}
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003840:	f000 fbec 	bl	800401c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003844:	4b38      	ldr	r3, [pc, #224]	; (8003928 <xTaskResumeAll+0x114>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	3b01      	subs	r3, #1
 800384a:	4a37      	ldr	r2, [pc, #220]	; (8003928 <xTaskResumeAll+0x114>)
 800384c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <xTaskResumeAll+0x114>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d161      	bne.n	800391a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003856:	4b35      	ldr	r3, [pc, #212]	; (800392c <xTaskResumeAll+0x118>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d05d      	beq.n	800391a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800385e:	e02e      	b.n	80038be <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003860:	4b33      	ldr	r3, [pc, #204]	; (8003930 <xTaskResumeAll+0x11c>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	3318      	adds	r3, #24
 800386c:	4618      	mov	r0, r3
 800386e:	f7ff fd7b 	bl	8003368 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	3304      	adds	r3, #4
 8003876:	4618      	mov	r0, r3
 8003878:	f7ff fd76 	bl	8003368 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	2201      	movs	r2, #1
 8003882:	409a      	lsls	r2, r3
 8003884:	4b2b      	ldr	r3, [pc, #172]	; (8003934 <xTaskResumeAll+0x120>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4313      	orrs	r3, r2
 800388a:	4a2a      	ldr	r2, [pc, #168]	; (8003934 <xTaskResumeAll+0x120>)
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003892:	4613      	mov	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4a27      	ldr	r2, [pc, #156]	; (8003938 <xTaskResumeAll+0x124>)
 800389c:	441a      	add	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	3304      	adds	r3, #4
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f7ff fd04 	bl	80032b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038ae:	4b23      	ldr	r3, [pc, #140]	; (800393c <xTaskResumeAll+0x128>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d302      	bcc.n	80038be <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80038b8:	4b21      	ldr	r3, [pc, #132]	; (8003940 <xTaskResumeAll+0x12c>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <xTaskResumeAll+0x11c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1cc      	bne.n	8003860 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80038cc:	f000 fa0c 	bl	8003ce8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80038d0:	4b1c      	ldr	r3, [pc, #112]	; (8003944 <xTaskResumeAll+0x130>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d010      	beq.n	80038fe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80038dc:	f000 f836 	bl	800394c <xTaskIncrementTick>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80038e6:	4b16      	ldr	r3, [pc, #88]	; (8003940 <xTaskResumeAll+0x12c>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f1      	bne.n	80038dc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80038f8:	4b12      	ldr	r3, [pc, #72]	; (8003944 <xTaskResumeAll+0x130>)
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <xTaskResumeAll+0x12c>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003906:	2301      	movs	r3, #1
 8003908:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800390a:	4b0f      	ldr	r3, [pc, #60]	; (8003948 <xTaskResumeAll+0x134>)
 800390c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800391a:	f000 fbaf 	bl	800407c <vPortExitCritical>

	return xAlreadyYielded;
 800391e:	68bb      	ldr	r3, [r7, #8]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	200006cc 	.word	0x200006cc
 800392c:	200006a4 	.word	0x200006a4
 8003930:	20000664 	.word	0x20000664
 8003934:	200006ac 	.word	0x200006ac
 8003938:	200005a8 	.word	0x200005a8
 800393c:	200005a4 	.word	0x200005a4
 8003940:	200006b8 	.word	0x200006b8
 8003944:	200006b4 	.word	0x200006b4
 8003948:	e000ed04 	.word	0xe000ed04

0800394c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003956:	4b51      	ldr	r3, [pc, #324]	; (8003a9c <xTaskIncrementTick+0x150>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 808d 	bne.w	8003a7a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003960:	4b4f      	ldr	r3, [pc, #316]	; (8003aa0 <xTaskIncrementTick+0x154>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3301      	adds	r3, #1
 8003966:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003968:	4a4d      	ldr	r2, [pc, #308]	; (8003aa0 <xTaskIncrementTick+0x154>)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d120      	bne.n	80039b6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003974:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <xTaskIncrementTick+0x158>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00a      	beq.n	8003994 <xTaskIncrementTick+0x48>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	603b      	str	r3, [r7, #0]
}
 8003990:	bf00      	nop
 8003992:	e7fe      	b.n	8003992 <xTaskIncrementTick+0x46>
 8003994:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <xTaskIncrementTick+0x158>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
 800399a:	4b43      	ldr	r3, [pc, #268]	; (8003aa8 <xTaskIncrementTick+0x15c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a41      	ldr	r2, [pc, #260]	; (8003aa4 <xTaskIncrementTick+0x158>)
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	4a41      	ldr	r2, [pc, #260]	; (8003aa8 <xTaskIncrementTick+0x15c>)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	4b40      	ldr	r3, [pc, #256]	; (8003aac <xTaskIncrementTick+0x160>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	3301      	adds	r3, #1
 80039ae:	4a3f      	ldr	r2, [pc, #252]	; (8003aac <xTaskIncrementTick+0x160>)
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	f000 f999 	bl	8003ce8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80039b6:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <xTaskIncrementTick+0x164>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d34d      	bcc.n	8003a5c <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c0:	4b38      	ldr	r3, [pc, #224]	; (8003aa4 <xTaskIncrementTick+0x158>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <xTaskIncrementTick+0x82>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <xTaskIncrementTick+0x84>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d004      	beq.n	80039de <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039d4:	4b36      	ldr	r3, [pc, #216]	; (8003ab0 <xTaskIncrementTick+0x164>)
 80039d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039da:	601a      	str	r2, [r3, #0]
					break;
 80039dc:	e03e      	b.n	8003a5c <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039de:	4b31      	ldr	r3, [pc, #196]	; (8003aa4 <xTaskIncrementTick+0x158>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80039ee:	693a      	ldr	r2, [r7, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d203      	bcs.n	80039fe <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80039f6:	4a2e      	ldr	r2, [pc, #184]	; (8003ab0 <xTaskIncrementTick+0x164>)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6013      	str	r3, [r2, #0]
						break;
 80039fc:	e02e      	b.n	8003a5c <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff fcb0 	bl	8003368 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d004      	beq.n	8003a1a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	3318      	adds	r3, #24
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fca7 	bl	8003368 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	2201      	movs	r2, #1
 8003a20:	409a      	lsls	r2, r3
 8003a22:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <xTaskIncrementTick+0x168>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	4a22      	ldr	r2, [pc, #136]	; (8003ab4 <xTaskIncrementTick+0x168>)
 8003a2a:	6013      	str	r3, [r2, #0]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a30:	4613      	mov	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <xTaskIncrementTick+0x16c>)
 8003a3a:	441a      	add	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3304      	adds	r3, #4
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f7ff fc35 	bl	80032b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <xTaskIncrementTick+0x170>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d3b4      	bcc.n	80039c0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a5a:	e7b1      	b.n	80039c0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a5c:	4b17      	ldr	r3, [pc, #92]	; (8003abc <xTaskIncrementTick+0x170>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a62:	4915      	ldr	r1, [pc, #84]	; (8003ab8 <xTaskIncrementTick+0x16c>)
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d907      	bls.n	8003a84 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e004      	b.n	8003a84 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <xTaskIncrementTick+0x174>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	4a0f      	ldr	r2, [pc, #60]	; (8003ac0 <xTaskIncrementTick+0x174>)
 8003a82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003a84:	4b0f      	ldr	r3, [pc, #60]	; (8003ac4 <xTaskIncrementTick+0x178>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a90:	697b      	ldr	r3, [r7, #20]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200006cc 	.word	0x200006cc
 8003aa0:	200006a8 	.word	0x200006a8
 8003aa4:	2000065c 	.word	0x2000065c
 8003aa8:	20000660 	.word	0x20000660
 8003aac:	200006bc 	.word	0x200006bc
 8003ab0:	200006c4 	.word	0x200006c4
 8003ab4:	200006ac 	.word	0x200006ac
 8003ab8:	200005a8 	.word	0x200005a8
 8003abc:	200005a4 	.word	0x200005a4
 8003ac0:	200006b4 	.word	0x200006b4
 8003ac4:	200006b8 	.word	0x200006b8

08003ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ace:	4b26      	ldr	r3, [pc, #152]	; (8003b68 <vTaskSwitchContext+0xa0>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d003      	beq.n	8003ade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003ad6:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <vTaskSwitchContext+0xa4>)
 8003ad8:	2201      	movs	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003adc:	e03f      	b.n	8003b5e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003ade:	4b23      	ldr	r3, [pc, #140]	; (8003b6c <vTaskSwitchContext+0xa4>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ae4:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <vTaskSwitchContext+0xa8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	fab3 f383 	clz	r3, r3
 8003af0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003af2:	7afb      	ldrb	r3, [r7, #11]
 8003af4:	f1c3 031f 	rsb	r3, r3, #31
 8003af8:	617b      	str	r3, [r7, #20]
 8003afa:	491e      	ldr	r1, [pc, #120]	; (8003b74 <vTaskSwitchContext+0xac>)
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b12:	f383 8811 	msr	BASEPRI, r3
 8003b16:	f3bf 8f6f 	isb	sy
 8003b1a:	f3bf 8f4f 	dsb	sy
 8003b1e:	607b      	str	r3, [r7, #4]
}
 8003b20:	bf00      	nop
 8003b22:	e7fe      	b.n	8003b22 <vTaskSwitchContext+0x5a>
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4a11      	ldr	r2, [pc, #68]	; (8003b74 <vTaskSwitchContext+0xac>)
 8003b30:	4413      	add	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	605a      	str	r2, [r3, #4]
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	3308      	adds	r3, #8
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d104      	bne.n	8003b54 <vTaskSwitchContext+0x8c>
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	605a      	str	r2, [r3, #4]
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	4a07      	ldr	r2, [pc, #28]	; (8003b78 <vTaskSwitchContext+0xb0>)
 8003b5c:	6013      	str	r3, [r2, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr
 8003b68:	200006cc 	.word	0x200006cc
 8003b6c:	200006b8 	.word	0x200006b8
 8003b70:	200006ac 	.word	0x200006ac
 8003b74:	200005a8 	.word	0x200005a8
 8003b78:	200005a4 	.word	0x200005a4

08003b7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b84:	f000 f852 	bl	8003c2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <prvIdleTask+0x28>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d9f9      	bls.n	8003b84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <prvIdleTask+0x2c>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ba0:	e7f0      	b.n	8003b84 <prvIdleTask+0x8>
 8003ba2:	bf00      	nop
 8003ba4:	200005a8 	.word	0x200005a8
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	e00c      	b.n	8003bd2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <prvInitialiseTaskLists+0x60>)
 8003bc4:	4413      	add	r3, r2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f7ff fb48 	bl	800325c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2b06      	cmp	r3, #6
 8003bd6:	d9ef      	bls.n	8003bb8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bd8:	480d      	ldr	r0, [pc, #52]	; (8003c10 <prvInitialiseTaskLists+0x64>)
 8003bda:	f7ff fb3f 	bl	800325c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bde:	480d      	ldr	r0, [pc, #52]	; (8003c14 <prvInitialiseTaskLists+0x68>)
 8003be0:	f7ff fb3c 	bl	800325c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003be4:	480c      	ldr	r0, [pc, #48]	; (8003c18 <prvInitialiseTaskLists+0x6c>)
 8003be6:	f7ff fb39 	bl	800325c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003bea:	480c      	ldr	r0, [pc, #48]	; (8003c1c <prvInitialiseTaskLists+0x70>)
 8003bec:	f7ff fb36 	bl	800325c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003bf0:	480b      	ldr	r0, [pc, #44]	; (8003c20 <prvInitialiseTaskLists+0x74>)
 8003bf2:	f7ff fb33 	bl	800325c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	; (8003c24 <prvInitialiseTaskLists+0x78>)
 8003bf8:	4a05      	ldr	r2, [pc, #20]	; (8003c10 <prvInitialiseTaskLists+0x64>)
 8003bfa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bfc:	4b0a      	ldr	r3, [pc, #40]	; (8003c28 <prvInitialiseTaskLists+0x7c>)
 8003bfe:	4a05      	ldr	r2, [pc, #20]	; (8003c14 <prvInitialiseTaskLists+0x68>)
 8003c00:	601a      	str	r2, [r3, #0]
}
 8003c02:	bf00      	nop
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	200005a8 	.word	0x200005a8
 8003c10:	20000634 	.word	0x20000634
 8003c14:	20000648 	.word	0x20000648
 8003c18:	20000664 	.word	0x20000664
 8003c1c:	20000678 	.word	0x20000678
 8003c20:	20000690 	.word	0x20000690
 8003c24:	2000065c 	.word	0x2000065c
 8003c28:	20000660 	.word	0x20000660

08003c2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c32:	e019      	b.n	8003c68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c34:	f000 f9f2 	bl	800401c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c38:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <prvCheckTasksWaitingTermination+0x50>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	3304      	adds	r3, #4
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff fb8f 	bl	8003368 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c4a:	4b0d      	ldr	r3, [pc, #52]	; (8003c80 <prvCheckTasksWaitingTermination+0x54>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	4a0b      	ldr	r2, [pc, #44]	; (8003c80 <prvCheckTasksWaitingTermination+0x54>)
 8003c52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <prvCheckTasksWaitingTermination+0x58>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <prvCheckTasksWaitingTermination+0x58>)
 8003c5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c5e:	f000 fa0d 	bl	800407c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f810 	bl	8003c88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <prvCheckTasksWaitingTermination+0x58>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1e1      	bne.n	8003c34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c70:	bf00      	nop
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000678 	.word	0x20000678
 8003c80:	200006a4 	.word	0x200006a4
 8003c84:	2000068c 	.word	0x2000068c

08003c88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d108      	bne.n	8003cac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 fb42 	bl	8004328 <vPortFree>
				vPortFree( pxTCB );
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 fb3f 	bl	8004328 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003caa:	e018      	b.n	8003cde <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d103      	bne.n	8003cbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fb36 	bl	8004328 <vPortFree>
	}
 8003cbc:	e00f      	b.n	8003cde <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d00a      	beq.n	8003cde <prvDeleteTCB+0x56>
	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	60fb      	str	r3, [r7, #12]
}
 8003cda:	bf00      	nop
 8003cdc:	e7fe      	b.n	8003cdc <prvDeleteTCB+0x54>
	}
 8003cde:	bf00      	nop
 8003ce0:	3710      	adds	r7, #16
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cee:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <prvResetNextTaskUnblockTime+0x40>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <prvResetNextTaskUnblockTime+0x14>
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e000      	b.n	8003cfe <prvResetNextTaskUnblockTime+0x16>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d004      	beq.n	8003d0c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <prvResetNextTaskUnblockTime+0x44>)
 8003d04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d08:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d0a:	e008      	b.n	8003d1e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <prvResetNextTaskUnblockTime+0x40>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <prvResetNextTaskUnblockTime+0x44>)
 8003d1c:	6013      	str	r3, [r2, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr
 8003d28:	2000065c 	.word	0x2000065c
 8003d2c:	200006c4 	.word	0x200006c4

08003d30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d36:	4b0b      	ldr	r3, [pc, #44]	; (8003d64 <xTaskGetSchedulerState+0x34>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d102      	bne.n	8003d44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	e008      	b.n	8003d56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d44:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <xTaskGetSchedulerState+0x38>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	607b      	str	r3, [r7, #4]
 8003d50:	e001      	b.n	8003d56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d52:	2300      	movs	r3, #0
 8003d54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d56:	687b      	ldr	r3, [r7, #4]
	}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bc80      	pop	{r7}
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	200006b0 	.word	0x200006b0
 8003d68:	200006cc 	.word	0x200006cc

08003d6c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3304      	adds	r3, #4
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7ff faf0 	bl	8003368 <uxListRemove>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10b      	bne.n	8003da6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003d8e:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d94:	2201      	movs	r2, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4013      	ands	r3, r2
 8003da2:	4a20      	ldr	r2, [pc, #128]	; (8003e24 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003da4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dac:	d10a      	bne.n	8003dc4 <prvAddCurrentTaskToDelayedList+0x58>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d007      	beq.n	8003dc4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db4:	4b1a      	ldr	r3, [pc, #104]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3304      	adds	r3, #4
 8003dba:	4619      	mov	r1, r3
 8003dbc:	481a      	ldr	r0, [pc, #104]	; (8003e28 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003dbe:	f7ff fa78 	bl	80032b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003dc2:	e026      	b.n	8003e12 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003dcc:	4b14      	ldr	r3, [pc, #80]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d209      	bcs.n	8003df0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ddc:	4b13      	ldr	r3, [pc, #76]	; (8003e2c <prvAddCurrentTaskToDelayedList+0xc0>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7ff fa85 	bl	80032f8 <vListInsert>
}
 8003dee:	e010      	b.n	8003e12 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003df0:	4b0f      	ldr	r3, [pc, #60]	; (8003e30 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	4b0a      	ldr	r3, [pc, #40]	; (8003e20 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	f7ff fa7b 	bl	80032f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e02:	4b0c      	ldr	r3, [pc, #48]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d202      	bcs.n	8003e12 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003e0c:	4a09      	ldr	r2, [pc, #36]	; (8003e34 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	6013      	str	r3, [r2, #0]
}
 8003e12:	bf00      	nop
 8003e14:	3710      	adds	r7, #16
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	200006a8 	.word	0x200006a8
 8003e20:	200005a4 	.word	0x200005a4
 8003e24:	200006ac 	.word	0x200006ac
 8003e28:	20000690 	.word	0x20000690
 8003e2c:	20000660 	.word	0x20000660
 8003e30:	2000065c 	.word	0x2000065c
 8003e34:	200006c4 	.word	0x200006c4

08003e38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3b04      	subs	r3, #4
 8003e48:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3b04      	subs	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3b04      	subs	r3, #4
 8003e66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e68:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <pxPortInitialiseStack+0x54>)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	3b14      	subs	r3, #20
 8003e72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3b20      	subs	r3, #32
 8003e7e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e80:	68fb      	ldr	r3, [r7, #12]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3714      	adds	r7, #20
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bc80      	pop	{r7}
 8003e8a:	4770      	bx	lr
 8003e8c:	08003e91 	.word	0x08003e91

08003e90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <prvTaskExitError+0x54>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea2:	d00a      	beq.n	8003eba <prvTaskExitError+0x2a>
	__asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	60fb      	str	r3, [r7, #12]
}
 8003eb6:	bf00      	nop
 8003eb8:	e7fe      	b.n	8003eb8 <prvTaskExitError+0x28>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	60bb      	str	r3, [r7, #8]
}
 8003ecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ece:	bf00      	nop
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d0fc      	beq.n	8003ed0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bc80      	pop	{r7}
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	200000ac 	.word	0x200000ac
	...

08003ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ef0:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <pxCurrentTCBConst2>)
 8003ef2:	6819      	ldr	r1, [r3, #0]
 8003ef4:	6808      	ldr	r0, [r1, #0]
 8003ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003efa:	f380 8809 	msr	PSP, r0
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f04f 0000 	mov.w	r0, #0
 8003f06:	f380 8811 	msr	BASEPRI, r0
 8003f0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003f0e:	4770      	bx	lr

08003f10 <pxCurrentTCBConst2>:
 8003f10:	200005a4 	.word	0x200005a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003f14:	bf00      	nop
 8003f16:	bf00      	nop

08003f18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003f18:	4806      	ldr	r0, [pc, #24]	; (8003f34 <prvPortStartFirstTask+0x1c>)
 8003f1a:	6800      	ldr	r0, [r0, #0]
 8003f1c:	6800      	ldr	r0, [r0, #0]
 8003f1e:	f380 8808 	msr	MSP, r0
 8003f22:	b662      	cpsie	i
 8003f24:	b661      	cpsie	f
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	f3bf 8f6f 	isb	sy
 8003f2e:	df00      	svc	0
 8003f30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003f32:	bf00      	nop
 8003f34:	e000ed08 	.word	0xe000ed08

08003f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f3e:	4b32      	ldr	r3, [pc, #200]	; (8004008 <xPortStartScheduler+0xd0>)
 8003f40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	22ff      	movs	r2, #255	; 0xff
 8003f4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	781b      	ldrb	r3, [r3, #0]
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4b2a      	ldr	r3, [pc, #168]	; (800400c <xPortStartScheduler+0xd4>)
 8003f64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f66:	4b2a      	ldr	r3, [pc, #168]	; (8004010 <xPortStartScheduler+0xd8>)
 8003f68:	2207      	movs	r2, #7
 8003f6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f6c:	e009      	b.n	8003f82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003f6e:	4b28      	ldr	r3, [pc, #160]	; (8004010 <xPortStartScheduler+0xd8>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	4a26      	ldr	r2, [pc, #152]	; (8004010 <xPortStartScheduler+0xd8>)
 8003f76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f82:	78fb      	ldrb	r3, [r7, #3]
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d0ef      	beq.n	8003f6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f8e:	4b20      	ldr	r3, [pc, #128]	; (8004010 <xPortStartScheduler+0xd8>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1c3 0307 	rsb	r3, r3, #7
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d00a      	beq.n	8003fb0 <xPortStartScheduler+0x78>
	__asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	60bb      	str	r3, [r7, #8]
}
 8003fac:	bf00      	nop
 8003fae:	e7fe      	b.n	8003fae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fb0:	4b17      	ldr	r3, [pc, #92]	; (8004010 <xPortStartScheduler+0xd8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	021b      	lsls	r3, r3, #8
 8003fb6:	4a16      	ldr	r2, [pc, #88]	; (8004010 <xPortStartScheduler+0xd8>)
 8003fb8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fba:	4b15      	ldr	r3, [pc, #84]	; (8004010 <xPortStartScheduler+0xd8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003fc2:	4a13      	ldr	r2, [pc, #76]	; (8004010 <xPortStartScheduler+0xd8>)
 8003fc4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003fce:	4b11      	ldr	r3, [pc, #68]	; (8004014 <xPortStartScheduler+0xdc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a10      	ldr	r2, [pc, #64]	; (8004014 <xPortStartScheduler+0xdc>)
 8003fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003fd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003fda:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <xPortStartScheduler+0xdc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a0d      	ldr	r2, [pc, #52]	; (8004014 <xPortStartScheduler+0xdc>)
 8003fe0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003fe4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003fe6:	f000 f8b9 	bl	800415c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003fea:	4b0b      	ldr	r3, [pc, #44]	; (8004018 <xPortStartScheduler+0xe0>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ff0:	f7ff ff92 	bl	8003f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ff4:	f7ff fd68 	bl	8003ac8 <vTaskSwitchContext>
	prvTaskExitError();
 8003ff8:	f7ff ff4a 	bl	8003e90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	e000e400 	.word	0xe000e400
 800400c:	200006d0 	.word	0x200006d0
 8004010:	200006d4 	.word	0x200006d4
 8004014:	e000ed20 	.word	0xe000ed20
 8004018:	200000ac 	.word	0x200000ac

0800401c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800401c:	b480      	push	{r7}
 800401e:	b083      	sub	sp, #12
 8004020:	af00      	add	r7, sp, #0
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	607b      	str	r3, [r7, #4]
}
 8004034:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004036:	4b0f      	ldr	r3, [pc, #60]	; (8004074 <vPortEnterCritical+0x58>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3301      	adds	r3, #1
 800403c:	4a0d      	ldr	r2, [pc, #52]	; (8004074 <vPortEnterCritical+0x58>)
 800403e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <vPortEnterCritical+0x58>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d10f      	bne.n	8004068 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004048:	4b0b      	ldr	r3, [pc, #44]	; (8004078 <vPortEnterCritical+0x5c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <vPortEnterCritical+0x4c>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	603b      	str	r3, [r7, #0]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <vPortEnterCritical+0x4a>
	}
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	200000ac 	.word	0x200000ac
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004082:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <vPortExitCritical+0x4c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10a      	bne.n	80040a0 <vPortExitCritical+0x24>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	607b      	str	r3, [r7, #4]
}
 800409c:	bf00      	nop
 800409e:	e7fe      	b.n	800409e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80040a0:	4b09      	ldr	r3, [pc, #36]	; (80040c8 <vPortExitCritical+0x4c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <vPortExitCritical+0x4c>)
 80040a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80040aa:	4b07      	ldr	r3, [pc, #28]	; (80040c8 <vPortExitCritical+0x4c>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d105      	bne.n	80040be <vPortExitCritical+0x42>
 80040b2:	2300      	movs	r3, #0
 80040b4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bc80      	pop	{r7}
 80040c6:	4770      	bx	lr
 80040c8:	200000ac 	.word	0x200000ac
 80040cc:	00000000 	.word	0x00000000

080040d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80040d0:	f3ef 8009 	mrs	r0, PSP
 80040d4:	f3bf 8f6f 	isb	sy
 80040d8:	4b0d      	ldr	r3, [pc, #52]	; (8004110 <pxCurrentTCBConst>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040e0:	6010      	str	r0, [r2, #0]
 80040e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80040e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80040ea:	f380 8811 	msr	BASEPRI, r0
 80040ee:	f7ff fceb 	bl	8003ac8 <vTaskSwitchContext>
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8811 	msr	BASEPRI, r0
 80040fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80040fe:	6819      	ldr	r1, [r3, #0]
 8004100:	6808      	ldr	r0, [r1, #0]
 8004102:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004106:	f380 8809 	msr	PSP, r0
 800410a:	f3bf 8f6f 	isb	sy
 800410e:	4770      	bx	lr

08004110 <pxCurrentTCBConst>:
 8004110:	200005a4 	.word	0x200005a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	607b      	str	r3, [r7, #4]
}
 8004130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004132:	f7ff fc0b 	bl	800394c <xTaskIncrementTick>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <xPortSysTickHandler+0x40>)
 800413e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	2300      	movs	r3, #0
 8004146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	f383 8811 	msr	BASEPRI, r3
}
 800414e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004150:	bf00      	nop
 8004152:	3708      	adds	r7, #8
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <vPortSetupTimerInterrupt+0x30>)
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <vPortSetupTimerInterrupt+0x34>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800416c:	4b09      	ldr	r3, [pc, #36]	; (8004194 <vPortSetupTimerInterrupt+0x38>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a09      	ldr	r2, [pc, #36]	; (8004198 <vPortSetupTimerInterrupt+0x3c>)
 8004172:	fba2 2303 	umull	r2, r3, r2, r3
 8004176:	099b      	lsrs	r3, r3, #6
 8004178:	4a08      	ldr	r2, [pc, #32]	; (800419c <vPortSetupTimerInterrupt+0x40>)
 800417a:	3b01      	subs	r3, #1
 800417c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800417e:	4b03      	ldr	r3, [pc, #12]	; (800418c <vPortSetupTimerInterrupt+0x30>)
 8004180:	2207      	movs	r2, #7
 8004182:	601a      	str	r2, [r3, #0]
}
 8004184:	bf00      	nop
 8004186:	46bd      	mov	sp, r7
 8004188:	bc80      	pop	{r7}
 800418a:	4770      	bx	lr
 800418c:	e000e010 	.word	0xe000e010
 8004190:	e000e018 	.word	0xe000e018
 8004194:	200000a0 	.word	0x200000a0
 8004198:	10624dd3 	.word	0x10624dd3
 800419c:	e000e014 	.word	0xe000e014

080041a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041ac:	f7ff fb24 	bl	80037f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041b0:	4b58      	ldr	r3, [pc, #352]	; (8004314 <pvPortMalloc+0x174>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041b8:	f000 f910 	bl	80043dc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041bc:	4b56      	ldr	r3, [pc, #344]	; (8004318 <pvPortMalloc+0x178>)
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4013      	ands	r3, r2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f040 808e 	bne.w	80042e6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01d      	beq.n	800420c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041d0:	2208      	movs	r2, #8
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d014      	beq.n	800420c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f023 0307 	bic.w	r3, r3, #7
 80041e8:	3308      	adds	r3, #8
 80041ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <pvPortMalloc+0x6c>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	617b      	str	r3, [r7, #20]
}
 8004208:	bf00      	nop
 800420a:	e7fe      	b.n	800420a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d069      	beq.n	80042e6 <pvPortMalloc+0x146>
 8004212:	4b42      	ldr	r3, [pc, #264]	; (800431c <pvPortMalloc+0x17c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	429a      	cmp	r2, r3
 800421a:	d864      	bhi.n	80042e6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800421c:	4b40      	ldr	r3, [pc, #256]	; (8004320 <pvPortMalloc+0x180>)
 800421e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004220:	4b3f      	ldr	r3, [pc, #252]	; (8004320 <pvPortMalloc+0x180>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004226:	e004      	b.n	8004232 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	429a      	cmp	r2, r3
 800423a:	d903      	bls.n	8004244 <pvPortMalloc+0xa4>
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1f1      	bne.n	8004228 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004244:	4b33      	ldr	r3, [pc, #204]	; (8004314 <pvPortMalloc+0x174>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800424a:	429a      	cmp	r2, r3
 800424c:	d04b      	beq.n	80042e6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2208      	movs	r2, #8
 8004254:	4413      	add	r3, r2
 8004256:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	685a      	ldr	r2, [r3, #4]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	1ad2      	subs	r2, r2, r3
 8004268:	2308      	movs	r3, #8
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	429a      	cmp	r2, r3
 800426e:	d91f      	bls.n	80042b0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4413      	add	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <pvPortMalloc+0xf8>
	__asm volatile
 8004282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004286:	f383 8811 	msr	BASEPRI, r3
 800428a:	f3bf 8f6f 	isb	sy
 800428e:	f3bf 8f4f 	dsb	sy
 8004292:	613b      	str	r3, [r7, #16]
}
 8004294:	bf00      	nop
 8004296:	e7fe      	b.n	8004296 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	1ad2      	subs	r2, r2, r3
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042aa:	69b8      	ldr	r0, [r7, #24]
 80042ac:	f000 f8f8 	bl	80044a0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042b0:	4b1a      	ldr	r3, [pc, #104]	; (800431c <pvPortMalloc+0x17c>)
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	4a18      	ldr	r2, [pc, #96]	; (800431c <pvPortMalloc+0x17c>)
 80042bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <pvPortMalloc+0x17c>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b18      	ldr	r3, [pc, #96]	; (8004324 <pvPortMalloc+0x184>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d203      	bcs.n	80042d2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <pvPortMalloc+0x17c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a15      	ldr	r2, [pc, #84]	; (8004324 <pvPortMalloc+0x184>)
 80042d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	4b10      	ldr	r3, [pc, #64]	; (8004318 <pvPortMalloc+0x178>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	431a      	orrs	r2, r3
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042e6:	f7ff fa95 	bl	8003814 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	f003 0307 	and.w	r3, r3, #7
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <pvPortMalloc+0x16a>
	__asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	60fb      	str	r3, [r7, #12]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <pvPortMalloc+0x168>
	return pvReturn;
 800430a:	69fb      	ldr	r3, [r7, #28]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3728      	adds	r7, #40	; 0x28
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	200012e0 	.word	0x200012e0
 8004318:	200012ec 	.word	0x200012ec
 800431c:	200012e4 	.word	0x200012e4
 8004320:	200012d8 	.word	0x200012d8
 8004324:	200012e8 	.word	0x200012e8

08004328 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d048      	beq.n	80043cc <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800433a:	2308      	movs	r3, #8
 800433c:	425b      	negs	r3, r3
 800433e:	697a      	ldr	r2, [r7, #20]
 8004340:	4413      	add	r3, r2
 8004342:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	685a      	ldr	r2, [r3, #4]
 800434c:	4b21      	ldr	r3, [pc, #132]	; (80043d4 <vPortFree+0xac>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4013      	ands	r3, r2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <vPortFree+0x44>
	__asm volatile
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	60fb      	str	r3, [r7, #12]
}
 8004368:	bf00      	nop
 800436a:	e7fe      	b.n	800436a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00a      	beq.n	800438a <vPortFree+0x62>
	__asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	60bb      	str	r3, [r7, #8]
}
 8004386:	bf00      	nop
 8004388:	e7fe      	b.n	8004388 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	4b11      	ldr	r3, [pc, #68]	; (80043d4 <vPortFree+0xac>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4013      	ands	r3, r2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d019      	beq.n	80043cc <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d115      	bne.n	80043cc <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <vPortFree+0xac>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	401a      	ands	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043b0:	f7ff fa22 	bl	80037f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	4b07      	ldr	r3, [pc, #28]	; (80043d8 <vPortFree+0xb0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4413      	add	r3, r2
 80043be:	4a06      	ldr	r2, [pc, #24]	; (80043d8 <vPortFree+0xb0>)
 80043c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043c2:	6938      	ldr	r0, [r7, #16]
 80043c4:	f000 f86c 	bl	80044a0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80043c8:	f7ff fa24 	bl	8003814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043cc:	bf00      	nop
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	200012ec 	.word	0x200012ec
 80043d8:	200012e4 	.word	0x200012e4

080043dc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043e6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043e8:	4b27      	ldr	r3, [pc, #156]	; (8004488 <prvHeapInit+0xac>)
 80043ea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00c      	beq.n	8004410 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3307      	adds	r3, #7
 80043fa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0307 	bic.w	r3, r3, #7
 8004402:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <prvHeapInit+0xac>)
 800440c:	4413      	add	r3, r2
 800440e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004414:	4a1d      	ldr	r2, [pc, #116]	; (800448c <prvHeapInit+0xb0>)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800441a:	4b1c      	ldr	r3, [pc, #112]	; (800448c <prvHeapInit+0xb0>)
 800441c:	2200      	movs	r2, #0
 800441e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	4413      	add	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004428:	2208      	movs	r2, #8
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f023 0307 	bic.w	r3, r3, #7
 8004436:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <prvHeapInit+0xb4>)
 800443c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800443e:	4b14      	ldr	r3, [pc, #80]	; (8004490 <prvHeapInit+0xb4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2200      	movs	r2, #0
 8004444:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004446:	4b12      	ldr	r3, [pc, #72]	; (8004490 <prvHeapInit+0xb4>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	1ad2      	subs	r2, r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <prvHeapInit+0xb4>)
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <prvHeapInit+0xb8>)
 800446a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a09      	ldr	r2, [pc, #36]	; (8004498 <prvHeapInit+0xbc>)
 8004472:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004474:	4b09      	ldr	r3, [pc, #36]	; (800449c <prvHeapInit+0xc0>)
 8004476:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800447a:	601a      	str	r2, [r3, #0]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	200006d8 	.word	0x200006d8
 800448c:	200012d8 	.word	0x200012d8
 8004490:	200012e0 	.word	0x200012e0
 8004494:	200012e8 	.word	0x200012e8
 8004498:	200012e4 	.word	0x200012e4
 800449c:	200012ec 	.word	0x200012ec

080044a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044a8:	4b27      	ldr	r3, [pc, #156]	; (8004548 <prvInsertBlockIntoFreeList+0xa8>)
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	e002      	b.n	80044b4 <prvInsertBlockIntoFreeList+0x14>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d8f7      	bhi.n	80044ae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	4413      	add	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d108      	bne.n	80044e2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	441a      	add	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	441a      	add	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d118      	bne.n	8004528 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	4b14      	ldr	r3, [pc, #80]	; (800454c <prvInsertBlockIntoFreeList+0xac>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d00d      	beq.n	800451e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	441a      	add	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e008      	b.n	8004530 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <prvInsertBlockIntoFreeList+0xac>)
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e003      	b.n	8004530 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004530:	68fa      	ldr	r2, [r7, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	429a      	cmp	r2, r3
 8004536:	d002      	beq.n	800453e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	200012d8 	.word	0x200012d8
 800454c:	200012e0 	.word	0x200012e0

08004550 <GPRMS_Analyze>:
uint8_t buffer[50];
uint8_t raw_buff[] = {0, 0, 0, 0, 0, 0, 0, 0, 0x0A};


void GPRMS_Analyze(uint8_t *Data_from_GPS) /* */
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b08c      	sub	sp, #48	; 0x30
 8004554:	af0a      	add	r7, sp, #40	; 0x28
 8004556:	6078      	str	r0, [r7, #4]
      sscanf (Data_from_GPS, "$GPRMC,%f,%c,%f,%c,%f,%c,%f,%f,%d,,,%c*%X",
 8004558:	4b0d      	ldr	r3, [pc, #52]	; (8004590 <GPRMS_Analyze+0x40>)
 800455a:	9308      	str	r3, [sp, #32]
 800455c:	4b0d      	ldr	r3, [pc, #52]	; (8004594 <GPRMS_Analyze+0x44>)
 800455e:	9307      	str	r3, [sp, #28]
 8004560:	4b0d      	ldr	r3, [pc, #52]	; (8004598 <GPRMS_Analyze+0x48>)
 8004562:	9306      	str	r3, [sp, #24]
 8004564:	4b0d      	ldr	r3, [pc, #52]	; (800459c <GPRMS_Analyze+0x4c>)
 8004566:	9305      	str	r3, [sp, #20]
 8004568:	4b0d      	ldr	r3, [pc, #52]	; (80045a0 <GPRMS_Analyze+0x50>)
 800456a:	9304      	str	r3, [sp, #16]
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <GPRMS_Analyze+0x54>)
 800456e:	9303      	str	r3, [sp, #12]
 8004570:	4b0d      	ldr	r3, [pc, #52]	; (80045a8 <GPRMS_Analyze+0x58>)
 8004572:	9302      	str	r3, [sp, #8]
 8004574:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <GPRMS_Analyze+0x5c>)
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <GPRMS_Analyze+0x60>)
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <GPRMS_Analyze+0x64>)
 800457e:	4a0e      	ldr	r2, [pc, #56]	; (80045b8 <GPRMS_Analyze+0x68>)
 8004580:	490e      	ldr	r1, [pc, #56]	; (80045bc <GPRMS_Analyze+0x6c>)
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 ffc2 	bl	800550c <siscanf>
              &courseOverGround,
              &date,
              &mode,
              &CheckSum
              );
}
 8004588:	bf00      	nop
 800458a:	3708      	adds	r7, #8
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	20001454 	.word	0x20001454
 8004594:	20001414 	.word	0x20001414
 8004598:	2000145c 	.word	0x2000145c
 800459c:	20001474 	.word	0x20001474
 80045a0:	20001410 	.word	0x20001410
 80045a4:	20001478 	.word	0x20001478
 80045a8:	20001450 	.word	0x20001450
 80045ac:	20001460 	.word	0x20001460
 80045b0:	20001458 	.word	0x20001458
 80045b4:	20001470 	.word	0x20001470
 80045b8:	20001418 	.word	0x20001418
 80045bc:	080098c4 	.word	0x080098c4

080045c0 <raw_data_packet>:

	return buffer;
}

uint8_t* raw_data_packet(uint8_t *size)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b088      	sub	sp, #32
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	double fractpart = 0, intpart = 0;
 80045c8:	f04f 0200 	mov.w	r2, #0
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t tdata = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]

	fractpart = modf((double) latitude, &intpart);
 80045e4:	4b36      	ldr	r3, [pc, #216]	; (80046c0 <raw_data_packet+0x100>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7fb ff1d 	bl	8000428 <__aeabi_f2d>
 80045ee:	f107 0308 	add.w	r3, r7, #8
 80045f2:	461a      	mov	r2, r3
 80045f4:	f000 f86a 	bl	80046cc <modf>
 80045f8:	e9c7 0106 	strd	r0, r1, [r7, #24]
	fractpart *= 100000;
 80045fc:	a32e      	add	r3, pc, #184	; (adr r3, 80046b8 <raw_data_packet+0xf8>)
 80045fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004602:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004606:	f7fb ff67 	bl	80004d8 <__aeabi_dmul>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tdata = (uint32_t) fractpart;
 8004612:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004616:	f7fc fa37 	bl	8000a88 <__aeabi_d2uiz>
 800461a:	4603      	mov	r3, r0
 800461c:	617b      	str	r3, [r7, #20]
	raw_buff[3] = (uint8_t) tdata;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	b2da      	uxtb	r2, r3
 8004622:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <raw_data_packet+0x104>)
 8004624:	70da      	strb	r2, [r3, #3]
	raw_buff[2] = (uint8_t) (tdata >> 8);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	b2da      	uxtb	r2, r3
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <raw_data_packet+0x104>)
 800462e:	709a      	strb	r2, [r3, #2]
	raw_buff[1] = (uint8_t) (tdata >> 16);
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	0c1b      	lsrs	r3, r3, #16
 8004634:	b2da      	uxtb	r2, r3
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <raw_data_packet+0x104>)
 8004638:	705a      	strb	r2, [r3, #1]
	raw_buff[0] = (uint8_t) (tdata >> 24);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	0e1b      	lsrs	r3, r3, #24
 800463e:	b2da      	uxtb	r2, r3
 8004640:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <raw_data_packet+0x104>)
 8004642:	701a      	strb	r2, [r3, #0]

	fractpart = modf((double) longitude, &intpart);
 8004644:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <raw_data_packet+0x108>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4618      	mov	r0, r3
 800464a:	f7fb feed 	bl	8000428 <__aeabi_f2d>
 800464e:	f107 0308 	add.w	r3, r7, #8
 8004652:	461a      	mov	r2, r3
 8004654:	f000 f83a 	bl	80046cc <modf>
 8004658:	e9c7 0106 	strd	r0, r1, [r7, #24]
	fractpart *= 100000;
 800465c:	a316      	add	r3, pc, #88	; (adr r3, 80046b8 <raw_data_packet+0xf8>)
 800465e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004662:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004666:	f7fb ff37 	bl	80004d8 <__aeabi_dmul>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	tdata = (uint32_t) fractpart;
 8004672:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004676:	f7fc fa07 	bl	8000a88 <__aeabi_d2uiz>
 800467a:	4603      	mov	r3, r0
 800467c:	617b      	str	r3, [r7, #20]
	raw_buff[7] = (uint8_t) tdata;
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	b2da      	uxtb	r2, r3
 8004682:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <raw_data_packet+0x104>)
 8004684:	71da      	strb	r2, [r3, #7]
	raw_buff[6] = (uint8_t) (tdata >> 8);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	0a1b      	lsrs	r3, r3, #8
 800468a:	b2da      	uxtb	r2, r3
 800468c:	4b0d      	ldr	r3, [pc, #52]	; (80046c4 <raw_data_packet+0x104>)
 800468e:	719a      	strb	r2, [r3, #6]
	raw_buff[5] = (uint8_t) (tdata >> 16);
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	0c1b      	lsrs	r3, r3, #16
 8004694:	b2da      	uxtb	r2, r3
 8004696:	4b0b      	ldr	r3, [pc, #44]	; (80046c4 <raw_data_packet+0x104>)
 8004698:	715a      	strb	r2, [r3, #5]
	raw_buff[4] = (uint8_t) (tdata >> 24);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	0e1b      	lsrs	r3, r3, #24
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	4b08      	ldr	r3, [pc, #32]	; (80046c4 <raw_data_packet+0x104>)
 80046a2:	711a      	strb	r2, [r3, #4]

	*size = sizeof(raw_buff) / sizeof(raw_buff[0]);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2209      	movs	r2, #9
 80046a8:	701a      	strb	r2, [r3, #0]

	return raw_buff;
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <raw_data_packet+0x104>)
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	3720      	adds	r7, #32
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	f3af 8000 	nop.w
 80046b8:	00000000 	.word	0x00000000
 80046bc:	40f86a00 	.word	0x40f86a00
 80046c0:	20001458 	.word	0x20001458
 80046c4:	200000b0 	.word	0x200000b0
 80046c8:	20001450 	.word	0x20001450

080046cc <modf>:
 80046cc:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 80046d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046d2:	4615      	mov	r5, r2
 80046d4:	f2ac 32ff 	subw	r2, ip, #1023	; 0x3ff
 80046d8:	2a13      	cmp	r2, #19
 80046da:	4686      	mov	lr, r0
 80046dc:	460b      	mov	r3, r1
 80046de:	dc21      	bgt.n	8004724 <modf+0x58>
 80046e0:	2a00      	cmp	r2, #0
 80046e2:	da07      	bge.n	80046f4 <modf+0x28>
 80046e4:	2000      	movs	r0, #0
 80046e6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80046ea:	e9c5 0100 	strd	r0, r1, [r5]
 80046ee:	4670      	mov	r0, lr
 80046f0:	4619      	mov	r1, r3
 80046f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046f4:	f8df c064 	ldr.w	ip, [pc, #100]	; 800475c <modf+0x90>
 80046f8:	fa4c fc02 	asr.w	ip, ip, r2
 80046fc:	ea01 020c 	and.w	r2, r1, ip
 8004700:	ea52 0700 	orrs.w	r7, r2, r0
 8004704:	d106      	bne.n	8004714 <modf+0x48>
 8004706:	463a      	mov	r2, r7
 8004708:	e9c5 0100 	strd	r0, r1, [r5]
 800470c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004710:	4696      	mov	lr, r2
 8004712:	e7ec      	b.n	80046ee <modf+0x22>
 8004714:	2200      	movs	r2, #0
 8004716:	ea21 030c 	bic.w	r3, r1, ip
 800471a:	e9c5 2300 	strd	r2, r3, [r5]
 800471e:	f7fb fd23 	bl	8000168 <__aeabi_dsub>
 8004722:	e015      	b.n	8004750 <modf+0x84>
 8004724:	2a33      	cmp	r2, #51	; 0x33
 8004726:	dd05      	ble.n	8004734 <modf+0x68>
 8004728:	2200      	movs	r2, #0
 800472a:	e9c5 0100 	strd	r0, r1, [r5]
 800472e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8004732:	e7ed      	b.n	8004710 <modf+0x44>
 8004734:	f2ac 4213 	subw	r2, ip, #1043	; 0x413
 8004738:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800473c:	fa2c fc02 	lsr.w	ip, ip, r2
 8004740:	ea1c 0200 	ands.w	r2, ip, r0
 8004744:	d107      	bne.n	8004756 <modf+0x8a>
 8004746:	e9c5 0100 	strd	r0, r1, [r5]
 800474a:	4610      	mov	r0, r2
 800474c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004750:	4686      	mov	lr, r0
 8004752:	460b      	mov	r3, r1
 8004754:	e7cb      	b.n	80046ee <modf+0x22>
 8004756:	ea20 020c 	bic.w	r2, r0, ip
 800475a:	e7de      	b.n	800471a <modf+0x4e>
 800475c:	000fffff 	.word	0x000fffff

08004760 <__errno>:
 8004760:	4b01      	ldr	r3, [pc, #4]	; (8004768 <__errno+0x8>)
 8004762:	6818      	ldr	r0, [r3, #0]
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	200000bc 	.word	0x200000bc

0800476c <__libc_init_array>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	2600      	movs	r6, #0
 8004770:	4d0c      	ldr	r5, [pc, #48]	; (80047a4 <__libc_init_array+0x38>)
 8004772:	4c0d      	ldr	r4, [pc, #52]	; (80047a8 <__libc_init_array+0x3c>)
 8004774:	1b64      	subs	r4, r4, r5
 8004776:	10a4      	asrs	r4, r4, #2
 8004778:	42a6      	cmp	r6, r4
 800477a:	d109      	bne.n	8004790 <__libc_init_array+0x24>
 800477c:	f005 f864 	bl	8009848 <_init>
 8004780:	2600      	movs	r6, #0
 8004782:	4d0a      	ldr	r5, [pc, #40]	; (80047ac <__libc_init_array+0x40>)
 8004784:	4c0a      	ldr	r4, [pc, #40]	; (80047b0 <__libc_init_array+0x44>)
 8004786:	1b64      	subs	r4, r4, r5
 8004788:	10a4      	asrs	r4, r4, #2
 800478a:	42a6      	cmp	r6, r4
 800478c:	d105      	bne.n	800479a <__libc_init_array+0x2e>
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	f855 3b04 	ldr.w	r3, [r5], #4
 8004794:	4798      	blx	r3
 8004796:	3601      	adds	r6, #1
 8004798:	e7ee      	b.n	8004778 <__libc_init_array+0xc>
 800479a:	f855 3b04 	ldr.w	r3, [r5], #4
 800479e:	4798      	blx	r3
 80047a0:	3601      	adds	r6, #1
 80047a2:	e7f2      	b.n	800478a <__libc_init_array+0x1e>
 80047a4:	08009df4 	.word	0x08009df4
 80047a8:	08009df4 	.word	0x08009df4
 80047ac:	08009df4 	.word	0x08009df4
 80047b0:	08009df8 	.word	0x08009df8

080047b4 <memcpy>:
 80047b4:	440a      	add	r2, r1
 80047b6:	4291      	cmp	r1, r2
 80047b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80047bc:	d100      	bne.n	80047c0 <memcpy+0xc>
 80047be:	4770      	bx	lr
 80047c0:	b510      	push	{r4, lr}
 80047c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047c6:	4291      	cmp	r1, r2
 80047c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047cc:	d1f9      	bne.n	80047c2 <memcpy+0xe>
 80047ce:	bd10      	pop	{r4, pc}

080047d0 <memset>:
 80047d0:	4603      	mov	r3, r0
 80047d2:	4402      	add	r2, r0
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d100      	bne.n	80047da <memset+0xa>
 80047d8:	4770      	bx	lr
 80047da:	f803 1b01 	strb.w	r1, [r3], #1
 80047de:	e7f9      	b.n	80047d4 <memset+0x4>

080047e0 <__cvt>:
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047e6:	461f      	mov	r7, r3
 80047e8:	bfbb      	ittet	lt
 80047ea:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80047ee:	461f      	movlt	r7, r3
 80047f0:	2300      	movge	r3, #0
 80047f2:	232d      	movlt	r3, #45	; 0x2d
 80047f4:	b088      	sub	sp, #32
 80047f6:	4614      	mov	r4, r2
 80047f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80047fa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80047fc:	7013      	strb	r3, [r2, #0]
 80047fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004800:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004804:	f023 0820 	bic.w	r8, r3, #32
 8004808:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800480c:	d005      	beq.n	800481a <__cvt+0x3a>
 800480e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004812:	d100      	bne.n	8004816 <__cvt+0x36>
 8004814:	3501      	adds	r5, #1
 8004816:	2302      	movs	r3, #2
 8004818:	e000      	b.n	800481c <__cvt+0x3c>
 800481a:	2303      	movs	r3, #3
 800481c:	aa07      	add	r2, sp, #28
 800481e:	9204      	str	r2, [sp, #16]
 8004820:	aa06      	add	r2, sp, #24
 8004822:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004826:	e9cd 3500 	strd	r3, r5, [sp]
 800482a:	4622      	mov	r2, r4
 800482c:	463b      	mov	r3, r7
 800482e:	f001 fe33 	bl	8006498 <_dtoa_r>
 8004832:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004836:	4606      	mov	r6, r0
 8004838:	d102      	bne.n	8004840 <__cvt+0x60>
 800483a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800483c:	07db      	lsls	r3, r3, #31
 800483e:	d522      	bpl.n	8004886 <__cvt+0xa6>
 8004840:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004844:	eb06 0905 	add.w	r9, r6, r5
 8004848:	d110      	bne.n	800486c <__cvt+0x8c>
 800484a:	7833      	ldrb	r3, [r6, #0]
 800484c:	2b30      	cmp	r3, #48	; 0x30
 800484e:	d10a      	bne.n	8004866 <__cvt+0x86>
 8004850:	2200      	movs	r2, #0
 8004852:	2300      	movs	r3, #0
 8004854:	4620      	mov	r0, r4
 8004856:	4639      	mov	r1, r7
 8004858:	f7fc f8a6 	bl	80009a8 <__aeabi_dcmpeq>
 800485c:	b918      	cbnz	r0, 8004866 <__cvt+0x86>
 800485e:	f1c5 0501 	rsb	r5, r5, #1
 8004862:	f8ca 5000 	str.w	r5, [sl]
 8004866:	f8da 3000 	ldr.w	r3, [sl]
 800486a:	4499      	add	r9, r3
 800486c:	2200      	movs	r2, #0
 800486e:	2300      	movs	r3, #0
 8004870:	4620      	mov	r0, r4
 8004872:	4639      	mov	r1, r7
 8004874:	f7fc f898 	bl	80009a8 <__aeabi_dcmpeq>
 8004878:	b108      	cbz	r0, 800487e <__cvt+0x9e>
 800487a:	f8cd 901c 	str.w	r9, [sp, #28]
 800487e:	2230      	movs	r2, #48	; 0x30
 8004880:	9b07      	ldr	r3, [sp, #28]
 8004882:	454b      	cmp	r3, r9
 8004884:	d307      	bcc.n	8004896 <__cvt+0xb6>
 8004886:	4630      	mov	r0, r6
 8004888:	9b07      	ldr	r3, [sp, #28]
 800488a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800488c:	1b9b      	subs	r3, r3, r6
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	b008      	add	sp, #32
 8004892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	9107      	str	r1, [sp, #28]
 800489a:	701a      	strb	r2, [r3, #0]
 800489c:	e7f0      	b.n	8004880 <__cvt+0xa0>

0800489e <__exponent>:
 800489e:	4603      	mov	r3, r0
 80048a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048a2:	2900      	cmp	r1, #0
 80048a4:	f803 2b02 	strb.w	r2, [r3], #2
 80048a8:	bfb6      	itet	lt
 80048aa:	222d      	movlt	r2, #45	; 0x2d
 80048ac:	222b      	movge	r2, #43	; 0x2b
 80048ae:	4249      	neglt	r1, r1
 80048b0:	2909      	cmp	r1, #9
 80048b2:	7042      	strb	r2, [r0, #1]
 80048b4:	dd2b      	ble.n	800490e <__exponent+0x70>
 80048b6:	f10d 0407 	add.w	r4, sp, #7
 80048ba:	46a4      	mov	ip, r4
 80048bc:	270a      	movs	r7, #10
 80048be:	fb91 f6f7 	sdiv	r6, r1, r7
 80048c2:	460a      	mov	r2, r1
 80048c4:	46a6      	mov	lr, r4
 80048c6:	fb07 1516 	mls	r5, r7, r6, r1
 80048ca:	2a63      	cmp	r2, #99	; 0x63
 80048cc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80048d0:	4631      	mov	r1, r6
 80048d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80048d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80048da:	dcf0      	bgt.n	80048be <__exponent+0x20>
 80048dc:	3130      	adds	r1, #48	; 0x30
 80048de:	f1ae 0502 	sub.w	r5, lr, #2
 80048e2:	f804 1c01 	strb.w	r1, [r4, #-1]
 80048e6:	4629      	mov	r1, r5
 80048e8:	1c44      	adds	r4, r0, #1
 80048ea:	4561      	cmp	r1, ip
 80048ec:	d30a      	bcc.n	8004904 <__exponent+0x66>
 80048ee:	f10d 0209 	add.w	r2, sp, #9
 80048f2:	eba2 020e 	sub.w	r2, r2, lr
 80048f6:	4565      	cmp	r5, ip
 80048f8:	bf88      	it	hi
 80048fa:	2200      	movhi	r2, #0
 80048fc:	4413      	add	r3, r2
 80048fe:	1a18      	subs	r0, r3, r0
 8004900:	b003      	add	sp, #12
 8004902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004904:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004908:	f804 2f01 	strb.w	r2, [r4, #1]!
 800490c:	e7ed      	b.n	80048ea <__exponent+0x4c>
 800490e:	2330      	movs	r3, #48	; 0x30
 8004910:	3130      	adds	r1, #48	; 0x30
 8004912:	7083      	strb	r3, [r0, #2]
 8004914:	70c1      	strb	r1, [r0, #3]
 8004916:	1d03      	adds	r3, r0, #4
 8004918:	e7f1      	b.n	80048fe <__exponent+0x60>
	...

0800491c <_printf_float>:
 800491c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004920:	b091      	sub	sp, #68	; 0x44
 8004922:	460c      	mov	r4, r1
 8004924:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004928:	4616      	mov	r6, r2
 800492a:	461f      	mov	r7, r3
 800492c:	4605      	mov	r5, r0
 800492e:	f002 ff07 	bl	8007740 <_localeconv_r>
 8004932:	6803      	ldr	r3, [r0, #0]
 8004934:	4618      	mov	r0, r3
 8004936:	9309      	str	r3, [sp, #36]	; 0x24
 8004938:	f7fb fc0a 	bl	8000150 <strlen>
 800493c:	2300      	movs	r3, #0
 800493e:	930e      	str	r3, [sp, #56]	; 0x38
 8004940:	f8d8 3000 	ldr.w	r3, [r8]
 8004944:	900a      	str	r0, [sp, #40]	; 0x28
 8004946:	3307      	adds	r3, #7
 8004948:	f023 0307 	bic.w	r3, r3, #7
 800494c:	f103 0208 	add.w	r2, r3, #8
 8004950:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004954:	f8d4 b000 	ldr.w	fp, [r4]
 8004958:	f8c8 2000 	str.w	r2, [r8]
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004964:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004968:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800496c:	930b      	str	r3, [sp, #44]	; 0x2c
 800496e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004972:	4640      	mov	r0, r8
 8004974:	4b9c      	ldr	r3, [pc, #624]	; (8004be8 <_printf_float+0x2cc>)
 8004976:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004978:	f7fc f848 	bl	8000a0c <__aeabi_dcmpun>
 800497c:	bb70      	cbnz	r0, 80049dc <_printf_float+0xc0>
 800497e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004982:	4640      	mov	r0, r8
 8004984:	4b98      	ldr	r3, [pc, #608]	; (8004be8 <_printf_float+0x2cc>)
 8004986:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004988:	f7fc f822 	bl	80009d0 <__aeabi_dcmple>
 800498c:	bb30      	cbnz	r0, 80049dc <_printf_float+0xc0>
 800498e:	2200      	movs	r2, #0
 8004990:	2300      	movs	r3, #0
 8004992:	4640      	mov	r0, r8
 8004994:	4651      	mov	r1, sl
 8004996:	f7fc f811 	bl	80009bc <__aeabi_dcmplt>
 800499a:	b110      	cbz	r0, 80049a2 <_printf_float+0x86>
 800499c:	232d      	movs	r3, #45	; 0x2d
 800499e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049a2:	4b92      	ldr	r3, [pc, #584]	; (8004bec <_printf_float+0x2d0>)
 80049a4:	4892      	ldr	r0, [pc, #584]	; (8004bf0 <_printf_float+0x2d4>)
 80049a6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80049aa:	bf94      	ite	ls
 80049ac:	4698      	movls	r8, r3
 80049ae:	4680      	movhi	r8, r0
 80049b0:	2303      	movs	r3, #3
 80049b2:	f04f 0a00 	mov.w	sl, #0
 80049b6:	6123      	str	r3, [r4, #16]
 80049b8:	f02b 0304 	bic.w	r3, fp, #4
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	4633      	mov	r3, r6
 80049c0:	4621      	mov	r1, r4
 80049c2:	4628      	mov	r0, r5
 80049c4:	9700      	str	r7, [sp, #0]
 80049c6:	aa0f      	add	r2, sp, #60	; 0x3c
 80049c8:	f000 f9d4 	bl	8004d74 <_printf_common>
 80049cc:	3001      	adds	r0, #1
 80049ce:	f040 8090 	bne.w	8004af2 <_printf_float+0x1d6>
 80049d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049d6:	b011      	add	sp, #68	; 0x44
 80049d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049dc:	4642      	mov	r2, r8
 80049de:	4653      	mov	r3, sl
 80049e0:	4640      	mov	r0, r8
 80049e2:	4651      	mov	r1, sl
 80049e4:	f7fc f812 	bl	8000a0c <__aeabi_dcmpun>
 80049e8:	b148      	cbz	r0, 80049fe <_printf_float+0xe2>
 80049ea:	f1ba 0f00 	cmp.w	sl, #0
 80049ee:	bfb8      	it	lt
 80049f0:	232d      	movlt	r3, #45	; 0x2d
 80049f2:	4880      	ldr	r0, [pc, #512]	; (8004bf4 <_printf_float+0x2d8>)
 80049f4:	bfb8      	it	lt
 80049f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80049fa:	4b7f      	ldr	r3, [pc, #508]	; (8004bf8 <_printf_float+0x2dc>)
 80049fc:	e7d3      	b.n	80049a6 <_printf_float+0x8a>
 80049fe:	6863      	ldr	r3, [r4, #4]
 8004a00:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004a04:	1c5a      	adds	r2, r3, #1
 8004a06:	d142      	bne.n	8004a8e <_printf_float+0x172>
 8004a08:	2306      	movs	r3, #6
 8004a0a:	6063      	str	r3, [r4, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	9206      	str	r2, [sp, #24]
 8004a10:	aa0e      	add	r2, sp, #56	; 0x38
 8004a12:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004a16:	aa0d      	add	r2, sp, #52	; 0x34
 8004a18:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004a1c:	9203      	str	r2, [sp, #12]
 8004a1e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004a22:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004a26:	6023      	str	r3, [r4, #0]
 8004a28:	6863      	ldr	r3, [r4, #4]
 8004a2a:	4642      	mov	r2, r8
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4628      	mov	r0, r5
 8004a30:	4653      	mov	r3, sl
 8004a32:	910b      	str	r1, [sp, #44]	; 0x2c
 8004a34:	f7ff fed4 	bl	80047e0 <__cvt>
 8004a38:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a3a:	4680      	mov	r8, r0
 8004a3c:	2947      	cmp	r1, #71	; 0x47
 8004a3e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004a40:	d108      	bne.n	8004a54 <_printf_float+0x138>
 8004a42:	1cc8      	adds	r0, r1, #3
 8004a44:	db02      	blt.n	8004a4c <_printf_float+0x130>
 8004a46:	6863      	ldr	r3, [r4, #4]
 8004a48:	4299      	cmp	r1, r3
 8004a4a:	dd40      	ble.n	8004ace <_printf_float+0x1b2>
 8004a4c:	f1a9 0902 	sub.w	r9, r9, #2
 8004a50:	fa5f f989 	uxtb.w	r9, r9
 8004a54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004a58:	d81f      	bhi.n	8004a9a <_printf_float+0x17e>
 8004a5a:	464a      	mov	r2, r9
 8004a5c:	3901      	subs	r1, #1
 8004a5e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004a62:	910d      	str	r1, [sp, #52]	; 0x34
 8004a64:	f7ff ff1b 	bl	800489e <__exponent>
 8004a68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a6a:	4682      	mov	sl, r0
 8004a6c:	1813      	adds	r3, r2, r0
 8004a6e:	2a01      	cmp	r2, #1
 8004a70:	6123      	str	r3, [r4, #16]
 8004a72:	dc02      	bgt.n	8004a7a <_printf_float+0x15e>
 8004a74:	6822      	ldr	r2, [r4, #0]
 8004a76:	07d2      	lsls	r2, r2, #31
 8004a78:	d501      	bpl.n	8004a7e <_printf_float+0x162>
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	6123      	str	r3, [r4, #16]
 8004a7e:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d09b      	beq.n	80049be <_printf_float+0xa2>
 8004a86:	232d      	movs	r3, #45	; 0x2d
 8004a88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a8c:	e797      	b.n	80049be <_printf_float+0xa2>
 8004a8e:	2947      	cmp	r1, #71	; 0x47
 8004a90:	d1bc      	bne.n	8004a0c <_printf_float+0xf0>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1ba      	bne.n	8004a0c <_printf_float+0xf0>
 8004a96:	2301      	movs	r3, #1
 8004a98:	e7b7      	b.n	8004a0a <_printf_float+0xee>
 8004a9a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004a9e:	d118      	bne.n	8004ad2 <_printf_float+0x1b6>
 8004aa0:	2900      	cmp	r1, #0
 8004aa2:	6863      	ldr	r3, [r4, #4]
 8004aa4:	dd0b      	ble.n	8004abe <_printf_float+0x1a2>
 8004aa6:	6121      	str	r1, [r4, #16]
 8004aa8:	b913      	cbnz	r3, 8004ab0 <_printf_float+0x194>
 8004aaa:	6822      	ldr	r2, [r4, #0]
 8004aac:	07d0      	lsls	r0, r2, #31
 8004aae:	d502      	bpl.n	8004ab6 <_printf_float+0x19a>
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	440b      	add	r3, r1
 8004ab4:	6123      	str	r3, [r4, #16]
 8004ab6:	f04f 0a00 	mov.w	sl, #0
 8004aba:	65a1      	str	r1, [r4, #88]	; 0x58
 8004abc:	e7df      	b.n	8004a7e <_printf_float+0x162>
 8004abe:	b913      	cbnz	r3, 8004ac6 <_printf_float+0x1aa>
 8004ac0:	6822      	ldr	r2, [r4, #0]
 8004ac2:	07d2      	lsls	r2, r2, #31
 8004ac4:	d501      	bpl.n	8004aca <_printf_float+0x1ae>
 8004ac6:	3302      	adds	r3, #2
 8004ac8:	e7f4      	b.n	8004ab4 <_printf_float+0x198>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e7f2      	b.n	8004ab4 <_printf_float+0x198>
 8004ace:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004ad2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ad4:	4299      	cmp	r1, r3
 8004ad6:	db05      	blt.n	8004ae4 <_printf_float+0x1c8>
 8004ad8:	6823      	ldr	r3, [r4, #0]
 8004ada:	6121      	str	r1, [r4, #16]
 8004adc:	07d8      	lsls	r0, r3, #31
 8004ade:	d5ea      	bpl.n	8004ab6 <_printf_float+0x19a>
 8004ae0:	1c4b      	adds	r3, r1, #1
 8004ae2:	e7e7      	b.n	8004ab4 <_printf_float+0x198>
 8004ae4:	2900      	cmp	r1, #0
 8004ae6:	bfcc      	ite	gt
 8004ae8:	2201      	movgt	r2, #1
 8004aea:	f1c1 0202 	rsble	r2, r1, #2
 8004aee:	4413      	add	r3, r2
 8004af0:	e7e0      	b.n	8004ab4 <_printf_float+0x198>
 8004af2:	6823      	ldr	r3, [r4, #0]
 8004af4:	055a      	lsls	r2, r3, #21
 8004af6:	d407      	bmi.n	8004b08 <_printf_float+0x1ec>
 8004af8:	6923      	ldr	r3, [r4, #16]
 8004afa:	4642      	mov	r2, r8
 8004afc:	4631      	mov	r1, r6
 8004afe:	4628      	mov	r0, r5
 8004b00:	47b8      	blx	r7
 8004b02:	3001      	adds	r0, #1
 8004b04:	d12b      	bne.n	8004b5e <_printf_float+0x242>
 8004b06:	e764      	b.n	80049d2 <_printf_float+0xb6>
 8004b08:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004b0c:	f240 80dd 	bls.w	8004cca <_printf_float+0x3ae>
 8004b10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b14:	2200      	movs	r2, #0
 8004b16:	2300      	movs	r3, #0
 8004b18:	f7fb ff46 	bl	80009a8 <__aeabi_dcmpeq>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	d033      	beq.n	8004b88 <_printf_float+0x26c>
 8004b20:	2301      	movs	r3, #1
 8004b22:	4631      	mov	r1, r6
 8004b24:	4628      	mov	r0, r5
 8004b26:	4a35      	ldr	r2, [pc, #212]	; (8004bfc <_printf_float+0x2e0>)
 8004b28:	47b8      	blx	r7
 8004b2a:	3001      	adds	r0, #1
 8004b2c:	f43f af51 	beq.w	80049d2 <_printf_float+0xb6>
 8004b30:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004b34:	429a      	cmp	r2, r3
 8004b36:	db02      	blt.n	8004b3e <_printf_float+0x222>
 8004b38:	6823      	ldr	r3, [r4, #0]
 8004b3a:	07d8      	lsls	r0, r3, #31
 8004b3c:	d50f      	bpl.n	8004b5e <_printf_float+0x242>
 8004b3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b42:	4631      	mov	r1, r6
 8004b44:	4628      	mov	r0, r5
 8004b46:	47b8      	blx	r7
 8004b48:	3001      	adds	r0, #1
 8004b4a:	f43f af42 	beq.w	80049d2 <_printf_float+0xb6>
 8004b4e:	f04f 0800 	mov.w	r8, #0
 8004b52:	f104 091a 	add.w	r9, r4, #26
 8004b56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	4543      	cmp	r3, r8
 8004b5c:	dc09      	bgt.n	8004b72 <_printf_float+0x256>
 8004b5e:	6823      	ldr	r3, [r4, #0]
 8004b60:	079b      	lsls	r3, r3, #30
 8004b62:	f100 8102 	bmi.w	8004d6a <_printf_float+0x44e>
 8004b66:	68e0      	ldr	r0, [r4, #12]
 8004b68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b6a:	4298      	cmp	r0, r3
 8004b6c:	bfb8      	it	lt
 8004b6e:	4618      	movlt	r0, r3
 8004b70:	e731      	b.n	80049d6 <_printf_float+0xba>
 8004b72:	2301      	movs	r3, #1
 8004b74:	464a      	mov	r2, r9
 8004b76:	4631      	mov	r1, r6
 8004b78:	4628      	mov	r0, r5
 8004b7a:	47b8      	blx	r7
 8004b7c:	3001      	adds	r0, #1
 8004b7e:	f43f af28 	beq.w	80049d2 <_printf_float+0xb6>
 8004b82:	f108 0801 	add.w	r8, r8, #1
 8004b86:	e7e6      	b.n	8004b56 <_printf_float+0x23a>
 8004b88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	dc38      	bgt.n	8004c00 <_printf_float+0x2e4>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4631      	mov	r1, r6
 8004b92:	4628      	mov	r0, r5
 8004b94:	4a19      	ldr	r2, [pc, #100]	; (8004bfc <_printf_float+0x2e0>)
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f43f af1a 	beq.w	80049d2 <_printf_float+0xb6>
 8004b9e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	d102      	bne.n	8004bac <_printf_float+0x290>
 8004ba6:	6823      	ldr	r3, [r4, #0]
 8004ba8:	07d9      	lsls	r1, r3, #31
 8004baa:	d5d8      	bpl.n	8004b5e <_printf_float+0x242>
 8004bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bb0:	4631      	mov	r1, r6
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	47b8      	blx	r7
 8004bb6:	3001      	adds	r0, #1
 8004bb8:	f43f af0b 	beq.w	80049d2 <_printf_float+0xb6>
 8004bbc:	f04f 0900 	mov.w	r9, #0
 8004bc0:	f104 0a1a 	add.w	sl, r4, #26
 8004bc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bc6:	425b      	negs	r3, r3
 8004bc8:	454b      	cmp	r3, r9
 8004bca:	dc01      	bgt.n	8004bd0 <_printf_float+0x2b4>
 8004bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004bce:	e794      	b.n	8004afa <_printf_float+0x1de>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	4652      	mov	r2, sl
 8004bd4:	4631      	mov	r1, r6
 8004bd6:	4628      	mov	r0, r5
 8004bd8:	47b8      	blx	r7
 8004bda:	3001      	adds	r0, #1
 8004bdc:	f43f aef9 	beq.w	80049d2 <_printf_float+0xb6>
 8004be0:	f109 0901 	add.w	r9, r9, #1
 8004be4:	e7ee      	b.n	8004bc4 <_printf_float+0x2a8>
 8004be6:	bf00      	nop
 8004be8:	7fefffff 	.word	0x7fefffff
 8004bec:	08009930 	.word	0x08009930
 8004bf0:	08009934 	.word	0x08009934
 8004bf4:	0800993c 	.word	0x0800993c
 8004bf8:	08009938 	.word	0x08009938
 8004bfc:	08009d41 	.word	0x08009d41
 8004c00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c04:	429a      	cmp	r2, r3
 8004c06:	bfa8      	it	ge
 8004c08:	461a      	movge	r2, r3
 8004c0a:	2a00      	cmp	r2, #0
 8004c0c:	4691      	mov	r9, r2
 8004c0e:	dc37      	bgt.n	8004c80 <_printf_float+0x364>
 8004c10:	f04f 0b00 	mov.w	fp, #0
 8004c14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c18:	f104 021a 	add.w	r2, r4, #26
 8004c1c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004c20:	ebaa 0309 	sub.w	r3, sl, r9
 8004c24:	455b      	cmp	r3, fp
 8004c26:	dc33      	bgt.n	8004c90 <_printf_float+0x374>
 8004c28:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	db3b      	blt.n	8004ca8 <_printf_float+0x38c>
 8004c30:	6823      	ldr	r3, [r4, #0]
 8004c32:	07da      	lsls	r2, r3, #31
 8004c34:	d438      	bmi.n	8004ca8 <_printf_float+0x38c>
 8004c36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c38:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004c3a:	eba2 030a 	sub.w	r3, r2, sl
 8004c3e:	eba2 0901 	sub.w	r9, r2, r1
 8004c42:	4599      	cmp	r9, r3
 8004c44:	bfa8      	it	ge
 8004c46:	4699      	movge	r9, r3
 8004c48:	f1b9 0f00 	cmp.w	r9, #0
 8004c4c:	dc34      	bgt.n	8004cb8 <_printf_float+0x39c>
 8004c4e:	f04f 0800 	mov.w	r8, #0
 8004c52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c56:	f104 0a1a 	add.w	sl, r4, #26
 8004c5a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004c5e:	1a9b      	subs	r3, r3, r2
 8004c60:	eba3 0309 	sub.w	r3, r3, r9
 8004c64:	4543      	cmp	r3, r8
 8004c66:	f77f af7a 	ble.w	8004b5e <_printf_float+0x242>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	4652      	mov	r2, sl
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f aeac 	beq.w	80049d2 <_printf_float+0xb6>
 8004c7a:	f108 0801 	add.w	r8, r8, #1
 8004c7e:	e7ec      	b.n	8004c5a <_printf_float+0x33e>
 8004c80:	4613      	mov	r3, r2
 8004c82:	4631      	mov	r1, r6
 8004c84:	4642      	mov	r2, r8
 8004c86:	4628      	mov	r0, r5
 8004c88:	47b8      	blx	r7
 8004c8a:	3001      	adds	r0, #1
 8004c8c:	d1c0      	bne.n	8004c10 <_printf_float+0x2f4>
 8004c8e:	e6a0      	b.n	80049d2 <_printf_float+0xb6>
 8004c90:	2301      	movs	r3, #1
 8004c92:	4631      	mov	r1, r6
 8004c94:	4628      	mov	r0, r5
 8004c96:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c98:	47b8      	blx	r7
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	f43f ae99 	beq.w	80049d2 <_printf_float+0xb6>
 8004ca0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ca2:	f10b 0b01 	add.w	fp, fp, #1
 8004ca6:	e7b9      	b.n	8004c1c <_printf_float+0x300>
 8004ca8:	4631      	mov	r1, r6
 8004caa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cae:	4628      	mov	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	3001      	adds	r0, #1
 8004cb4:	d1bf      	bne.n	8004c36 <_printf_float+0x31a>
 8004cb6:	e68c      	b.n	80049d2 <_printf_float+0xb6>
 8004cb8:	464b      	mov	r3, r9
 8004cba:	4631      	mov	r1, r6
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	eb08 020a 	add.w	r2, r8, sl
 8004cc2:	47b8      	blx	r7
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	d1c2      	bne.n	8004c4e <_printf_float+0x332>
 8004cc8:	e683      	b.n	80049d2 <_printf_float+0xb6>
 8004cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ccc:	2a01      	cmp	r2, #1
 8004cce:	dc01      	bgt.n	8004cd4 <_printf_float+0x3b8>
 8004cd0:	07db      	lsls	r3, r3, #31
 8004cd2:	d537      	bpl.n	8004d44 <_printf_float+0x428>
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	4642      	mov	r2, r8
 8004cd8:	4631      	mov	r1, r6
 8004cda:	4628      	mov	r0, r5
 8004cdc:	47b8      	blx	r7
 8004cde:	3001      	adds	r0, #1
 8004ce0:	f43f ae77 	beq.w	80049d2 <_printf_float+0xb6>
 8004ce4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ce8:	4631      	mov	r1, r6
 8004cea:	4628      	mov	r0, r5
 8004cec:	47b8      	blx	r7
 8004cee:	3001      	adds	r0, #1
 8004cf0:	f43f ae6f 	beq.w	80049d2 <_printf_float+0xb6>
 8004cf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f7fb fe54 	bl	80009a8 <__aeabi_dcmpeq>
 8004d00:	b9d8      	cbnz	r0, 8004d3a <_printf_float+0x41e>
 8004d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d04:	f108 0201 	add.w	r2, r8, #1
 8004d08:	3b01      	subs	r3, #1
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	d10e      	bne.n	8004d32 <_printf_float+0x416>
 8004d14:	e65d      	b.n	80049d2 <_printf_float+0xb6>
 8004d16:	2301      	movs	r3, #1
 8004d18:	464a      	mov	r2, r9
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b8      	blx	r7
 8004d20:	3001      	adds	r0, #1
 8004d22:	f43f ae56 	beq.w	80049d2 <_printf_float+0xb6>
 8004d26:	f108 0801 	add.w	r8, r8, #1
 8004d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	4543      	cmp	r3, r8
 8004d30:	dcf1      	bgt.n	8004d16 <_printf_float+0x3fa>
 8004d32:	4653      	mov	r3, sl
 8004d34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004d38:	e6e0      	b.n	8004afc <_printf_float+0x1e0>
 8004d3a:	f04f 0800 	mov.w	r8, #0
 8004d3e:	f104 091a 	add.w	r9, r4, #26
 8004d42:	e7f2      	b.n	8004d2a <_printf_float+0x40e>
 8004d44:	2301      	movs	r3, #1
 8004d46:	4642      	mov	r2, r8
 8004d48:	e7df      	b.n	8004d0a <_printf_float+0x3ee>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	464a      	mov	r2, r9
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	f43f ae3c 	beq.w	80049d2 <_printf_float+0xb6>
 8004d5a:	f108 0801 	add.w	r8, r8, #1
 8004d5e:	68e3      	ldr	r3, [r4, #12]
 8004d60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004d62:	1a5b      	subs	r3, r3, r1
 8004d64:	4543      	cmp	r3, r8
 8004d66:	dcf0      	bgt.n	8004d4a <_printf_float+0x42e>
 8004d68:	e6fd      	b.n	8004b66 <_printf_float+0x24a>
 8004d6a:	f04f 0800 	mov.w	r8, #0
 8004d6e:	f104 0919 	add.w	r9, r4, #25
 8004d72:	e7f4      	b.n	8004d5e <_printf_float+0x442>

08004d74 <_printf_common>:
 8004d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d78:	4616      	mov	r6, r2
 8004d7a:	4699      	mov	r9, r3
 8004d7c:	688a      	ldr	r2, [r1, #8]
 8004d7e:	690b      	ldr	r3, [r1, #16]
 8004d80:	4607      	mov	r7, r0
 8004d82:	4293      	cmp	r3, r2
 8004d84:	bfb8      	it	lt
 8004d86:	4613      	movlt	r3, r2
 8004d88:	6033      	str	r3, [r6, #0]
 8004d8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d8e:	460c      	mov	r4, r1
 8004d90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d94:	b10a      	cbz	r2, 8004d9a <_printf_common+0x26>
 8004d96:	3301      	adds	r3, #1
 8004d98:	6033      	str	r3, [r6, #0]
 8004d9a:	6823      	ldr	r3, [r4, #0]
 8004d9c:	0699      	lsls	r1, r3, #26
 8004d9e:	bf42      	ittt	mi
 8004da0:	6833      	ldrmi	r3, [r6, #0]
 8004da2:	3302      	addmi	r3, #2
 8004da4:	6033      	strmi	r3, [r6, #0]
 8004da6:	6825      	ldr	r5, [r4, #0]
 8004da8:	f015 0506 	ands.w	r5, r5, #6
 8004dac:	d106      	bne.n	8004dbc <_printf_common+0x48>
 8004dae:	f104 0a19 	add.w	sl, r4, #25
 8004db2:	68e3      	ldr	r3, [r4, #12]
 8004db4:	6832      	ldr	r2, [r6, #0]
 8004db6:	1a9b      	subs	r3, r3, r2
 8004db8:	42ab      	cmp	r3, r5
 8004dba:	dc28      	bgt.n	8004e0e <_printf_common+0x9a>
 8004dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004dc0:	1e13      	subs	r3, r2, #0
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	bf18      	it	ne
 8004dc6:	2301      	movne	r3, #1
 8004dc8:	0692      	lsls	r2, r2, #26
 8004dca:	d42d      	bmi.n	8004e28 <_printf_common+0xb4>
 8004dcc:	4649      	mov	r1, r9
 8004dce:	4638      	mov	r0, r7
 8004dd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dd4:	47c0      	blx	r8
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d020      	beq.n	8004e1c <_printf_common+0xa8>
 8004dda:	6823      	ldr	r3, [r4, #0]
 8004ddc:	68e5      	ldr	r5, [r4, #12]
 8004dde:	f003 0306 	and.w	r3, r3, #6
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	bf18      	it	ne
 8004de6:	2500      	movne	r5, #0
 8004de8:	6832      	ldr	r2, [r6, #0]
 8004dea:	f04f 0600 	mov.w	r6, #0
 8004dee:	68a3      	ldr	r3, [r4, #8]
 8004df0:	bf08      	it	eq
 8004df2:	1aad      	subeq	r5, r5, r2
 8004df4:	6922      	ldr	r2, [r4, #16]
 8004df6:	bf08      	it	eq
 8004df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	bfc4      	itt	gt
 8004e00:	1a9b      	subgt	r3, r3, r2
 8004e02:	18ed      	addgt	r5, r5, r3
 8004e04:	341a      	adds	r4, #26
 8004e06:	42b5      	cmp	r5, r6
 8004e08:	d11a      	bne.n	8004e40 <_printf_common+0xcc>
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e008      	b.n	8004e20 <_printf_common+0xac>
 8004e0e:	2301      	movs	r3, #1
 8004e10:	4652      	mov	r2, sl
 8004e12:	4649      	mov	r1, r9
 8004e14:	4638      	mov	r0, r7
 8004e16:	47c0      	blx	r8
 8004e18:	3001      	adds	r0, #1
 8004e1a:	d103      	bne.n	8004e24 <_printf_common+0xb0>
 8004e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e24:	3501      	adds	r5, #1
 8004e26:	e7c4      	b.n	8004db2 <_printf_common+0x3e>
 8004e28:	2030      	movs	r0, #48	; 0x30
 8004e2a:	18e1      	adds	r1, r4, r3
 8004e2c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e36:	4422      	add	r2, r4
 8004e38:	3302      	adds	r3, #2
 8004e3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e3e:	e7c5      	b.n	8004dcc <_printf_common+0x58>
 8004e40:	2301      	movs	r3, #1
 8004e42:	4622      	mov	r2, r4
 8004e44:	4649      	mov	r1, r9
 8004e46:	4638      	mov	r0, r7
 8004e48:	47c0      	blx	r8
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	d0e6      	beq.n	8004e1c <_printf_common+0xa8>
 8004e4e:	3601      	adds	r6, #1
 8004e50:	e7d9      	b.n	8004e06 <_printf_common+0x92>
	...

08004e54 <_printf_i>:
 8004e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e58:	460c      	mov	r4, r1
 8004e5a:	7e27      	ldrb	r7, [r4, #24]
 8004e5c:	4691      	mov	r9, r2
 8004e5e:	2f78      	cmp	r7, #120	; 0x78
 8004e60:	4680      	mov	r8, r0
 8004e62:	469a      	mov	sl, r3
 8004e64:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e6a:	d807      	bhi.n	8004e7c <_printf_i+0x28>
 8004e6c:	2f62      	cmp	r7, #98	; 0x62
 8004e6e:	d80a      	bhi.n	8004e86 <_printf_i+0x32>
 8004e70:	2f00      	cmp	r7, #0
 8004e72:	f000 80d9 	beq.w	8005028 <_printf_i+0x1d4>
 8004e76:	2f58      	cmp	r7, #88	; 0x58
 8004e78:	f000 80a4 	beq.w	8004fc4 <_printf_i+0x170>
 8004e7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e84:	e03a      	b.n	8004efc <_printf_i+0xa8>
 8004e86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e8a:	2b15      	cmp	r3, #21
 8004e8c:	d8f6      	bhi.n	8004e7c <_printf_i+0x28>
 8004e8e:	a001      	add	r0, pc, #4	; (adr r0, 8004e94 <_printf_i+0x40>)
 8004e90:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e94:	08004eed 	.word	0x08004eed
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004e7d 	.word	0x08004e7d
 8004ea0:	08004e7d 	.word	0x08004e7d
 8004ea4:	08004e7d 	.word	0x08004e7d
 8004ea8:	08004e7d 	.word	0x08004e7d
 8004eac:	08004f01 	.word	0x08004f01
 8004eb0:	08004e7d 	.word	0x08004e7d
 8004eb4:	08004e7d 	.word	0x08004e7d
 8004eb8:	08004e7d 	.word	0x08004e7d
 8004ebc:	08004e7d 	.word	0x08004e7d
 8004ec0:	0800500f 	.word	0x0800500f
 8004ec4:	08004f31 	.word	0x08004f31
 8004ec8:	08004ff1 	.word	0x08004ff1
 8004ecc:	08004e7d 	.word	0x08004e7d
 8004ed0:	08004e7d 	.word	0x08004e7d
 8004ed4:	08005031 	.word	0x08005031
 8004ed8:	08004e7d 	.word	0x08004e7d
 8004edc:	08004f31 	.word	0x08004f31
 8004ee0:	08004e7d 	.word	0x08004e7d
 8004ee4:	08004e7d 	.word	0x08004e7d
 8004ee8:	08004ff9 	.word	0x08004ff9
 8004eec:	680b      	ldr	r3, [r1, #0]
 8004eee:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ef2:	1d1a      	adds	r2, r3, #4
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	600a      	str	r2, [r1, #0]
 8004ef8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004efc:	2301      	movs	r3, #1
 8004efe:	e0a4      	b.n	800504a <_printf_i+0x1f6>
 8004f00:	6825      	ldr	r5, [r4, #0]
 8004f02:	6808      	ldr	r0, [r1, #0]
 8004f04:	062e      	lsls	r6, r5, #24
 8004f06:	f100 0304 	add.w	r3, r0, #4
 8004f0a:	d50a      	bpl.n	8004f22 <_printf_i+0xce>
 8004f0c:	6805      	ldr	r5, [r0, #0]
 8004f0e:	600b      	str	r3, [r1, #0]
 8004f10:	2d00      	cmp	r5, #0
 8004f12:	da03      	bge.n	8004f1c <_printf_i+0xc8>
 8004f14:	232d      	movs	r3, #45	; 0x2d
 8004f16:	426d      	negs	r5, r5
 8004f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f1c:	230a      	movs	r3, #10
 8004f1e:	485e      	ldr	r0, [pc, #376]	; (8005098 <_printf_i+0x244>)
 8004f20:	e019      	b.n	8004f56 <_printf_i+0x102>
 8004f22:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f26:	6805      	ldr	r5, [r0, #0]
 8004f28:	600b      	str	r3, [r1, #0]
 8004f2a:	bf18      	it	ne
 8004f2c:	b22d      	sxthne	r5, r5
 8004f2e:	e7ef      	b.n	8004f10 <_printf_i+0xbc>
 8004f30:	680b      	ldr	r3, [r1, #0]
 8004f32:	6825      	ldr	r5, [r4, #0]
 8004f34:	1d18      	adds	r0, r3, #4
 8004f36:	6008      	str	r0, [r1, #0]
 8004f38:	0628      	lsls	r0, r5, #24
 8004f3a:	d501      	bpl.n	8004f40 <_printf_i+0xec>
 8004f3c:	681d      	ldr	r5, [r3, #0]
 8004f3e:	e002      	b.n	8004f46 <_printf_i+0xf2>
 8004f40:	0669      	lsls	r1, r5, #25
 8004f42:	d5fb      	bpl.n	8004f3c <_printf_i+0xe8>
 8004f44:	881d      	ldrh	r5, [r3, #0]
 8004f46:	2f6f      	cmp	r7, #111	; 0x6f
 8004f48:	bf0c      	ite	eq
 8004f4a:	2308      	moveq	r3, #8
 8004f4c:	230a      	movne	r3, #10
 8004f4e:	4852      	ldr	r0, [pc, #328]	; (8005098 <_printf_i+0x244>)
 8004f50:	2100      	movs	r1, #0
 8004f52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f56:	6866      	ldr	r6, [r4, #4]
 8004f58:	2e00      	cmp	r6, #0
 8004f5a:	bfa8      	it	ge
 8004f5c:	6821      	ldrge	r1, [r4, #0]
 8004f5e:	60a6      	str	r6, [r4, #8]
 8004f60:	bfa4      	itt	ge
 8004f62:	f021 0104 	bicge.w	r1, r1, #4
 8004f66:	6021      	strge	r1, [r4, #0]
 8004f68:	b90d      	cbnz	r5, 8004f6e <_printf_i+0x11a>
 8004f6a:	2e00      	cmp	r6, #0
 8004f6c:	d04d      	beq.n	800500a <_printf_i+0x1b6>
 8004f6e:	4616      	mov	r6, r2
 8004f70:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f74:	fb03 5711 	mls	r7, r3, r1, r5
 8004f78:	5dc7      	ldrb	r7, [r0, r7]
 8004f7a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f7e:	462f      	mov	r7, r5
 8004f80:	42bb      	cmp	r3, r7
 8004f82:	460d      	mov	r5, r1
 8004f84:	d9f4      	bls.n	8004f70 <_printf_i+0x11c>
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d10b      	bne.n	8004fa2 <_printf_i+0x14e>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	07df      	lsls	r7, r3, #31
 8004f8e:	d508      	bpl.n	8004fa2 <_printf_i+0x14e>
 8004f90:	6923      	ldr	r3, [r4, #16]
 8004f92:	6861      	ldr	r1, [r4, #4]
 8004f94:	4299      	cmp	r1, r3
 8004f96:	bfde      	ittt	le
 8004f98:	2330      	movle	r3, #48	; 0x30
 8004f9a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f9e:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004fa2:	1b92      	subs	r2, r2, r6
 8004fa4:	6122      	str	r2, [r4, #16]
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	4621      	mov	r1, r4
 8004faa:	4640      	mov	r0, r8
 8004fac:	f8cd a000 	str.w	sl, [sp]
 8004fb0:	aa03      	add	r2, sp, #12
 8004fb2:	f7ff fedf 	bl	8004d74 <_printf_common>
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d14c      	bne.n	8005054 <_printf_i+0x200>
 8004fba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fbe:	b004      	add	sp, #16
 8004fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc4:	4834      	ldr	r0, [pc, #208]	; (8005098 <_printf_i+0x244>)
 8004fc6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fca:	680e      	ldr	r6, [r1, #0]
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	f856 5b04 	ldr.w	r5, [r6], #4
 8004fd2:	061f      	lsls	r7, r3, #24
 8004fd4:	600e      	str	r6, [r1, #0]
 8004fd6:	d514      	bpl.n	8005002 <_printf_i+0x1ae>
 8004fd8:	07d9      	lsls	r1, r3, #31
 8004fda:	bf44      	itt	mi
 8004fdc:	f043 0320 	orrmi.w	r3, r3, #32
 8004fe0:	6023      	strmi	r3, [r4, #0]
 8004fe2:	b91d      	cbnz	r5, 8004fec <_printf_i+0x198>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	f023 0320 	bic.w	r3, r3, #32
 8004fea:	6023      	str	r3, [r4, #0]
 8004fec:	2310      	movs	r3, #16
 8004fee:	e7af      	b.n	8004f50 <_printf_i+0xfc>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	f043 0320 	orr.w	r3, r3, #32
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	2378      	movs	r3, #120	; 0x78
 8004ffa:	4828      	ldr	r0, [pc, #160]	; (800509c <_printf_i+0x248>)
 8004ffc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005000:	e7e3      	b.n	8004fca <_printf_i+0x176>
 8005002:	065e      	lsls	r6, r3, #25
 8005004:	bf48      	it	mi
 8005006:	b2ad      	uxthmi	r5, r5
 8005008:	e7e6      	b.n	8004fd8 <_printf_i+0x184>
 800500a:	4616      	mov	r6, r2
 800500c:	e7bb      	b.n	8004f86 <_printf_i+0x132>
 800500e:	680b      	ldr	r3, [r1, #0]
 8005010:	6826      	ldr	r6, [r4, #0]
 8005012:	1d1d      	adds	r5, r3, #4
 8005014:	6960      	ldr	r0, [r4, #20]
 8005016:	600d      	str	r5, [r1, #0]
 8005018:	0635      	lsls	r5, r6, #24
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	d501      	bpl.n	8005022 <_printf_i+0x1ce>
 800501e:	6018      	str	r0, [r3, #0]
 8005020:	e002      	b.n	8005028 <_printf_i+0x1d4>
 8005022:	0671      	lsls	r1, r6, #25
 8005024:	d5fb      	bpl.n	800501e <_printf_i+0x1ca>
 8005026:	8018      	strh	r0, [r3, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	4616      	mov	r6, r2
 800502c:	6123      	str	r3, [r4, #16]
 800502e:	e7ba      	b.n	8004fa6 <_printf_i+0x152>
 8005030:	680b      	ldr	r3, [r1, #0]
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	600a      	str	r2, [r1, #0]
 8005036:	681e      	ldr	r6, [r3, #0]
 8005038:	2100      	movs	r1, #0
 800503a:	4630      	mov	r0, r6
 800503c:	6862      	ldr	r2, [r4, #4]
 800503e:	f002 fbaf 	bl	80077a0 <memchr>
 8005042:	b108      	cbz	r0, 8005048 <_printf_i+0x1f4>
 8005044:	1b80      	subs	r0, r0, r6
 8005046:	6060      	str	r0, [r4, #4]
 8005048:	6863      	ldr	r3, [r4, #4]
 800504a:	6123      	str	r3, [r4, #16]
 800504c:	2300      	movs	r3, #0
 800504e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005052:	e7a8      	b.n	8004fa6 <_printf_i+0x152>
 8005054:	4632      	mov	r2, r6
 8005056:	4649      	mov	r1, r9
 8005058:	4640      	mov	r0, r8
 800505a:	6923      	ldr	r3, [r4, #16]
 800505c:	47d0      	blx	sl
 800505e:	3001      	adds	r0, #1
 8005060:	d0ab      	beq.n	8004fba <_printf_i+0x166>
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	079b      	lsls	r3, r3, #30
 8005066:	d413      	bmi.n	8005090 <_printf_i+0x23c>
 8005068:	68e0      	ldr	r0, [r4, #12]
 800506a:	9b03      	ldr	r3, [sp, #12]
 800506c:	4298      	cmp	r0, r3
 800506e:	bfb8      	it	lt
 8005070:	4618      	movlt	r0, r3
 8005072:	e7a4      	b.n	8004fbe <_printf_i+0x16a>
 8005074:	2301      	movs	r3, #1
 8005076:	4632      	mov	r2, r6
 8005078:	4649      	mov	r1, r9
 800507a:	4640      	mov	r0, r8
 800507c:	47d0      	blx	sl
 800507e:	3001      	adds	r0, #1
 8005080:	d09b      	beq.n	8004fba <_printf_i+0x166>
 8005082:	3501      	adds	r5, #1
 8005084:	68e3      	ldr	r3, [r4, #12]
 8005086:	9903      	ldr	r1, [sp, #12]
 8005088:	1a5b      	subs	r3, r3, r1
 800508a:	42ab      	cmp	r3, r5
 800508c:	dcf2      	bgt.n	8005074 <_printf_i+0x220>
 800508e:	e7eb      	b.n	8005068 <_printf_i+0x214>
 8005090:	2500      	movs	r5, #0
 8005092:	f104 0619 	add.w	r6, r4, #25
 8005096:	e7f5      	b.n	8005084 <_printf_i+0x230>
 8005098:	08009940 	.word	0x08009940
 800509c:	08009951 	.word	0x08009951

080050a0 <_scanf_float>:
 80050a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a4:	b087      	sub	sp, #28
 80050a6:	9303      	str	r3, [sp, #12]
 80050a8:	688b      	ldr	r3, [r1, #8]
 80050aa:	4617      	mov	r7, r2
 80050ac:	1e5a      	subs	r2, r3, #1
 80050ae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80050b2:	bf85      	ittet	hi
 80050b4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80050b8:	195b      	addhi	r3, r3, r5
 80050ba:	2300      	movls	r3, #0
 80050bc:	9302      	strhi	r3, [sp, #8]
 80050be:	bf88      	it	hi
 80050c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80050c4:	468b      	mov	fp, r1
 80050c6:	f04f 0500 	mov.w	r5, #0
 80050ca:	bf8c      	ite	hi
 80050cc:	608b      	strhi	r3, [r1, #8]
 80050ce:	9302      	strls	r3, [sp, #8]
 80050d0:	680b      	ldr	r3, [r1, #0]
 80050d2:	4680      	mov	r8, r0
 80050d4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80050d8:	f84b 3b1c 	str.w	r3, [fp], #28
 80050dc:	460c      	mov	r4, r1
 80050de:	465e      	mov	r6, fp
 80050e0:	46aa      	mov	sl, r5
 80050e2:	46a9      	mov	r9, r5
 80050e4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80050e8:	9501      	str	r5, [sp, #4]
 80050ea:	68a2      	ldr	r2, [r4, #8]
 80050ec:	b152      	cbz	r2, 8005104 <_scanf_float+0x64>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b4e      	cmp	r3, #78	; 0x4e
 80050f4:	d864      	bhi.n	80051c0 <_scanf_float+0x120>
 80050f6:	2b40      	cmp	r3, #64	; 0x40
 80050f8:	d83c      	bhi.n	8005174 <_scanf_float+0xd4>
 80050fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80050fe:	b2c8      	uxtb	r0, r1
 8005100:	280e      	cmp	r0, #14
 8005102:	d93a      	bls.n	800517a <_scanf_float+0xda>
 8005104:	f1b9 0f00 	cmp.w	r9, #0
 8005108:	d003      	beq.n	8005112 <_scanf_float+0x72>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005116:	f1ba 0f01 	cmp.w	sl, #1
 800511a:	f200 8113 	bhi.w	8005344 <_scanf_float+0x2a4>
 800511e:	455e      	cmp	r6, fp
 8005120:	f200 8105 	bhi.w	800532e <_scanf_float+0x28e>
 8005124:	2501      	movs	r5, #1
 8005126:	4628      	mov	r0, r5
 8005128:	b007      	add	sp, #28
 800512a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800512e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005132:	2a0d      	cmp	r2, #13
 8005134:	d8e6      	bhi.n	8005104 <_scanf_float+0x64>
 8005136:	a101      	add	r1, pc, #4	; (adr r1, 800513c <_scanf_float+0x9c>)
 8005138:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800513c:	0800527b 	.word	0x0800527b
 8005140:	08005105 	.word	0x08005105
 8005144:	08005105 	.word	0x08005105
 8005148:	08005105 	.word	0x08005105
 800514c:	080052db 	.word	0x080052db
 8005150:	080052b3 	.word	0x080052b3
 8005154:	08005105 	.word	0x08005105
 8005158:	08005105 	.word	0x08005105
 800515c:	08005289 	.word	0x08005289
 8005160:	08005105 	.word	0x08005105
 8005164:	08005105 	.word	0x08005105
 8005168:	08005105 	.word	0x08005105
 800516c:	08005105 	.word	0x08005105
 8005170:	08005241 	.word	0x08005241
 8005174:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005178:	e7db      	b.n	8005132 <_scanf_float+0x92>
 800517a:	290e      	cmp	r1, #14
 800517c:	d8c2      	bhi.n	8005104 <_scanf_float+0x64>
 800517e:	a001      	add	r0, pc, #4	; (adr r0, 8005184 <_scanf_float+0xe4>)
 8005180:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005184:	08005233 	.word	0x08005233
 8005188:	08005105 	.word	0x08005105
 800518c:	08005233 	.word	0x08005233
 8005190:	080052c7 	.word	0x080052c7
 8005194:	08005105 	.word	0x08005105
 8005198:	080051e1 	.word	0x080051e1
 800519c:	0800521d 	.word	0x0800521d
 80051a0:	0800521d 	.word	0x0800521d
 80051a4:	0800521d 	.word	0x0800521d
 80051a8:	0800521d 	.word	0x0800521d
 80051ac:	0800521d 	.word	0x0800521d
 80051b0:	0800521d 	.word	0x0800521d
 80051b4:	0800521d 	.word	0x0800521d
 80051b8:	0800521d 	.word	0x0800521d
 80051bc:	0800521d 	.word	0x0800521d
 80051c0:	2b6e      	cmp	r3, #110	; 0x6e
 80051c2:	d809      	bhi.n	80051d8 <_scanf_float+0x138>
 80051c4:	2b60      	cmp	r3, #96	; 0x60
 80051c6:	d8b2      	bhi.n	800512e <_scanf_float+0x8e>
 80051c8:	2b54      	cmp	r3, #84	; 0x54
 80051ca:	d077      	beq.n	80052bc <_scanf_float+0x21c>
 80051cc:	2b59      	cmp	r3, #89	; 0x59
 80051ce:	d199      	bne.n	8005104 <_scanf_float+0x64>
 80051d0:	2d07      	cmp	r5, #7
 80051d2:	d197      	bne.n	8005104 <_scanf_float+0x64>
 80051d4:	2508      	movs	r5, #8
 80051d6:	e029      	b.n	800522c <_scanf_float+0x18c>
 80051d8:	2b74      	cmp	r3, #116	; 0x74
 80051da:	d06f      	beq.n	80052bc <_scanf_float+0x21c>
 80051dc:	2b79      	cmp	r3, #121	; 0x79
 80051de:	e7f6      	b.n	80051ce <_scanf_float+0x12e>
 80051e0:	6821      	ldr	r1, [r4, #0]
 80051e2:	05c8      	lsls	r0, r1, #23
 80051e4:	d51a      	bpl.n	800521c <_scanf_float+0x17c>
 80051e6:	9b02      	ldr	r3, [sp, #8]
 80051e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80051ec:	6021      	str	r1, [r4, #0]
 80051ee:	f109 0901 	add.w	r9, r9, #1
 80051f2:	b11b      	cbz	r3, 80051fc <_scanf_float+0x15c>
 80051f4:	3b01      	subs	r3, #1
 80051f6:	3201      	adds	r2, #1
 80051f8:	9302      	str	r3, [sp, #8]
 80051fa:	60a2      	str	r2, [r4, #8]
 80051fc:	68a3      	ldr	r3, [r4, #8]
 80051fe:	3b01      	subs	r3, #1
 8005200:	60a3      	str	r3, [r4, #8]
 8005202:	6923      	ldr	r3, [r4, #16]
 8005204:	3301      	adds	r3, #1
 8005206:	6123      	str	r3, [r4, #16]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3b01      	subs	r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	f340 8084 	ble.w	800531c <_scanf_float+0x27c>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	e766      	b.n	80050ea <_scanf_float+0x4a>
 800521c:	eb1a 0f05 	cmn.w	sl, r5
 8005220:	f47f af70 	bne.w	8005104 <_scanf_float+0x64>
 8005224:	6822      	ldr	r2, [r4, #0]
 8005226:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800522a:	6022      	str	r2, [r4, #0]
 800522c:	f806 3b01 	strb.w	r3, [r6], #1
 8005230:	e7e4      	b.n	80051fc <_scanf_float+0x15c>
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	0610      	lsls	r0, r2, #24
 8005236:	f57f af65 	bpl.w	8005104 <_scanf_float+0x64>
 800523a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800523e:	e7f4      	b.n	800522a <_scanf_float+0x18a>
 8005240:	f1ba 0f00 	cmp.w	sl, #0
 8005244:	d10e      	bne.n	8005264 <_scanf_float+0x1c4>
 8005246:	f1b9 0f00 	cmp.w	r9, #0
 800524a:	d10e      	bne.n	800526a <_scanf_float+0x1ca>
 800524c:	6822      	ldr	r2, [r4, #0]
 800524e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005252:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005256:	d108      	bne.n	800526a <_scanf_float+0x1ca>
 8005258:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800525c:	f04f 0a01 	mov.w	sl, #1
 8005260:	6022      	str	r2, [r4, #0]
 8005262:	e7e3      	b.n	800522c <_scanf_float+0x18c>
 8005264:	f1ba 0f02 	cmp.w	sl, #2
 8005268:	d055      	beq.n	8005316 <_scanf_float+0x276>
 800526a:	2d01      	cmp	r5, #1
 800526c:	d002      	beq.n	8005274 <_scanf_float+0x1d4>
 800526e:	2d04      	cmp	r5, #4
 8005270:	f47f af48 	bne.w	8005104 <_scanf_float+0x64>
 8005274:	3501      	adds	r5, #1
 8005276:	b2ed      	uxtb	r5, r5
 8005278:	e7d8      	b.n	800522c <_scanf_float+0x18c>
 800527a:	f1ba 0f01 	cmp.w	sl, #1
 800527e:	f47f af41 	bne.w	8005104 <_scanf_float+0x64>
 8005282:	f04f 0a02 	mov.w	sl, #2
 8005286:	e7d1      	b.n	800522c <_scanf_float+0x18c>
 8005288:	b97d      	cbnz	r5, 80052aa <_scanf_float+0x20a>
 800528a:	f1b9 0f00 	cmp.w	r9, #0
 800528e:	f47f af3c 	bne.w	800510a <_scanf_float+0x6a>
 8005292:	6822      	ldr	r2, [r4, #0]
 8005294:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005298:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800529c:	f47f af39 	bne.w	8005112 <_scanf_float+0x72>
 80052a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052a4:	2501      	movs	r5, #1
 80052a6:	6022      	str	r2, [r4, #0]
 80052a8:	e7c0      	b.n	800522c <_scanf_float+0x18c>
 80052aa:	2d03      	cmp	r5, #3
 80052ac:	d0e2      	beq.n	8005274 <_scanf_float+0x1d4>
 80052ae:	2d05      	cmp	r5, #5
 80052b0:	e7de      	b.n	8005270 <_scanf_float+0x1d0>
 80052b2:	2d02      	cmp	r5, #2
 80052b4:	f47f af26 	bne.w	8005104 <_scanf_float+0x64>
 80052b8:	2503      	movs	r5, #3
 80052ba:	e7b7      	b.n	800522c <_scanf_float+0x18c>
 80052bc:	2d06      	cmp	r5, #6
 80052be:	f47f af21 	bne.w	8005104 <_scanf_float+0x64>
 80052c2:	2507      	movs	r5, #7
 80052c4:	e7b2      	b.n	800522c <_scanf_float+0x18c>
 80052c6:	6822      	ldr	r2, [r4, #0]
 80052c8:	0591      	lsls	r1, r2, #22
 80052ca:	f57f af1b 	bpl.w	8005104 <_scanf_float+0x64>
 80052ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80052d2:	6022      	str	r2, [r4, #0]
 80052d4:	f8cd 9004 	str.w	r9, [sp, #4]
 80052d8:	e7a8      	b.n	800522c <_scanf_float+0x18c>
 80052da:	6822      	ldr	r2, [r4, #0]
 80052dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80052e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052e4:	d006      	beq.n	80052f4 <_scanf_float+0x254>
 80052e6:	0550      	lsls	r0, r2, #21
 80052e8:	f57f af0c 	bpl.w	8005104 <_scanf_float+0x64>
 80052ec:	f1b9 0f00 	cmp.w	r9, #0
 80052f0:	f43f af0f 	beq.w	8005112 <_scanf_float+0x72>
 80052f4:	0591      	lsls	r1, r2, #22
 80052f6:	bf58      	it	pl
 80052f8:	9901      	ldrpl	r1, [sp, #4]
 80052fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052fe:	bf58      	it	pl
 8005300:	eba9 0101 	subpl.w	r1, r9, r1
 8005304:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005308:	f04f 0900 	mov.w	r9, #0
 800530c:	bf58      	it	pl
 800530e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005312:	6022      	str	r2, [r4, #0]
 8005314:	e78a      	b.n	800522c <_scanf_float+0x18c>
 8005316:	f04f 0a03 	mov.w	sl, #3
 800531a:	e787      	b.n	800522c <_scanf_float+0x18c>
 800531c:	4639      	mov	r1, r7
 800531e:	4640      	mov	r0, r8
 8005320:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005324:	4798      	blx	r3
 8005326:	2800      	cmp	r0, #0
 8005328:	f43f aedf 	beq.w	80050ea <_scanf_float+0x4a>
 800532c:	e6ea      	b.n	8005104 <_scanf_float+0x64>
 800532e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005332:	463a      	mov	r2, r7
 8005334:	4640      	mov	r0, r8
 8005336:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800533a:	4798      	blx	r3
 800533c:	6923      	ldr	r3, [r4, #16]
 800533e:	3b01      	subs	r3, #1
 8005340:	6123      	str	r3, [r4, #16]
 8005342:	e6ec      	b.n	800511e <_scanf_float+0x7e>
 8005344:	1e6b      	subs	r3, r5, #1
 8005346:	2b06      	cmp	r3, #6
 8005348:	d825      	bhi.n	8005396 <_scanf_float+0x2f6>
 800534a:	2d02      	cmp	r5, #2
 800534c:	d836      	bhi.n	80053bc <_scanf_float+0x31c>
 800534e:	455e      	cmp	r6, fp
 8005350:	f67f aee8 	bls.w	8005124 <_scanf_float+0x84>
 8005354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005358:	463a      	mov	r2, r7
 800535a:	4640      	mov	r0, r8
 800535c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005360:	4798      	blx	r3
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	3b01      	subs	r3, #1
 8005366:	6123      	str	r3, [r4, #16]
 8005368:	e7f1      	b.n	800534e <_scanf_float+0x2ae>
 800536a:	9802      	ldr	r0, [sp, #8]
 800536c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005370:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005374:	463a      	mov	r2, r7
 8005376:	9002      	str	r0, [sp, #8]
 8005378:	4640      	mov	r0, r8
 800537a:	4798      	blx	r3
 800537c:	6923      	ldr	r3, [r4, #16]
 800537e:	3b01      	subs	r3, #1
 8005380:	6123      	str	r3, [r4, #16]
 8005382:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005386:	fa5f fa8a 	uxtb.w	sl, sl
 800538a:	f1ba 0f02 	cmp.w	sl, #2
 800538e:	d1ec      	bne.n	800536a <_scanf_float+0x2ca>
 8005390:	3d03      	subs	r5, #3
 8005392:	b2ed      	uxtb	r5, r5
 8005394:	1b76      	subs	r6, r6, r5
 8005396:	6823      	ldr	r3, [r4, #0]
 8005398:	05da      	lsls	r2, r3, #23
 800539a:	d52f      	bpl.n	80053fc <_scanf_float+0x35c>
 800539c:	055b      	lsls	r3, r3, #21
 800539e:	d510      	bpl.n	80053c2 <_scanf_float+0x322>
 80053a0:	455e      	cmp	r6, fp
 80053a2:	f67f aebf 	bls.w	8005124 <_scanf_float+0x84>
 80053a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053aa:	463a      	mov	r2, r7
 80053ac:	4640      	mov	r0, r8
 80053ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053b2:	4798      	blx	r3
 80053b4:	6923      	ldr	r3, [r4, #16]
 80053b6:	3b01      	subs	r3, #1
 80053b8:	6123      	str	r3, [r4, #16]
 80053ba:	e7f1      	b.n	80053a0 <_scanf_float+0x300>
 80053bc:	46aa      	mov	sl, r5
 80053be:	9602      	str	r6, [sp, #8]
 80053c0:	e7df      	b.n	8005382 <_scanf_float+0x2e2>
 80053c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	2965      	cmp	r1, #101	; 0x65
 80053ca:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80053ce:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 80053d2:	6123      	str	r3, [r4, #16]
 80053d4:	d00c      	beq.n	80053f0 <_scanf_float+0x350>
 80053d6:	2945      	cmp	r1, #69	; 0x45
 80053d8:	d00a      	beq.n	80053f0 <_scanf_float+0x350>
 80053da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053de:	463a      	mov	r2, r7
 80053e0:	4640      	mov	r0, r8
 80053e2:	4798      	blx	r3
 80053e4:	6923      	ldr	r3, [r4, #16]
 80053e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80053ea:	3b01      	subs	r3, #1
 80053ec:	1eb5      	subs	r5, r6, #2
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	463a      	mov	r2, r7
 80053f2:	4640      	mov	r0, r8
 80053f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053f8:	4798      	blx	r3
 80053fa:	462e      	mov	r6, r5
 80053fc:	6825      	ldr	r5, [r4, #0]
 80053fe:	f015 0510 	ands.w	r5, r5, #16
 8005402:	d159      	bne.n	80054b8 <_scanf_float+0x418>
 8005404:	7035      	strb	r5, [r6, #0]
 8005406:	6823      	ldr	r3, [r4, #0]
 8005408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800540c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005410:	d11c      	bne.n	800544c <_scanf_float+0x3ac>
 8005412:	9b01      	ldr	r3, [sp, #4]
 8005414:	454b      	cmp	r3, r9
 8005416:	eba3 0209 	sub.w	r2, r3, r9
 800541a:	d124      	bne.n	8005466 <_scanf_float+0x3c6>
 800541c:	2200      	movs	r2, #0
 800541e:	4659      	mov	r1, fp
 8005420:	4640      	mov	r0, r8
 8005422:	f000 fef9 	bl	8006218 <_strtod_r>
 8005426:	f8d4 c000 	ldr.w	ip, [r4]
 800542a:	9b03      	ldr	r3, [sp, #12]
 800542c:	f01c 0f02 	tst.w	ip, #2
 8005430:	4606      	mov	r6, r0
 8005432:	460f      	mov	r7, r1
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	d021      	beq.n	800547c <_scanf_float+0x3dc>
 8005438:	9903      	ldr	r1, [sp, #12]
 800543a:	1d1a      	adds	r2, r3, #4
 800543c:	600a      	str	r2, [r1, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	e9c3 6700 	strd	r6, r7, [r3]
 8005444:	68e3      	ldr	r3, [r4, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	60e3      	str	r3, [r4, #12]
 800544a:	e66c      	b.n	8005126 <_scanf_float+0x86>
 800544c:	9b04      	ldr	r3, [sp, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0e4      	beq.n	800541c <_scanf_float+0x37c>
 8005452:	9905      	ldr	r1, [sp, #20]
 8005454:	230a      	movs	r3, #10
 8005456:	462a      	mov	r2, r5
 8005458:	4640      	mov	r0, r8
 800545a:	3101      	adds	r1, #1
 800545c:	f000 ff68 	bl	8006330 <_strtol_r>
 8005460:	9b04      	ldr	r3, [sp, #16]
 8005462:	9e05      	ldr	r6, [sp, #20]
 8005464:	1ac2      	subs	r2, r0, r3
 8005466:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800546a:	429e      	cmp	r6, r3
 800546c:	bf28      	it	cs
 800546e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005472:	4630      	mov	r0, r6
 8005474:	4911      	ldr	r1, [pc, #68]	; (80054bc <_scanf_float+0x41c>)
 8005476:	f000 f829 	bl	80054cc <siprintf>
 800547a:	e7cf      	b.n	800541c <_scanf_float+0x37c>
 800547c:	f01c 0f04 	tst.w	ip, #4
 8005480:	f103 0e04 	add.w	lr, r3, #4
 8005484:	d003      	beq.n	800548e <_scanf_float+0x3ee>
 8005486:	9903      	ldr	r1, [sp, #12]
 8005488:	f8c1 e000 	str.w	lr, [r1]
 800548c:	e7d7      	b.n	800543e <_scanf_float+0x39e>
 800548e:	9a03      	ldr	r2, [sp, #12]
 8005490:	f8c2 e000 	str.w	lr, [r2]
 8005494:	f8d3 8000 	ldr.w	r8, [r3]
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	f7fb fab6 	bl	8000a0c <__aeabi_dcmpun>
 80054a0:	b128      	cbz	r0, 80054ae <_scanf_float+0x40e>
 80054a2:	4807      	ldr	r0, [pc, #28]	; (80054c0 <_scanf_float+0x420>)
 80054a4:	f000 f80e 	bl	80054c4 <nanf>
 80054a8:	f8c8 0000 	str.w	r0, [r8]
 80054ac:	e7ca      	b.n	8005444 <_scanf_float+0x3a4>
 80054ae:	4630      	mov	r0, r6
 80054b0:	4639      	mov	r1, r7
 80054b2:	f7fb fb09 	bl	8000ac8 <__aeabi_d2f>
 80054b6:	e7f7      	b.n	80054a8 <_scanf_float+0x408>
 80054b8:	2500      	movs	r5, #0
 80054ba:	e634      	b.n	8005126 <_scanf_float+0x86>
 80054bc:	08009962 	.word	0x08009962
 80054c0:	08009d93 	.word	0x08009d93

080054c4 <nanf>:
 80054c4:	4800      	ldr	r0, [pc, #0]	; (80054c8 <nanf+0x4>)
 80054c6:	4770      	bx	lr
 80054c8:	7fc00000 	.word	0x7fc00000

080054cc <siprintf>:
 80054cc:	b40e      	push	{r1, r2, r3}
 80054ce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054d2:	b500      	push	{lr}
 80054d4:	b09c      	sub	sp, #112	; 0x70
 80054d6:	ab1d      	add	r3, sp, #116	; 0x74
 80054d8:	9002      	str	r0, [sp, #8]
 80054da:	9006      	str	r0, [sp, #24]
 80054dc:	9107      	str	r1, [sp, #28]
 80054de:	9104      	str	r1, [sp, #16]
 80054e0:	4808      	ldr	r0, [pc, #32]	; (8005504 <siprintf+0x38>)
 80054e2:	4909      	ldr	r1, [pc, #36]	; (8005508 <siprintf+0x3c>)
 80054e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80054e8:	9105      	str	r1, [sp, #20]
 80054ea:	6800      	ldr	r0, [r0, #0]
 80054ec:	a902      	add	r1, sp, #8
 80054ee:	9301      	str	r3, [sp, #4]
 80054f0:	f002 ff2c 	bl	800834c <_svfiprintf_r>
 80054f4:	2200      	movs	r2, #0
 80054f6:	9b02      	ldr	r3, [sp, #8]
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	b01c      	add	sp, #112	; 0x70
 80054fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005500:	b003      	add	sp, #12
 8005502:	4770      	bx	lr
 8005504:	200000bc 	.word	0x200000bc
 8005508:	ffff0208 	.word	0xffff0208

0800550c <siscanf>:
 800550c:	b40e      	push	{r1, r2, r3}
 800550e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005512:	b530      	push	{r4, r5, lr}
 8005514:	b09c      	sub	sp, #112	; 0x70
 8005516:	ac1f      	add	r4, sp, #124	; 0x7c
 8005518:	f854 5b04 	ldr.w	r5, [r4], #4
 800551c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005520:	9002      	str	r0, [sp, #8]
 8005522:	9006      	str	r0, [sp, #24]
 8005524:	f7fa fe14 	bl	8000150 <strlen>
 8005528:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <siscanf+0x4c>)
 800552a:	9003      	str	r0, [sp, #12]
 800552c:	930b      	str	r3, [sp, #44]	; 0x2c
 800552e:	2300      	movs	r3, #0
 8005530:	930f      	str	r3, [sp, #60]	; 0x3c
 8005532:	9314      	str	r3, [sp, #80]	; 0x50
 8005534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005538:	9007      	str	r0, [sp, #28]
 800553a:	4808      	ldr	r0, [pc, #32]	; (800555c <siscanf+0x50>)
 800553c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005540:	462a      	mov	r2, r5
 8005542:	4623      	mov	r3, r4
 8005544:	a902      	add	r1, sp, #8
 8005546:	6800      	ldr	r0, [r0, #0]
 8005548:	9401      	str	r4, [sp, #4]
 800554a:	f003 f859 	bl	8008600 <__ssvfiscanf_r>
 800554e:	b01c      	add	sp, #112	; 0x70
 8005550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005554:	b003      	add	sp, #12
 8005556:	4770      	bx	lr
 8005558:	08005583 	.word	0x08005583
 800555c:	200000bc 	.word	0x200000bc

08005560 <__sread>:
 8005560:	b510      	push	{r4, lr}
 8005562:	460c      	mov	r4, r1
 8005564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005568:	f003 fb0e 	bl	8008b88 <_read_r>
 800556c:	2800      	cmp	r0, #0
 800556e:	bfab      	itete	ge
 8005570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005572:	89a3      	ldrhlt	r3, [r4, #12]
 8005574:	181b      	addge	r3, r3, r0
 8005576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800557a:	bfac      	ite	ge
 800557c:	6563      	strge	r3, [r4, #84]	; 0x54
 800557e:	81a3      	strhlt	r3, [r4, #12]
 8005580:	bd10      	pop	{r4, pc}

08005582 <__seofread>:
 8005582:	2000      	movs	r0, #0
 8005584:	4770      	bx	lr

08005586 <__swrite>:
 8005586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800558a:	461f      	mov	r7, r3
 800558c:	898b      	ldrh	r3, [r1, #12]
 800558e:	4605      	mov	r5, r0
 8005590:	05db      	lsls	r3, r3, #23
 8005592:	460c      	mov	r4, r1
 8005594:	4616      	mov	r6, r2
 8005596:	d505      	bpl.n	80055a4 <__swrite+0x1e>
 8005598:	2302      	movs	r3, #2
 800559a:	2200      	movs	r2, #0
 800559c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a0:	f002 f8d2 	bl	8007748 <_lseek_r>
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	4632      	mov	r2, r6
 80055a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055ac:	81a3      	strh	r3, [r4, #12]
 80055ae:	4628      	mov	r0, r5
 80055b0:	463b      	mov	r3, r7
 80055b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ba:	f000 bebb 	b.w	8006334 <_write_r>

080055be <__sseek>:
 80055be:	b510      	push	{r4, lr}
 80055c0:	460c      	mov	r4, r1
 80055c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055c6:	f002 f8bf 	bl	8007748 <_lseek_r>
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	89a3      	ldrh	r3, [r4, #12]
 80055ce:	bf15      	itete	ne
 80055d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80055d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80055d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80055da:	81a3      	strheq	r3, [r4, #12]
 80055dc:	bf18      	it	ne
 80055de:	81a3      	strhne	r3, [r4, #12]
 80055e0:	bd10      	pop	{r4, pc}

080055e2 <__sclose>:
 80055e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e6:	f000 beb7 	b.w	8006358 <_close_r>

080055ea <sulp>:
 80055ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ee:	460f      	mov	r7, r1
 80055f0:	4690      	mov	r8, r2
 80055f2:	f002 fc53 	bl	8007e9c <__ulp>
 80055f6:	4604      	mov	r4, r0
 80055f8:	460d      	mov	r5, r1
 80055fa:	f1b8 0f00 	cmp.w	r8, #0
 80055fe:	d011      	beq.n	8005624 <sulp+0x3a>
 8005600:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005604:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005608:	2b00      	cmp	r3, #0
 800560a:	dd0b      	ble.n	8005624 <sulp+0x3a>
 800560c:	2400      	movs	r4, #0
 800560e:	051b      	lsls	r3, r3, #20
 8005610:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005614:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005618:	4622      	mov	r2, r4
 800561a:	462b      	mov	r3, r5
 800561c:	f7fa ff5c 	bl	80004d8 <__aeabi_dmul>
 8005620:	4604      	mov	r4, r0
 8005622:	460d      	mov	r5, r1
 8005624:	4620      	mov	r0, r4
 8005626:	4629      	mov	r1, r5
 8005628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800562c:	0000      	movs	r0, r0
	...

08005630 <_strtod_l>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	469b      	mov	fp, r3
 8005636:	2300      	movs	r3, #0
 8005638:	b0a1      	sub	sp, #132	; 0x84
 800563a:	931c      	str	r3, [sp, #112]	; 0x70
 800563c:	4ba1      	ldr	r3, [pc, #644]	; (80058c4 <_strtod_l+0x294>)
 800563e:	4682      	mov	sl, r0
 8005640:	681f      	ldr	r7, [r3, #0]
 8005642:	460e      	mov	r6, r1
 8005644:	4638      	mov	r0, r7
 8005646:	9217      	str	r2, [sp, #92]	; 0x5c
 8005648:	f7fa fd82 	bl	8000150 <strlen>
 800564c:	f04f 0800 	mov.w	r8, #0
 8005650:	4604      	mov	r4, r0
 8005652:	f04f 0900 	mov.w	r9, #0
 8005656:	961b      	str	r6, [sp, #108]	; 0x6c
 8005658:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800565a:	781a      	ldrb	r2, [r3, #0]
 800565c:	2a2b      	cmp	r2, #43	; 0x2b
 800565e:	d04c      	beq.n	80056fa <_strtod_l+0xca>
 8005660:	d83a      	bhi.n	80056d8 <_strtod_l+0xa8>
 8005662:	2a0d      	cmp	r2, #13
 8005664:	d833      	bhi.n	80056ce <_strtod_l+0x9e>
 8005666:	2a08      	cmp	r2, #8
 8005668:	d833      	bhi.n	80056d2 <_strtod_l+0xa2>
 800566a:	2a00      	cmp	r2, #0
 800566c:	d03d      	beq.n	80056ea <_strtod_l+0xba>
 800566e:	2300      	movs	r3, #0
 8005670:	930c      	str	r3, [sp, #48]	; 0x30
 8005672:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8005674:	782b      	ldrb	r3, [r5, #0]
 8005676:	2b30      	cmp	r3, #48	; 0x30
 8005678:	f040 80af 	bne.w	80057da <_strtod_l+0x1aa>
 800567c:	786b      	ldrb	r3, [r5, #1]
 800567e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005682:	2b58      	cmp	r3, #88	; 0x58
 8005684:	d16c      	bne.n	8005760 <_strtod_l+0x130>
 8005686:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005688:	4650      	mov	r0, sl
 800568a:	9301      	str	r3, [sp, #4]
 800568c:	ab1c      	add	r3, sp, #112	; 0x70
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	4a8d      	ldr	r2, [pc, #564]	; (80058c8 <_strtod_l+0x298>)
 8005692:	f8cd b008 	str.w	fp, [sp, #8]
 8005696:	ab1d      	add	r3, sp, #116	; 0x74
 8005698:	a91b      	add	r1, sp, #108	; 0x6c
 800569a:	f001 fd53 	bl	8007144 <__gethex>
 800569e:	f010 0607 	ands.w	r6, r0, #7
 80056a2:	4604      	mov	r4, r0
 80056a4:	d005      	beq.n	80056b2 <_strtod_l+0x82>
 80056a6:	2e06      	cmp	r6, #6
 80056a8:	d129      	bne.n	80056fe <_strtod_l+0xce>
 80056aa:	2300      	movs	r3, #0
 80056ac:	3501      	adds	r5, #1
 80056ae:	951b      	str	r5, [sp, #108]	; 0x6c
 80056b0:	930c      	str	r3, [sp, #48]	; 0x30
 80056b2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f040 8596 	bne.w	80061e6 <_strtod_l+0xbb6>
 80056ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056bc:	b1d3      	cbz	r3, 80056f4 <_strtod_l+0xc4>
 80056be:	4642      	mov	r2, r8
 80056c0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80056c4:	4610      	mov	r0, r2
 80056c6:	4619      	mov	r1, r3
 80056c8:	b021      	add	sp, #132	; 0x84
 80056ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ce:	2a20      	cmp	r2, #32
 80056d0:	d1cd      	bne.n	800566e <_strtod_l+0x3e>
 80056d2:	3301      	adds	r3, #1
 80056d4:	931b      	str	r3, [sp, #108]	; 0x6c
 80056d6:	e7bf      	b.n	8005658 <_strtod_l+0x28>
 80056d8:	2a2d      	cmp	r2, #45	; 0x2d
 80056da:	d1c8      	bne.n	800566e <_strtod_l+0x3e>
 80056dc:	2201      	movs	r2, #1
 80056de:	920c      	str	r2, [sp, #48]	; 0x30
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	921b      	str	r2, [sp, #108]	; 0x6c
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d1c3      	bne.n	8005672 <_strtod_l+0x42>
 80056ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056ec:	961b      	str	r6, [sp, #108]	; 0x6c
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f040 8577 	bne.w	80061e2 <_strtod_l+0xbb2>
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	e7e4      	b.n	80056c4 <_strtod_l+0x94>
 80056fa:	2200      	movs	r2, #0
 80056fc:	e7ef      	b.n	80056de <_strtod_l+0xae>
 80056fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005700:	b13a      	cbz	r2, 8005712 <_strtod_l+0xe2>
 8005702:	2135      	movs	r1, #53	; 0x35
 8005704:	a81e      	add	r0, sp, #120	; 0x78
 8005706:	f002 fccd 	bl	80080a4 <__copybits>
 800570a:	4650      	mov	r0, sl
 800570c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800570e:	f002 f895 	bl	800783c <_Bfree>
 8005712:	3e01      	subs	r6, #1
 8005714:	2e05      	cmp	r6, #5
 8005716:	d807      	bhi.n	8005728 <_strtod_l+0xf8>
 8005718:	e8df f006 	tbb	[pc, r6]
 800571c:	1d180b0e 	.word	0x1d180b0e
 8005720:	030e      	.short	0x030e
 8005722:	f04f 0900 	mov.w	r9, #0
 8005726:	46c8      	mov	r8, r9
 8005728:	0721      	lsls	r1, r4, #28
 800572a:	d5c2      	bpl.n	80056b2 <_strtod_l+0x82>
 800572c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8005730:	e7bf      	b.n	80056b2 <_strtod_l+0x82>
 8005732:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 8005736:	e7f7      	b.n	8005728 <_strtod_l+0xf8>
 8005738:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800573a:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 800573e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005742:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005746:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800574a:	e7ed      	b.n	8005728 <_strtod_l+0xf8>
 800574c:	f04f 0800 	mov.w	r8, #0
 8005750:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80058cc <_strtod_l+0x29c>
 8005754:	e7e8      	b.n	8005728 <_strtod_l+0xf8>
 8005756:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800575a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800575e:	e7e3      	b.n	8005728 <_strtod_l+0xf8>
 8005760:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	921b      	str	r2, [sp, #108]	; 0x6c
 8005766:	785b      	ldrb	r3, [r3, #1]
 8005768:	2b30      	cmp	r3, #48	; 0x30
 800576a:	d0f9      	beq.n	8005760 <_strtod_l+0x130>
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0a0      	beq.n	80056b2 <_strtod_l+0x82>
 8005770:	2301      	movs	r3, #1
 8005772:	9307      	str	r3, [sp, #28]
 8005774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005776:	220a      	movs	r2, #10
 8005778:	9308      	str	r3, [sp, #32]
 800577a:	2300      	movs	r3, #0
 800577c:	469b      	mov	fp, r3
 800577e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005782:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8005784:	7805      	ldrb	r5, [r0, #0]
 8005786:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800578a:	b2d9      	uxtb	r1, r3
 800578c:	2909      	cmp	r1, #9
 800578e:	d926      	bls.n	80057de <_strtod_l+0x1ae>
 8005790:	4622      	mov	r2, r4
 8005792:	4639      	mov	r1, r7
 8005794:	f003 fa5a 	bl	8008c4c <strncmp>
 8005798:	2800      	cmp	r0, #0
 800579a:	d032      	beq.n	8005802 <_strtod_l+0x1d2>
 800579c:	2000      	movs	r0, #0
 800579e:	462b      	mov	r3, r5
 80057a0:	465c      	mov	r4, fp
 80057a2:	4602      	mov	r2, r0
 80057a4:	9004      	str	r0, [sp, #16]
 80057a6:	2b65      	cmp	r3, #101	; 0x65
 80057a8:	d001      	beq.n	80057ae <_strtod_l+0x17e>
 80057aa:	2b45      	cmp	r3, #69	; 0x45
 80057ac:	d113      	bne.n	80057d6 <_strtod_l+0x1a6>
 80057ae:	b91c      	cbnz	r4, 80057b8 <_strtod_l+0x188>
 80057b0:	9b07      	ldr	r3, [sp, #28]
 80057b2:	4303      	orrs	r3, r0
 80057b4:	d099      	beq.n	80056ea <_strtod_l+0xba>
 80057b6:	2400      	movs	r4, #0
 80057b8:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80057ba:	1c73      	adds	r3, r6, #1
 80057bc:	931b      	str	r3, [sp, #108]	; 0x6c
 80057be:	7873      	ldrb	r3, [r6, #1]
 80057c0:	2b2b      	cmp	r3, #43	; 0x2b
 80057c2:	d078      	beq.n	80058b6 <_strtod_l+0x286>
 80057c4:	2b2d      	cmp	r3, #45	; 0x2d
 80057c6:	d07b      	beq.n	80058c0 <_strtod_l+0x290>
 80057c8:	2700      	movs	r7, #0
 80057ca:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80057ce:	2909      	cmp	r1, #9
 80057d0:	f240 8082 	bls.w	80058d8 <_strtod_l+0x2a8>
 80057d4:	961b      	str	r6, [sp, #108]	; 0x6c
 80057d6:	2500      	movs	r5, #0
 80057d8:	e09e      	b.n	8005918 <_strtod_l+0x2e8>
 80057da:	2300      	movs	r3, #0
 80057dc:	e7c9      	b.n	8005772 <_strtod_l+0x142>
 80057de:	f1bb 0f08 	cmp.w	fp, #8
 80057e2:	bfd5      	itete	le
 80057e4:	9906      	ldrle	r1, [sp, #24]
 80057e6:	9905      	ldrgt	r1, [sp, #20]
 80057e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80057ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80057f0:	f100 0001 	add.w	r0, r0, #1
 80057f4:	bfd4      	ite	le
 80057f6:	9306      	strle	r3, [sp, #24]
 80057f8:	9305      	strgt	r3, [sp, #20]
 80057fa:	f10b 0b01 	add.w	fp, fp, #1
 80057fe:	901b      	str	r0, [sp, #108]	; 0x6c
 8005800:	e7bf      	b.n	8005782 <_strtod_l+0x152>
 8005802:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005804:	191a      	adds	r2, r3, r4
 8005806:	921b      	str	r2, [sp, #108]	; 0x6c
 8005808:	5d1b      	ldrb	r3, [r3, r4]
 800580a:	f1bb 0f00 	cmp.w	fp, #0
 800580e:	d036      	beq.n	800587e <_strtod_l+0x24e>
 8005810:	465c      	mov	r4, fp
 8005812:	9004      	str	r0, [sp, #16]
 8005814:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005818:	2a09      	cmp	r2, #9
 800581a:	d912      	bls.n	8005842 <_strtod_l+0x212>
 800581c:	2201      	movs	r2, #1
 800581e:	e7c2      	b.n	80057a6 <_strtod_l+0x176>
 8005820:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005822:	3001      	adds	r0, #1
 8005824:	1c5a      	adds	r2, r3, #1
 8005826:	921b      	str	r2, [sp, #108]	; 0x6c
 8005828:	785b      	ldrb	r3, [r3, #1]
 800582a:	2b30      	cmp	r3, #48	; 0x30
 800582c:	d0f8      	beq.n	8005820 <_strtod_l+0x1f0>
 800582e:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8005832:	2a08      	cmp	r2, #8
 8005834:	f200 84dc 	bhi.w	80061f0 <_strtod_l+0xbc0>
 8005838:	9004      	str	r0, [sp, #16]
 800583a:	2000      	movs	r0, #0
 800583c:	4604      	mov	r4, r0
 800583e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005840:	9208      	str	r2, [sp, #32]
 8005842:	3b30      	subs	r3, #48	; 0x30
 8005844:	f100 0201 	add.w	r2, r0, #1
 8005848:	d013      	beq.n	8005872 <_strtod_l+0x242>
 800584a:	9904      	ldr	r1, [sp, #16]
 800584c:	1905      	adds	r5, r0, r4
 800584e:	4411      	add	r1, r2
 8005850:	9104      	str	r1, [sp, #16]
 8005852:	4622      	mov	r2, r4
 8005854:	210a      	movs	r1, #10
 8005856:	42aa      	cmp	r2, r5
 8005858:	d113      	bne.n	8005882 <_strtod_l+0x252>
 800585a:	1822      	adds	r2, r4, r0
 800585c:	2a08      	cmp	r2, #8
 800585e:	f104 0401 	add.w	r4, r4, #1
 8005862:	4404      	add	r4, r0
 8005864:	dc1b      	bgt.n	800589e <_strtod_l+0x26e>
 8005866:	220a      	movs	r2, #10
 8005868:	9906      	ldr	r1, [sp, #24]
 800586a:	fb02 3301 	mla	r3, r2, r1, r3
 800586e:	9306      	str	r3, [sp, #24]
 8005870:	2200      	movs	r2, #0
 8005872:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005874:	4610      	mov	r0, r2
 8005876:	1c59      	adds	r1, r3, #1
 8005878:	911b      	str	r1, [sp, #108]	; 0x6c
 800587a:	785b      	ldrb	r3, [r3, #1]
 800587c:	e7ca      	b.n	8005814 <_strtod_l+0x1e4>
 800587e:	4658      	mov	r0, fp
 8005880:	e7d3      	b.n	800582a <_strtod_l+0x1fa>
 8005882:	2a08      	cmp	r2, #8
 8005884:	dc04      	bgt.n	8005890 <_strtod_l+0x260>
 8005886:	9f06      	ldr	r7, [sp, #24]
 8005888:	434f      	muls	r7, r1
 800588a:	9706      	str	r7, [sp, #24]
 800588c:	3201      	adds	r2, #1
 800588e:	e7e2      	b.n	8005856 <_strtod_l+0x226>
 8005890:	1c57      	adds	r7, r2, #1
 8005892:	2f10      	cmp	r7, #16
 8005894:	bfde      	ittt	le
 8005896:	9f05      	ldrle	r7, [sp, #20]
 8005898:	434f      	mulle	r7, r1
 800589a:	9705      	strle	r7, [sp, #20]
 800589c:	e7f6      	b.n	800588c <_strtod_l+0x25c>
 800589e:	2c10      	cmp	r4, #16
 80058a0:	bfdf      	itttt	le
 80058a2:	220a      	movle	r2, #10
 80058a4:	9905      	ldrle	r1, [sp, #20]
 80058a6:	fb02 3301 	mlale	r3, r2, r1, r3
 80058aa:	9305      	strle	r3, [sp, #20]
 80058ac:	e7e0      	b.n	8005870 <_strtod_l+0x240>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2201      	movs	r2, #1
 80058b2:	9304      	str	r3, [sp, #16]
 80058b4:	e77c      	b.n	80057b0 <_strtod_l+0x180>
 80058b6:	2700      	movs	r7, #0
 80058b8:	1cb3      	adds	r3, r6, #2
 80058ba:	931b      	str	r3, [sp, #108]	; 0x6c
 80058bc:	78b3      	ldrb	r3, [r6, #2]
 80058be:	e784      	b.n	80057ca <_strtod_l+0x19a>
 80058c0:	2701      	movs	r7, #1
 80058c2:	e7f9      	b.n	80058b8 <_strtod_l+0x288>
 80058c4:	08009bb8 	.word	0x08009bb8
 80058c8:	08009968 	.word	0x08009968
 80058cc:	7ff00000 	.word	0x7ff00000
 80058d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058d2:	1c59      	adds	r1, r3, #1
 80058d4:	911b      	str	r1, [sp, #108]	; 0x6c
 80058d6:	785b      	ldrb	r3, [r3, #1]
 80058d8:	2b30      	cmp	r3, #48	; 0x30
 80058da:	d0f9      	beq.n	80058d0 <_strtod_l+0x2a0>
 80058dc:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80058e0:	2908      	cmp	r1, #8
 80058e2:	f63f af78 	bhi.w	80057d6 <_strtod_l+0x1a6>
 80058e6:	f04f 0e0a 	mov.w	lr, #10
 80058ea:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80058ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058f0:	9309      	str	r3, [sp, #36]	; 0x24
 80058f2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80058f4:	1c59      	adds	r1, r3, #1
 80058f6:	911b      	str	r1, [sp, #108]	; 0x6c
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 80058fe:	2d09      	cmp	r5, #9
 8005900:	d935      	bls.n	800596e <_strtod_l+0x33e>
 8005902:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005904:	1b49      	subs	r1, r1, r5
 8005906:	2908      	cmp	r1, #8
 8005908:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800590c:	dc02      	bgt.n	8005914 <_strtod_l+0x2e4>
 800590e:	4565      	cmp	r5, ip
 8005910:	bfa8      	it	ge
 8005912:	4665      	movge	r5, ip
 8005914:	b107      	cbz	r7, 8005918 <_strtod_l+0x2e8>
 8005916:	426d      	negs	r5, r5
 8005918:	2c00      	cmp	r4, #0
 800591a:	d14c      	bne.n	80059b6 <_strtod_l+0x386>
 800591c:	9907      	ldr	r1, [sp, #28]
 800591e:	4301      	orrs	r1, r0
 8005920:	f47f aec7 	bne.w	80056b2 <_strtod_l+0x82>
 8005924:	2a00      	cmp	r2, #0
 8005926:	f47f aee0 	bne.w	80056ea <_strtod_l+0xba>
 800592a:	2b69      	cmp	r3, #105	; 0x69
 800592c:	d026      	beq.n	800597c <_strtod_l+0x34c>
 800592e:	dc23      	bgt.n	8005978 <_strtod_l+0x348>
 8005930:	2b49      	cmp	r3, #73	; 0x49
 8005932:	d023      	beq.n	800597c <_strtod_l+0x34c>
 8005934:	2b4e      	cmp	r3, #78	; 0x4e
 8005936:	f47f aed8 	bne.w	80056ea <_strtod_l+0xba>
 800593a:	499c      	ldr	r1, [pc, #624]	; (8005bac <_strtod_l+0x57c>)
 800593c:	a81b      	add	r0, sp, #108	; 0x6c
 800593e:	f001 fe4f 	bl	80075e0 <__match>
 8005942:	2800      	cmp	r0, #0
 8005944:	f43f aed1 	beq.w	80056ea <_strtod_l+0xba>
 8005948:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b28      	cmp	r3, #40	; 0x28
 800594e:	d12c      	bne.n	80059aa <_strtod_l+0x37a>
 8005950:	4997      	ldr	r1, [pc, #604]	; (8005bb0 <_strtod_l+0x580>)
 8005952:	aa1e      	add	r2, sp, #120	; 0x78
 8005954:	a81b      	add	r0, sp, #108	; 0x6c
 8005956:	f001 fe57 	bl	8007608 <__hexnan>
 800595a:	2805      	cmp	r0, #5
 800595c:	d125      	bne.n	80059aa <_strtod_l+0x37a>
 800595e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005960:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8005964:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8005968:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800596c:	e6a1      	b.n	80056b2 <_strtod_l+0x82>
 800596e:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8005972:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8005976:	e7bc      	b.n	80058f2 <_strtod_l+0x2c2>
 8005978:	2b6e      	cmp	r3, #110	; 0x6e
 800597a:	e7dc      	b.n	8005936 <_strtod_l+0x306>
 800597c:	498d      	ldr	r1, [pc, #564]	; (8005bb4 <_strtod_l+0x584>)
 800597e:	a81b      	add	r0, sp, #108	; 0x6c
 8005980:	f001 fe2e 	bl	80075e0 <__match>
 8005984:	2800      	cmp	r0, #0
 8005986:	f43f aeb0 	beq.w	80056ea <_strtod_l+0xba>
 800598a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800598c:	498a      	ldr	r1, [pc, #552]	; (8005bb8 <_strtod_l+0x588>)
 800598e:	3b01      	subs	r3, #1
 8005990:	a81b      	add	r0, sp, #108	; 0x6c
 8005992:	931b      	str	r3, [sp, #108]	; 0x6c
 8005994:	f001 fe24 	bl	80075e0 <__match>
 8005998:	b910      	cbnz	r0, 80059a0 <_strtod_l+0x370>
 800599a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800599c:	3301      	adds	r3, #1
 800599e:	931b      	str	r3, [sp, #108]	; 0x6c
 80059a0:	f04f 0800 	mov.w	r8, #0
 80059a4:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8005bc8 <_strtod_l+0x598>
 80059a8:	e683      	b.n	80056b2 <_strtod_l+0x82>
 80059aa:	4884      	ldr	r0, [pc, #528]	; (8005bbc <_strtod_l+0x58c>)
 80059ac:	f003 f8fe 	bl	8008bac <nan>
 80059b0:	4680      	mov	r8, r0
 80059b2:	4689      	mov	r9, r1
 80059b4:	e67d      	b.n	80056b2 <_strtod_l+0x82>
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	f1bb 0f00 	cmp.w	fp, #0
 80059bc:	bf08      	it	eq
 80059be:	46a3      	moveq	fp, r4
 80059c0:	1aeb      	subs	r3, r5, r3
 80059c2:	2c10      	cmp	r4, #16
 80059c4:	9806      	ldr	r0, [sp, #24]
 80059c6:	4626      	mov	r6, r4
 80059c8:	9307      	str	r3, [sp, #28]
 80059ca:	bfa8      	it	ge
 80059cc:	2610      	movge	r6, #16
 80059ce:	f7fa fd09 	bl	80003e4 <__aeabi_ui2d>
 80059d2:	2c09      	cmp	r4, #9
 80059d4:	4680      	mov	r8, r0
 80059d6:	4689      	mov	r9, r1
 80059d8:	dd13      	ble.n	8005a02 <_strtod_l+0x3d2>
 80059da:	4b79      	ldr	r3, [pc, #484]	; (8005bc0 <_strtod_l+0x590>)
 80059dc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80059e0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80059e4:	f7fa fd78 	bl	80004d8 <__aeabi_dmul>
 80059e8:	4680      	mov	r8, r0
 80059ea:	9805      	ldr	r0, [sp, #20]
 80059ec:	4689      	mov	r9, r1
 80059ee:	f7fa fcf9 	bl	80003e4 <__aeabi_ui2d>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4640      	mov	r0, r8
 80059f8:	4649      	mov	r1, r9
 80059fa:	f7fa fbb7 	bl	800016c <__adddf3>
 80059fe:	4680      	mov	r8, r0
 8005a00:	4689      	mov	r9, r1
 8005a02:	2c0f      	cmp	r4, #15
 8005a04:	dc36      	bgt.n	8005a74 <_strtod_l+0x444>
 8005a06:	9b07      	ldr	r3, [sp, #28]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f43f ae52 	beq.w	80056b2 <_strtod_l+0x82>
 8005a0e:	dd22      	ble.n	8005a56 <_strtod_l+0x426>
 8005a10:	2b16      	cmp	r3, #22
 8005a12:	dc09      	bgt.n	8005a28 <_strtod_l+0x3f8>
 8005a14:	4c6a      	ldr	r4, [pc, #424]	; (8005bc0 <_strtod_l+0x590>)
 8005a16:	4642      	mov	r2, r8
 8005a18:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005a22:	f7fa fd59 	bl	80004d8 <__aeabi_dmul>
 8005a26:	e7c3      	b.n	80059b0 <_strtod_l+0x380>
 8005a28:	9a07      	ldr	r2, [sp, #28]
 8005a2a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	db20      	blt.n	8005a74 <_strtod_l+0x444>
 8005a32:	4d63      	ldr	r5, [pc, #396]	; (8005bc0 <_strtod_l+0x590>)
 8005a34:	f1c4 040f 	rsb	r4, r4, #15
 8005a38:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a42:	464b      	mov	r3, r9
 8005a44:	f7fa fd48 	bl	80004d8 <__aeabi_dmul>
 8005a48:	9b07      	ldr	r3, [sp, #28]
 8005a4a:	1b1c      	subs	r4, r3, r4
 8005a4c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8005a50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a54:	e7e5      	b.n	8005a22 <_strtod_l+0x3f2>
 8005a56:	9b07      	ldr	r3, [sp, #28]
 8005a58:	3316      	adds	r3, #22
 8005a5a:	db0b      	blt.n	8005a74 <_strtod_l+0x444>
 8005a5c:	9b04      	ldr	r3, [sp, #16]
 8005a5e:	4a58      	ldr	r2, [pc, #352]	; (8005bc0 <_strtod_l+0x590>)
 8005a60:	1b5d      	subs	r5, r3, r5
 8005a62:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005a66:	4640      	mov	r0, r8
 8005a68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a6c:	4649      	mov	r1, r9
 8005a6e:	f7fa fe5d 	bl	800072c <__aeabi_ddiv>
 8005a72:	e79d      	b.n	80059b0 <_strtod_l+0x380>
 8005a74:	9b07      	ldr	r3, [sp, #28]
 8005a76:	1ba6      	subs	r6, r4, r6
 8005a78:	441e      	add	r6, r3
 8005a7a:	2e00      	cmp	r6, #0
 8005a7c:	dd71      	ble.n	8005b62 <_strtod_l+0x532>
 8005a7e:	f016 030f 	ands.w	r3, r6, #15
 8005a82:	d00a      	beq.n	8005a9a <_strtod_l+0x46a>
 8005a84:	494e      	ldr	r1, [pc, #312]	; (8005bc0 <_strtod_l+0x590>)
 8005a86:	4642      	mov	r2, r8
 8005a88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005a8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a90:	464b      	mov	r3, r9
 8005a92:	f7fa fd21 	bl	80004d8 <__aeabi_dmul>
 8005a96:	4680      	mov	r8, r0
 8005a98:	4689      	mov	r9, r1
 8005a9a:	f036 060f 	bics.w	r6, r6, #15
 8005a9e:	d050      	beq.n	8005b42 <_strtod_l+0x512>
 8005aa0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8005aa4:	dd27      	ble.n	8005af6 <_strtod_l+0x4c6>
 8005aa6:	f04f 0b00 	mov.w	fp, #0
 8005aaa:	f8cd b010 	str.w	fp, [sp, #16]
 8005aae:	f8cd b020 	str.w	fp, [sp, #32]
 8005ab2:	f8cd b018 	str.w	fp, [sp, #24]
 8005ab6:	2322      	movs	r3, #34	; 0x22
 8005ab8:	f04f 0800 	mov.w	r8, #0
 8005abc:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8005bc8 <_strtod_l+0x598>
 8005ac0:	f8ca 3000 	str.w	r3, [sl]
 8005ac4:	9b08      	ldr	r3, [sp, #32]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f43f adf3 	beq.w	80056b2 <_strtod_l+0x82>
 8005acc:	4650      	mov	r0, sl
 8005ace:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ad0:	f001 feb4 	bl	800783c <_Bfree>
 8005ad4:	4650      	mov	r0, sl
 8005ad6:	9906      	ldr	r1, [sp, #24]
 8005ad8:	f001 feb0 	bl	800783c <_Bfree>
 8005adc:	4650      	mov	r0, sl
 8005ade:	9904      	ldr	r1, [sp, #16]
 8005ae0:	f001 feac 	bl	800783c <_Bfree>
 8005ae4:	4650      	mov	r0, sl
 8005ae6:	9908      	ldr	r1, [sp, #32]
 8005ae8:	f001 fea8 	bl	800783c <_Bfree>
 8005aec:	4659      	mov	r1, fp
 8005aee:	4650      	mov	r0, sl
 8005af0:	f001 fea4 	bl	800783c <_Bfree>
 8005af4:	e5dd      	b.n	80056b2 <_strtod_l+0x82>
 8005af6:	2300      	movs	r3, #0
 8005af8:	4640      	mov	r0, r8
 8005afa:	4649      	mov	r1, r9
 8005afc:	461f      	mov	r7, r3
 8005afe:	1136      	asrs	r6, r6, #4
 8005b00:	2e01      	cmp	r6, #1
 8005b02:	dc21      	bgt.n	8005b48 <_strtod_l+0x518>
 8005b04:	b10b      	cbz	r3, 8005b0a <_strtod_l+0x4da>
 8005b06:	4680      	mov	r8, r0
 8005b08:	4689      	mov	r9, r1
 8005b0a:	4b2e      	ldr	r3, [pc, #184]	; (8005bc4 <_strtod_l+0x594>)
 8005b0c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005b10:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005b14:	4642      	mov	r2, r8
 8005b16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	f7fa fcdc 	bl	80004d8 <__aeabi_dmul>
 8005b20:	4b29      	ldr	r3, [pc, #164]	; (8005bc8 <_strtod_l+0x598>)
 8005b22:	460a      	mov	r2, r1
 8005b24:	400b      	ands	r3, r1
 8005b26:	4929      	ldr	r1, [pc, #164]	; (8005bcc <_strtod_l+0x59c>)
 8005b28:	4680      	mov	r8, r0
 8005b2a:	428b      	cmp	r3, r1
 8005b2c:	d8bb      	bhi.n	8005aa6 <_strtod_l+0x476>
 8005b2e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005b32:	428b      	cmp	r3, r1
 8005b34:	bf86      	itte	hi
 8005b36:	f04f 38ff 	movhi.w	r8, #4294967295	; 0xffffffff
 8005b3a:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005bd0 <_strtod_l+0x5a0>
 8005b3e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005b42:	2300      	movs	r3, #0
 8005b44:	9305      	str	r3, [sp, #20]
 8005b46:	e07e      	b.n	8005c46 <_strtod_l+0x616>
 8005b48:	07f2      	lsls	r2, r6, #31
 8005b4a:	d507      	bpl.n	8005b5c <_strtod_l+0x52c>
 8005b4c:	4b1d      	ldr	r3, [pc, #116]	; (8005bc4 <_strtod_l+0x594>)
 8005b4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b56:	f7fa fcbf 	bl	80004d8 <__aeabi_dmul>
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	3701      	adds	r7, #1
 8005b5e:	1076      	asrs	r6, r6, #1
 8005b60:	e7ce      	b.n	8005b00 <_strtod_l+0x4d0>
 8005b62:	d0ee      	beq.n	8005b42 <_strtod_l+0x512>
 8005b64:	4276      	negs	r6, r6
 8005b66:	f016 020f 	ands.w	r2, r6, #15
 8005b6a:	d00a      	beq.n	8005b82 <_strtod_l+0x552>
 8005b6c:	4b14      	ldr	r3, [pc, #80]	; (8005bc0 <_strtod_l+0x590>)
 8005b6e:	4640      	mov	r0, r8
 8005b70:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b74:	4649      	mov	r1, r9
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f7fa fdd7 	bl	800072c <__aeabi_ddiv>
 8005b7e:	4680      	mov	r8, r0
 8005b80:	4689      	mov	r9, r1
 8005b82:	1136      	asrs	r6, r6, #4
 8005b84:	d0dd      	beq.n	8005b42 <_strtod_l+0x512>
 8005b86:	2e1f      	cmp	r6, #31
 8005b88:	dd24      	ble.n	8005bd4 <_strtod_l+0x5a4>
 8005b8a:	f04f 0b00 	mov.w	fp, #0
 8005b8e:	f8cd b010 	str.w	fp, [sp, #16]
 8005b92:	f8cd b020 	str.w	fp, [sp, #32]
 8005b96:	f8cd b018 	str.w	fp, [sp, #24]
 8005b9a:	2322      	movs	r3, #34	; 0x22
 8005b9c:	f04f 0800 	mov.w	r8, #0
 8005ba0:	f04f 0900 	mov.w	r9, #0
 8005ba4:	f8ca 3000 	str.w	r3, [sl]
 8005ba8:	e78c      	b.n	8005ac4 <_strtod_l+0x494>
 8005baa:	bf00      	nop
 8005bac:	0800993d 	.word	0x0800993d
 8005bb0:	0800997c 	.word	0x0800997c
 8005bb4:	08009935 	.word	0x08009935
 8005bb8:	08009abc 	.word	0x08009abc
 8005bbc:	08009d93 	.word	0x08009d93
 8005bc0:	08009c58 	.word	0x08009c58
 8005bc4:	08009c30 	.word	0x08009c30
 8005bc8:	7ff00000 	.word	0x7ff00000
 8005bcc:	7ca00000 	.word	0x7ca00000
 8005bd0:	7fefffff 	.word	0x7fefffff
 8005bd4:	f016 0310 	ands.w	r3, r6, #16
 8005bd8:	bf18      	it	ne
 8005bda:	236a      	movne	r3, #106	; 0x6a
 8005bdc:	4640      	mov	r0, r8
 8005bde:	9305      	str	r3, [sp, #20]
 8005be0:	4649      	mov	r1, r9
 8005be2:	2300      	movs	r3, #0
 8005be4:	4fb2      	ldr	r7, [pc, #712]	; (8005eb0 <_strtod_l+0x880>)
 8005be6:	07f2      	lsls	r2, r6, #31
 8005be8:	d504      	bpl.n	8005bf4 <_strtod_l+0x5c4>
 8005bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bee:	f7fa fc73 	bl	80004d8 <__aeabi_dmul>
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	1076      	asrs	r6, r6, #1
 8005bf6:	f107 0708 	add.w	r7, r7, #8
 8005bfa:	d1f4      	bne.n	8005be6 <_strtod_l+0x5b6>
 8005bfc:	b10b      	cbz	r3, 8005c02 <_strtod_l+0x5d2>
 8005bfe:	4680      	mov	r8, r0
 8005c00:	4689      	mov	r9, r1
 8005c02:	9b05      	ldr	r3, [sp, #20]
 8005c04:	b1bb      	cbz	r3, 8005c36 <_strtod_l+0x606>
 8005c06:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8005c0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	4649      	mov	r1, r9
 8005c12:	dd10      	ble.n	8005c36 <_strtod_l+0x606>
 8005c14:	2b1f      	cmp	r3, #31
 8005c16:	f340 812b 	ble.w	8005e70 <_strtod_l+0x840>
 8005c1a:	2b34      	cmp	r3, #52	; 0x34
 8005c1c:	bfd8      	it	le
 8005c1e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 8005c22:	f04f 0800 	mov.w	r8, #0
 8005c26:	bfcf      	iteee	gt
 8005c28:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005c2c:	3b20      	suble	r3, #32
 8005c2e:	fa02 f303 	lslle.w	r3, r2, r3
 8005c32:	ea03 0901 	andle.w	r9, r3, r1
 8005c36:	2200      	movs	r2, #0
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	4649      	mov	r1, r9
 8005c3e:	f7fa feb3 	bl	80009a8 <__aeabi_dcmpeq>
 8005c42:	2800      	cmp	r0, #0
 8005c44:	d1a1      	bne.n	8005b8a <_strtod_l+0x55a>
 8005c46:	9b06      	ldr	r3, [sp, #24]
 8005c48:	465a      	mov	r2, fp
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	4650      	mov	r0, sl
 8005c4e:	4623      	mov	r3, r4
 8005c50:	9908      	ldr	r1, [sp, #32]
 8005c52:	f001 fe5f 	bl	8007914 <__s2b>
 8005c56:	9008      	str	r0, [sp, #32]
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	f43f af24 	beq.w	8005aa6 <_strtod_l+0x476>
 8005c5e:	9b04      	ldr	r3, [sp, #16]
 8005c60:	f04f 0b00 	mov.w	fp, #0
 8005c64:	1b5d      	subs	r5, r3, r5
 8005c66:	9b07      	ldr	r3, [sp, #28]
 8005c68:	f8cd b010 	str.w	fp, [sp, #16]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	bfb4      	ite	lt
 8005c70:	462b      	movlt	r3, r5
 8005c72:	2300      	movge	r3, #0
 8005c74:	930e      	str	r3, [sp, #56]	; 0x38
 8005c76:	9b07      	ldr	r3, [sp, #28]
 8005c78:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005c7c:	9316      	str	r3, [sp, #88]	; 0x58
 8005c7e:	9b08      	ldr	r3, [sp, #32]
 8005c80:	4650      	mov	r0, sl
 8005c82:	6859      	ldr	r1, [r3, #4]
 8005c84:	f001 fd9a 	bl	80077bc <_Balloc>
 8005c88:	9006      	str	r0, [sp, #24]
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	f43f af13 	beq.w	8005ab6 <_strtod_l+0x486>
 8005c90:	9b08      	ldr	r3, [sp, #32]
 8005c92:	300c      	adds	r0, #12
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	f103 010c 	add.w	r1, r3, #12
 8005c9a:	3202      	adds	r2, #2
 8005c9c:	0092      	lsls	r2, r2, #2
 8005c9e:	f7fe fd89 	bl	80047b4 <memcpy>
 8005ca2:	ab1e      	add	r3, sp, #120	; 0x78
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ca8:	9300      	str	r3, [sp, #0]
 8005caa:	4642      	mov	r2, r8
 8005cac:	464b      	mov	r3, r9
 8005cae:	4650      	mov	r0, sl
 8005cb0:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8005cb4:	f002 f96c 	bl	8007f90 <__d2b>
 8005cb8:	901c      	str	r0, [sp, #112]	; 0x70
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	f43f aefb 	beq.w	8005ab6 <_strtod_l+0x486>
 8005cc0:	2101      	movs	r1, #1
 8005cc2:	4650      	mov	r0, sl
 8005cc4:	f001 febe 	bl	8007a44 <__i2b>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	9004      	str	r0, [sp, #16]
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	f43f aef2 	beq.w	8005ab6 <_strtod_l+0x486>
 8005cd2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005cd4:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005cd6:	2d00      	cmp	r5, #0
 8005cd8:	bfab      	itete	ge
 8005cda:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005cdc:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8005cde:	18ee      	addge	r6, r5, r3
 8005ce0:	1b5c      	sublt	r4, r3, r5
 8005ce2:	9b05      	ldr	r3, [sp, #20]
 8005ce4:	bfa8      	it	ge
 8005ce6:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8005ce8:	eba5 0503 	sub.w	r5, r5, r3
 8005cec:	4415      	add	r5, r2
 8005cee:	4b71      	ldr	r3, [pc, #452]	; (8005eb4 <_strtod_l+0x884>)
 8005cf0:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 8005cf4:	bfb8      	it	lt
 8005cf6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8005cf8:	429d      	cmp	r5, r3
 8005cfa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005cfe:	f280 80c9 	bge.w	8005e94 <_strtod_l+0x864>
 8005d02:	1b5b      	subs	r3, r3, r5
 8005d04:	2b1f      	cmp	r3, #31
 8005d06:	f04f 0701 	mov.w	r7, #1
 8005d0a:	eba2 0203 	sub.w	r2, r2, r3
 8005d0e:	f300 80b6 	bgt.w	8005e7e <_strtod_l+0x84e>
 8005d12:	2500      	movs	r5, #0
 8005d14:	fa07 f303 	lsl.w	r3, r7, r3
 8005d18:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d1a:	18b7      	adds	r7, r6, r2
 8005d1c:	9b05      	ldr	r3, [sp, #20]
 8005d1e:	42be      	cmp	r6, r7
 8005d20:	4414      	add	r4, r2
 8005d22:	441c      	add	r4, r3
 8005d24:	4633      	mov	r3, r6
 8005d26:	bfa8      	it	ge
 8005d28:	463b      	movge	r3, r7
 8005d2a:	42a3      	cmp	r3, r4
 8005d2c:	bfa8      	it	ge
 8005d2e:	4623      	movge	r3, r4
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	bfc2      	ittt	gt
 8005d34:	1aff      	subgt	r7, r7, r3
 8005d36:	1ae4      	subgt	r4, r4, r3
 8005d38:	1af6      	subgt	r6, r6, r3
 8005d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	dd17      	ble.n	8005d70 <_strtod_l+0x740>
 8005d40:	461a      	mov	r2, r3
 8005d42:	4650      	mov	r0, sl
 8005d44:	9904      	ldr	r1, [sp, #16]
 8005d46:	f001 ff37 	bl	8007bb8 <__pow5mult>
 8005d4a:	9004      	str	r0, [sp, #16]
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	f43f aeb2 	beq.w	8005ab6 <_strtod_l+0x486>
 8005d52:	4601      	mov	r1, r0
 8005d54:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8005d56:	4650      	mov	r0, sl
 8005d58:	f001 fe8a 	bl	8007a70 <__multiply>
 8005d5c:	9009      	str	r0, [sp, #36]	; 0x24
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	f43f aea9 	beq.w	8005ab6 <_strtod_l+0x486>
 8005d64:	4650      	mov	r0, sl
 8005d66:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005d68:	f001 fd68 	bl	800783c <_Bfree>
 8005d6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d6e:	931c      	str	r3, [sp, #112]	; 0x70
 8005d70:	2f00      	cmp	r7, #0
 8005d72:	f300 8093 	bgt.w	8005e9c <_strtod_l+0x86c>
 8005d76:	9b07      	ldr	r3, [sp, #28]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	dd08      	ble.n	8005d8e <_strtod_l+0x75e>
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005d80:	9906      	ldr	r1, [sp, #24]
 8005d82:	f001 ff19 	bl	8007bb8 <__pow5mult>
 8005d86:	9006      	str	r0, [sp, #24]
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	f43f ae94 	beq.w	8005ab6 <_strtod_l+0x486>
 8005d8e:	2c00      	cmp	r4, #0
 8005d90:	dd08      	ble.n	8005da4 <_strtod_l+0x774>
 8005d92:	4622      	mov	r2, r4
 8005d94:	4650      	mov	r0, sl
 8005d96:	9906      	ldr	r1, [sp, #24]
 8005d98:	f001 ff68 	bl	8007c6c <__lshift>
 8005d9c:	9006      	str	r0, [sp, #24]
 8005d9e:	2800      	cmp	r0, #0
 8005da0:	f43f ae89 	beq.w	8005ab6 <_strtod_l+0x486>
 8005da4:	2e00      	cmp	r6, #0
 8005da6:	dd08      	ble.n	8005dba <_strtod_l+0x78a>
 8005da8:	4632      	mov	r2, r6
 8005daa:	4650      	mov	r0, sl
 8005dac:	9904      	ldr	r1, [sp, #16]
 8005dae:	f001 ff5d 	bl	8007c6c <__lshift>
 8005db2:	9004      	str	r0, [sp, #16]
 8005db4:	2800      	cmp	r0, #0
 8005db6:	f43f ae7e 	beq.w	8005ab6 <_strtod_l+0x486>
 8005dba:	4650      	mov	r0, sl
 8005dbc:	9a06      	ldr	r2, [sp, #24]
 8005dbe:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005dc0:	f001 ffdc 	bl	8007d7c <__mdiff>
 8005dc4:	4683      	mov	fp, r0
 8005dc6:	2800      	cmp	r0, #0
 8005dc8:	f43f ae75 	beq.w	8005ab6 <_strtod_l+0x486>
 8005dcc:	2400      	movs	r4, #0
 8005dce:	68c3      	ldr	r3, [r0, #12]
 8005dd0:	9904      	ldr	r1, [sp, #16]
 8005dd2:	60c4      	str	r4, [r0, #12]
 8005dd4:	930d      	str	r3, [sp, #52]	; 0x34
 8005dd6:	f001 ffb5 	bl	8007d44 <__mcmp>
 8005dda:	42a0      	cmp	r0, r4
 8005ddc:	da70      	bge.n	8005ec0 <_strtod_l+0x890>
 8005dde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005de0:	ea53 0308 	orrs.w	r3, r3, r8
 8005de4:	f040 8096 	bne.w	8005f14 <_strtod_l+0x8e4>
 8005de8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f040 8091 	bne.w	8005f14 <_strtod_l+0x8e4>
 8005df2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005df6:	0d1b      	lsrs	r3, r3, #20
 8005df8:	051b      	lsls	r3, r3, #20
 8005dfa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005dfe:	f240 8089 	bls.w	8005f14 <_strtod_l+0x8e4>
 8005e02:	f8db 3014 	ldr.w	r3, [fp, #20]
 8005e06:	b923      	cbnz	r3, 8005e12 <_strtod_l+0x7e2>
 8005e08:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	f340 8081 	ble.w	8005f14 <_strtod_l+0x8e4>
 8005e12:	4659      	mov	r1, fp
 8005e14:	2201      	movs	r2, #1
 8005e16:	4650      	mov	r0, sl
 8005e18:	f001 ff28 	bl	8007c6c <__lshift>
 8005e1c:	9904      	ldr	r1, [sp, #16]
 8005e1e:	4683      	mov	fp, r0
 8005e20:	f001 ff90 	bl	8007d44 <__mcmp>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	dd75      	ble.n	8005f14 <_strtod_l+0x8e4>
 8005e28:	9905      	ldr	r1, [sp, #20]
 8005e2a:	464b      	mov	r3, r9
 8005e2c:	4a22      	ldr	r2, [pc, #136]	; (8005eb8 <_strtod_l+0x888>)
 8005e2e:	2900      	cmp	r1, #0
 8005e30:	f000 8091 	beq.w	8005f56 <_strtod_l+0x926>
 8005e34:	ea02 0109 	and.w	r1, r2, r9
 8005e38:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005e3c:	f300 808b 	bgt.w	8005f56 <_strtod_l+0x926>
 8005e40:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005e44:	f77f aea9 	ble.w	8005b9a <_strtod_l+0x56a>
 8005e48:	2300      	movs	r3, #0
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <_strtod_l+0x88c>)
 8005e4c:	4640      	mov	r0, r8
 8005e4e:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8005e52:	4649      	mov	r1, r9
 8005e54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8005e58:	f7fa fb3e 	bl	80004d8 <__aeabi_dmul>
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4303      	orrs	r3, r0
 8005e60:	bf08      	it	eq
 8005e62:	2322      	moveq	r3, #34	; 0x22
 8005e64:	4680      	mov	r8, r0
 8005e66:	4689      	mov	r9, r1
 8005e68:	bf08      	it	eq
 8005e6a:	f8ca 3000 	streq.w	r3, [sl]
 8005e6e:	e62d      	b.n	8005acc <_strtod_l+0x49c>
 8005e70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e74:	fa02 f303 	lsl.w	r3, r2, r3
 8005e78:	ea03 0808 	and.w	r8, r3, r8
 8005e7c:	e6db      	b.n	8005c36 <_strtod_l+0x606>
 8005e7e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8005e82:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8005e86:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8005e8a:	35e2      	adds	r5, #226	; 0xe2
 8005e8c:	fa07 f505 	lsl.w	r5, r7, r5
 8005e90:	970f      	str	r7, [sp, #60]	; 0x3c
 8005e92:	e742      	b.n	8005d1a <_strtod_l+0x6ea>
 8005e94:	2301      	movs	r3, #1
 8005e96:	2500      	movs	r5, #0
 8005e98:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e9a:	e73e      	b.n	8005d1a <_strtod_l+0x6ea>
 8005e9c:	463a      	mov	r2, r7
 8005e9e:	4650      	mov	r0, sl
 8005ea0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005ea2:	f001 fee3 	bl	8007c6c <__lshift>
 8005ea6:	901c      	str	r0, [sp, #112]	; 0x70
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f47f af64 	bne.w	8005d76 <_strtod_l+0x746>
 8005eae:	e602      	b.n	8005ab6 <_strtod_l+0x486>
 8005eb0:	08009990 	.word	0x08009990
 8005eb4:	fffffc02 	.word	0xfffffc02
 8005eb8:	7ff00000 	.word	0x7ff00000
 8005ebc:	39500000 	.word	0x39500000
 8005ec0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005ec4:	d166      	bne.n	8005f94 <_strtod_l+0x964>
 8005ec6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ec8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ecc:	b35a      	cbz	r2, 8005f26 <_strtod_l+0x8f6>
 8005ece:	4a9c      	ldr	r2, [pc, #624]	; (8006140 <_strtod_l+0xb10>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d12c      	bne.n	8005f2e <_strtod_l+0x8fe>
 8005ed4:	9b05      	ldr	r3, [sp, #20]
 8005ed6:	4640      	mov	r0, r8
 8005ed8:	b303      	cbz	r3, 8005f1c <_strtod_l+0x8ec>
 8005eda:	464b      	mov	r3, r9
 8005edc:	4a99      	ldr	r2, [pc, #612]	; (8006144 <_strtod_l+0xb14>)
 8005ede:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005ee2:	401a      	ands	r2, r3
 8005ee4:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8005ee8:	d81b      	bhi.n	8005f22 <_strtod_l+0x8f2>
 8005eea:	0d12      	lsrs	r2, r2, #20
 8005eec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef4:	4298      	cmp	r0, r3
 8005ef6:	d11a      	bne.n	8005f2e <_strtod_l+0x8fe>
 8005ef8:	4b93      	ldr	r3, [pc, #588]	; (8006148 <_strtod_l+0xb18>)
 8005efa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005efc:	429a      	cmp	r2, r3
 8005efe:	d102      	bne.n	8005f06 <_strtod_l+0x8d6>
 8005f00:	3001      	adds	r0, #1
 8005f02:	f43f add8 	beq.w	8005ab6 <_strtod_l+0x486>
 8005f06:	f04f 0800 	mov.w	r8, #0
 8005f0a:	4b8e      	ldr	r3, [pc, #568]	; (8006144 <_strtod_l+0xb14>)
 8005f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f0e:	401a      	ands	r2, r3
 8005f10:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005f14:	9b05      	ldr	r3, [sp, #20]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d196      	bne.n	8005e48 <_strtod_l+0x818>
 8005f1a:	e5d7      	b.n	8005acc <_strtod_l+0x49c>
 8005f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f20:	e7e8      	b.n	8005ef4 <_strtod_l+0x8c4>
 8005f22:	460b      	mov	r3, r1
 8005f24:	e7e6      	b.n	8005ef4 <_strtod_l+0x8c4>
 8005f26:	ea53 0308 	orrs.w	r3, r3, r8
 8005f2a:	f43f af7d 	beq.w	8005e28 <_strtod_l+0x7f8>
 8005f2e:	b1e5      	cbz	r5, 8005f6a <_strtod_l+0x93a>
 8005f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f32:	421d      	tst	r5, r3
 8005f34:	d0ee      	beq.n	8005f14 <_strtod_l+0x8e4>
 8005f36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f38:	4640      	mov	r0, r8
 8005f3a:	4649      	mov	r1, r9
 8005f3c:	9a05      	ldr	r2, [sp, #20]
 8005f3e:	b1c3      	cbz	r3, 8005f72 <_strtod_l+0x942>
 8005f40:	f7ff fb53 	bl	80055ea <sulp>
 8005f44:	4602      	mov	r2, r0
 8005f46:	460b      	mov	r3, r1
 8005f48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f4c:	f7fa f90e 	bl	800016c <__adddf3>
 8005f50:	4680      	mov	r8, r0
 8005f52:	4689      	mov	r9, r1
 8005f54:	e7de      	b.n	8005f14 <_strtod_l+0x8e4>
 8005f56:	4013      	ands	r3, r2
 8005f58:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8005f5c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8005f60:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005f64:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8005f68:	e7d4      	b.n	8005f14 <_strtod_l+0x8e4>
 8005f6a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f6c:	ea13 0f08 	tst.w	r3, r8
 8005f70:	e7e0      	b.n	8005f34 <_strtod_l+0x904>
 8005f72:	f7ff fb3a 	bl	80055ea <sulp>
 8005f76:	4602      	mov	r2, r0
 8005f78:	460b      	mov	r3, r1
 8005f7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005f7e:	f7fa f8f3 	bl	8000168 <__aeabi_dsub>
 8005f82:	2200      	movs	r2, #0
 8005f84:	2300      	movs	r3, #0
 8005f86:	4680      	mov	r8, r0
 8005f88:	4689      	mov	r9, r1
 8005f8a:	f7fa fd0d 	bl	80009a8 <__aeabi_dcmpeq>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	d0c0      	beq.n	8005f14 <_strtod_l+0x8e4>
 8005f92:	e602      	b.n	8005b9a <_strtod_l+0x56a>
 8005f94:	4658      	mov	r0, fp
 8005f96:	9904      	ldr	r1, [sp, #16]
 8005f98:	f002 f856 	bl	8008048 <__ratio>
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	f7fa fd13 	bl	80009d0 <__aeabi_dcmple>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d075      	beq.n	800609a <_strtod_l+0xa6a>
 8005fae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d047      	beq.n	8006044 <_strtod_l+0xa14>
 8005fb4:	2600      	movs	r6, #0
 8005fb6:	4f65      	ldr	r7, [pc, #404]	; (800614c <_strtod_l+0xb1c>)
 8005fb8:	4d64      	ldr	r5, [pc, #400]	; (800614c <_strtod_l+0xb1c>)
 8005fba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fc0:	0d1b      	lsrs	r3, r3, #20
 8005fc2:	051b      	lsls	r3, r3, #20
 8005fc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005fc8:	4b61      	ldr	r3, [pc, #388]	; (8006150 <_strtod_l+0xb20>)
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	f040 80c8 	bne.w	8006160 <_strtod_l+0xb30>
 8005fd0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005fd4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8005fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fda:	4640      	mov	r0, r8
 8005fdc:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005fe0:	4649      	mov	r1, r9
 8005fe2:	f001 ff5b 	bl	8007e9c <__ulp>
 8005fe6:	4602      	mov	r2, r0
 8005fe8:	460b      	mov	r3, r1
 8005fea:	4630      	mov	r0, r6
 8005fec:	4639      	mov	r1, r7
 8005fee:	f7fa fa73 	bl	80004d8 <__aeabi_dmul>
 8005ff2:	4642      	mov	r2, r8
 8005ff4:	464b      	mov	r3, r9
 8005ff6:	f7fa f8b9 	bl	800016c <__adddf3>
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	4951      	ldr	r1, [pc, #324]	; (8006144 <_strtod_l+0xb14>)
 8005ffe:	4a55      	ldr	r2, [pc, #340]	; (8006154 <_strtod_l+0xb24>)
 8006000:	4019      	ands	r1, r3
 8006002:	4291      	cmp	r1, r2
 8006004:	4680      	mov	r8, r0
 8006006:	d95e      	bls.n	80060c6 <_strtod_l+0xa96>
 8006008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800600a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800600e:	4293      	cmp	r3, r2
 8006010:	d103      	bne.n	800601a <_strtod_l+0x9ea>
 8006012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006014:	3301      	adds	r3, #1
 8006016:	f43f ad4e 	beq.w	8005ab6 <_strtod_l+0x486>
 800601a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800601e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8006148 <_strtod_l+0xb18>
 8006022:	4650      	mov	r0, sl
 8006024:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006026:	f001 fc09 	bl	800783c <_Bfree>
 800602a:	4650      	mov	r0, sl
 800602c:	9906      	ldr	r1, [sp, #24]
 800602e:	f001 fc05 	bl	800783c <_Bfree>
 8006032:	4650      	mov	r0, sl
 8006034:	9904      	ldr	r1, [sp, #16]
 8006036:	f001 fc01 	bl	800783c <_Bfree>
 800603a:	4659      	mov	r1, fp
 800603c:	4650      	mov	r0, sl
 800603e:	f001 fbfd 	bl	800783c <_Bfree>
 8006042:	e61c      	b.n	8005c7e <_strtod_l+0x64e>
 8006044:	f1b8 0f00 	cmp.w	r8, #0
 8006048:	d119      	bne.n	800607e <_strtod_l+0xa4e>
 800604a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800604c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006050:	b9e3      	cbnz	r3, 800608c <_strtod_l+0xa5c>
 8006052:	2200      	movs	r2, #0
 8006054:	4630      	mov	r0, r6
 8006056:	4639      	mov	r1, r7
 8006058:	4b3c      	ldr	r3, [pc, #240]	; (800614c <_strtod_l+0xb1c>)
 800605a:	f7fa fcaf 	bl	80009bc <__aeabi_dcmplt>
 800605e:	b9c8      	cbnz	r0, 8006094 <_strtod_l+0xa64>
 8006060:	2200      	movs	r2, #0
 8006062:	4630      	mov	r0, r6
 8006064:	4639      	mov	r1, r7
 8006066:	4b3c      	ldr	r3, [pc, #240]	; (8006158 <_strtod_l+0xb28>)
 8006068:	f7fa fa36 	bl	80004d8 <__aeabi_dmul>
 800606c:	4604      	mov	r4, r0
 800606e:	460d      	mov	r5, r1
 8006070:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006074:	9418      	str	r4, [sp, #96]	; 0x60
 8006076:	9319      	str	r3, [sp, #100]	; 0x64
 8006078:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800607c:	e79d      	b.n	8005fba <_strtod_l+0x98a>
 800607e:	f1b8 0f01 	cmp.w	r8, #1
 8006082:	d103      	bne.n	800608c <_strtod_l+0xa5c>
 8006084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	f43f ad87 	beq.w	8005b9a <_strtod_l+0x56a>
 800608c:	2600      	movs	r6, #0
 800608e:	2400      	movs	r4, #0
 8006090:	4f32      	ldr	r7, [pc, #200]	; (800615c <_strtod_l+0xb2c>)
 8006092:	e791      	b.n	8005fb8 <_strtod_l+0x988>
 8006094:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006096:	4d30      	ldr	r5, [pc, #192]	; (8006158 <_strtod_l+0xb28>)
 8006098:	e7ea      	b.n	8006070 <_strtod_l+0xa40>
 800609a:	4b2f      	ldr	r3, [pc, #188]	; (8006158 <_strtod_l+0xb28>)
 800609c:	2200      	movs	r2, #0
 800609e:	4630      	mov	r0, r6
 80060a0:	4639      	mov	r1, r7
 80060a2:	f7fa fa19 	bl	80004d8 <__aeabi_dmul>
 80060a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060a8:	4604      	mov	r4, r0
 80060aa:	460d      	mov	r5, r1
 80060ac:	b933      	cbnz	r3, 80060bc <_strtod_l+0xa8c>
 80060ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060b2:	9010      	str	r0, [sp, #64]	; 0x40
 80060b4:	9311      	str	r3, [sp, #68]	; 0x44
 80060b6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80060ba:	e77e      	b.n	8005fba <_strtod_l+0x98a>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80060c4:	e7f7      	b.n	80060b6 <_strtod_l+0xa86>
 80060c6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80060ca:	9b05      	ldr	r3, [sp, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d1a8      	bne.n	8006022 <_strtod_l+0x9f2>
 80060d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80060d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80060d6:	0d1b      	lsrs	r3, r3, #20
 80060d8:	051b      	lsls	r3, r3, #20
 80060da:	429a      	cmp	r2, r3
 80060dc:	d1a1      	bne.n	8006022 <_strtod_l+0x9f2>
 80060de:	4620      	mov	r0, r4
 80060e0:	4629      	mov	r1, r5
 80060e2:	f7fa fd41 	bl	8000b68 <__aeabi_d2lz>
 80060e6:	f7fa f9c9 	bl	800047c <__aeabi_l2d>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4620      	mov	r0, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	f7fa f839 	bl	8000168 <__aeabi_dsub>
 80060f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060fc:	ea43 0308 	orr.w	r3, r3, r8
 8006100:	4313      	orrs	r3, r2
 8006102:	4604      	mov	r4, r0
 8006104:	460d      	mov	r5, r1
 8006106:	d066      	beq.n	80061d6 <_strtod_l+0xba6>
 8006108:	a309      	add	r3, pc, #36	; (adr r3, 8006130 <_strtod_l+0xb00>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	f7fa fc55 	bl	80009bc <__aeabi_dcmplt>
 8006112:	2800      	cmp	r0, #0
 8006114:	f47f acda 	bne.w	8005acc <_strtod_l+0x49c>
 8006118:	a307      	add	r3, pc, #28	; (adr r3, 8006138 <_strtod_l+0xb08>)
 800611a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800611e:	4620      	mov	r0, r4
 8006120:	4629      	mov	r1, r5
 8006122:	f7fa fc69 	bl	80009f8 <__aeabi_dcmpgt>
 8006126:	2800      	cmp	r0, #0
 8006128:	f43f af7b 	beq.w	8006022 <_strtod_l+0x9f2>
 800612c:	e4ce      	b.n	8005acc <_strtod_l+0x49c>
 800612e:	bf00      	nop
 8006130:	94a03595 	.word	0x94a03595
 8006134:	3fdfffff 	.word	0x3fdfffff
 8006138:	35afe535 	.word	0x35afe535
 800613c:	3fe00000 	.word	0x3fe00000
 8006140:	000fffff 	.word	0x000fffff
 8006144:	7ff00000 	.word	0x7ff00000
 8006148:	7fefffff 	.word	0x7fefffff
 800614c:	3ff00000 	.word	0x3ff00000
 8006150:	7fe00000 	.word	0x7fe00000
 8006154:	7c9fffff 	.word	0x7c9fffff
 8006158:	3fe00000 	.word	0x3fe00000
 800615c:	bff00000 	.word	0xbff00000
 8006160:	9b05      	ldr	r3, [sp, #20]
 8006162:	b313      	cbz	r3, 80061aa <_strtod_l+0xb7a>
 8006164:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006166:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800616a:	d81e      	bhi.n	80061aa <_strtod_l+0xb7a>
 800616c:	a326      	add	r3, pc, #152	; (adr r3, 8006208 <_strtod_l+0xbd8>)
 800616e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006172:	4620      	mov	r0, r4
 8006174:	4629      	mov	r1, r5
 8006176:	f7fa fc2b 	bl	80009d0 <__aeabi_dcmple>
 800617a:	b190      	cbz	r0, 80061a2 <_strtod_l+0xb72>
 800617c:	4629      	mov	r1, r5
 800617e:	4620      	mov	r0, r4
 8006180:	f7fa fc82 	bl	8000a88 <__aeabi_d2uiz>
 8006184:	2801      	cmp	r0, #1
 8006186:	bf38      	it	cc
 8006188:	2001      	movcc	r0, #1
 800618a:	f7fa f92b 	bl	80003e4 <__aeabi_ui2d>
 800618e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006190:	4604      	mov	r4, r0
 8006192:	460d      	mov	r5, r1
 8006194:	b9d3      	cbnz	r3, 80061cc <_strtod_l+0xb9c>
 8006196:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800619a:	9012      	str	r0, [sp, #72]	; 0x48
 800619c:	9313      	str	r3, [sp, #76]	; 0x4c
 800619e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80061a2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80061a4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80061a8:	1a9f      	subs	r7, r3, r2
 80061aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80061ae:	f001 fe75 	bl	8007e9c <__ulp>
 80061b2:	4602      	mov	r2, r0
 80061b4:	460b      	mov	r3, r1
 80061b6:	4630      	mov	r0, r6
 80061b8:	4639      	mov	r1, r7
 80061ba:	f7fa f98d 	bl	80004d8 <__aeabi_dmul>
 80061be:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80061c2:	f7f9 ffd3 	bl	800016c <__adddf3>
 80061c6:	4680      	mov	r8, r0
 80061c8:	4689      	mov	r9, r1
 80061ca:	e77e      	b.n	80060ca <_strtod_l+0xa9a>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 80061d4:	e7e3      	b.n	800619e <_strtod_l+0xb6e>
 80061d6:	a30e      	add	r3, pc, #56	; (adr r3, 8006210 <_strtod_l+0xbe0>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f7fa fbee 	bl	80009bc <__aeabi_dcmplt>
 80061e0:	e7a1      	b.n	8006126 <_strtod_l+0xaf6>
 80061e2:	2300      	movs	r3, #0
 80061e4:	930c      	str	r3, [sp, #48]	; 0x30
 80061e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	f7ff ba65 	b.w	80056ba <_strtod_l+0x8a>
 80061f0:	2b65      	cmp	r3, #101	; 0x65
 80061f2:	f43f ab5c 	beq.w	80058ae <_strtod_l+0x27e>
 80061f6:	2b45      	cmp	r3, #69	; 0x45
 80061f8:	f43f ab59 	beq.w	80058ae <_strtod_l+0x27e>
 80061fc:	2201      	movs	r2, #1
 80061fe:	f7ff bb8d 	b.w	800591c <_strtod_l+0x2ec>
 8006202:	bf00      	nop
 8006204:	f3af 8000 	nop.w
 8006208:	ffc00000 	.word	0xffc00000
 800620c:	41dfffff 	.word	0x41dfffff
 8006210:	94a03595 	.word	0x94a03595
 8006214:	3fcfffff 	.word	0x3fcfffff

08006218 <_strtod_r>:
 8006218:	4b01      	ldr	r3, [pc, #4]	; (8006220 <_strtod_r+0x8>)
 800621a:	f7ff ba09 	b.w	8005630 <_strtod_l>
 800621e:	bf00      	nop
 8006220:	20000124 	.word	0x20000124

08006224 <_strtol_l.isra.0>:
 8006224:	2b01      	cmp	r3, #1
 8006226:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800622a:	4686      	mov	lr, r0
 800622c:	d001      	beq.n	8006232 <_strtol_l.isra.0+0xe>
 800622e:	2b24      	cmp	r3, #36	; 0x24
 8006230:	d906      	bls.n	8006240 <_strtol_l.isra.0+0x1c>
 8006232:	f7fe fa95 	bl	8004760 <__errno>
 8006236:	2316      	movs	r3, #22
 8006238:	6003      	str	r3, [r0, #0]
 800623a:	2000      	movs	r0, #0
 800623c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006240:	468c      	mov	ip, r1
 8006242:	4e3a      	ldr	r6, [pc, #232]	; (800632c <_strtol_l.isra.0+0x108>)
 8006244:	4660      	mov	r0, ip
 8006246:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800624a:	5da5      	ldrb	r5, [r4, r6]
 800624c:	f015 0508 	ands.w	r5, r5, #8
 8006250:	d1f8      	bne.n	8006244 <_strtol_l.isra.0+0x20>
 8006252:	2c2d      	cmp	r4, #45	; 0x2d
 8006254:	d133      	bne.n	80062be <_strtol_l.isra.0+0x9a>
 8006256:	f04f 0801 	mov.w	r8, #1
 800625a:	f89c 4000 	ldrb.w	r4, [ip]
 800625e:	f100 0c02 	add.w	ip, r0, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d05d      	beq.n	8006322 <_strtol_l.isra.0+0xfe>
 8006266:	2b10      	cmp	r3, #16
 8006268:	d10c      	bne.n	8006284 <_strtol_l.isra.0+0x60>
 800626a:	2c30      	cmp	r4, #48	; 0x30
 800626c:	d10a      	bne.n	8006284 <_strtol_l.isra.0+0x60>
 800626e:	f89c 0000 	ldrb.w	r0, [ip]
 8006272:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006276:	2858      	cmp	r0, #88	; 0x58
 8006278:	d14e      	bne.n	8006318 <_strtol_l.isra.0+0xf4>
 800627a:	2310      	movs	r3, #16
 800627c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8006280:	f10c 0c02 	add.w	ip, ip, #2
 8006284:	2500      	movs	r5, #0
 8006286:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800628a:	3f01      	subs	r7, #1
 800628c:	fbb7 f9f3 	udiv	r9, r7, r3
 8006290:	4628      	mov	r0, r5
 8006292:	fb03 7a19 	mls	sl, r3, r9, r7
 8006296:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800629a:	2e09      	cmp	r6, #9
 800629c:	d818      	bhi.n	80062d0 <_strtol_l.isra.0+0xac>
 800629e:	4634      	mov	r4, r6
 80062a0:	42a3      	cmp	r3, r4
 80062a2:	dd24      	ble.n	80062ee <_strtol_l.isra.0+0xca>
 80062a4:	2d00      	cmp	r5, #0
 80062a6:	db1f      	blt.n	80062e8 <_strtol_l.isra.0+0xc4>
 80062a8:	4581      	cmp	r9, r0
 80062aa:	d31d      	bcc.n	80062e8 <_strtol_l.isra.0+0xc4>
 80062ac:	d101      	bne.n	80062b2 <_strtol_l.isra.0+0x8e>
 80062ae:	45a2      	cmp	sl, r4
 80062b0:	db1a      	blt.n	80062e8 <_strtol_l.isra.0+0xc4>
 80062b2:	2501      	movs	r5, #1
 80062b4:	fb00 4003 	mla	r0, r0, r3, r4
 80062b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80062bc:	e7eb      	b.n	8006296 <_strtol_l.isra.0+0x72>
 80062be:	2c2b      	cmp	r4, #43	; 0x2b
 80062c0:	bf08      	it	eq
 80062c2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80062c6:	46a8      	mov	r8, r5
 80062c8:	bf08      	it	eq
 80062ca:	f100 0c02 	addeq.w	ip, r0, #2
 80062ce:	e7c8      	b.n	8006262 <_strtol_l.isra.0+0x3e>
 80062d0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80062d4:	2e19      	cmp	r6, #25
 80062d6:	d801      	bhi.n	80062dc <_strtol_l.isra.0+0xb8>
 80062d8:	3c37      	subs	r4, #55	; 0x37
 80062da:	e7e1      	b.n	80062a0 <_strtol_l.isra.0+0x7c>
 80062dc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80062e0:	2e19      	cmp	r6, #25
 80062e2:	d804      	bhi.n	80062ee <_strtol_l.isra.0+0xca>
 80062e4:	3c57      	subs	r4, #87	; 0x57
 80062e6:	e7db      	b.n	80062a0 <_strtol_l.isra.0+0x7c>
 80062e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80062ec:	e7e4      	b.n	80062b8 <_strtol_l.isra.0+0x94>
 80062ee:	2d00      	cmp	r5, #0
 80062f0:	da08      	bge.n	8006304 <_strtol_l.isra.0+0xe0>
 80062f2:	2322      	movs	r3, #34	; 0x22
 80062f4:	4638      	mov	r0, r7
 80062f6:	f8ce 3000 	str.w	r3, [lr]
 80062fa:	2a00      	cmp	r2, #0
 80062fc:	d09e      	beq.n	800623c <_strtol_l.isra.0+0x18>
 80062fe:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8006302:	e007      	b.n	8006314 <_strtol_l.isra.0+0xf0>
 8006304:	f1b8 0f00 	cmp.w	r8, #0
 8006308:	d000      	beq.n	800630c <_strtol_l.isra.0+0xe8>
 800630a:	4240      	negs	r0, r0
 800630c:	2a00      	cmp	r2, #0
 800630e:	d095      	beq.n	800623c <_strtol_l.isra.0+0x18>
 8006310:	2d00      	cmp	r5, #0
 8006312:	d1f4      	bne.n	80062fe <_strtol_l.isra.0+0xda>
 8006314:	6011      	str	r1, [r2, #0]
 8006316:	e791      	b.n	800623c <_strtol_l.isra.0+0x18>
 8006318:	2430      	movs	r4, #48	; 0x30
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1b2      	bne.n	8006284 <_strtol_l.isra.0+0x60>
 800631e:	2308      	movs	r3, #8
 8006320:	e7b0      	b.n	8006284 <_strtol_l.isra.0+0x60>
 8006322:	2c30      	cmp	r4, #48	; 0x30
 8006324:	d0a3      	beq.n	800626e <_strtol_l.isra.0+0x4a>
 8006326:	230a      	movs	r3, #10
 8006328:	e7ac      	b.n	8006284 <_strtol_l.isra.0+0x60>
 800632a:	bf00      	nop
 800632c:	080099b9 	.word	0x080099b9

08006330 <_strtol_r>:
 8006330:	f7ff bf78 	b.w	8006224 <_strtol_l.isra.0>

08006334 <_write_r>:
 8006334:	b538      	push	{r3, r4, r5, lr}
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	2200      	movs	r2, #0
 800633e:	4d05      	ldr	r5, [pc, #20]	; (8006354 <_write_r+0x20>)
 8006340:	602a      	str	r2, [r5, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	f7fb f8a8 	bl	8001498 <_write>
 8006348:	1c43      	adds	r3, r0, #1
 800634a:	d102      	bne.n	8006352 <_write_r+0x1e>
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	b103      	cbz	r3, 8006352 <_write_r+0x1e>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	bd38      	pop	{r3, r4, r5, pc}
 8006354:	2000147c 	.word	0x2000147c

08006358 <_close_r>:
 8006358:	b538      	push	{r3, r4, r5, lr}
 800635a:	2300      	movs	r3, #0
 800635c:	4d05      	ldr	r5, [pc, #20]	; (8006374 <_close_r+0x1c>)
 800635e:	4604      	mov	r4, r0
 8006360:	4608      	mov	r0, r1
 8006362:	602b      	str	r3, [r5, #0]
 8006364:	f7fb f8b4 	bl	80014d0 <_close>
 8006368:	1c43      	adds	r3, r0, #1
 800636a:	d102      	bne.n	8006372 <_close_r+0x1a>
 800636c:	682b      	ldr	r3, [r5, #0]
 800636e:	b103      	cbz	r3, 8006372 <_close_r+0x1a>
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	bd38      	pop	{r3, r4, r5, pc}
 8006374:	2000147c 	.word	0x2000147c

08006378 <quorem>:
 8006378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	6903      	ldr	r3, [r0, #16]
 800637e:	690c      	ldr	r4, [r1, #16]
 8006380:	4607      	mov	r7, r0
 8006382:	42a3      	cmp	r3, r4
 8006384:	f2c0 8083 	blt.w	800648e <quorem+0x116>
 8006388:	3c01      	subs	r4, #1
 800638a:	f100 0514 	add.w	r5, r0, #20
 800638e:	f101 0814 	add.w	r8, r1, #20
 8006392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800639c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063a0:	3301      	adds	r3, #1
 80063a2:	429a      	cmp	r2, r3
 80063a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80063a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80063ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80063b0:	d332      	bcc.n	8006418 <quorem+0xa0>
 80063b2:	f04f 0e00 	mov.w	lr, #0
 80063b6:	4640      	mov	r0, r8
 80063b8:	46ac      	mov	ip, r5
 80063ba:	46f2      	mov	sl, lr
 80063bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80063c0:	b293      	uxth	r3, r2
 80063c2:	fb06 e303 	mla	r3, r6, r3, lr
 80063c6:	0c12      	lsrs	r2, r2, #16
 80063c8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80063cc:	fb06 e202 	mla	r2, r6, r2, lr
 80063d0:	b29b      	uxth	r3, r3
 80063d2:	ebaa 0303 	sub.w	r3, sl, r3
 80063d6:	f8dc a000 	ldr.w	sl, [ip]
 80063da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80063de:	fa1f fa8a 	uxth.w	sl, sl
 80063e2:	4453      	add	r3, sl
 80063e4:	fa1f fa82 	uxth.w	sl, r2
 80063e8:	f8dc 2000 	ldr.w	r2, [ip]
 80063ec:	4581      	cmp	r9, r0
 80063ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80063f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063fc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006400:	f84c 3b04 	str.w	r3, [ip], #4
 8006404:	d2da      	bcs.n	80063bc <quorem+0x44>
 8006406:	f855 300b 	ldr.w	r3, [r5, fp]
 800640a:	b92b      	cbnz	r3, 8006418 <quorem+0xa0>
 800640c:	9b01      	ldr	r3, [sp, #4]
 800640e:	3b04      	subs	r3, #4
 8006410:	429d      	cmp	r5, r3
 8006412:	461a      	mov	r2, r3
 8006414:	d32f      	bcc.n	8006476 <quorem+0xfe>
 8006416:	613c      	str	r4, [r7, #16]
 8006418:	4638      	mov	r0, r7
 800641a:	f001 fc93 	bl	8007d44 <__mcmp>
 800641e:	2800      	cmp	r0, #0
 8006420:	db25      	blt.n	800646e <quorem+0xf6>
 8006422:	4628      	mov	r0, r5
 8006424:	f04f 0c00 	mov.w	ip, #0
 8006428:	3601      	adds	r6, #1
 800642a:	f858 1b04 	ldr.w	r1, [r8], #4
 800642e:	f8d0 e000 	ldr.w	lr, [r0]
 8006432:	b28b      	uxth	r3, r1
 8006434:	ebac 0303 	sub.w	r3, ip, r3
 8006438:	fa1f f28e 	uxth.w	r2, lr
 800643c:	4413      	add	r3, r2
 800643e:	0c0a      	lsrs	r2, r1, #16
 8006440:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006444:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006448:	b29b      	uxth	r3, r3
 800644a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800644e:	45c1      	cmp	r9, r8
 8006450:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006454:	f840 3b04 	str.w	r3, [r0], #4
 8006458:	d2e7      	bcs.n	800642a <quorem+0xb2>
 800645a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800645e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006462:	b922      	cbnz	r2, 800646e <quorem+0xf6>
 8006464:	3b04      	subs	r3, #4
 8006466:	429d      	cmp	r5, r3
 8006468:	461a      	mov	r2, r3
 800646a:	d30a      	bcc.n	8006482 <quorem+0x10a>
 800646c:	613c      	str	r4, [r7, #16]
 800646e:	4630      	mov	r0, r6
 8006470:	b003      	add	sp, #12
 8006472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	3b04      	subs	r3, #4
 800647a:	2a00      	cmp	r2, #0
 800647c:	d1cb      	bne.n	8006416 <quorem+0x9e>
 800647e:	3c01      	subs	r4, #1
 8006480:	e7c6      	b.n	8006410 <quorem+0x98>
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	3b04      	subs	r3, #4
 8006486:	2a00      	cmp	r2, #0
 8006488:	d1f0      	bne.n	800646c <quorem+0xf4>
 800648a:	3c01      	subs	r4, #1
 800648c:	e7eb      	b.n	8006466 <quorem+0xee>
 800648e:	2000      	movs	r0, #0
 8006490:	e7ee      	b.n	8006470 <quorem+0xf8>
 8006492:	0000      	movs	r0, r0
 8006494:	0000      	movs	r0, r0
	...

08006498 <_dtoa_r>:
 8006498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800649c:	4616      	mov	r6, r2
 800649e:	461f      	mov	r7, r3
 80064a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80064a2:	b099      	sub	sp, #100	; 0x64
 80064a4:	4605      	mov	r5, r0
 80064a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80064aa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80064ae:	b974      	cbnz	r4, 80064ce <_dtoa_r+0x36>
 80064b0:	2010      	movs	r0, #16
 80064b2:	f001 f95b 	bl	800776c <malloc>
 80064b6:	4602      	mov	r2, r0
 80064b8:	6268      	str	r0, [r5, #36]	; 0x24
 80064ba:	b920      	cbnz	r0, 80064c6 <_dtoa_r+0x2e>
 80064bc:	21ea      	movs	r1, #234	; 0xea
 80064be:	4bae      	ldr	r3, [pc, #696]	; (8006778 <_dtoa_r+0x2e0>)
 80064c0:	48ae      	ldr	r0, [pc, #696]	; (800677c <_dtoa_r+0x2e4>)
 80064c2:	f002 fc99 	bl	8008df8 <__assert_func>
 80064c6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064ca:	6004      	str	r4, [r0, #0]
 80064cc:	60c4      	str	r4, [r0, #12]
 80064ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064d0:	6819      	ldr	r1, [r3, #0]
 80064d2:	b151      	cbz	r1, 80064ea <_dtoa_r+0x52>
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	2301      	movs	r3, #1
 80064d8:	4093      	lsls	r3, r2
 80064da:	604a      	str	r2, [r1, #4]
 80064dc:	608b      	str	r3, [r1, #8]
 80064de:	4628      	mov	r0, r5
 80064e0:	f001 f9ac 	bl	800783c <_Bfree>
 80064e4:	2200      	movs	r2, #0
 80064e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	1e3b      	subs	r3, r7, #0
 80064ec:	bfaf      	iteee	ge
 80064ee:	2300      	movge	r3, #0
 80064f0:	2201      	movlt	r2, #1
 80064f2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80064f6:	9305      	strlt	r3, [sp, #20]
 80064f8:	bfa8      	it	ge
 80064fa:	f8c8 3000 	strge.w	r3, [r8]
 80064fe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006502:	4b9f      	ldr	r3, [pc, #636]	; (8006780 <_dtoa_r+0x2e8>)
 8006504:	bfb8      	it	lt
 8006506:	f8c8 2000 	strlt.w	r2, [r8]
 800650a:	ea33 0309 	bics.w	r3, r3, r9
 800650e:	d119      	bne.n	8006544 <_dtoa_r+0xac>
 8006510:	f242 730f 	movw	r3, #9999	; 0x270f
 8006514:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800651c:	4333      	orrs	r3, r6
 800651e:	f000 8580 	beq.w	8007022 <_dtoa_r+0xb8a>
 8006522:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006524:	b953      	cbnz	r3, 800653c <_dtoa_r+0xa4>
 8006526:	4b97      	ldr	r3, [pc, #604]	; (8006784 <_dtoa_r+0x2ec>)
 8006528:	e022      	b.n	8006570 <_dtoa_r+0xd8>
 800652a:	4b97      	ldr	r3, [pc, #604]	; (8006788 <_dtoa_r+0x2f0>)
 800652c:	9308      	str	r3, [sp, #32]
 800652e:	3308      	adds	r3, #8
 8006530:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006532:	6013      	str	r3, [r2, #0]
 8006534:	9808      	ldr	r0, [sp, #32]
 8006536:	b019      	add	sp, #100	; 0x64
 8006538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800653c:	4b91      	ldr	r3, [pc, #580]	; (8006784 <_dtoa_r+0x2ec>)
 800653e:	9308      	str	r3, [sp, #32]
 8006540:	3303      	adds	r3, #3
 8006542:	e7f5      	b.n	8006530 <_dtoa_r+0x98>
 8006544:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006548:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800654c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006550:	2200      	movs	r2, #0
 8006552:	2300      	movs	r3, #0
 8006554:	f7fa fa28 	bl	80009a8 <__aeabi_dcmpeq>
 8006558:	4680      	mov	r8, r0
 800655a:	b158      	cbz	r0, 8006574 <_dtoa_r+0xdc>
 800655c:	2301      	movs	r3, #1
 800655e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006560:	6013      	str	r3, [r2, #0]
 8006562:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8559 	beq.w	800701c <_dtoa_r+0xb84>
 800656a:	4888      	ldr	r0, [pc, #544]	; (800678c <_dtoa_r+0x2f4>)
 800656c:	6018      	str	r0, [r3, #0]
 800656e:	1e43      	subs	r3, r0, #1
 8006570:	9308      	str	r3, [sp, #32]
 8006572:	e7df      	b.n	8006534 <_dtoa_r+0x9c>
 8006574:	ab16      	add	r3, sp, #88	; 0x58
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	ab17      	add	r3, sp, #92	; 0x5c
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	4628      	mov	r0, r5
 800657e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006582:	f001 fd05 	bl	8007f90 <__d2b>
 8006586:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800658a:	4682      	mov	sl, r0
 800658c:	2c00      	cmp	r4, #0
 800658e:	d07e      	beq.n	800668e <_dtoa_r+0x1f6>
 8006590:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006594:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006596:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800659a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800659e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80065a2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80065a6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80065aa:	2200      	movs	r2, #0
 80065ac:	4b78      	ldr	r3, [pc, #480]	; (8006790 <_dtoa_r+0x2f8>)
 80065ae:	f7f9 fddb 	bl	8000168 <__aeabi_dsub>
 80065b2:	a36b      	add	r3, pc, #428	; (adr r3, 8006760 <_dtoa_r+0x2c8>)
 80065b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b8:	f7f9 ff8e 	bl	80004d8 <__aeabi_dmul>
 80065bc:	a36a      	add	r3, pc, #424	; (adr r3, 8006768 <_dtoa_r+0x2d0>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f7f9 fdd3 	bl	800016c <__adddf3>
 80065c6:	4606      	mov	r6, r0
 80065c8:	4620      	mov	r0, r4
 80065ca:	460f      	mov	r7, r1
 80065cc:	f7f9 ff1a 	bl	8000404 <__aeabi_i2d>
 80065d0:	a367      	add	r3, pc, #412	; (adr r3, 8006770 <_dtoa_r+0x2d8>)
 80065d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d6:	f7f9 ff7f 	bl	80004d8 <__aeabi_dmul>
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	4630      	mov	r0, r6
 80065e0:	4639      	mov	r1, r7
 80065e2:	f7f9 fdc3 	bl	800016c <__adddf3>
 80065e6:	4606      	mov	r6, r0
 80065e8:	460f      	mov	r7, r1
 80065ea:	f7fa fa25 	bl	8000a38 <__aeabi_d2iz>
 80065ee:	2200      	movs	r2, #0
 80065f0:	4681      	mov	r9, r0
 80065f2:	2300      	movs	r3, #0
 80065f4:	4630      	mov	r0, r6
 80065f6:	4639      	mov	r1, r7
 80065f8:	f7fa f9e0 	bl	80009bc <__aeabi_dcmplt>
 80065fc:	b148      	cbz	r0, 8006612 <_dtoa_r+0x17a>
 80065fe:	4648      	mov	r0, r9
 8006600:	f7f9 ff00 	bl	8000404 <__aeabi_i2d>
 8006604:	4632      	mov	r2, r6
 8006606:	463b      	mov	r3, r7
 8006608:	f7fa f9ce 	bl	80009a8 <__aeabi_dcmpeq>
 800660c:	b908      	cbnz	r0, 8006612 <_dtoa_r+0x17a>
 800660e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006612:	f1b9 0f16 	cmp.w	r9, #22
 8006616:	d857      	bhi.n	80066c8 <_dtoa_r+0x230>
 8006618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800661c:	4b5d      	ldr	r3, [pc, #372]	; (8006794 <_dtoa_r+0x2fc>)
 800661e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7fa f9c9 	bl	80009bc <__aeabi_dcmplt>
 800662a:	2800      	cmp	r0, #0
 800662c:	d04e      	beq.n	80066cc <_dtoa_r+0x234>
 800662e:	2300      	movs	r3, #0
 8006630:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006634:	930f      	str	r3, [sp, #60]	; 0x3c
 8006636:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006638:	1b1c      	subs	r4, r3, r4
 800663a:	1e63      	subs	r3, r4, #1
 800663c:	9309      	str	r3, [sp, #36]	; 0x24
 800663e:	bf49      	itett	mi
 8006640:	f1c4 0301 	rsbmi	r3, r4, #1
 8006644:	2300      	movpl	r3, #0
 8006646:	9306      	strmi	r3, [sp, #24]
 8006648:	2300      	movmi	r3, #0
 800664a:	bf54      	ite	pl
 800664c:	9306      	strpl	r3, [sp, #24]
 800664e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006650:	f1b9 0f00 	cmp.w	r9, #0
 8006654:	db3c      	blt.n	80066d0 <_dtoa_r+0x238>
 8006656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006658:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800665c:	444b      	add	r3, r9
 800665e:	9309      	str	r3, [sp, #36]	; 0x24
 8006660:	2300      	movs	r3, #0
 8006662:	930a      	str	r3, [sp, #40]	; 0x28
 8006664:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006666:	2b09      	cmp	r3, #9
 8006668:	d86c      	bhi.n	8006744 <_dtoa_r+0x2ac>
 800666a:	2b05      	cmp	r3, #5
 800666c:	bfc4      	itt	gt
 800666e:	3b04      	subgt	r3, #4
 8006670:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006672:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006674:	bfc8      	it	gt
 8006676:	2400      	movgt	r4, #0
 8006678:	f1a3 0302 	sub.w	r3, r3, #2
 800667c:	bfd8      	it	le
 800667e:	2401      	movle	r4, #1
 8006680:	2b03      	cmp	r3, #3
 8006682:	f200 808b 	bhi.w	800679c <_dtoa_r+0x304>
 8006686:	e8df f003 	tbb	[pc, r3]
 800668a:	4f2d      	.short	0x4f2d
 800668c:	5b4d      	.short	0x5b4d
 800668e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006692:	441c      	add	r4, r3
 8006694:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006698:	2b20      	cmp	r3, #32
 800669a:	bfc3      	ittte	gt
 800669c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80066a0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80066a4:	fa09 f303 	lslgt.w	r3, r9, r3
 80066a8:	f1c3 0320 	rsble	r3, r3, #32
 80066ac:	bfc6      	itte	gt
 80066ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80066b2:	4318      	orrgt	r0, r3
 80066b4:	fa06 f003 	lslle.w	r0, r6, r3
 80066b8:	f7f9 fe94 	bl	80003e4 <__aeabi_ui2d>
 80066bc:	2301      	movs	r3, #1
 80066be:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80066c2:	3c01      	subs	r4, #1
 80066c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80066c6:	e770      	b.n	80065aa <_dtoa_r+0x112>
 80066c8:	2301      	movs	r3, #1
 80066ca:	e7b3      	b.n	8006634 <_dtoa_r+0x19c>
 80066cc:	900f      	str	r0, [sp, #60]	; 0x3c
 80066ce:	e7b2      	b.n	8006636 <_dtoa_r+0x19e>
 80066d0:	9b06      	ldr	r3, [sp, #24]
 80066d2:	eba3 0309 	sub.w	r3, r3, r9
 80066d6:	9306      	str	r3, [sp, #24]
 80066d8:	f1c9 0300 	rsb	r3, r9, #0
 80066dc:	930a      	str	r3, [sp, #40]	; 0x28
 80066de:	2300      	movs	r3, #0
 80066e0:	930e      	str	r3, [sp, #56]	; 0x38
 80066e2:	e7bf      	b.n	8006664 <_dtoa_r+0x1cc>
 80066e4:	2300      	movs	r3, #0
 80066e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80066e8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	dc59      	bgt.n	80067a2 <_dtoa_r+0x30a>
 80066ee:	f04f 0b01 	mov.w	fp, #1
 80066f2:	465b      	mov	r3, fp
 80066f4:	f8cd b008 	str.w	fp, [sp, #8]
 80066f8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80066fc:	2200      	movs	r2, #0
 80066fe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8006700:	6042      	str	r2, [r0, #4]
 8006702:	2204      	movs	r2, #4
 8006704:	f102 0614 	add.w	r6, r2, #20
 8006708:	429e      	cmp	r6, r3
 800670a:	6841      	ldr	r1, [r0, #4]
 800670c:	d94f      	bls.n	80067ae <_dtoa_r+0x316>
 800670e:	4628      	mov	r0, r5
 8006710:	f001 f854 	bl	80077bc <_Balloc>
 8006714:	9008      	str	r0, [sp, #32]
 8006716:	2800      	cmp	r0, #0
 8006718:	d14d      	bne.n	80067b6 <_dtoa_r+0x31e>
 800671a:	4602      	mov	r2, r0
 800671c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006720:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <_dtoa_r+0x300>)
 8006722:	e6cd      	b.n	80064c0 <_dtoa_r+0x28>
 8006724:	2301      	movs	r3, #1
 8006726:	e7de      	b.n	80066e6 <_dtoa_r+0x24e>
 8006728:	2300      	movs	r3, #0
 800672a:	930b      	str	r3, [sp, #44]	; 0x2c
 800672c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800672e:	eb09 0b03 	add.w	fp, r9, r3
 8006732:	f10b 0301 	add.w	r3, fp, #1
 8006736:	2b01      	cmp	r3, #1
 8006738:	9302      	str	r3, [sp, #8]
 800673a:	bfb8      	it	lt
 800673c:	2301      	movlt	r3, #1
 800673e:	e7dd      	b.n	80066fc <_dtoa_r+0x264>
 8006740:	2301      	movs	r3, #1
 8006742:	e7f2      	b.n	800672a <_dtoa_r+0x292>
 8006744:	2401      	movs	r4, #1
 8006746:	2300      	movs	r3, #0
 8006748:	940b      	str	r4, [sp, #44]	; 0x2c
 800674a:	9322      	str	r3, [sp, #136]	; 0x88
 800674c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8006750:	2200      	movs	r2, #0
 8006752:	2312      	movs	r3, #18
 8006754:	f8cd b008 	str.w	fp, [sp, #8]
 8006758:	9223      	str	r2, [sp, #140]	; 0x8c
 800675a:	e7cf      	b.n	80066fc <_dtoa_r+0x264>
 800675c:	f3af 8000 	nop.w
 8006760:	636f4361 	.word	0x636f4361
 8006764:	3fd287a7 	.word	0x3fd287a7
 8006768:	8b60c8b3 	.word	0x8b60c8b3
 800676c:	3fc68a28 	.word	0x3fc68a28
 8006770:	509f79fb 	.word	0x509f79fb
 8006774:	3fd34413 	.word	0x3fd34413
 8006778:	08009ac6 	.word	0x08009ac6
 800677c:	08009add 	.word	0x08009add
 8006780:	7ff00000 	.word	0x7ff00000
 8006784:	08009ac2 	.word	0x08009ac2
 8006788:	08009ab9 	.word	0x08009ab9
 800678c:	08009d42 	.word	0x08009d42
 8006790:	3ff80000 	.word	0x3ff80000
 8006794:	08009c58 	.word	0x08009c58
 8006798:	08009b3c 	.word	0x08009b3c
 800679c:	2301      	movs	r3, #1
 800679e:	930b      	str	r3, [sp, #44]	; 0x2c
 80067a0:	e7d4      	b.n	800674c <_dtoa_r+0x2b4>
 80067a2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80067a6:	465b      	mov	r3, fp
 80067a8:	f8cd b008 	str.w	fp, [sp, #8]
 80067ac:	e7a6      	b.n	80066fc <_dtoa_r+0x264>
 80067ae:	3101      	adds	r1, #1
 80067b0:	6041      	str	r1, [r0, #4]
 80067b2:	0052      	lsls	r2, r2, #1
 80067b4:	e7a6      	b.n	8006704 <_dtoa_r+0x26c>
 80067b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067b8:	9a08      	ldr	r2, [sp, #32]
 80067ba:	601a      	str	r2, [r3, #0]
 80067bc:	9b02      	ldr	r3, [sp, #8]
 80067be:	2b0e      	cmp	r3, #14
 80067c0:	f200 80a8 	bhi.w	8006914 <_dtoa_r+0x47c>
 80067c4:	2c00      	cmp	r4, #0
 80067c6:	f000 80a5 	beq.w	8006914 <_dtoa_r+0x47c>
 80067ca:	f1b9 0f00 	cmp.w	r9, #0
 80067ce:	dd34      	ble.n	800683a <_dtoa_r+0x3a2>
 80067d0:	4a9a      	ldr	r2, [pc, #616]	; (8006a3c <_dtoa_r+0x5a4>)
 80067d2:	f009 030f 	and.w	r3, r9, #15
 80067d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80067da:	f419 7f80 	tst.w	r9, #256	; 0x100
 80067de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80067e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80067e6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80067ea:	d016      	beq.n	800681a <_dtoa_r+0x382>
 80067ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067f0:	4b93      	ldr	r3, [pc, #588]	; (8006a40 <_dtoa_r+0x5a8>)
 80067f2:	2703      	movs	r7, #3
 80067f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80067f8:	f7f9 ff98 	bl	800072c <__aeabi_ddiv>
 80067fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006800:	f004 040f 	and.w	r4, r4, #15
 8006804:	4e8e      	ldr	r6, [pc, #568]	; (8006a40 <_dtoa_r+0x5a8>)
 8006806:	b954      	cbnz	r4, 800681e <_dtoa_r+0x386>
 8006808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800680c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006810:	f7f9 ff8c 	bl	800072c <__aeabi_ddiv>
 8006814:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006818:	e029      	b.n	800686e <_dtoa_r+0x3d6>
 800681a:	2702      	movs	r7, #2
 800681c:	e7f2      	b.n	8006804 <_dtoa_r+0x36c>
 800681e:	07e1      	lsls	r1, r4, #31
 8006820:	d508      	bpl.n	8006834 <_dtoa_r+0x39c>
 8006822:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006826:	e9d6 2300 	ldrd	r2, r3, [r6]
 800682a:	f7f9 fe55 	bl	80004d8 <__aeabi_dmul>
 800682e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006832:	3701      	adds	r7, #1
 8006834:	1064      	asrs	r4, r4, #1
 8006836:	3608      	adds	r6, #8
 8006838:	e7e5      	b.n	8006806 <_dtoa_r+0x36e>
 800683a:	f000 80a5 	beq.w	8006988 <_dtoa_r+0x4f0>
 800683e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006842:	f1c9 0400 	rsb	r4, r9, #0
 8006846:	4b7d      	ldr	r3, [pc, #500]	; (8006a3c <_dtoa_r+0x5a4>)
 8006848:	f004 020f 	and.w	r2, r4, #15
 800684c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006854:	f7f9 fe40 	bl	80004d8 <__aeabi_dmul>
 8006858:	2702      	movs	r7, #2
 800685a:	2300      	movs	r3, #0
 800685c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006860:	4e77      	ldr	r6, [pc, #476]	; (8006a40 <_dtoa_r+0x5a8>)
 8006862:	1124      	asrs	r4, r4, #4
 8006864:	2c00      	cmp	r4, #0
 8006866:	f040 8084 	bne.w	8006972 <_dtoa_r+0x4da>
 800686a:	2b00      	cmp	r3, #0
 800686c:	d1d2      	bne.n	8006814 <_dtoa_r+0x37c>
 800686e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 808b 	beq.w	800698c <_dtoa_r+0x4f4>
 8006876:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800687a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800687e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006882:	2200      	movs	r2, #0
 8006884:	4b6f      	ldr	r3, [pc, #444]	; (8006a44 <_dtoa_r+0x5ac>)
 8006886:	f7fa f899 	bl	80009bc <__aeabi_dcmplt>
 800688a:	2800      	cmp	r0, #0
 800688c:	d07e      	beq.n	800698c <_dtoa_r+0x4f4>
 800688e:	9b02      	ldr	r3, [sp, #8]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d07b      	beq.n	800698c <_dtoa_r+0x4f4>
 8006894:	f1bb 0f00 	cmp.w	fp, #0
 8006898:	dd38      	ble.n	800690c <_dtoa_r+0x474>
 800689a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800689e:	2200      	movs	r2, #0
 80068a0:	4b69      	ldr	r3, [pc, #420]	; (8006a48 <_dtoa_r+0x5b0>)
 80068a2:	f7f9 fe19 	bl	80004d8 <__aeabi_dmul>
 80068a6:	465c      	mov	r4, fp
 80068a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068ac:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
 80068b0:	3701      	adds	r7, #1
 80068b2:	4638      	mov	r0, r7
 80068b4:	f7f9 fda6 	bl	8000404 <__aeabi_i2d>
 80068b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068bc:	f7f9 fe0c 	bl	80004d8 <__aeabi_dmul>
 80068c0:	2200      	movs	r2, #0
 80068c2:	4b62      	ldr	r3, [pc, #392]	; (8006a4c <_dtoa_r+0x5b4>)
 80068c4:	f7f9 fc52 	bl	800016c <__adddf3>
 80068c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80068cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80068d0:	9611      	str	r6, [sp, #68]	; 0x44
 80068d2:	2c00      	cmp	r4, #0
 80068d4:	d15d      	bne.n	8006992 <_dtoa_r+0x4fa>
 80068d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068da:	2200      	movs	r2, #0
 80068dc:	4b5c      	ldr	r3, [pc, #368]	; (8006a50 <_dtoa_r+0x5b8>)
 80068de:	f7f9 fc43 	bl	8000168 <__aeabi_dsub>
 80068e2:	4602      	mov	r2, r0
 80068e4:	460b      	mov	r3, r1
 80068e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80068ea:	4633      	mov	r3, r6
 80068ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068ee:	f7fa f883 	bl	80009f8 <__aeabi_dcmpgt>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	f040 829e 	bne.w	8006e34 <_dtoa_r+0x99c>
 80068f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80068fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006902:	f7fa f85b 	bl	80009bc <__aeabi_dcmplt>
 8006906:	2800      	cmp	r0, #0
 8006908:	f040 8292 	bne.w	8006e30 <_dtoa_r+0x998>
 800690c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006910:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006914:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006916:	2b00      	cmp	r3, #0
 8006918:	f2c0 8153 	blt.w	8006bc2 <_dtoa_r+0x72a>
 800691c:	f1b9 0f0e 	cmp.w	r9, #14
 8006920:	f300 814f 	bgt.w	8006bc2 <_dtoa_r+0x72a>
 8006924:	4b45      	ldr	r3, [pc, #276]	; (8006a3c <_dtoa_r+0x5a4>)
 8006926:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800692a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800692e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006932:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006934:	2b00      	cmp	r3, #0
 8006936:	f280 80db 	bge.w	8006af0 <_dtoa_r+0x658>
 800693a:	9b02      	ldr	r3, [sp, #8]
 800693c:	2b00      	cmp	r3, #0
 800693e:	f300 80d7 	bgt.w	8006af0 <_dtoa_r+0x658>
 8006942:	f040 8274 	bne.w	8006e2e <_dtoa_r+0x996>
 8006946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800694a:	2200      	movs	r2, #0
 800694c:	4b40      	ldr	r3, [pc, #256]	; (8006a50 <_dtoa_r+0x5b8>)
 800694e:	f7f9 fdc3 	bl	80004d8 <__aeabi_dmul>
 8006952:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006956:	f7fa f845 	bl	80009e4 <__aeabi_dcmpge>
 800695a:	9c02      	ldr	r4, [sp, #8]
 800695c:	4626      	mov	r6, r4
 800695e:	2800      	cmp	r0, #0
 8006960:	f040 824a 	bne.w	8006df8 <_dtoa_r+0x960>
 8006964:	2331      	movs	r3, #49	; 0x31
 8006966:	9f08      	ldr	r7, [sp, #32]
 8006968:	f109 0901 	add.w	r9, r9, #1
 800696c:	f807 3b01 	strb.w	r3, [r7], #1
 8006970:	e246      	b.n	8006e00 <_dtoa_r+0x968>
 8006972:	07e2      	lsls	r2, r4, #31
 8006974:	d505      	bpl.n	8006982 <_dtoa_r+0x4ea>
 8006976:	e9d6 2300 	ldrd	r2, r3, [r6]
 800697a:	f7f9 fdad 	bl	80004d8 <__aeabi_dmul>
 800697e:	2301      	movs	r3, #1
 8006980:	3701      	adds	r7, #1
 8006982:	1064      	asrs	r4, r4, #1
 8006984:	3608      	adds	r6, #8
 8006986:	e76d      	b.n	8006864 <_dtoa_r+0x3cc>
 8006988:	2702      	movs	r7, #2
 800698a:	e770      	b.n	800686e <_dtoa_r+0x3d6>
 800698c:	46c8      	mov	r8, r9
 800698e:	9c02      	ldr	r4, [sp, #8]
 8006990:	e78f      	b.n	80068b2 <_dtoa_r+0x41a>
 8006992:	9908      	ldr	r1, [sp, #32]
 8006994:	4b29      	ldr	r3, [pc, #164]	; (8006a3c <_dtoa_r+0x5a4>)
 8006996:	4421      	add	r1, r4
 8006998:	9112      	str	r1, [sp, #72]	; 0x48
 800699a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800699c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80069a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80069a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80069a8:	2900      	cmp	r1, #0
 80069aa:	d055      	beq.n	8006a58 <_dtoa_r+0x5c0>
 80069ac:	2000      	movs	r0, #0
 80069ae:	4929      	ldr	r1, [pc, #164]	; (8006a54 <_dtoa_r+0x5bc>)
 80069b0:	f7f9 febc 	bl	800072c <__aeabi_ddiv>
 80069b4:	463b      	mov	r3, r7
 80069b6:	4632      	mov	r2, r6
 80069b8:	f7f9 fbd6 	bl	8000168 <__aeabi_dsub>
 80069bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80069c0:	9f08      	ldr	r7, [sp, #32]
 80069c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069c6:	f7fa f837 	bl	8000a38 <__aeabi_d2iz>
 80069ca:	4604      	mov	r4, r0
 80069cc:	f7f9 fd1a 	bl	8000404 <__aeabi_i2d>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80069d8:	f7f9 fbc6 	bl	8000168 <__aeabi_dsub>
 80069dc:	4602      	mov	r2, r0
 80069de:	460b      	mov	r3, r1
 80069e0:	3430      	adds	r4, #48	; 0x30
 80069e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80069e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80069ea:	f807 4b01 	strb.w	r4, [r7], #1
 80069ee:	f7f9 ffe5 	bl	80009bc <__aeabi_dcmplt>
 80069f2:	2800      	cmp	r0, #0
 80069f4:	d174      	bne.n	8006ae0 <_dtoa_r+0x648>
 80069f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069fa:	2000      	movs	r0, #0
 80069fc:	4911      	ldr	r1, [pc, #68]	; (8006a44 <_dtoa_r+0x5ac>)
 80069fe:	f7f9 fbb3 	bl	8000168 <__aeabi_dsub>
 8006a02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006a06:	f7f9 ffd9 	bl	80009bc <__aeabi_dcmplt>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	f040 80b6 	bne.w	8006b7c <_dtoa_r+0x6e4>
 8006a10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a12:	429f      	cmp	r7, r3
 8006a14:	f43f af7a 	beq.w	800690c <_dtoa_r+0x474>
 8006a18:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	4b0a      	ldr	r3, [pc, #40]	; (8006a48 <_dtoa_r+0x5b0>)
 8006a20:	f7f9 fd5a 	bl	80004d8 <__aeabi_dmul>
 8006a24:	2200      	movs	r2, #0
 8006a26:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a2e:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <_dtoa_r+0x5b0>)
 8006a30:	f7f9 fd52 	bl	80004d8 <__aeabi_dmul>
 8006a34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a38:	e7c3      	b.n	80069c2 <_dtoa_r+0x52a>
 8006a3a:	bf00      	nop
 8006a3c:	08009c58 	.word	0x08009c58
 8006a40:	08009c30 	.word	0x08009c30
 8006a44:	3ff00000 	.word	0x3ff00000
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	401c0000 	.word	0x401c0000
 8006a50:	40140000 	.word	0x40140000
 8006a54:	3fe00000 	.word	0x3fe00000
 8006a58:	4630      	mov	r0, r6
 8006a5a:	4639      	mov	r1, r7
 8006a5c:	f7f9 fd3c 	bl	80004d8 <__aeabi_dmul>
 8006a60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006a66:	9c08      	ldr	r4, [sp, #32]
 8006a68:	9314      	str	r3, [sp, #80]	; 0x50
 8006a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a6e:	f7f9 ffe3 	bl	8000a38 <__aeabi_d2iz>
 8006a72:	9015      	str	r0, [sp, #84]	; 0x54
 8006a74:	f7f9 fcc6 	bl	8000404 <__aeabi_i2d>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a80:	f7f9 fb72 	bl	8000168 <__aeabi_dsub>
 8006a84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006a86:	4606      	mov	r6, r0
 8006a88:	3330      	adds	r3, #48	; 0x30
 8006a8a:	f804 3b01 	strb.w	r3, [r4], #1
 8006a8e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a90:	460f      	mov	r7, r1
 8006a92:	429c      	cmp	r4, r3
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	d124      	bne.n	8006ae4 <_dtoa_r+0x64c>
 8006a9a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006a9e:	4bb3      	ldr	r3, [pc, #716]	; (8006d6c <_dtoa_r+0x8d4>)
 8006aa0:	f7f9 fb64 	bl	800016c <__adddf3>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	460b      	mov	r3, r1
 8006aa8:	4630      	mov	r0, r6
 8006aaa:	4639      	mov	r1, r7
 8006aac:	f7f9 ffa4 	bl	80009f8 <__aeabi_dcmpgt>
 8006ab0:	2800      	cmp	r0, #0
 8006ab2:	d162      	bne.n	8006b7a <_dtoa_r+0x6e2>
 8006ab4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ab8:	2000      	movs	r0, #0
 8006aba:	49ac      	ldr	r1, [pc, #688]	; (8006d6c <_dtoa_r+0x8d4>)
 8006abc:	f7f9 fb54 	bl	8000168 <__aeabi_dsub>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	460b      	mov	r3, r1
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	4639      	mov	r1, r7
 8006ac8:	f7f9 ff78 	bl	80009bc <__aeabi_dcmplt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	f43f af1d 	beq.w	800690c <_dtoa_r+0x474>
 8006ad2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006ad4:	1e7b      	subs	r3, r7, #1
 8006ad6:	9314      	str	r3, [sp, #80]	; 0x50
 8006ad8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8006adc:	2b30      	cmp	r3, #48	; 0x30
 8006ade:	d0f8      	beq.n	8006ad2 <_dtoa_r+0x63a>
 8006ae0:	46c1      	mov	r9, r8
 8006ae2:	e03a      	b.n	8006b5a <_dtoa_r+0x6c2>
 8006ae4:	4ba2      	ldr	r3, [pc, #648]	; (8006d70 <_dtoa_r+0x8d8>)
 8006ae6:	f7f9 fcf7 	bl	80004d8 <__aeabi_dmul>
 8006aea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006aee:	e7bc      	b.n	8006a6a <_dtoa_r+0x5d2>
 8006af0:	9f08      	ldr	r7, [sp, #32]
 8006af2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006af6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006afa:	f7f9 fe17 	bl	800072c <__aeabi_ddiv>
 8006afe:	f7f9 ff9b 	bl	8000a38 <__aeabi_d2iz>
 8006b02:	4604      	mov	r4, r0
 8006b04:	f7f9 fc7e 	bl	8000404 <__aeabi_i2d>
 8006b08:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b0c:	f7f9 fce4 	bl	80004d8 <__aeabi_dmul>
 8006b10:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006b14:	460b      	mov	r3, r1
 8006b16:	4602      	mov	r2, r0
 8006b18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b1c:	f7f9 fb24 	bl	8000168 <__aeabi_dsub>
 8006b20:	f807 6b01 	strb.w	r6, [r7], #1
 8006b24:	9e08      	ldr	r6, [sp, #32]
 8006b26:	9b02      	ldr	r3, [sp, #8]
 8006b28:	1bbe      	subs	r6, r7, r6
 8006b2a:	42b3      	cmp	r3, r6
 8006b2c:	d13a      	bne.n	8006ba4 <_dtoa_r+0x70c>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	f7f9 fb1b 	bl	800016c <__adddf3>
 8006b36:	4602      	mov	r2, r0
 8006b38:	460b      	mov	r3, r1
 8006b3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b42:	f7f9 ff59 	bl	80009f8 <__aeabi_dcmpgt>
 8006b46:	bb58      	cbnz	r0, 8006ba0 <_dtoa_r+0x708>
 8006b48:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006b4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b50:	f7f9 ff2a 	bl	80009a8 <__aeabi_dcmpeq>
 8006b54:	b108      	cbz	r0, 8006b5a <_dtoa_r+0x6c2>
 8006b56:	07e1      	lsls	r1, r4, #31
 8006b58:	d422      	bmi.n	8006ba0 <_dtoa_r+0x708>
 8006b5a:	4628      	mov	r0, r5
 8006b5c:	4651      	mov	r1, sl
 8006b5e:	f000 fe6d 	bl	800783c <_Bfree>
 8006b62:	2300      	movs	r3, #0
 8006b64:	703b      	strb	r3, [r7, #0]
 8006b66:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006b68:	f109 0001 	add.w	r0, r9, #1
 8006b6c:	6018      	str	r0, [r3, #0]
 8006b6e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f43f acdf 	beq.w	8006534 <_dtoa_r+0x9c>
 8006b76:	601f      	str	r7, [r3, #0]
 8006b78:	e4dc      	b.n	8006534 <_dtoa_r+0x9c>
 8006b7a:	4627      	mov	r7, r4
 8006b7c:	463b      	mov	r3, r7
 8006b7e:	461f      	mov	r7, r3
 8006b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006b84:	2a39      	cmp	r2, #57	; 0x39
 8006b86:	d107      	bne.n	8006b98 <_dtoa_r+0x700>
 8006b88:	9a08      	ldr	r2, [sp, #32]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d1f7      	bne.n	8006b7e <_dtoa_r+0x6e6>
 8006b8e:	2230      	movs	r2, #48	; 0x30
 8006b90:	9908      	ldr	r1, [sp, #32]
 8006b92:	f108 0801 	add.w	r8, r8, #1
 8006b96:	700a      	strb	r2, [r1, #0]
 8006b98:	781a      	ldrb	r2, [r3, #0]
 8006b9a:	3201      	adds	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
 8006b9e:	e79f      	b.n	8006ae0 <_dtoa_r+0x648>
 8006ba0:	46c8      	mov	r8, r9
 8006ba2:	e7eb      	b.n	8006b7c <_dtoa_r+0x6e4>
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	4b72      	ldr	r3, [pc, #456]	; (8006d70 <_dtoa_r+0x8d8>)
 8006ba8:	f7f9 fc96 	bl	80004d8 <__aeabi_dmul>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
 8006bb0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	f7f9 fef6 	bl	80009a8 <__aeabi_dcmpeq>
 8006bbc:	2800      	cmp	r0, #0
 8006bbe:	d098      	beq.n	8006af2 <_dtoa_r+0x65a>
 8006bc0:	e7cb      	b.n	8006b5a <_dtoa_r+0x6c2>
 8006bc2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bc4:	2a00      	cmp	r2, #0
 8006bc6:	f000 80cd 	beq.w	8006d64 <_dtoa_r+0x8cc>
 8006bca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bcc:	2a01      	cmp	r2, #1
 8006bce:	f300 80af 	bgt.w	8006d30 <_dtoa_r+0x898>
 8006bd2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006bd4:	2a00      	cmp	r2, #0
 8006bd6:	f000 80a7 	beq.w	8006d28 <_dtoa_r+0x890>
 8006bda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006bde:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006be0:	9f06      	ldr	r7, [sp, #24]
 8006be2:	9a06      	ldr	r2, [sp, #24]
 8006be4:	2101      	movs	r1, #1
 8006be6:	441a      	add	r2, r3
 8006be8:	9206      	str	r2, [sp, #24]
 8006bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bec:	4628      	mov	r0, r5
 8006bee:	441a      	add	r2, r3
 8006bf0:	9209      	str	r2, [sp, #36]	; 0x24
 8006bf2:	f000 ff27 	bl	8007a44 <__i2b>
 8006bf6:	4606      	mov	r6, r0
 8006bf8:	2f00      	cmp	r7, #0
 8006bfa:	dd0c      	ble.n	8006c16 <_dtoa_r+0x77e>
 8006bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	dd09      	ble.n	8006c16 <_dtoa_r+0x77e>
 8006c02:	42bb      	cmp	r3, r7
 8006c04:	bfa8      	it	ge
 8006c06:	463b      	movge	r3, r7
 8006c08:	9a06      	ldr	r2, [sp, #24]
 8006c0a:	1aff      	subs	r7, r7, r3
 8006c0c:	1ad2      	subs	r2, r2, r3
 8006c0e:	9206      	str	r2, [sp, #24]
 8006c10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	9309      	str	r3, [sp, #36]	; 0x24
 8006c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c18:	b1f3      	cbz	r3, 8006c58 <_dtoa_r+0x7c0>
 8006c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f000 80a9 	beq.w	8006d74 <_dtoa_r+0x8dc>
 8006c22:	2c00      	cmp	r4, #0
 8006c24:	dd10      	ble.n	8006c48 <_dtoa_r+0x7b0>
 8006c26:	4631      	mov	r1, r6
 8006c28:	4622      	mov	r2, r4
 8006c2a:	4628      	mov	r0, r5
 8006c2c:	f000 ffc4 	bl	8007bb8 <__pow5mult>
 8006c30:	4652      	mov	r2, sl
 8006c32:	4601      	mov	r1, r0
 8006c34:	4606      	mov	r6, r0
 8006c36:	4628      	mov	r0, r5
 8006c38:	f000 ff1a 	bl	8007a70 <__multiply>
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	4651      	mov	r1, sl
 8006c40:	4628      	mov	r0, r5
 8006c42:	f000 fdfb 	bl	800783c <_Bfree>
 8006c46:	46c2      	mov	sl, r8
 8006c48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c4a:	1b1a      	subs	r2, r3, r4
 8006c4c:	d004      	beq.n	8006c58 <_dtoa_r+0x7c0>
 8006c4e:	4651      	mov	r1, sl
 8006c50:	4628      	mov	r0, r5
 8006c52:	f000 ffb1 	bl	8007bb8 <__pow5mult>
 8006c56:	4682      	mov	sl, r0
 8006c58:	2101      	movs	r1, #1
 8006c5a:	4628      	mov	r0, r5
 8006c5c:	f000 fef2 	bl	8007a44 <__i2b>
 8006c60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c62:	4604      	mov	r4, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f340 8087 	ble.w	8006d78 <_dtoa_r+0x8e0>
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	4601      	mov	r1, r0
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 ffa2 	bl	8007bb8 <__pow5mult>
 8006c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c76:	4604      	mov	r4, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	f340 8080 	ble.w	8006d7e <_dtoa_r+0x8e6>
 8006c7e:	f04f 0800 	mov.w	r8, #0
 8006c82:	6923      	ldr	r3, [r4, #16]
 8006c84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c88:	6918      	ldr	r0, [r3, #16]
 8006c8a:	f000 fe8d 	bl	80079a8 <__hi0bits>
 8006c8e:	f1c0 0020 	rsb	r0, r0, #32
 8006c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c94:	4418      	add	r0, r3
 8006c96:	f010 001f 	ands.w	r0, r0, #31
 8006c9a:	f000 8092 	beq.w	8006dc2 <_dtoa_r+0x92a>
 8006c9e:	f1c0 0320 	rsb	r3, r0, #32
 8006ca2:	2b04      	cmp	r3, #4
 8006ca4:	f340 808a 	ble.w	8006dbc <_dtoa_r+0x924>
 8006ca8:	f1c0 001c 	rsb	r0, r0, #28
 8006cac:	9b06      	ldr	r3, [sp, #24]
 8006cae:	4407      	add	r7, r0
 8006cb0:	4403      	add	r3, r0
 8006cb2:	9306      	str	r3, [sp, #24]
 8006cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cb6:	4403      	add	r3, r0
 8006cb8:	9309      	str	r3, [sp, #36]	; 0x24
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	dd05      	ble.n	8006ccc <_dtoa_r+0x834>
 8006cc0:	4651      	mov	r1, sl
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f000 ffd1 	bl	8007c6c <__lshift>
 8006cca:	4682      	mov	sl, r0
 8006ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	dd05      	ble.n	8006cde <_dtoa_r+0x846>
 8006cd2:	4621      	mov	r1, r4
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	f000 ffc8 	bl	8007c6c <__lshift>
 8006cdc:	4604      	mov	r4, r0
 8006cde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d070      	beq.n	8006dc6 <_dtoa_r+0x92e>
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4650      	mov	r0, sl
 8006ce8:	f001 f82c 	bl	8007d44 <__mcmp>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	da6a      	bge.n	8006dc6 <_dtoa_r+0x92e>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	4651      	mov	r1, sl
 8006cf4:	220a      	movs	r2, #10
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	f000 fdc2 	bl	8007880 <__multadd>
 8006cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006cfe:	4682      	mov	sl, r0
 8006d00:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 8193 	beq.w	8007030 <_dtoa_r+0xb98>
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	220a      	movs	r2, #10
 8006d10:	4628      	mov	r0, r5
 8006d12:	f000 fdb5 	bl	8007880 <__multadd>
 8006d16:	f1bb 0f00 	cmp.w	fp, #0
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	f300 8093 	bgt.w	8006e46 <_dtoa_r+0x9ae>
 8006d20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	dc57      	bgt.n	8006dd6 <_dtoa_r+0x93e>
 8006d26:	e08e      	b.n	8006e46 <_dtoa_r+0x9ae>
 8006d28:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d2a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006d2e:	e756      	b.n	8006bde <_dtoa_r+0x746>
 8006d30:	9b02      	ldr	r3, [sp, #8]
 8006d32:	1e5c      	subs	r4, r3, #1
 8006d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d36:	42a3      	cmp	r3, r4
 8006d38:	bfb7      	itett	lt
 8006d3a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006d3c:	1b1c      	subge	r4, r3, r4
 8006d3e:	1ae2      	sublt	r2, r4, r3
 8006d40:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006d42:	bfbe      	ittt	lt
 8006d44:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006d46:	189b      	addlt	r3, r3, r2
 8006d48:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006d4a:	9b02      	ldr	r3, [sp, #8]
 8006d4c:	bfb8      	it	lt
 8006d4e:	2400      	movlt	r4, #0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bfbb      	ittet	lt
 8006d54:	9b06      	ldrlt	r3, [sp, #24]
 8006d56:	9a02      	ldrlt	r2, [sp, #8]
 8006d58:	9f06      	ldrge	r7, [sp, #24]
 8006d5a:	1a9f      	sublt	r7, r3, r2
 8006d5c:	bfac      	ite	ge
 8006d5e:	9b02      	ldrge	r3, [sp, #8]
 8006d60:	2300      	movlt	r3, #0
 8006d62:	e73e      	b.n	8006be2 <_dtoa_r+0x74a>
 8006d64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006d66:	9f06      	ldr	r7, [sp, #24]
 8006d68:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006d6a:	e745      	b.n	8006bf8 <_dtoa_r+0x760>
 8006d6c:	3fe00000 	.word	0x3fe00000
 8006d70:	40240000 	.word	0x40240000
 8006d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d76:	e76a      	b.n	8006c4e <_dtoa_r+0x7b6>
 8006d78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	dc19      	bgt.n	8006db2 <_dtoa_r+0x91a>
 8006d7e:	9b04      	ldr	r3, [sp, #16]
 8006d80:	b9bb      	cbnz	r3, 8006db2 <_dtoa_r+0x91a>
 8006d82:	9b05      	ldr	r3, [sp, #20]
 8006d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006d88:	b99b      	cbnz	r3, 8006db2 <_dtoa_r+0x91a>
 8006d8a:	9b05      	ldr	r3, [sp, #20]
 8006d8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d90:	0d1b      	lsrs	r3, r3, #20
 8006d92:	051b      	lsls	r3, r3, #20
 8006d94:	b183      	cbz	r3, 8006db8 <_dtoa_r+0x920>
 8006d96:	f04f 0801 	mov.w	r8, #1
 8006d9a:	9b06      	ldr	r3, [sp, #24]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	9306      	str	r3, [sp, #24]
 8006da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da2:	3301      	adds	r3, #1
 8006da4:	9309      	str	r3, [sp, #36]	; 0x24
 8006da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	f47f af6a 	bne.w	8006c82 <_dtoa_r+0x7ea>
 8006dae:	2001      	movs	r0, #1
 8006db0:	e76f      	b.n	8006c92 <_dtoa_r+0x7fa>
 8006db2:	f04f 0800 	mov.w	r8, #0
 8006db6:	e7f6      	b.n	8006da6 <_dtoa_r+0x90e>
 8006db8:	4698      	mov	r8, r3
 8006dba:	e7f4      	b.n	8006da6 <_dtoa_r+0x90e>
 8006dbc:	f43f af7d 	beq.w	8006cba <_dtoa_r+0x822>
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	301c      	adds	r0, #28
 8006dc4:	e772      	b.n	8006cac <_dtoa_r+0x814>
 8006dc6:	9b02      	ldr	r3, [sp, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	dc36      	bgt.n	8006e3a <_dtoa_r+0x9a2>
 8006dcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	dd33      	ble.n	8006e3a <_dtoa_r+0x9a2>
 8006dd2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006dd6:	f1bb 0f00 	cmp.w	fp, #0
 8006dda:	d10d      	bne.n	8006df8 <_dtoa_r+0x960>
 8006ddc:	4621      	mov	r1, r4
 8006dde:	465b      	mov	r3, fp
 8006de0:	2205      	movs	r2, #5
 8006de2:	4628      	mov	r0, r5
 8006de4:	f000 fd4c 	bl	8007880 <__multadd>
 8006de8:	4601      	mov	r1, r0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4650      	mov	r0, sl
 8006dee:	f000 ffa9 	bl	8007d44 <__mcmp>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f73f adb6 	bgt.w	8006964 <_dtoa_r+0x4cc>
 8006df8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006dfa:	9f08      	ldr	r7, [sp, #32]
 8006dfc:	ea6f 0903 	mvn.w	r9, r3
 8006e00:	f04f 0800 	mov.w	r8, #0
 8006e04:	4621      	mov	r1, r4
 8006e06:	4628      	mov	r0, r5
 8006e08:	f000 fd18 	bl	800783c <_Bfree>
 8006e0c:	2e00      	cmp	r6, #0
 8006e0e:	f43f aea4 	beq.w	8006b5a <_dtoa_r+0x6c2>
 8006e12:	f1b8 0f00 	cmp.w	r8, #0
 8006e16:	d005      	beq.n	8006e24 <_dtoa_r+0x98c>
 8006e18:	45b0      	cmp	r8, r6
 8006e1a:	d003      	beq.n	8006e24 <_dtoa_r+0x98c>
 8006e1c:	4641      	mov	r1, r8
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f000 fd0c 	bl	800783c <_Bfree>
 8006e24:	4631      	mov	r1, r6
 8006e26:	4628      	mov	r0, r5
 8006e28:	f000 fd08 	bl	800783c <_Bfree>
 8006e2c:	e695      	b.n	8006b5a <_dtoa_r+0x6c2>
 8006e2e:	2400      	movs	r4, #0
 8006e30:	4626      	mov	r6, r4
 8006e32:	e7e1      	b.n	8006df8 <_dtoa_r+0x960>
 8006e34:	46c1      	mov	r9, r8
 8006e36:	4626      	mov	r6, r4
 8006e38:	e594      	b.n	8006964 <_dtoa_r+0x4cc>
 8006e3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e3c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80fc 	beq.w	800703e <_dtoa_r+0xba6>
 8006e46:	2f00      	cmp	r7, #0
 8006e48:	dd05      	ble.n	8006e56 <_dtoa_r+0x9be>
 8006e4a:	4631      	mov	r1, r6
 8006e4c:	463a      	mov	r2, r7
 8006e4e:	4628      	mov	r0, r5
 8006e50:	f000 ff0c 	bl	8007c6c <__lshift>
 8006e54:	4606      	mov	r6, r0
 8006e56:	f1b8 0f00 	cmp.w	r8, #0
 8006e5a:	d05c      	beq.n	8006f16 <_dtoa_r+0xa7e>
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	6871      	ldr	r1, [r6, #4]
 8006e60:	f000 fcac 	bl	80077bc <_Balloc>
 8006e64:	4607      	mov	r7, r0
 8006e66:	b928      	cbnz	r0, 8006e74 <_dtoa_r+0x9dc>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006e6e:	4b7e      	ldr	r3, [pc, #504]	; (8007068 <_dtoa_r+0xbd0>)
 8006e70:	f7ff bb26 	b.w	80064c0 <_dtoa_r+0x28>
 8006e74:	6932      	ldr	r2, [r6, #16]
 8006e76:	f106 010c 	add.w	r1, r6, #12
 8006e7a:	3202      	adds	r2, #2
 8006e7c:	0092      	lsls	r2, r2, #2
 8006e7e:	300c      	adds	r0, #12
 8006e80:	f7fd fc98 	bl	80047b4 <memcpy>
 8006e84:	2201      	movs	r2, #1
 8006e86:	4639      	mov	r1, r7
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f000 feef 	bl	8007c6c <__lshift>
 8006e8e:	46b0      	mov	r8, r6
 8006e90:	4606      	mov	r6, r0
 8006e92:	9b08      	ldr	r3, [sp, #32]
 8006e94:	3301      	adds	r3, #1
 8006e96:	9302      	str	r3, [sp, #8]
 8006e98:	9b08      	ldr	r3, [sp, #32]
 8006e9a:	445b      	add	r3, fp
 8006e9c:	930a      	str	r3, [sp, #40]	; 0x28
 8006e9e:	9b04      	ldr	r3, [sp, #16]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea6:	9b02      	ldr	r3, [sp, #8]
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	4650      	mov	r0, sl
 8006eac:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006eb0:	f7ff fa62 	bl	8006378 <quorem>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	4641      	mov	r1, r8
 8006eb8:	3330      	adds	r3, #48	; 0x30
 8006eba:	9004      	str	r0, [sp, #16]
 8006ebc:	4650      	mov	r0, sl
 8006ebe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ec0:	f000 ff40 	bl	8007d44 <__mcmp>
 8006ec4:	4632      	mov	r2, r6
 8006ec6:	9006      	str	r0, [sp, #24]
 8006ec8:	4621      	mov	r1, r4
 8006eca:	4628      	mov	r0, r5
 8006ecc:	f000 ff56 	bl	8007d7c <__mdiff>
 8006ed0:	68c2      	ldr	r2, [r0, #12]
 8006ed2:	4607      	mov	r7, r0
 8006ed4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed6:	bb02      	cbnz	r2, 8006f1a <_dtoa_r+0xa82>
 8006ed8:	4601      	mov	r1, r0
 8006eda:	4650      	mov	r0, sl
 8006edc:	f000 ff32 	bl	8007d44 <__mcmp>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ee4:	4639      	mov	r1, r7
 8006ee6:	4628      	mov	r0, r5
 8006ee8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006eec:	f000 fca6 	bl	800783c <_Bfree>
 8006ef0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ef4:	9f02      	ldr	r7, [sp, #8]
 8006ef6:	ea43 0102 	orr.w	r1, r3, r2
 8006efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006efc:	430b      	orrs	r3, r1
 8006efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f00:	d10d      	bne.n	8006f1e <_dtoa_r+0xa86>
 8006f02:	2b39      	cmp	r3, #57	; 0x39
 8006f04:	d027      	beq.n	8006f56 <_dtoa_r+0xabe>
 8006f06:	9a06      	ldr	r2, [sp, #24]
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	dd01      	ble.n	8006f10 <_dtoa_r+0xa78>
 8006f0c:	9b04      	ldr	r3, [sp, #16]
 8006f0e:	3331      	adds	r3, #49	; 0x31
 8006f10:	f88b 3000 	strb.w	r3, [fp]
 8006f14:	e776      	b.n	8006e04 <_dtoa_r+0x96c>
 8006f16:	4630      	mov	r0, r6
 8006f18:	e7b9      	b.n	8006e8e <_dtoa_r+0x9f6>
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	e7e2      	b.n	8006ee4 <_dtoa_r+0xa4c>
 8006f1e:	9906      	ldr	r1, [sp, #24]
 8006f20:	2900      	cmp	r1, #0
 8006f22:	db04      	blt.n	8006f2e <_dtoa_r+0xa96>
 8006f24:	9822      	ldr	r0, [sp, #136]	; 0x88
 8006f26:	4301      	orrs	r1, r0
 8006f28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f2a:	4301      	orrs	r1, r0
 8006f2c:	d120      	bne.n	8006f70 <_dtoa_r+0xad8>
 8006f2e:	2a00      	cmp	r2, #0
 8006f30:	ddee      	ble.n	8006f10 <_dtoa_r+0xa78>
 8006f32:	4651      	mov	r1, sl
 8006f34:	2201      	movs	r2, #1
 8006f36:	4628      	mov	r0, r5
 8006f38:	9302      	str	r3, [sp, #8]
 8006f3a:	f000 fe97 	bl	8007c6c <__lshift>
 8006f3e:	4621      	mov	r1, r4
 8006f40:	4682      	mov	sl, r0
 8006f42:	f000 feff 	bl	8007d44 <__mcmp>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	9b02      	ldr	r3, [sp, #8]
 8006f4a:	dc02      	bgt.n	8006f52 <_dtoa_r+0xaba>
 8006f4c:	d1e0      	bne.n	8006f10 <_dtoa_r+0xa78>
 8006f4e:	07da      	lsls	r2, r3, #31
 8006f50:	d5de      	bpl.n	8006f10 <_dtoa_r+0xa78>
 8006f52:	2b39      	cmp	r3, #57	; 0x39
 8006f54:	d1da      	bne.n	8006f0c <_dtoa_r+0xa74>
 8006f56:	2339      	movs	r3, #57	; 0x39
 8006f58:	f88b 3000 	strb.w	r3, [fp]
 8006f5c:	463b      	mov	r3, r7
 8006f5e:	461f      	mov	r7, r3
 8006f60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	2a39      	cmp	r2, #57	; 0x39
 8006f68:	d050      	beq.n	800700c <_dtoa_r+0xb74>
 8006f6a:	3201      	adds	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	e749      	b.n	8006e04 <_dtoa_r+0x96c>
 8006f70:	2a00      	cmp	r2, #0
 8006f72:	dd03      	ble.n	8006f7c <_dtoa_r+0xae4>
 8006f74:	2b39      	cmp	r3, #57	; 0x39
 8006f76:	d0ee      	beq.n	8006f56 <_dtoa_r+0xabe>
 8006f78:	3301      	adds	r3, #1
 8006f7a:	e7c9      	b.n	8006f10 <_dtoa_r+0xa78>
 8006f7c:	9a02      	ldr	r2, [sp, #8]
 8006f7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f80:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006f84:	428a      	cmp	r2, r1
 8006f86:	d02a      	beq.n	8006fde <_dtoa_r+0xb46>
 8006f88:	4651      	mov	r1, sl
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	220a      	movs	r2, #10
 8006f8e:	4628      	mov	r0, r5
 8006f90:	f000 fc76 	bl	8007880 <__multadd>
 8006f94:	45b0      	cmp	r8, r6
 8006f96:	4682      	mov	sl, r0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	f04f 020a 	mov.w	r2, #10
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	4628      	mov	r0, r5
 8006fa4:	d107      	bne.n	8006fb6 <_dtoa_r+0xb1e>
 8006fa6:	f000 fc6b 	bl	8007880 <__multadd>
 8006faa:	4680      	mov	r8, r0
 8006fac:	4606      	mov	r6, r0
 8006fae:	9b02      	ldr	r3, [sp, #8]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	9302      	str	r3, [sp, #8]
 8006fb4:	e777      	b.n	8006ea6 <_dtoa_r+0xa0e>
 8006fb6:	f000 fc63 	bl	8007880 <__multadd>
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4680      	mov	r8, r0
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f000 fc5c 	bl	8007880 <__multadd>
 8006fc8:	4606      	mov	r6, r0
 8006fca:	e7f0      	b.n	8006fae <_dtoa_r+0xb16>
 8006fcc:	f1bb 0f00 	cmp.w	fp, #0
 8006fd0:	bfcc      	ite	gt
 8006fd2:	465f      	movgt	r7, fp
 8006fd4:	2701      	movle	r7, #1
 8006fd6:	f04f 0800 	mov.w	r8, #0
 8006fda:	9a08      	ldr	r2, [sp, #32]
 8006fdc:	4417      	add	r7, r2
 8006fde:	4651      	mov	r1, sl
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	4628      	mov	r0, r5
 8006fe4:	9302      	str	r3, [sp, #8]
 8006fe6:	f000 fe41 	bl	8007c6c <__lshift>
 8006fea:	4621      	mov	r1, r4
 8006fec:	4682      	mov	sl, r0
 8006fee:	f000 fea9 	bl	8007d44 <__mcmp>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	dcb2      	bgt.n	8006f5c <_dtoa_r+0xac4>
 8006ff6:	d102      	bne.n	8006ffe <_dtoa_r+0xb66>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	07db      	lsls	r3, r3, #31
 8006ffc:	d4ae      	bmi.n	8006f5c <_dtoa_r+0xac4>
 8006ffe:	463b      	mov	r3, r7
 8007000:	461f      	mov	r7, r3
 8007002:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007006:	2a30      	cmp	r2, #48	; 0x30
 8007008:	d0fa      	beq.n	8007000 <_dtoa_r+0xb68>
 800700a:	e6fb      	b.n	8006e04 <_dtoa_r+0x96c>
 800700c:	9a08      	ldr	r2, [sp, #32]
 800700e:	429a      	cmp	r2, r3
 8007010:	d1a5      	bne.n	8006f5e <_dtoa_r+0xac6>
 8007012:	2331      	movs	r3, #49	; 0x31
 8007014:	f109 0901 	add.w	r9, r9, #1
 8007018:	7013      	strb	r3, [r2, #0]
 800701a:	e6f3      	b.n	8006e04 <_dtoa_r+0x96c>
 800701c:	4b13      	ldr	r3, [pc, #76]	; (800706c <_dtoa_r+0xbd4>)
 800701e:	f7ff baa7 	b.w	8006570 <_dtoa_r+0xd8>
 8007022:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007024:	2b00      	cmp	r3, #0
 8007026:	f47f aa80 	bne.w	800652a <_dtoa_r+0x92>
 800702a:	4b11      	ldr	r3, [pc, #68]	; (8007070 <_dtoa_r+0xbd8>)
 800702c:	f7ff baa0 	b.w	8006570 <_dtoa_r+0xd8>
 8007030:	f1bb 0f00 	cmp.w	fp, #0
 8007034:	dc03      	bgt.n	800703e <_dtoa_r+0xba6>
 8007036:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007038:	2b02      	cmp	r3, #2
 800703a:	f73f aecc 	bgt.w	8006dd6 <_dtoa_r+0x93e>
 800703e:	9f08      	ldr	r7, [sp, #32]
 8007040:	4621      	mov	r1, r4
 8007042:	4650      	mov	r0, sl
 8007044:	f7ff f998 	bl	8006378 <quorem>
 8007048:	9a08      	ldr	r2, [sp, #32]
 800704a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800704e:	f807 3b01 	strb.w	r3, [r7], #1
 8007052:	1aba      	subs	r2, r7, r2
 8007054:	4593      	cmp	fp, r2
 8007056:	ddb9      	ble.n	8006fcc <_dtoa_r+0xb34>
 8007058:	4651      	mov	r1, sl
 800705a:	2300      	movs	r3, #0
 800705c:	220a      	movs	r2, #10
 800705e:	4628      	mov	r0, r5
 8007060:	f000 fc0e 	bl	8007880 <__multadd>
 8007064:	4682      	mov	sl, r0
 8007066:	e7eb      	b.n	8007040 <_dtoa_r+0xba8>
 8007068:	08009b3c 	.word	0x08009b3c
 800706c:	08009d41 	.word	0x08009d41
 8007070:	08009ab9 	.word	0x08009ab9

08007074 <rshift>:
 8007074:	6903      	ldr	r3, [r0, #16]
 8007076:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800707a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800707e:	f100 0414 	add.w	r4, r0, #20
 8007082:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007086:	dd46      	ble.n	8007116 <rshift+0xa2>
 8007088:	f011 011f 	ands.w	r1, r1, #31
 800708c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007090:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007094:	d10c      	bne.n	80070b0 <rshift+0x3c>
 8007096:	4629      	mov	r1, r5
 8007098:	f100 0710 	add.w	r7, r0, #16
 800709c:	42b1      	cmp	r1, r6
 800709e:	d335      	bcc.n	800710c <rshift+0x98>
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	1eea      	subs	r2, r5, #3
 80070a6:	4296      	cmp	r6, r2
 80070a8:	bf38      	it	cc
 80070aa:	2300      	movcc	r3, #0
 80070ac:	4423      	add	r3, r4
 80070ae:	e015      	b.n	80070dc <rshift+0x68>
 80070b0:	46a1      	mov	r9, r4
 80070b2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80070b6:	f1c1 0820 	rsb	r8, r1, #32
 80070ba:	40cf      	lsrs	r7, r1
 80070bc:	f105 0e04 	add.w	lr, r5, #4
 80070c0:	4576      	cmp	r6, lr
 80070c2:	46f4      	mov	ip, lr
 80070c4:	d816      	bhi.n	80070f4 <rshift+0x80>
 80070c6:	1a9b      	subs	r3, r3, r2
 80070c8:	009a      	lsls	r2, r3, #2
 80070ca:	3a04      	subs	r2, #4
 80070cc:	3501      	adds	r5, #1
 80070ce:	42ae      	cmp	r6, r5
 80070d0:	bf38      	it	cc
 80070d2:	2200      	movcc	r2, #0
 80070d4:	18a3      	adds	r3, r4, r2
 80070d6:	50a7      	str	r7, [r4, r2]
 80070d8:	b107      	cbz	r7, 80070dc <rshift+0x68>
 80070da:	3304      	adds	r3, #4
 80070dc:	42a3      	cmp	r3, r4
 80070de:	eba3 0204 	sub.w	r2, r3, r4
 80070e2:	bf08      	it	eq
 80070e4:	2300      	moveq	r3, #0
 80070e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80070ea:	6102      	str	r2, [r0, #16]
 80070ec:	bf08      	it	eq
 80070ee:	6143      	streq	r3, [r0, #20]
 80070f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80070f4:	f8dc c000 	ldr.w	ip, [ip]
 80070f8:	fa0c fc08 	lsl.w	ip, ip, r8
 80070fc:	ea4c 0707 	orr.w	r7, ip, r7
 8007100:	f849 7b04 	str.w	r7, [r9], #4
 8007104:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007108:	40cf      	lsrs	r7, r1
 800710a:	e7d9      	b.n	80070c0 <rshift+0x4c>
 800710c:	f851 cb04 	ldr.w	ip, [r1], #4
 8007110:	f847 cf04 	str.w	ip, [r7, #4]!
 8007114:	e7c2      	b.n	800709c <rshift+0x28>
 8007116:	4623      	mov	r3, r4
 8007118:	e7e0      	b.n	80070dc <rshift+0x68>

0800711a <__hexdig_fun>:
 800711a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800711e:	2b09      	cmp	r3, #9
 8007120:	d802      	bhi.n	8007128 <__hexdig_fun+0xe>
 8007122:	3820      	subs	r0, #32
 8007124:	b2c0      	uxtb	r0, r0
 8007126:	4770      	bx	lr
 8007128:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800712c:	2b05      	cmp	r3, #5
 800712e:	d801      	bhi.n	8007134 <__hexdig_fun+0x1a>
 8007130:	3847      	subs	r0, #71	; 0x47
 8007132:	e7f7      	b.n	8007124 <__hexdig_fun+0xa>
 8007134:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007138:	2b05      	cmp	r3, #5
 800713a:	d801      	bhi.n	8007140 <__hexdig_fun+0x26>
 800713c:	3827      	subs	r0, #39	; 0x27
 800713e:	e7f1      	b.n	8007124 <__hexdig_fun+0xa>
 8007140:	2000      	movs	r0, #0
 8007142:	4770      	bx	lr

08007144 <__gethex>:
 8007144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	b08b      	sub	sp, #44	; 0x2c
 800714a:	9306      	str	r3, [sp, #24]
 800714c:	4bb9      	ldr	r3, [pc, #740]	; (8007434 <__gethex+0x2f0>)
 800714e:	9002      	str	r0, [sp, #8]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	468b      	mov	fp, r1
 8007154:	4618      	mov	r0, r3
 8007156:	4690      	mov	r8, r2
 8007158:	9303      	str	r3, [sp, #12]
 800715a:	f7f8 fff9 	bl	8000150 <strlen>
 800715e:	4682      	mov	sl, r0
 8007160:	9b03      	ldr	r3, [sp, #12]
 8007162:	f8db 2000 	ldr.w	r2, [fp]
 8007166:	4403      	add	r3, r0
 8007168:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800716c:	9307      	str	r3, [sp, #28]
 800716e:	1c93      	adds	r3, r2, #2
 8007170:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007174:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007178:	32fe      	adds	r2, #254	; 0xfe
 800717a:	18d1      	adds	r1, r2, r3
 800717c:	461f      	mov	r7, r3
 800717e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007182:	9101      	str	r1, [sp, #4]
 8007184:	2830      	cmp	r0, #48	; 0x30
 8007186:	d0f8      	beq.n	800717a <__gethex+0x36>
 8007188:	f7ff ffc7 	bl	800711a <__hexdig_fun>
 800718c:	4604      	mov	r4, r0
 800718e:	2800      	cmp	r0, #0
 8007190:	d13a      	bne.n	8007208 <__gethex+0xc4>
 8007192:	4652      	mov	r2, sl
 8007194:	4638      	mov	r0, r7
 8007196:	9903      	ldr	r1, [sp, #12]
 8007198:	f001 fd58 	bl	8008c4c <strncmp>
 800719c:	4605      	mov	r5, r0
 800719e:	2800      	cmp	r0, #0
 80071a0:	d166      	bne.n	8007270 <__gethex+0x12c>
 80071a2:	f817 000a 	ldrb.w	r0, [r7, sl]
 80071a6:	eb07 060a 	add.w	r6, r7, sl
 80071aa:	f7ff ffb6 	bl	800711a <__hexdig_fun>
 80071ae:	2800      	cmp	r0, #0
 80071b0:	d060      	beq.n	8007274 <__gethex+0x130>
 80071b2:	4633      	mov	r3, r6
 80071b4:	7818      	ldrb	r0, [r3, #0]
 80071b6:	461f      	mov	r7, r3
 80071b8:	2830      	cmp	r0, #48	; 0x30
 80071ba:	f103 0301 	add.w	r3, r3, #1
 80071be:	d0f9      	beq.n	80071b4 <__gethex+0x70>
 80071c0:	f7ff ffab 	bl	800711a <__hexdig_fun>
 80071c4:	2301      	movs	r3, #1
 80071c6:	fab0 f480 	clz	r4, r0
 80071ca:	4635      	mov	r5, r6
 80071cc:	0964      	lsrs	r4, r4, #5
 80071ce:	9301      	str	r3, [sp, #4]
 80071d0:	463a      	mov	r2, r7
 80071d2:	4616      	mov	r6, r2
 80071d4:	7830      	ldrb	r0, [r6, #0]
 80071d6:	3201      	adds	r2, #1
 80071d8:	f7ff ff9f 	bl	800711a <__hexdig_fun>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d1f8      	bne.n	80071d2 <__gethex+0x8e>
 80071e0:	4652      	mov	r2, sl
 80071e2:	4630      	mov	r0, r6
 80071e4:	9903      	ldr	r1, [sp, #12]
 80071e6:	f001 fd31 	bl	8008c4c <strncmp>
 80071ea:	b980      	cbnz	r0, 800720e <__gethex+0xca>
 80071ec:	b94d      	cbnz	r5, 8007202 <__gethex+0xbe>
 80071ee:	eb06 050a 	add.w	r5, r6, sl
 80071f2:	462a      	mov	r2, r5
 80071f4:	4616      	mov	r6, r2
 80071f6:	7830      	ldrb	r0, [r6, #0]
 80071f8:	3201      	adds	r2, #1
 80071fa:	f7ff ff8e 	bl	800711a <__hexdig_fun>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d1f8      	bne.n	80071f4 <__gethex+0xb0>
 8007202:	1bad      	subs	r5, r5, r6
 8007204:	00ad      	lsls	r5, r5, #2
 8007206:	e004      	b.n	8007212 <__gethex+0xce>
 8007208:	2400      	movs	r4, #0
 800720a:	4625      	mov	r5, r4
 800720c:	e7e0      	b.n	80071d0 <__gethex+0x8c>
 800720e:	2d00      	cmp	r5, #0
 8007210:	d1f7      	bne.n	8007202 <__gethex+0xbe>
 8007212:	7833      	ldrb	r3, [r6, #0]
 8007214:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007218:	2b50      	cmp	r3, #80	; 0x50
 800721a:	d139      	bne.n	8007290 <__gethex+0x14c>
 800721c:	7873      	ldrb	r3, [r6, #1]
 800721e:	2b2b      	cmp	r3, #43	; 0x2b
 8007220:	d02a      	beq.n	8007278 <__gethex+0x134>
 8007222:	2b2d      	cmp	r3, #45	; 0x2d
 8007224:	d02c      	beq.n	8007280 <__gethex+0x13c>
 8007226:	f04f 0900 	mov.w	r9, #0
 800722a:	1c71      	adds	r1, r6, #1
 800722c:	7808      	ldrb	r0, [r1, #0]
 800722e:	f7ff ff74 	bl	800711a <__hexdig_fun>
 8007232:	1e43      	subs	r3, r0, #1
 8007234:	b2db      	uxtb	r3, r3
 8007236:	2b18      	cmp	r3, #24
 8007238:	d82a      	bhi.n	8007290 <__gethex+0x14c>
 800723a:	f1a0 0210 	sub.w	r2, r0, #16
 800723e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007242:	f7ff ff6a 	bl	800711a <__hexdig_fun>
 8007246:	1e43      	subs	r3, r0, #1
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b18      	cmp	r3, #24
 800724c:	d91b      	bls.n	8007286 <__gethex+0x142>
 800724e:	f1b9 0f00 	cmp.w	r9, #0
 8007252:	d000      	beq.n	8007256 <__gethex+0x112>
 8007254:	4252      	negs	r2, r2
 8007256:	4415      	add	r5, r2
 8007258:	f8cb 1000 	str.w	r1, [fp]
 800725c:	b1d4      	cbz	r4, 8007294 <__gethex+0x150>
 800725e:	9b01      	ldr	r3, [sp, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	bf14      	ite	ne
 8007264:	2700      	movne	r7, #0
 8007266:	2706      	moveq	r7, #6
 8007268:	4638      	mov	r0, r7
 800726a:	b00b      	add	sp, #44	; 0x2c
 800726c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007270:	463e      	mov	r6, r7
 8007272:	4625      	mov	r5, r4
 8007274:	2401      	movs	r4, #1
 8007276:	e7cc      	b.n	8007212 <__gethex+0xce>
 8007278:	f04f 0900 	mov.w	r9, #0
 800727c:	1cb1      	adds	r1, r6, #2
 800727e:	e7d5      	b.n	800722c <__gethex+0xe8>
 8007280:	f04f 0901 	mov.w	r9, #1
 8007284:	e7fa      	b.n	800727c <__gethex+0x138>
 8007286:	230a      	movs	r3, #10
 8007288:	fb03 0202 	mla	r2, r3, r2, r0
 800728c:	3a10      	subs	r2, #16
 800728e:	e7d6      	b.n	800723e <__gethex+0xfa>
 8007290:	4631      	mov	r1, r6
 8007292:	e7e1      	b.n	8007258 <__gethex+0x114>
 8007294:	4621      	mov	r1, r4
 8007296:	1bf3      	subs	r3, r6, r7
 8007298:	3b01      	subs	r3, #1
 800729a:	2b07      	cmp	r3, #7
 800729c:	dc0a      	bgt.n	80072b4 <__gethex+0x170>
 800729e:	9802      	ldr	r0, [sp, #8]
 80072a0:	f000 fa8c 	bl	80077bc <_Balloc>
 80072a4:	4604      	mov	r4, r0
 80072a6:	b940      	cbnz	r0, 80072ba <__gethex+0x176>
 80072a8:	4602      	mov	r2, r0
 80072aa:	21de      	movs	r1, #222	; 0xde
 80072ac:	4b62      	ldr	r3, [pc, #392]	; (8007438 <__gethex+0x2f4>)
 80072ae:	4863      	ldr	r0, [pc, #396]	; (800743c <__gethex+0x2f8>)
 80072b0:	f001 fda2 	bl	8008df8 <__assert_func>
 80072b4:	3101      	adds	r1, #1
 80072b6:	105b      	asrs	r3, r3, #1
 80072b8:	e7ef      	b.n	800729a <__gethex+0x156>
 80072ba:	f04f 0b00 	mov.w	fp, #0
 80072be:	f100 0914 	add.w	r9, r0, #20
 80072c2:	f1ca 0301 	rsb	r3, sl, #1
 80072c6:	f8cd 9010 	str.w	r9, [sp, #16]
 80072ca:	f8cd b004 	str.w	fp, [sp, #4]
 80072ce:	9308      	str	r3, [sp, #32]
 80072d0:	42b7      	cmp	r7, r6
 80072d2:	d33f      	bcc.n	8007354 <__gethex+0x210>
 80072d4:	9f04      	ldr	r7, [sp, #16]
 80072d6:	9b01      	ldr	r3, [sp, #4]
 80072d8:	f847 3b04 	str.w	r3, [r7], #4
 80072dc:	eba7 0709 	sub.w	r7, r7, r9
 80072e0:	10bf      	asrs	r7, r7, #2
 80072e2:	6127      	str	r7, [r4, #16]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 fb5f 	bl	80079a8 <__hi0bits>
 80072ea:	017f      	lsls	r7, r7, #5
 80072ec:	f8d8 6000 	ldr.w	r6, [r8]
 80072f0:	1a3f      	subs	r7, r7, r0
 80072f2:	42b7      	cmp	r7, r6
 80072f4:	dd62      	ble.n	80073bc <__gethex+0x278>
 80072f6:	1bbf      	subs	r7, r7, r6
 80072f8:	4639      	mov	r1, r7
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fef5 	bl	80080ea <__any_on>
 8007300:	4682      	mov	sl, r0
 8007302:	b1a8      	cbz	r0, 8007330 <__gethex+0x1ec>
 8007304:	f04f 0a01 	mov.w	sl, #1
 8007308:	1e7b      	subs	r3, r7, #1
 800730a:	1159      	asrs	r1, r3, #5
 800730c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007310:	f003 021f 	and.w	r2, r3, #31
 8007314:	fa0a f202 	lsl.w	r2, sl, r2
 8007318:	420a      	tst	r2, r1
 800731a:	d009      	beq.n	8007330 <__gethex+0x1ec>
 800731c:	4553      	cmp	r3, sl
 800731e:	dd05      	ble.n	800732c <__gethex+0x1e8>
 8007320:	4620      	mov	r0, r4
 8007322:	1eb9      	subs	r1, r7, #2
 8007324:	f000 fee1 	bl	80080ea <__any_on>
 8007328:	2800      	cmp	r0, #0
 800732a:	d144      	bne.n	80073b6 <__gethex+0x272>
 800732c:	f04f 0a02 	mov.w	sl, #2
 8007330:	4639      	mov	r1, r7
 8007332:	4620      	mov	r0, r4
 8007334:	f7ff fe9e 	bl	8007074 <rshift>
 8007338:	443d      	add	r5, r7
 800733a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800733e:	42ab      	cmp	r3, r5
 8007340:	da4a      	bge.n	80073d8 <__gethex+0x294>
 8007342:	4621      	mov	r1, r4
 8007344:	9802      	ldr	r0, [sp, #8]
 8007346:	f000 fa79 	bl	800783c <_Bfree>
 800734a:	2300      	movs	r3, #0
 800734c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800734e:	27a3      	movs	r7, #163	; 0xa3
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	e789      	b.n	8007268 <__gethex+0x124>
 8007354:	1e73      	subs	r3, r6, #1
 8007356:	9a07      	ldr	r2, [sp, #28]
 8007358:	9305      	str	r3, [sp, #20]
 800735a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800735e:	4293      	cmp	r3, r2
 8007360:	d019      	beq.n	8007396 <__gethex+0x252>
 8007362:	f1bb 0f20 	cmp.w	fp, #32
 8007366:	d107      	bne.n	8007378 <__gethex+0x234>
 8007368:	9b04      	ldr	r3, [sp, #16]
 800736a:	9a01      	ldr	r2, [sp, #4]
 800736c:	f843 2b04 	str.w	r2, [r3], #4
 8007370:	9304      	str	r3, [sp, #16]
 8007372:	2300      	movs	r3, #0
 8007374:	469b      	mov	fp, r3
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800737c:	f7ff fecd 	bl	800711a <__hexdig_fun>
 8007380:	9b01      	ldr	r3, [sp, #4]
 8007382:	f000 000f 	and.w	r0, r0, #15
 8007386:	fa00 f00b 	lsl.w	r0, r0, fp
 800738a:	4303      	orrs	r3, r0
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	f10b 0b04 	add.w	fp, fp, #4
 8007392:	9b05      	ldr	r3, [sp, #20]
 8007394:	e00d      	b.n	80073b2 <__gethex+0x26e>
 8007396:	9b05      	ldr	r3, [sp, #20]
 8007398:	9a08      	ldr	r2, [sp, #32]
 800739a:	4413      	add	r3, r2
 800739c:	42bb      	cmp	r3, r7
 800739e:	d3e0      	bcc.n	8007362 <__gethex+0x21e>
 80073a0:	4618      	mov	r0, r3
 80073a2:	4652      	mov	r2, sl
 80073a4:	9903      	ldr	r1, [sp, #12]
 80073a6:	9309      	str	r3, [sp, #36]	; 0x24
 80073a8:	f001 fc50 	bl	8008c4c <strncmp>
 80073ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ae:	2800      	cmp	r0, #0
 80073b0:	d1d7      	bne.n	8007362 <__gethex+0x21e>
 80073b2:	461e      	mov	r6, r3
 80073b4:	e78c      	b.n	80072d0 <__gethex+0x18c>
 80073b6:	f04f 0a03 	mov.w	sl, #3
 80073ba:	e7b9      	b.n	8007330 <__gethex+0x1ec>
 80073bc:	da09      	bge.n	80073d2 <__gethex+0x28e>
 80073be:	1bf7      	subs	r7, r6, r7
 80073c0:	4621      	mov	r1, r4
 80073c2:	463a      	mov	r2, r7
 80073c4:	9802      	ldr	r0, [sp, #8]
 80073c6:	f000 fc51 	bl	8007c6c <__lshift>
 80073ca:	4604      	mov	r4, r0
 80073cc:	1bed      	subs	r5, r5, r7
 80073ce:	f100 0914 	add.w	r9, r0, #20
 80073d2:	f04f 0a00 	mov.w	sl, #0
 80073d6:	e7b0      	b.n	800733a <__gethex+0x1f6>
 80073d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80073dc:	42a8      	cmp	r0, r5
 80073de:	dd71      	ble.n	80074c4 <__gethex+0x380>
 80073e0:	1b45      	subs	r5, r0, r5
 80073e2:	42ae      	cmp	r6, r5
 80073e4:	dc34      	bgt.n	8007450 <__gethex+0x30c>
 80073e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d028      	beq.n	8007440 <__gethex+0x2fc>
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d02a      	beq.n	8007448 <__gethex+0x304>
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d115      	bne.n	8007422 <__gethex+0x2de>
 80073f6:	42ae      	cmp	r6, r5
 80073f8:	d113      	bne.n	8007422 <__gethex+0x2de>
 80073fa:	2e01      	cmp	r6, #1
 80073fc:	d10b      	bne.n	8007416 <__gethex+0x2d2>
 80073fe:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007402:	9a06      	ldr	r2, [sp, #24]
 8007404:	2762      	movs	r7, #98	; 0x62
 8007406:	6013      	str	r3, [r2, #0]
 8007408:	2301      	movs	r3, #1
 800740a:	6123      	str	r3, [r4, #16]
 800740c:	f8c9 3000 	str.w	r3, [r9]
 8007410:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007412:	601c      	str	r4, [r3, #0]
 8007414:	e728      	b.n	8007268 <__gethex+0x124>
 8007416:	4620      	mov	r0, r4
 8007418:	1e71      	subs	r1, r6, #1
 800741a:	f000 fe66 	bl	80080ea <__any_on>
 800741e:	2800      	cmp	r0, #0
 8007420:	d1ed      	bne.n	80073fe <__gethex+0x2ba>
 8007422:	4621      	mov	r1, r4
 8007424:	9802      	ldr	r0, [sp, #8]
 8007426:	f000 fa09 	bl	800783c <_Bfree>
 800742a:	2300      	movs	r3, #0
 800742c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800742e:	2750      	movs	r7, #80	; 0x50
 8007430:	6013      	str	r3, [r2, #0]
 8007432:	e719      	b.n	8007268 <__gethex+0x124>
 8007434:	08009bb8 	.word	0x08009bb8
 8007438:	08009b3c 	.word	0x08009b3c
 800743c:	08009b4d 	.word	0x08009b4d
 8007440:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1ed      	bne.n	8007422 <__gethex+0x2de>
 8007446:	e7da      	b.n	80073fe <__gethex+0x2ba>
 8007448:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1d7      	bne.n	80073fe <__gethex+0x2ba>
 800744e:	e7e8      	b.n	8007422 <__gethex+0x2de>
 8007450:	1e6f      	subs	r7, r5, #1
 8007452:	f1ba 0f00 	cmp.w	sl, #0
 8007456:	d132      	bne.n	80074be <__gethex+0x37a>
 8007458:	b127      	cbz	r7, 8007464 <__gethex+0x320>
 800745a:	4639      	mov	r1, r7
 800745c:	4620      	mov	r0, r4
 800745e:	f000 fe44 	bl	80080ea <__any_on>
 8007462:	4682      	mov	sl, r0
 8007464:	2101      	movs	r1, #1
 8007466:	117b      	asrs	r3, r7, #5
 8007468:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800746c:	f007 071f 	and.w	r7, r7, #31
 8007470:	fa01 f707 	lsl.w	r7, r1, r7
 8007474:	421f      	tst	r7, r3
 8007476:	f04f 0702 	mov.w	r7, #2
 800747a:	4629      	mov	r1, r5
 800747c:	4620      	mov	r0, r4
 800747e:	bf18      	it	ne
 8007480:	f04a 0a02 	orrne.w	sl, sl, #2
 8007484:	1b76      	subs	r6, r6, r5
 8007486:	f7ff fdf5 	bl	8007074 <rshift>
 800748a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800748e:	f1ba 0f00 	cmp.w	sl, #0
 8007492:	d048      	beq.n	8007526 <__gethex+0x3e2>
 8007494:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007498:	2b02      	cmp	r3, #2
 800749a:	d015      	beq.n	80074c8 <__gethex+0x384>
 800749c:	2b03      	cmp	r3, #3
 800749e:	d017      	beq.n	80074d0 <__gethex+0x38c>
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d109      	bne.n	80074b8 <__gethex+0x374>
 80074a4:	f01a 0f02 	tst.w	sl, #2
 80074a8:	d006      	beq.n	80074b8 <__gethex+0x374>
 80074aa:	f8d9 0000 	ldr.w	r0, [r9]
 80074ae:	ea4a 0a00 	orr.w	sl, sl, r0
 80074b2:	f01a 0f01 	tst.w	sl, #1
 80074b6:	d10e      	bne.n	80074d6 <__gethex+0x392>
 80074b8:	f047 0710 	orr.w	r7, r7, #16
 80074bc:	e033      	b.n	8007526 <__gethex+0x3e2>
 80074be:	f04f 0a01 	mov.w	sl, #1
 80074c2:	e7cf      	b.n	8007464 <__gethex+0x320>
 80074c4:	2701      	movs	r7, #1
 80074c6:	e7e2      	b.n	800748e <__gethex+0x34a>
 80074c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074ca:	f1c3 0301 	rsb	r3, r3, #1
 80074ce:	9315      	str	r3, [sp, #84]	; 0x54
 80074d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0f0      	beq.n	80074b8 <__gethex+0x374>
 80074d6:	f04f 0c00 	mov.w	ip, #0
 80074da:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80074de:	f104 0314 	add.w	r3, r4, #20
 80074e2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80074e6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80074f0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80074f4:	d01c      	beq.n	8007530 <__gethex+0x3ec>
 80074f6:	3201      	adds	r2, #1
 80074f8:	6002      	str	r2, [r0, #0]
 80074fa:	2f02      	cmp	r7, #2
 80074fc:	f104 0314 	add.w	r3, r4, #20
 8007500:	d13d      	bne.n	800757e <__gethex+0x43a>
 8007502:	f8d8 2000 	ldr.w	r2, [r8]
 8007506:	3a01      	subs	r2, #1
 8007508:	42b2      	cmp	r2, r6
 800750a:	d10a      	bne.n	8007522 <__gethex+0x3de>
 800750c:	2201      	movs	r2, #1
 800750e:	1171      	asrs	r1, r6, #5
 8007510:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007514:	f006 061f 	and.w	r6, r6, #31
 8007518:	fa02 f606 	lsl.w	r6, r2, r6
 800751c:	421e      	tst	r6, r3
 800751e:	bf18      	it	ne
 8007520:	4617      	movne	r7, r2
 8007522:	f047 0720 	orr.w	r7, r7, #32
 8007526:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007528:	601c      	str	r4, [r3, #0]
 800752a:	9b06      	ldr	r3, [sp, #24]
 800752c:	601d      	str	r5, [r3, #0]
 800752e:	e69b      	b.n	8007268 <__gethex+0x124>
 8007530:	4299      	cmp	r1, r3
 8007532:	f843 cc04 	str.w	ip, [r3, #-4]
 8007536:	d8d8      	bhi.n	80074ea <__gethex+0x3a6>
 8007538:	68a3      	ldr	r3, [r4, #8]
 800753a:	459b      	cmp	fp, r3
 800753c:	db17      	blt.n	800756e <__gethex+0x42a>
 800753e:	6861      	ldr	r1, [r4, #4]
 8007540:	9802      	ldr	r0, [sp, #8]
 8007542:	3101      	adds	r1, #1
 8007544:	f000 f93a 	bl	80077bc <_Balloc>
 8007548:	4681      	mov	r9, r0
 800754a:	b918      	cbnz	r0, 8007554 <__gethex+0x410>
 800754c:	4602      	mov	r2, r0
 800754e:	2184      	movs	r1, #132	; 0x84
 8007550:	4b19      	ldr	r3, [pc, #100]	; (80075b8 <__gethex+0x474>)
 8007552:	e6ac      	b.n	80072ae <__gethex+0x16a>
 8007554:	6922      	ldr	r2, [r4, #16]
 8007556:	f104 010c 	add.w	r1, r4, #12
 800755a:	3202      	adds	r2, #2
 800755c:	0092      	lsls	r2, r2, #2
 800755e:	300c      	adds	r0, #12
 8007560:	f7fd f928 	bl	80047b4 <memcpy>
 8007564:	4621      	mov	r1, r4
 8007566:	9802      	ldr	r0, [sp, #8]
 8007568:	f000 f968 	bl	800783c <_Bfree>
 800756c:	464c      	mov	r4, r9
 800756e:	6923      	ldr	r3, [r4, #16]
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	6122      	str	r2, [r4, #16]
 8007574:	2201      	movs	r2, #1
 8007576:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800757a:	615a      	str	r2, [r3, #20]
 800757c:	e7bd      	b.n	80074fa <__gethex+0x3b6>
 800757e:	6922      	ldr	r2, [r4, #16]
 8007580:	455a      	cmp	r2, fp
 8007582:	dd0b      	ble.n	800759c <__gethex+0x458>
 8007584:	2101      	movs	r1, #1
 8007586:	4620      	mov	r0, r4
 8007588:	f7ff fd74 	bl	8007074 <rshift>
 800758c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007590:	3501      	adds	r5, #1
 8007592:	42ab      	cmp	r3, r5
 8007594:	f6ff aed5 	blt.w	8007342 <__gethex+0x1fe>
 8007598:	2701      	movs	r7, #1
 800759a:	e7c2      	b.n	8007522 <__gethex+0x3de>
 800759c:	f016 061f 	ands.w	r6, r6, #31
 80075a0:	d0fa      	beq.n	8007598 <__gethex+0x454>
 80075a2:	449a      	add	sl, r3
 80075a4:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80075a8:	f000 f9fe 	bl	80079a8 <__hi0bits>
 80075ac:	f1c6 0620 	rsb	r6, r6, #32
 80075b0:	42b0      	cmp	r0, r6
 80075b2:	dbe7      	blt.n	8007584 <__gethex+0x440>
 80075b4:	e7f0      	b.n	8007598 <__gethex+0x454>
 80075b6:	bf00      	nop
 80075b8:	08009b3c 	.word	0x08009b3c

080075bc <L_shift>:
 80075bc:	f1c2 0208 	rsb	r2, r2, #8
 80075c0:	0092      	lsls	r2, r2, #2
 80075c2:	b570      	push	{r4, r5, r6, lr}
 80075c4:	f1c2 0620 	rsb	r6, r2, #32
 80075c8:	6843      	ldr	r3, [r0, #4]
 80075ca:	6804      	ldr	r4, [r0, #0]
 80075cc:	fa03 f506 	lsl.w	r5, r3, r6
 80075d0:	432c      	orrs	r4, r5
 80075d2:	40d3      	lsrs	r3, r2
 80075d4:	6004      	str	r4, [r0, #0]
 80075d6:	f840 3f04 	str.w	r3, [r0, #4]!
 80075da:	4288      	cmp	r0, r1
 80075dc:	d3f4      	bcc.n	80075c8 <L_shift+0xc>
 80075de:	bd70      	pop	{r4, r5, r6, pc}

080075e0 <__match>:
 80075e0:	b530      	push	{r4, r5, lr}
 80075e2:	6803      	ldr	r3, [r0, #0]
 80075e4:	3301      	adds	r3, #1
 80075e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075ea:	b914      	cbnz	r4, 80075f2 <__match+0x12>
 80075ec:	6003      	str	r3, [r0, #0]
 80075ee:	2001      	movs	r0, #1
 80075f0:	bd30      	pop	{r4, r5, pc}
 80075f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80075fa:	2d19      	cmp	r5, #25
 80075fc:	bf98      	it	ls
 80075fe:	3220      	addls	r2, #32
 8007600:	42a2      	cmp	r2, r4
 8007602:	d0f0      	beq.n	80075e6 <__match+0x6>
 8007604:	2000      	movs	r0, #0
 8007606:	e7f3      	b.n	80075f0 <__match+0x10>

08007608 <__hexnan>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	2500      	movs	r5, #0
 800760e:	680b      	ldr	r3, [r1, #0]
 8007610:	4682      	mov	sl, r0
 8007612:	115e      	asrs	r6, r3, #5
 8007614:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007618:	f013 031f 	ands.w	r3, r3, #31
 800761c:	bf18      	it	ne
 800761e:	3604      	addne	r6, #4
 8007620:	1f37      	subs	r7, r6, #4
 8007622:	4690      	mov	r8, r2
 8007624:	46b9      	mov	r9, r7
 8007626:	463c      	mov	r4, r7
 8007628:	46ab      	mov	fp, r5
 800762a:	b087      	sub	sp, #28
 800762c:	6801      	ldr	r1, [r0, #0]
 800762e:	9301      	str	r3, [sp, #4]
 8007630:	f846 5c04 	str.w	r5, [r6, #-4]
 8007634:	9502      	str	r5, [sp, #8]
 8007636:	784a      	ldrb	r2, [r1, #1]
 8007638:	1c4b      	adds	r3, r1, #1
 800763a:	9303      	str	r3, [sp, #12]
 800763c:	b342      	cbz	r2, 8007690 <__hexnan+0x88>
 800763e:	4610      	mov	r0, r2
 8007640:	9105      	str	r1, [sp, #20]
 8007642:	9204      	str	r2, [sp, #16]
 8007644:	f7ff fd69 	bl	800711a <__hexdig_fun>
 8007648:	2800      	cmp	r0, #0
 800764a:	d14f      	bne.n	80076ec <__hexnan+0xe4>
 800764c:	9a04      	ldr	r2, [sp, #16]
 800764e:	9905      	ldr	r1, [sp, #20]
 8007650:	2a20      	cmp	r2, #32
 8007652:	d818      	bhi.n	8007686 <__hexnan+0x7e>
 8007654:	9b02      	ldr	r3, [sp, #8]
 8007656:	459b      	cmp	fp, r3
 8007658:	dd13      	ble.n	8007682 <__hexnan+0x7a>
 800765a:	454c      	cmp	r4, r9
 800765c:	d206      	bcs.n	800766c <__hexnan+0x64>
 800765e:	2d07      	cmp	r5, #7
 8007660:	dc04      	bgt.n	800766c <__hexnan+0x64>
 8007662:	462a      	mov	r2, r5
 8007664:	4649      	mov	r1, r9
 8007666:	4620      	mov	r0, r4
 8007668:	f7ff ffa8 	bl	80075bc <L_shift>
 800766c:	4544      	cmp	r4, r8
 800766e:	d950      	bls.n	8007712 <__hexnan+0x10a>
 8007670:	2300      	movs	r3, #0
 8007672:	f1a4 0904 	sub.w	r9, r4, #4
 8007676:	f844 3c04 	str.w	r3, [r4, #-4]
 800767a:	461d      	mov	r5, r3
 800767c:	464c      	mov	r4, r9
 800767e:	f8cd b008 	str.w	fp, [sp, #8]
 8007682:	9903      	ldr	r1, [sp, #12]
 8007684:	e7d7      	b.n	8007636 <__hexnan+0x2e>
 8007686:	2a29      	cmp	r2, #41	; 0x29
 8007688:	d156      	bne.n	8007738 <__hexnan+0x130>
 800768a:	3102      	adds	r1, #2
 800768c:	f8ca 1000 	str.w	r1, [sl]
 8007690:	f1bb 0f00 	cmp.w	fp, #0
 8007694:	d050      	beq.n	8007738 <__hexnan+0x130>
 8007696:	454c      	cmp	r4, r9
 8007698:	d206      	bcs.n	80076a8 <__hexnan+0xa0>
 800769a:	2d07      	cmp	r5, #7
 800769c:	dc04      	bgt.n	80076a8 <__hexnan+0xa0>
 800769e:	462a      	mov	r2, r5
 80076a0:	4649      	mov	r1, r9
 80076a2:	4620      	mov	r0, r4
 80076a4:	f7ff ff8a 	bl	80075bc <L_shift>
 80076a8:	4544      	cmp	r4, r8
 80076aa:	d934      	bls.n	8007716 <__hexnan+0x10e>
 80076ac:	4623      	mov	r3, r4
 80076ae:	f1a8 0204 	sub.w	r2, r8, #4
 80076b2:	f853 1b04 	ldr.w	r1, [r3], #4
 80076b6:	429f      	cmp	r7, r3
 80076b8:	f842 1f04 	str.w	r1, [r2, #4]!
 80076bc:	d2f9      	bcs.n	80076b2 <__hexnan+0xaa>
 80076be:	1b3b      	subs	r3, r7, r4
 80076c0:	f023 0303 	bic.w	r3, r3, #3
 80076c4:	3304      	adds	r3, #4
 80076c6:	3401      	adds	r4, #1
 80076c8:	3e03      	subs	r6, #3
 80076ca:	42b4      	cmp	r4, r6
 80076cc:	bf88      	it	hi
 80076ce:	2304      	movhi	r3, #4
 80076d0:	2200      	movs	r2, #0
 80076d2:	4443      	add	r3, r8
 80076d4:	f843 2b04 	str.w	r2, [r3], #4
 80076d8:	429f      	cmp	r7, r3
 80076da:	d2fb      	bcs.n	80076d4 <__hexnan+0xcc>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	b91b      	cbnz	r3, 80076e8 <__hexnan+0xe0>
 80076e0:	4547      	cmp	r7, r8
 80076e2:	d127      	bne.n	8007734 <__hexnan+0x12c>
 80076e4:	2301      	movs	r3, #1
 80076e6:	603b      	str	r3, [r7, #0]
 80076e8:	2005      	movs	r0, #5
 80076ea:	e026      	b.n	800773a <__hexnan+0x132>
 80076ec:	3501      	adds	r5, #1
 80076ee:	2d08      	cmp	r5, #8
 80076f0:	f10b 0b01 	add.w	fp, fp, #1
 80076f4:	dd06      	ble.n	8007704 <__hexnan+0xfc>
 80076f6:	4544      	cmp	r4, r8
 80076f8:	d9c3      	bls.n	8007682 <__hexnan+0x7a>
 80076fa:	2300      	movs	r3, #0
 80076fc:	2501      	movs	r5, #1
 80076fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8007702:	3c04      	subs	r4, #4
 8007704:	6822      	ldr	r2, [r4, #0]
 8007706:	f000 000f 	and.w	r0, r0, #15
 800770a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800770e:	6022      	str	r2, [r4, #0]
 8007710:	e7b7      	b.n	8007682 <__hexnan+0x7a>
 8007712:	2508      	movs	r5, #8
 8007714:	e7b5      	b.n	8007682 <__hexnan+0x7a>
 8007716:	9b01      	ldr	r3, [sp, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0df      	beq.n	80076dc <__hexnan+0xd4>
 800771c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007720:	f1c3 0320 	rsb	r3, r3, #32
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
 8007728:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800772c:	401a      	ands	r2, r3
 800772e:	f846 2c04 	str.w	r2, [r6, #-4]
 8007732:	e7d3      	b.n	80076dc <__hexnan+0xd4>
 8007734:	3f04      	subs	r7, #4
 8007736:	e7d1      	b.n	80076dc <__hexnan+0xd4>
 8007738:	2004      	movs	r0, #4
 800773a:	b007      	add	sp, #28
 800773c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007740 <_localeconv_r>:
 8007740:	4800      	ldr	r0, [pc, #0]	; (8007744 <_localeconv_r+0x4>)
 8007742:	4770      	bx	lr
 8007744:	20000214 	.word	0x20000214

08007748 <_lseek_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4604      	mov	r4, r0
 800774c:	4608      	mov	r0, r1
 800774e:	4611      	mov	r1, r2
 8007750:	2200      	movs	r2, #0
 8007752:	4d05      	ldr	r5, [pc, #20]	; (8007768 <_lseek_r+0x20>)
 8007754:	602a      	str	r2, [r5, #0]
 8007756:	461a      	mov	r2, r3
 8007758:	f7f9 fede 	bl	8001518 <_lseek>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_lseek_r+0x1e>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_lseek_r+0x1e>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	2000147c 	.word	0x2000147c

0800776c <malloc>:
 800776c:	4b02      	ldr	r3, [pc, #8]	; (8007778 <malloc+0xc>)
 800776e:	4601      	mov	r1, r0
 8007770:	6818      	ldr	r0, [r3, #0]
 8007772:	f000 bd35 	b.w	80081e0 <_malloc_r>
 8007776:	bf00      	nop
 8007778:	200000bc 	.word	0x200000bc

0800777c <__ascii_mbtowc>:
 800777c:	b082      	sub	sp, #8
 800777e:	b901      	cbnz	r1, 8007782 <__ascii_mbtowc+0x6>
 8007780:	a901      	add	r1, sp, #4
 8007782:	b142      	cbz	r2, 8007796 <__ascii_mbtowc+0x1a>
 8007784:	b14b      	cbz	r3, 800779a <__ascii_mbtowc+0x1e>
 8007786:	7813      	ldrb	r3, [r2, #0]
 8007788:	600b      	str	r3, [r1, #0]
 800778a:	7812      	ldrb	r2, [r2, #0]
 800778c:	1e10      	subs	r0, r2, #0
 800778e:	bf18      	it	ne
 8007790:	2001      	movne	r0, #1
 8007792:	b002      	add	sp, #8
 8007794:	4770      	bx	lr
 8007796:	4610      	mov	r0, r2
 8007798:	e7fb      	b.n	8007792 <__ascii_mbtowc+0x16>
 800779a:	f06f 0001 	mvn.w	r0, #1
 800779e:	e7f8      	b.n	8007792 <__ascii_mbtowc+0x16>

080077a0 <memchr>:
 80077a0:	4603      	mov	r3, r0
 80077a2:	b510      	push	{r4, lr}
 80077a4:	b2c9      	uxtb	r1, r1
 80077a6:	4402      	add	r2, r0
 80077a8:	4293      	cmp	r3, r2
 80077aa:	4618      	mov	r0, r3
 80077ac:	d101      	bne.n	80077b2 <memchr+0x12>
 80077ae:	2000      	movs	r0, #0
 80077b0:	e003      	b.n	80077ba <memchr+0x1a>
 80077b2:	7804      	ldrb	r4, [r0, #0]
 80077b4:	3301      	adds	r3, #1
 80077b6:	428c      	cmp	r4, r1
 80077b8:	d1f6      	bne.n	80077a8 <memchr+0x8>
 80077ba:	bd10      	pop	{r4, pc}

080077bc <_Balloc>:
 80077bc:	b570      	push	{r4, r5, r6, lr}
 80077be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80077c0:	4604      	mov	r4, r0
 80077c2:	460d      	mov	r5, r1
 80077c4:	b976      	cbnz	r6, 80077e4 <_Balloc+0x28>
 80077c6:	2010      	movs	r0, #16
 80077c8:	f7ff ffd0 	bl	800776c <malloc>
 80077cc:	4602      	mov	r2, r0
 80077ce:	6260      	str	r0, [r4, #36]	; 0x24
 80077d0:	b920      	cbnz	r0, 80077dc <_Balloc+0x20>
 80077d2:	2166      	movs	r1, #102	; 0x66
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <_Balloc+0x78>)
 80077d6:	4818      	ldr	r0, [pc, #96]	; (8007838 <_Balloc+0x7c>)
 80077d8:	f001 fb0e 	bl	8008df8 <__assert_func>
 80077dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80077e0:	6006      	str	r6, [r0, #0]
 80077e2:	60c6      	str	r6, [r0, #12]
 80077e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80077e6:	68f3      	ldr	r3, [r6, #12]
 80077e8:	b183      	cbz	r3, 800780c <_Balloc+0x50>
 80077ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077f2:	b9b8      	cbnz	r0, 8007824 <_Balloc+0x68>
 80077f4:	2101      	movs	r1, #1
 80077f6:	fa01 f605 	lsl.w	r6, r1, r5
 80077fa:	1d72      	adds	r2, r6, #5
 80077fc:	4620      	mov	r0, r4
 80077fe:	0092      	lsls	r2, r2, #2
 8007800:	f000 fc94 	bl	800812c <_calloc_r>
 8007804:	b160      	cbz	r0, 8007820 <_Balloc+0x64>
 8007806:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800780a:	e00e      	b.n	800782a <_Balloc+0x6e>
 800780c:	2221      	movs	r2, #33	; 0x21
 800780e:	2104      	movs	r1, #4
 8007810:	4620      	mov	r0, r4
 8007812:	f000 fc8b 	bl	800812c <_calloc_r>
 8007816:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007818:	60f0      	str	r0, [r6, #12]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e4      	bne.n	80077ea <_Balloc+0x2e>
 8007820:	2000      	movs	r0, #0
 8007822:	bd70      	pop	{r4, r5, r6, pc}
 8007824:	6802      	ldr	r2, [r0, #0]
 8007826:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800782a:	2300      	movs	r3, #0
 800782c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007830:	e7f7      	b.n	8007822 <_Balloc+0x66>
 8007832:	bf00      	nop
 8007834:	08009ac6 	.word	0x08009ac6
 8007838:	08009bcc 	.word	0x08009bcc

0800783c <_Bfree>:
 800783c:	b570      	push	{r4, r5, r6, lr}
 800783e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007840:	4605      	mov	r5, r0
 8007842:	460c      	mov	r4, r1
 8007844:	b976      	cbnz	r6, 8007864 <_Bfree+0x28>
 8007846:	2010      	movs	r0, #16
 8007848:	f7ff ff90 	bl	800776c <malloc>
 800784c:	4602      	mov	r2, r0
 800784e:	6268      	str	r0, [r5, #36]	; 0x24
 8007850:	b920      	cbnz	r0, 800785c <_Bfree+0x20>
 8007852:	218a      	movs	r1, #138	; 0x8a
 8007854:	4b08      	ldr	r3, [pc, #32]	; (8007878 <_Bfree+0x3c>)
 8007856:	4809      	ldr	r0, [pc, #36]	; (800787c <_Bfree+0x40>)
 8007858:	f001 face 	bl	8008df8 <__assert_func>
 800785c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007860:	6006      	str	r6, [r0, #0]
 8007862:	60c6      	str	r6, [r0, #12]
 8007864:	b13c      	cbz	r4, 8007876 <_Bfree+0x3a>
 8007866:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007868:	6862      	ldr	r2, [r4, #4]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007870:	6021      	str	r1, [r4, #0]
 8007872:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	08009ac6 	.word	0x08009ac6
 800787c:	08009bcc 	.word	0x08009bcc

08007880 <__multadd>:
 8007880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007884:	4698      	mov	r8, r3
 8007886:	460c      	mov	r4, r1
 8007888:	2300      	movs	r3, #0
 800788a:	690e      	ldr	r6, [r1, #16]
 800788c:	4607      	mov	r7, r0
 800788e:	f101 0014 	add.w	r0, r1, #20
 8007892:	6805      	ldr	r5, [r0, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	b2a9      	uxth	r1, r5
 8007898:	fb02 8101 	mla	r1, r2, r1, r8
 800789c:	0c2d      	lsrs	r5, r5, #16
 800789e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80078a2:	fb02 c505 	mla	r5, r2, r5, ip
 80078a6:	b289      	uxth	r1, r1
 80078a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80078ac:	429e      	cmp	r6, r3
 80078ae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80078b2:	f840 1b04 	str.w	r1, [r0], #4
 80078b6:	dcec      	bgt.n	8007892 <__multadd+0x12>
 80078b8:	f1b8 0f00 	cmp.w	r8, #0
 80078bc:	d022      	beq.n	8007904 <__multadd+0x84>
 80078be:	68a3      	ldr	r3, [r4, #8]
 80078c0:	42b3      	cmp	r3, r6
 80078c2:	dc19      	bgt.n	80078f8 <__multadd+0x78>
 80078c4:	6861      	ldr	r1, [r4, #4]
 80078c6:	4638      	mov	r0, r7
 80078c8:	3101      	adds	r1, #1
 80078ca:	f7ff ff77 	bl	80077bc <_Balloc>
 80078ce:	4605      	mov	r5, r0
 80078d0:	b928      	cbnz	r0, 80078de <__multadd+0x5e>
 80078d2:	4602      	mov	r2, r0
 80078d4:	21b5      	movs	r1, #181	; 0xb5
 80078d6:	4b0d      	ldr	r3, [pc, #52]	; (800790c <__multadd+0x8c>)
 80078d8:	480d      	ldr	r0, [pc, #52]	; (8007910 <__multadd+0x90>)
 80078da:	f001 fa8d 	bl	8008df8 <__assert_func>
 80078de:	6922      	ldr	r2, [r4, #16]
 80078e0:	f104 010c 	add.w	r1, r4, #12
 80078e4:	3202      	adds	r2, #2
 80078e6:	0092      	lsls	r2, r2, #2
 80078e8:	300c      	adds	r0, #12
 80078ea:	f7fc ff63 	bl	80047b4 <memcpy>
 80078ee:	4621      	mov	r1, r4
 80078f0:	4638      	mov	r0, r7
 80078f2:	f7ff ffa3 	bl	800783c <_Bfree>
 80078f6:	462c      	mov	r4, r5
 80078f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80078fc:	3601      	adds	r6, #1
 80078fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8007902:	6126      	str	r6, [r4, #16]
 8007904:	4620      	mov	r0, r4
 8007906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800790a:	bf00      	nop
 800790c:	08009b3c 	.word	0x08009b3c
 8007910:	08009bcc 	.word	0x08009bcc

08007914 <__s2b>:
 8007914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007918:	4615      	mov	r5, r2
 800791a:	2209      	movs	r2, #9
 800791c:	461f      	mov	r7, r3
 800791e:	3308      	adds	r3, #8
 8007920:	460c      	mov	r4, r1
 8007922:	fb93 f3f2 	sdiv	r3, r3, r2
 8007926:	4606      	mov	r6, r0
 8007928:	2201      	movs	r2, #1
 800792a:	2100      	movs	r1, #0
 800792c:	429a      	cmp	r2, r3
 800792e:	db09      	blt.n	8007944 <__s2b+0x30>
 8007930:	4630      	mov	r0, r6
 8007932:	f7ff ff43 	bl	80077bc <_Balloc>
 8007936:	b940      	cbnz	r0, 800794a <__s2b+0x36>
 8007938:	4602      	mov	r2, r0
 800793a:	21ce      	movs	r1, #206	; 0xce
 800793c:	4b18      	ldr	r3, [pc, #96]	; (80079a0 <__s2b+0x8c>)
 800793e:	4819      	ldr	r0, [pc, #100]	; (80079a4 <__s2b+0x90>)
 8007940:	f001 fa5a 	bl	8008df8 <__assert_func>
 8007944:	0052      	lsls	r2, r2, #1
 8007946:	3101      	adds	r1, #1
 8007948:	e7f0      	b.n	800792c <__s2b+0x18>
 800794a:	9b08      	ldr	r3, [sp, #32]
 800794c:	2d09      	cmp	r5, #9
 800794e:	6143      	str	r3, [r0, #20]
 8007950:	f04f 0301 	mov.w	r3, #1
 8007954:	6103      	str	r3, [r0, #16]
 8007956:	dd16      	ble.n	8007986 <__s2b+0x72>
 8007958:	f104 0909 	add.w	r9, r4, #9
 800795c:	46c8      	mov	r8, r9
 800795e:	442c      	add	r4, r5
 8007960:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007964:	4601      	mov	r1, r0
 8007966:	220a      	movs	r2, #10
 8007968:	4630      	mov	r0, r6
 800796a:	3b30      	subs	r3, #48	; 0x30
 800796c:	f7ff ff88 	bl	8007880 <__multadd>
 8007970:	45a0      	cmp	r8, r4
 8007972:	d1f5      	bne.n	8007960 <__s2b+0x4c>
 8007974:	f1a5 0408 	sub.w	r4, r5, #8
 8007978:	444c      	add	r4, r9
 800797a:	1b2d      	subs	r5, r5, r4
 800797c:	1963      	adds	r3, r4, r5
 800797e:	42bb      	cmp	r3, r7
 8007980:	db04      	blt.n	800798c <__s2b+0x78>
 8007982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007986:	2509      	movs	r5, #9
 8007988:	340a      	adds	r4, #10
 800798a:	e7f6      	b.n	800797a <__s2b+0x66>
 800798c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007990:	4601      	mov	r1, r0
 8007992:	220a      	movs	r2, #10
 8007994:	4630      	mov	r0, r6
 8007996:	3b30      	subs	r3, #48	; 0x30
 8007998:	f7ff ff72 	bl	8007880 <__multadd>
 800799c:	e7ee      	b.n	800797c <__s2b+0x68>
 800799e:	bf00      	nop
 80079a0:	08009b3c 	.word	0x08009b3c
 80079a4:	08009bcc 	.word	0x08009bcc

080079a8 <__hi0bits>:
 80079a8:	0c02      	lsrs	r2, r0, #16
 80079aa:	0412      	lsls	r2, r2, #16
 80079ac:	4603      	mov	r3, r0
 80079ae:	b9ca      	cbnz	r2, 80079e4 <__hi0bits+0x3c>
 80079b0:	0403      	lsls	r3, r0, #16
 80079b2:	2010      	movs	r0, #16
 80079b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80079b8:	bf04      	itt	eq
 80079ba:	021b      	lsleq	r3, r3, #8
 80079bc:	3008      	addeq	r0, #8
 80079be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80079c2:	bf04      	itt	eq
 80079c4:	011b      	lsleq	r3, r3, #4
 80079c6:	3004      	addeq	r0, #4
 80079c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80079cc:	bf04      	itt	eq
 80079ce:	009b      	lsleq	r3, r3, #2
 80079d0:	3002      	addeq	r0, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	db05      	blt.n	80079e2 <__hi0bits+0x3a>
 80079d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80079da:	f100 0001 	add.w	r0, r0, #1
 80079de:	bf08      	it	eq
 80079e0:	2020      	moveq	r0, #32
 80079e2:	4770      	bx	lr
 80079e4:	2000      	movs	r0, #0
 80079e6:	e7e5      	b.n	80079b4 <__hi0bits+0xc>

080079e8 <__lo0bits>:
 80079e8:	6803      	ldr	r3, [r0, #0]
 80079ea:	4602      	mov	r2, r0
 80079ec:	f013 0007 	ands.w	r0, r3, #7
 80079f0:	d00b      	beq.n	8007a0a <__lo0bits+0x22>
 80079f2:	07d9      	lsls	r1, r3, #31
 80079f4:	d422      	bmi.n	8007a3c <__lo0bits+0x54>
 80079f6:	0798      	lsls	r0, r3, #30
 80079f8:	bf49      	itett	mi
 80079fa:	085b      	lsrmi	r3, r3, #1
 80079fc:	089b      	lsrpl	r3, r3, #2
 80079fe:	2001      	movmi	r0, #1
 8007a00:	6013      	strmi	r3, [r2, #0]
 8007a02:	bf5c      	itt	pl
 8007a04:	2002      	movpl	r0, #2
 8007a06:	6013      	strpl	r3, [r2, #0]
 8007a08:	4770      	bx	lr
 8007a0a:	b299      	uxth	r1, r3
 8007a0c:	b909      	cbnz	r1, 8007a12 <__lo0bits+0x2a>
 8007a0e:	2010      	movs	r0, #16
 8007a10:	0c1b      	lsrs	r3, r3, #16
 8007a12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007a16:	bf04      	itt	eq
 8007a18:	0a1b      	lsreq	r3, r3, #8
 8007a1a:	3008      	addeq	r0, #8
 8007a1c:	0719      	lsls	r1, r3, #28
 8007a1e:	bf04      	itt	eq
 8007a20:	091b      	lsreq	r3, r3, #4
 8007a22:	3004      	addeq	r0, #4
 8007a24:	0799      	lsls	r1, r3, #30
 8007a26:	bf04      	itt	eq
 8007a28:	089b      	lsreq	r3, r3, #2
 8007a2a:	3002      	addeq	r0, #2
 8007a2c:	07d9      	lsls	r1, r3, #31
 8007a2e:	d403      	bmi.n	8007a38 <__lo0bits+0x50>
 8007a30:	085b      	lsrs	r3, r3, #1
 8007a32:	f100 0001 	add.w	r0, r0, #1
 8007a36:	d003      	beq.n	8007a40 <__lo0bits+0x58>
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	4770      	bx	lr
 8007a3c:	2000      	movs	r0, #0
 8007a3e:	4770      	bx	lr
 8007a40:	2020      	movs	r0, #32
 8007a42:	4770      	bx	lr

08007a44 <__i2b>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	460c      	mov	r4, r1
 8007a48:	2101      	movs	r1, #1
 8007a4a:	f7ff feb7 	bl	80077bc <_Balloc>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	b928      	cbnz	r0, 8007a5e <__i2b+0x1a>
 8007a52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007a56:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <__i2b+0x24>)
 8007a58:	4804      	ldr	r0, [pc, #16]	; (8007a6c <__i2b+0x28>)
 8007a5a:	f001 f9cd 	bl	8008df8 <__assert_func>
 8007a5e:	2301      	movs	r3, #1
 8007a60:	6144      	str	r4, [r0, #20]
 8007a62:	6103      	str	r3, [r0, #16]
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	bf00      	nop
 8007a68:	08009b3c 	.word	0x08009b3c
 8007a6c:	08009bcc 	.word	0x08009bcc

08007a70 <__multiply>:
 8007a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a74:	4614      	mov	r4, r2
 8007a76:	690a      	ldr	r2, [r1, #16]
 8007a78:	6923      	ldr	r3, [r4, #16]
 8007a7a:	460d      	mov	r5, r1
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	bfbe      	ittt	lt
 8007a80:	460b      	movlt	r3, r1
 8007a82:	4625      	movlt	r5, r4
 8007a84:	461c      	movlt	r4, r3
 8007a86:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8007a8a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007a8e:	68ab      	ldr	r3, [r5, #8]
 8007a90:	6869      	ldr	r1, [r5, #4]
 8007a92:	eb0a 0709 	add.w	r7, sl, r9
 8007a96:	42bb      	cmp	r3, r7
 8007a98:	b085      	sub	sp, #20
 8007a9a:	bfb8      	it	lt
 8007a9c:	3101      	addlt	r1, #1
 8007a9e:	f7ff fe8d 	bl	80077bc <_Balloc>
 8007aa2:	b930      	cbnz	r0, 8007ab2 <__multiply+0x42>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	f240 115d 	movw	r1, #349	; 0x15d
 8007aaa:	4b41      	ldr	r3, [pc, #260]	; (8007bb0 <__multiply+0x140>)
 8007aac:	4841      	ldr	r0, [pc, #260]	; (8007bb4 <__multiply+0x144>)
 8007aae:	f001 f9a3 	bl	8008df8 <__assert_func>
 8007ab2:	f100 0614 	add.w	r6, r0, #20
 8007ab6:	4633      	mov	r3, r6
 8007ab8:	2200      	movs	r2, #0
 8007aba:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007abe:	4543      	cmp	r3, r8
 8007ac0:	d31e      	bcc.n	8007b00 <__multiply+0x90>
 8007ac2:	f105 0c14 	add.w	ip, r5, #20
 8007ac6:	f104 0314 	add.w	r3, r4, #20
 8007aca:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007ace:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007ad2:	9202      	str	r2, [sp, #8]
 8007ad4:	ebac 0205 	sub.w	r2, ip, r5
 8007ad8:	3a15      	subs	r2, #21
 8007ada:	f022 0203 	bic.w	r2, r2, #3
 8007ade:	3204      	adds	r2, #4
 8007ae0:	f105 0115 	add.w	r1, r5, #21
 8007ae4:	458c      	cmp	ip, r1
 8007ae6:	bf38      	it	cc
 8007ae8:	2204      	movcc	r2, #4
 8007aea:	9201      	str	r2, [sp, #4]
 8007aec:	9a02      	ldr	r2, [sp, #8]
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d808      	bhi.n	8007b06 <__multiply+0x96>
 8007af4:	2f00      	cmp	r7, #0
 8007af6:	dc55      	bgt.n	8007ba4 <__multiply+0x134>
 8007af8:	6107      	str	r7, [r0, #16]
 8007afa:	b005      	add	sp, #20
 8007afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b00:	f843 2b04 	str.w	r2, [r3], #4
 8007b04:	e7db      	b.n	8007abe <__multiply+0x4e>
 8007b06:	f8b3 a000 	ldrh.w	sl, [r3]
 8007b0a:	f1ba 0f00 	cmp.w	sl, #0
 8007b0e:	d020      	beq.n	8007b52 <__multiply+0xe2>
 8007b10:	46b1      	mov	r9, r6
 8007b12:	2200      	movs	r2, #0
 8007b14:	f105 0e14 	add.w	lr, r5, #20
 8007b18:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007b1c:	f8d9 b000 	ldr.w	fp, [r9]
 8007b20:	b2a1      	uxth	r1, r4
 8007b22:	fa1f fb8b 	uxth.w	fp, fp
 8007b26:	fb0a b101 	mla	r1, sl, r1, fp
 8007b2a:	4411      	add	r1, r2
 8007b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8007b30:	0c24      	lsrs	r4, r4, #16
 8007b32:	0c12      	lsrs	r2, r2, #16
 8007b34:	fb0a 2404 	mla	r4, sl, r4, r2
 8007b38:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8007b3c:	b289      	uxth	r1, r1
 8007b3e:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007b42:	45f4      	cmp	ip, lr
 8007b44:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8007b48:	f849 1b04 	str.w	r1, [r9], #4
 8007b4c:	d8e4      	bhi.n	8007b18 <__multiply+0xa8>
 8007b4e:	9901      	ldr	r1, [sp, #4]
 8007b50:	5072      	str	r2, [r6, r1]
 8007b52:	9a03      	ldr	r2, [sp, #12]
 8007b54:	3304      	adds	r3, #4
 8007b56:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007b5a:	f1b9 0f00 	cmp.w	r9, #0
 8007b5e:	d01f      	beq.n	8007ba0 <__multiply+0x130>
 8007b60:	46b6      	mov	lr, r6
 8007b62:	f04f 0a00 	mov.w	sl, #0
 8007b66:	6834      	ldr	r4, [r6, #0]
 8007b68:	f105 0114 	add.w	r1, r5, #20
 8007b6c:	880a      	ldrh	r2, [r1, #0]
 8007b6e:	f8be b002 	ldrh.w	fp, [lr, #2]
 8007b72:	b2a4      	uxth	r4, r4
 8007b74:	fb09 b202 	mla	r2, r9, r2, fp
 8007b78:	4492      	add	sl, r2
 8007b7a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8007b7e:	f84e 4b04 	str.w	r4, [lr], #4
 8007b82:	f851 4b04 	ldr.w	r4, [r1], #4
 8007b86:	f8be 2000 	ldrh.w	r2, [lr]
 8007b8a:	0c24      	lsrs	r4, r4, #16
 8007b8c:	fb09 2404 	mla	r4, r9, r4, r2
 8007b90:	458c      	cmp	ip, r1
 8007b92:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8007b96:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007b9a:	d8e7      	bhi.n	8007b6c <__multiply+0xfc>
 8007b9c:	9a01      	ldr	r2, [sp, #4]
 8007b9e:	50b4      	str	r4, [r6, r2]
 8007ba0:	3604      	adds	r6, #4
 8007ba2:	e7a3      	b.n	8007aec <__multiply+0x7c>
 8007ba4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1a5      	bne.n	8007af8 <__multiply+0x88>
 8007bac:	3f01      	subs	r7, #1
 8007bae:	e7a1      	b.n	8007af4 <__multiply+0x84>
 8007bb0:	08009b3c 	.word	0x08009b3c
 8007bb4:	08009bcc 	.word	0x08009bcc

08007bb8 <__pow5mult>:
 8007bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bbc:	4615      	mov	r5, r2
 8007bbe:	f012 0203 	ands.w	r2, r2, #3
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	d007      	beq.n	8007bd8 <__pow5mult+0x20>
 8007bc8:	4c25      	ldr	r4, [pc, #148]	; (8007c60 <__pow5mult+0xa8>)
 8007bca:	3a01      	subs	r2, #1
 8007bcc:	2300      	movs	r3, #0
 8007bce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007bd2:	f7ff fe55 	bl	8007880 <__multadd>
 8007bd6:	4607      	mov	r7, r0
 8007bd8:	10ad      	asrs	r5, r5, #2
 8007bda:	d03d      	beq.n	8007c58 <__pow5mult+0xa0>
 8007bdc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007bde:	b97c      	cbnz	r4, 8007c00 <__pow5mult+0x48>
 8007be0:	2010      	movs	r0, #16
 8007be2:	f7ff fdc3 	bl	800776c <malloc>
 8007be6:	4602      	mov	r2, r0
 8007be8:	6270      	str	r0, [r6, #36]	; 0x24
 8007bea:	b928      	cbnz	r0, 8007bf8 <__pow5mult+0x40>
 8007bec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007bf0:	4b1c      	ldr	r3, [pc, #112]	; (8007c64 <__pow5mult+0xac>)
 8007bf2:	481d      	ldr	r0, [pc, #116]	; (8007c68 <__pow5mult+0xb0>)
 8007bf4:	f001 f900 	bl	8008df8 <__assert_func>
 8007bf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bfc:	6004      	str	r4, [r0, #0]
 8007bfe:	60c4      	str	r4, [r0, #12]
 8007c00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007c04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c08:	b94c      	cbnz	r4, 8007c1e <__pow5mult+0x66>
 8007c0a:	f240 2171 	movw	r1, #625	; 0x271
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f7ff ff18 	bl	8007a44 <__i2b>
 8007c14:	2300      	movs	r3, #0
 8007c16:	4604      	mov	r4, r0
 8007c18:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c1c:	6003      	str	r3, [r0, #0]
 8007c1e:	f04f 0900 	mov.w	r9, #0
 8007c22:	07eb      	lsls	r3, r5, #31
 8007c24:	d50a      	bpl.n	8007c3c <__pow5mult+0x84>
 8007c26:	4639      	mov	r1, r7
 8007c28:	4622      	mov	r2, r4
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	f7ff ff20 	bl	8007a70 <__multiply>
 8007c30:	4680      	mov	r8, r0
 8007c32:	4639      	mov	r1, r7
 8007c34:	4630      	mov	r0, r6
 8007c36:	f7ff fe01 	bl	800783c <_Bfree>
 8007c3a:	4647      	mov	r7, r8
 8007c3c:	106d      	asrs	r5, r5, #1
 8007c3e:	d00b      	beq.n	8007c58 <__pow5mult+0xa0>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	b938      	cbnz	r0, 8007c54 <__pow5mult+0x9c>
 8007c44:	4622      	mov	r2, r4
 8007c46:	4621      	mov	r1, r4
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f7ff ff11 	bl	8007a70 <__multiply>
 8007c4e:	6020      	str	r0, [r4, #0]
 8007c50:	f8c0 9000 	str.w	r9, [r0]
 8007c54:	4604      	mov	r4, r0
 8007c56:	e7e4      	b.n	8007c22 <__pow5mult+0x6a>
 8007c58:	4638      	mov	r0, r7
 8007c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c5e:	bf00      	nop
 8007c60:	08009d20 	.word	0x08009d20
 8007c64:	08009ac6 	.word	0x08009ac6
 8007c68:	08009bcc 	.word	0x08009bcc

08007c6c <__lshift>:
 8007c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c70:	460c      	mov	r4, r1
 8007c72:	4607      	mov	r7, r0
 8007c74:	4691      	mov	r9, r2
 8007c76:	6923      	ldr	r3, [r4, #16]
 8007c78:	6849      	ldr	r1, [r1, #4]
 8007c7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c7e:	68a3      	ldr	r3, [r4, #8]
 8007c80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c84:	f108 0601 	add.w	r6, r8, #1
 8007c88:	42b3      	cmp	r3, r6
 8007c8a:	db0b      	blt.n	8007ca4 <__lshift+0x38>
 8007c8c:	4638      	mov	r0, r7
 8007c8e:	f7ff fd95 	bl	80077bc <_Balloc>
 8007c92:	4605      	mov	r5, r0
 8007c94:	b948      	cbnz	r0, 8007caa <__lshift+0x3e>
 8007c96:	4602      	mov	r2, r0
 8007c98:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007c9c:	4b27      	ldr	r3, [pc, #156]	; (8007d3c <__lshift+0xd0>)
 8007c9e:	4828      	ldr	r0, [pc, #160]	; (8007d40 <__lshift+0xd4>)
 8007ca0:	f001 f8aa 	bl	8008df8 <__assert_func>
 8007ca4:	3101      	adds	r1, #1
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	e7ee      	b.n	8007c88 <__lshift+0x1c>
 8007caa:	2300      	movs	r3, #0
 8007cac:	f100 0114 	add.w	r1, r0, #20
 8007cb0:	f100 0210 	add.w	r2, r0, #16
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	4553      	cmp	r3, sl
 8007cb8:	db33      	blt.n	8007d22 <__lshift+0xb6>
 8007cba:	6920      	ldr	r0, [r4, #16]
 8007cbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cc0:	f104 0314 	add.w	r3, r4, #20
 8007cc4:	f019 091f 	ands.w	r9, r9, #31
 8007cc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ccc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007cd0:	d02b      	beq.n	8007d2a <__lshift+0xbe>
 8007cd2:	468a      	mov	sl, r1
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f1c9 0e20 	rsb	lr, r9, #32
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	fa00 f009 	lsl.w	r0, r0, r9
 8007ce0:	4302      	orrs	r2, r0
 8007ce2:	f84a 2b04 	str.w	r2, [sl], #4
 8007ce6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cea:	459c      	cmp	ip, r3
 8007cec:	fa22 f20e 	lsr.w	r2, r2, lr
 8007cf0:	d8f3      	bhi.n	8007cda <__lshift+0x6e>
 8007cf2:	ebac 0304 	sub.w	r3, ip, r4
 8007cf6:	3b15      	subs	r3, #21
 8007cf8:	f023 0303 	bic.w	r3, r3, #3
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	f104 0015 	add.w	r0, r4, #21
 8007d02:	4584      	cmp	ip, r0
 8007d04:	bf38      	it	cc
 8007d06:	2304      	movcc	r3, #4
 8007d08:	50ca      	str	r2, [r1, r3]
 8007d0a:	b10a      	cbz	r2, 8007d10 <__lshift+0xa4>
 8007d0c:	f108 0602 	add.w	r6, r8, #2
 8007d10:	3e01      	subs	r6, #1
 8007d12:	4638      	mov	r0, r7
 8007d14:	4621      	mov	r1, r4
 8007d16:	612e      	str	r6, [r5, #16]
 8007d18:	f7ff fd90 	bl	800783c <_Bfree>
 8007d1c:	4628      	mov	r0, r5
 8007d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d22:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d26:	3301      	adds	r3, #1
 8007d28:	e7c5      	b.n	8007cb6 <__lshift+0x4a>
 8007d2a:	3904      	subs	r1, #4
 8007d2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d30:	459c      	cmp	ip, r3
 8007d32:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d36:	d8f9      	bhi.n	8007d2c <__lshift+0xc0>
 8007d38:	e7ea      	b.n	8007d10 <__lshift+0xa4>
 8007d3a:	bf00      	nop
 8007d3c:	08009b3c 	.word	0x08009b3c
 8007d40:	08009bcc 	.word	0x08009bcc

08007d44 <__mcmp>:
 8007d44:	4603      	mov	r3, r0
 8007d46:	690a      	ldr	r2, [r1, #16]
 8007d48:	6900      	ldr	r0, [r0, #16]
 8007d4a:	b530      	push	{r4, r5, lr}
 8007d4c:	1a80      	subs	r0, r0, r2
 8007d4e:	d10d      	bne.n	8007d6c <__mcmp+0x28>
 8007d50:	3314      	adds	r3, #20
 8007d52:	3114      	adds	r1, #20
 8007d54:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d58:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d5c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d60:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d64:	4295      	cmp	r5, r2
 8007d66:	d002      	beq.n	8007d6e <__mcmp+0x2a>
 8007d68:	d304      	bcc.n	8007d74 <__mcmp+0x30>
 8007d6a:	2001      	movs	r0, #1
 8007d6c:	bd30      	pop	{r4, r5, pc}
 8007d6e:	42a3      	cmp	r3, r4
 8007d70:	d3f4      	bcc.n	8007d5c <__mcmp+0x18>
 8007d72:	e7fb      	b.n	8007d6c <__mcmp+0x28>
 8007d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d78:	e7f8      	b.n	8007d6c <__mcmp+0x28>
	...

08007d7c <__mdiff>:
 8007d7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d80:	460c      	mov	r4, r1
 8007d82:	4606      	mov	r6, r0
 8007d84:	4611      	mov	r1, r2
 8007d86:	4620      	mov	r0, r4
 8007d88:	4692      	mov	sl, r2
 8007d8a:	f7ff ffdb 	bl	8007d44 <__mcmp>
 8007d8e:	1e05      	subs	r5, r0, #0
 8007d90:	d111      	bne.n	8007db6 <__mdiff+0x3a>
 8007d92:	4629      	mov	r1, r5
 8007d94:	4630      	mov	r0, r6
 8007d96:	f7ff fd11 	bl	80077bc <_Balloc>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	b928      	cbnz	r0, 8007daa <__mdiff+0x2e>
 8007d9e:	f240 2132 	movw	r1, #562	; 0x232
 8007da2:	4b3c      	ldr	r3, [pc, #240]	; (8007e94 <__mdiff+0x118>)
 8007da4:	483c      	ldr	r0, [pc, #240]	; (8007e98 <__mdiff+0x11c>)
 8007da6:	f001 f827 	bl	8008df8 <__assert_func>
 8007daa:	2301      	movs	r3, #1
 8007dac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007db0:	4610      	mov	r0, r2
 8007db2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db6:	bfa4      	itt	ge
 8007db8:	4653      	movge	r3, sl
 8007dba:	46a2      	movge	sl, r4
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007dc2:	bfa6      	itte	ge
 8007dc4:	461c      	movge	r4, r3
 8007dc6:	2500      	movge	r5, #0
 8007dc8:	2501      	movlt	r5, #1
 8007dca:	f7ff fcf7 	bl	80077bc <_Balloc>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	b918      	cbnz	r0, 8007dda <__mdiff+0x5e>
 8007dd2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007dd6:	4b2f      	ldr	r3, [pc, #188]	; (8007e94 <__mdiff+0x118>)
 8007dd8:	e7e4      	b.n	8007da4 <__mdiff+0x28>
 8007dda:	f100 0814 	add.w	r8, r0, #20
 8007dde:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007de2:	60c5      	str	r5, [r0, #12]
 8007de4:	f04f 0c00 	mov.w	ip, #0
 8007de8:	f10a 0514 	add.w	r5, sl, #20
 8007dec:	f10a 0010 	add.w	r0, sl, #16
 8007df0:	46c2      	mov	sl, r8
 8007df2:	6926      	ldr	r6, [r4, #16]
 8007df4:	f104 0914 	add.w	r9, r4, #20
 8007df8:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007dfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007e00:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007e04:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e08:	fa1f f18b 	uxth.w	r1, fp
 8007e0c:	4461      	add	r1, ip
 8007e0e:	fa1f fc83 	uxth.w	ip, r3
 8007e12:	0c1b      	lsrs	r3, r3, #16
 8007e14:	eba1 010c 	sub.w	r1, r1, ip
 8007e18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007e1c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007e20:	b289      	uxth	r1, r1
 8007e22:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007e26:	454e      	cmp	r6, r9
 8007e28:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007e2c:	f84a 3b04 	str.w	r3, [sl], #4
 8007e30:	d8e6      	bhi.n	8007e00 <__mdiff+0x84>
 8007e32:	1b33      	subs	r3, r6, r4
 8007e34:	3b15      	subs	r3, #21
 8007e36:	f023 0303 	bic.w	r3, r3, #3
 8007e3a:	3415      	adds	r4, #21
 8007e3c:	3304      	adds	r3, #4
 8007e3e:	42a6      	cmp	r6, r4
 8007e40:	bf38      	it	cc
 8007e42:	2304      	movcc	r3, #4
 8007e44:	441d      	add	r5, r3
 8007e46:	4443      	add	r3, r8
 8007e48:	461e      	mov	r6, r3
 8007e4a:	462c      	mov	r4, r5
 8007e4c:	4574      	cmp	r4, lr
 8007e4e:	d30e      	bcc.n	8007e6e <__mdiff+0xf2>
 8007e50:	f10e 0103 	add.w	r1, lr, #3
 8007e54:	1b49      	subs	r1, r1, r5
 8007e56:	f021 0103 	bic.w	r1, r1, #3
 8007e5a:	3d03      	subs	r5, #3
 8007e5c:	45ae      	cmp	lr, r5
 8007e5e:	bf38      	it	cc
 8007e60:	2100      	movcc	r1, #0
 8007e62:	4419      	add	r1, r3
 8007e64:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007e68:	b18b      	cbz	r3, 8007e8e <__mdiff+0x112>
 8007e6a:	6117      	str	r7, [r2, #16]
 8007e6c:	e7a0      	b.n	8007db0 <__mdiff+0x34>
 8007e6e:	f854 8b04 	ldr.w	r8, [r4], #4
 8007e72:	fa1f f188 	uxth.w	r1, r8
 8007e76:	4461      	add	r1, ip
 8007e78:	1408      	asrs	r0, r1, #16
 8007e7a:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8007e7e:	b289      	uxth	r1, r1
 8007e80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e88:	f846 1b04 	str.w	r1, [r6], #4
 8007e8c:	e7de      	b.n	8007e4c <__mdiff+0xd0>
 8007e8e:	3f01      	subs	r7, #1
 8007e90:	e7e8      	b.n	8007e64 <__mdiff+0xe8>
 8007e92:	bf00      	nop
 8007e94:	08009b3c 	.word	0x08009b3c
 8007e98:	08009bcc 	.word	0x08009bcc

08007e9c <__ulp>:
 8007e9c:	4b11      	ldr	r3, [pc, #68]	; (8007ee4 <__ulp+0x48>)
 8007e9e:	400b      	ands	r3, r1
 8007ea0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	dd02      	ble.n	8007eae <__ulp+0x12>
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	4619      	mov	r1, r3
 8007eac:	4770      	bx	lr
 8007eae:	425b      	negs	r3, r3
 8007eb0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007eb4:	f04f 0000 	mov.w	r0, #0
 8007eb8:	f04f 0100 	mov.w	r1, #0
 8007ebc:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007ec0:	da04      	bge.n	8007ecc <__ulp+0x30>
 8007ec2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ec6:	fa43 f102 	asr.w	r1, r3, r2
 8007eca:	4770      	bx	lr
 8007ecc:	f1a2 0314 	sub.w	r3, r2, #20
 8007ed0:	2b1e      	cmp	r3, #30
 8007ed2:	bfd6      	itet	le
 8007ed4:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8007ed8:	2301      	movgt	r3, #1
 8007eda:	fa22 f303 	lsrle.w	r3, r2, r3
 8007ede:	4618      	mov	r0, r3
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	7ff00000 	.word	0x7ff00000

08007ee8 <__b2d>:
 8007ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eec:	6907      	ldr	r7, [r0, #16]
 8007eee:	f100 0914 	add.w	r9, r0, #20
 8007ef2:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8007ef6:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8007efa:	f1a7 0804 	sub.w	r8, r7, #4
 8007efe:	4630      	mov	r0, r6
 8007f00:	f7ff fd52 	bl	80079a8 <__hi0bits>
 8007f04:	f1c0 0320 	rsb	r3, r0, #32
 8007f08:	280a      	cmp	r0, #10
 8007f0a:	600b      	str	r3, [r1, #0]
 8007f0c:	491f      	ldr	r1, [pc, #124]	; (8007f8c <__b2d+0xa4>)
 8007f0e:	dc17      	bgt.n	8007f40 <__b2d+0x58>
 8007f10:	45c1      	cmp	r9, r8
 8007f12:	bf28      	it	cs
 8007f14:	2200      	movcs	r2, #0
 8007f16:	f1c0 0c0b 	rsb	ip, r0, #11
 8007f1a:	fa26 f30c 	lsr.w	r3, r6, ip
 8007f1e:	bf38      	it	cc
 8007f20:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007f24:	ea43 0501 	orr.w	r5, r3, r1
 8007f28:	f100 0315 	add.w	r3, r0, #21
 8007f2c:	fa06 f303 	lsl.w	r3, r6, r3
 8007f30:	fa22 f20c 	lsr.w	r2, r2, ip
 8007f34:	ea43 0402 	orr.w	r4, r3, r2
 8007f38:	4620      	mov	r0, r4
 8007f3a:	4629      	mov	r1, r5
 8007f3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f40:	45c1      	cmp	r9, r8
 8007f42:	bf2e      	itee	cs
 8007f44:	2200      	movcs	r2, #0
 8007f46:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8007f4a:	f1a7 0808 	subcc.w	r8, r7, #8
 8007f4e:	f1b0 030b 	subs.w	r3, r0, #11
 8007f52:	d016      	beq.n	8007f82 <__b2d+0x9a>
 8007f54:	f1c3 0720 	rsb	r7, r3, #32
 8007f58:	fa22 f107 	lsr.w	r1, r2, r7
 8007f5c:	45c8      	cmp	r8, r9
 8007f5e:	fa06 f603 	lsl.w	r6, r6, r3
 8007f62:	ea46 0601 	orr.w	r6, r6, r1
 8007f66:	bf94      	ite	ls
 8007f68:	2100      	movls	r1, #0
 8007f6a:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8007f6e:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8007f72:	fa02 f003 	lsl.w	r0, r2, r3
 8007f76:	40f9      	lsrs	r1, r7
 8007f78:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007f7c:	ea40 0401 	orr.w	r4, r0, r1
 8007f80:	e7da      	b.n	8007f38 <__b2d+0x50>
 8007f82:	4614      	mov	r4, r2
 8007f84:	ea46 0501 	orr.w	r5, r6, r1
 8007f88:	e7d6      	b.n	8007f38 <__b2d+0x50>
 8007f8a:	bf00      	nop
 8007f8c:	3ff00000 	.word	0x3ff00000

08007f90 <__d2b>:
 8007f90:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007f94:	2101      	movs	r1, #1
 8007f96:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8007f9a:	4690      	mov	r8, r2
 8007f9c:	461d      	mov	r5, r3
 8007f9e:	f7ff fc0d 	bl	80077bc <_Balloc>
 8007fa2:	4604      	mov	r4, r0
 8007fa4:	b930      	cbnz	r0, 8007fb4 <__d2b+0x24>
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	f240 310a 	movw	r1, #778	; 0x30a
 8007fac:	4b24      	ldr	r3, [pc, #144]	; (8008040 <__d2b+0xb0>)
 8007fae:	4825      	ldr	r0, [pc, #148]	; (8008044 <__d2b+0xb4>)
 8007fb0:	f000 ff22 	bl	8008df8 <__assert_func>
 8007fb4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007fb8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8007fbc:	bb2d      	cbnz	r5, 800800a <__d2b+0x7a>
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	f1b8 0300 	subs.w	r3, r8, #0
 8007fc4:	d026      	beq.n	8008014 <__d2b+0x84>
 8007fc6:	4668      	mov	r0, sp
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	f7ff fd0d 	bl	80079e8 <__lo0bits>
 8007fce:	9900      	ldr	r1, [sp, #0]
 8007fd0:	b1f0      	cbz	r0, 8008010 <__d2b+0x80>
 8007fd2:	9a01      	ldr	r2, [sp, #4]
 8007fd4:	f1c0 0320 	rsb	r3, r0, #32
 8007fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	40c2      	lsrs	r2, r0
 8007fe0:	6163      	str	r3, [r4, #20]
 8007fe2:	9201      	str	r2, [sp, #4]
 8007fe4:	9b01      	ldr	r3, [sp, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bf14      	ite	ne
 8007fea:	2102      	movne	r1, #2
 8007fec:	2101      	moveq	r1, #1
 8007fee:	61a3      	str	r3, [r4, #24]
 8007ff0:	6121      	str	r1, [r4, #16]
 8007ff2:	b1c5      	cbz	r5, 8008026 <__d2b+0x96>
 8007ff4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007ff8:	4405      	add	r5, r0
 8007ffa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007ffe:	603d      	str	r5, [r7, #0]
 8008000:	6030      	str	r0, [r6, #0]
 8008002:	4620      	mov	r0, r4
 8008004:	b002      	add	sp, #8
 8008006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800800a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800800e:	e7d6      	b.n	8007fbe <__d2b+0x2e>
 8008010:	6161      	str	r1, [r4, #20]
 8008012:	e7e7      	b.n	8007fe4 <__d2b+0x54>
 8008014:	a801      	add	r0, sp, #4
 8008016:	f7ff fce7 	bl	80079e8 <__lo0bits>
 800801a:	2101      	movs	r1, #1
 800801c:	9b01      	ldr	r3, [sp, #4]
 800801e:	6121      	str	r1, [r4, #16]
 8008020:	6163      	str	r3, [r4, #20]
 8008022:	3020      	adds	r0, #32
 8008024:	e7e5      	b.n	8007ff2 <__d2b+0x62>
 8008026:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800802a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800802e:	6038      	str	r0, [r7, #0]
 8008030:	6918      	ldr	r0, [r3, #16]
 8008032:	f7ff fcb9 	bl	80079a8 <__hi0bits>
 8008036:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800803a:	6031      	str	r1, [r6, #0]
 800803c:	e7e1      	b.n	8008002 <__d2b+0x72>
 800803e:	bf00      	nop
 8008040:	08009b3c 	.word	0x08009b3c
 8008044:	08009bcc 	.word	0x08009bcc

08008048 <__ratio>:
 8008048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	4688      	mov	r8, r1
 800804e:	4669      	mov	r1, sp
 8008050:	4681      	mov	r9, r0
 8008052:	f7ff ff49 	bl	8007ee8 <__b2d>
 8008056:	460f      	mov	r7, r1
 8008058:	4604      	mov	r4, r0
 800805a:	460d      	mov	r5, r1
 800805c:	4640      	mov	r0, r8
 800805e:	a901      	add	r1, sp, #4
 8008060:	f7ff ff42 	bl	8007ee8 <__b2d>
 8008064:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008068:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800806c:	468b      	mov	fp, r1
 800806e:	eba3 0c02 	sub.w	ip, r3, r2
 8008072:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800807c:	2b00      	cmp	r3, #0
 800807e:	bfd5      	itete	le
 8008080:	460a      	movle	r2, r1
 8008082:	462a      	movgt	r2, r5
 8008084:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008088:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800808c:	bfd8      	it	le
 800808e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008092:	465b      	mov	r3, fp
 8008094:	4602      	mov	r2, r0
 8008096:	4639      	mov	r1, r7
 8008098:	4620      	mov	r0, r4
 800809a:	f7f8 fb47 	bl	800072c <__aeabi_ddiv>
 800809e:	b003      	add	sp, #12
 80080a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080080a4 <__copybits>:
 80080a4:	3901      	subs	r1, #1
 80080a6:	b570      	push	{r4, r5, r6, lr}
 80080a8:	1149      	asrs	r1, r1, #5
 80080aa:	6914      	ldr	r4, [r2, #16]
 80080ac:	3101      	adds	r1, #1
 80080ae:	f102 0314 	add.w	r3, r2, #20
 80080b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80080b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80080ba:	1f05      	subs	r5, r0, #4
 80080bc:	42a3      	cmp	r3, r4
 80080be:	d30c      	bcc.n	80080da <__copybits+0x36>
 80080c0:	1aa3      	subs	r3, r4, r2
 80080c2:	3b11      	subs	r3, #17
 80080c4:	f023 0303 	bic.w	r3, r3, #3
 80080c8:	3211      	adds	r2, #17
 80080ca:	42a2      	cmp	r2, r4
 80080cc:	bf88      	it	hi
 80080ce:	2300      	movhi	r3, #0
 80080d0:	4418      	add	r0, r3
 80080d2:	2300      	movs	r3, #0
 80080d4:	4288      	cmp	r0, r1
 80080d6:	d305      	bcc.n	80080e4 <__copybits+0x40>
 80080d8:	bd70      	pop	{r4, r5, r6, pc}
 80080da:	f853 6b04 	ldr.w	r6, [r3], #4
 80080de:	f845 6f04 	str.w	r6, [r5, #4]!
 80080e2:	e7eb      	b.n	80080bc <__copybits+0x18>
 80080e4:	f840 3b04 	str.w	r3, [r0], #4
 80080e8:	e7f4      	b.n	80080d4 <__copybits+0x30>

080080ea <__any_on>:
 80080ea:	f100 0214 	add.w	r2, r0, #20
 80080ee:	6900      	ldr	r0, [r0, #16]
 80080f0:	114b      	asrs	r3, r1, #5
 80080f2:	4298      	cmp	r0, r3
 80080f4:	b510      	push	{r4, lr}
 80080f6:	db11      	blt.n	800811c <__any_on+0x32>
 80080f8:	dd0a      	ble.n	8008110 <__any_on+0x26>
 80080fa:	f011 011f 	ands.w	r1, r1, #31
 80080fe:	d007      	beq.n	8008110 <__any_on+0x26>
 8008100:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008104:	fa24 f001 	lsr.w	r0, r4, r1
 8008108:	fa00 f101 	lsl.w	r1, r0, r1
 800810c:	428c      	cmp	r4, r1
 800810e:	d10b      	bne.n	8008128 <__any_on+0x3e>
 8008110:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008114:	4293      	cmp	r3, r2
 8008116:	d803      	bhi.n	8008120 <__any_on+0x36>
 8008118:	2000      	movs	r0, #0
 800811a:	bd10      	pop	{r4, pc}
 800811c:	4603      	mov	r3, r0
 800811e:	e7f7      	b.n	8008110 <__any_on+0x26>
 8008120:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008124:	2900      	cmp	r1, #0
 8008126:	d0f5      	beq.n	8008114 <__any_on+0x2a>
 8008128:	2001      	movs	r0, #1
 800812a:	e7f6      	b.n	800811a <__any_on+0x30>

0800812c <_calloc_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	fb02 f501 	mul.w	r5, r2, r1
 8008132:	4629      	mov	r1, r5
 8008134:	f000 f854 	bl	80081e0 <_malloc_r>
 8008138:	4604      	mov	r4, r0
 800813a:	b118      	cbz	r0, 8008144 <_calloc_r+0x18>
 800813c:	462a      	mov	r2, r5
 800813e:	2100      	movs	r1, #0
 8008140:	f7fc fb46 	bl	80047d0 <memset>
 8008144:	4620      	mov	r0, r4
 8008146:	bd38      	pop	{r3, r4, r5, pc}

08008148 <_free_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4605      	mov	r5, r0
 800814c:	2900      	cmp	r1, #0
 800814e:	d043      	beq.n	80081d8 <_free_r+0x90>
 8008150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008154:	1f0c      	subs	r4, r1, #4
 8008156:	2b00      	cmp	r3, #0
 8008158:	bfb8      	it	lt
 800815a:	18e4      	addlt	r4, r4, r3
 800815c:	f001 f850 	bl	8009200 <__malloc_lock>
 8008160:	4a1e      	ldr	r2, [pc, #120]	; (80081dc <_free_r+0x94>)
 8008162:	6813      	ldr	r3, [r2, #0]
 8008164:	4610      	mov	r0, r2
 8008166:	b933      	cbnz	r3, 8008176 <_free_r+0x2e>
 8008168:	6063      	str	r3, [r4, #4]
 800816a:	6014      	str	r4, [r2, #0]
 800816c:	4628      	mov	r0, r5
 800816e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008172:	f001 b84b 	b.w	800920c <__malloc_unlock>
 8008176:	42a3      	cmp	r3, r4
 8008178:	d90a      	bls.n	8008190 <_free_r+0x48>
 800817a:	6821      	ldr	r1, [r4, #0]
 800817c:	1862      	adds	r2, r4, r1
 800817e:	4293      	cmp	r3, r2
 8008180:	bf01      	itttt	eq
 8008182:	681a      	ldreq	r2, [r3, #0]
 8008184:	685b      	ldreq	r3, [r3, #4]
 8008186:	1852      	addeq	r2, r2, r1
 8008188:	6022      	streq	r2, [r4, #0]
 800818a:	6063      	str	r3, [r4, #4]
 800818c:	6004      	str	r4, [r0, #0]
 800818e:	e7ed      	b.n	800816c <_free_r+0x24>
 8008190:	461a      	mov	r2, r3
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	b10b      	cbz	r3, 800819a <_free_r+0x52>
 8008196:	42a3      	cmp	r3, r4
 8008198:	d9fa      	bls.n	8008190 <_free_r+0x48>
 800819a:	6811      	ldr	r1, [r2, #0]
 800819c:	1850      	adds	r0, r2, r1
 800819e:	42a0      	cmp	r0, r4
 80081a0:	d10b      	bne.n	80081ba <_free_r+0x72>
 80081a2:	6820      	ldr	r0, [r4, #0]
 80081a4:	4401      	add	r1, r0
 80081a6:	1850      	adds	r0, r2, r1
 80081a8:	4283      	cmp	r3, r0
 80081aa:	6011      	str	r1, [r2, #0]
 80081ac:	d1de      	bne.n	800816c <_free_r+0x24>
 80081ae:	6818      	ldr	r0, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	4401      	add	r1, r0
 80081b4:	6011      	str	r1, [r2, #0]
 80081b6:	6053      	str	r3, [r2, #4]
 80081b8:	e7d8      	b.n	800816c <_free_r+0x24>
 80081ba:	d902      	bls.n	80081c2 <_free_r+0x7a>
 80081bc:	230c      	movs	r3, #12
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	e7d4      	b.n	800816c <_free_r+0x24>
 80081c2:	6820      	ldr	r0, [r4, #0]
 80081c4:	1821      	adds	r1, r4, r0
 80081c6:	428b      	cmp	r3, r1
 80081c8:	bf01      	itttt	eq
 80081ca:	6819      	ldreq	r1, [r3, #0]
 80081cc:	685b      	ldreq	r3, [r3, #4]
 80081ce:	1809      	addeq	r1, r1, r0
 80081d0:	6021      	streq	r1, [r4, #0]
 80081d2:	6063      	str	r3, [r4, #4]
 80081d4:	6054      	str	r4, [r2, #4]
 80081d6:	e7c9      	b.n	800816c <_free_r+0x24>
 80081d8:	bd38      	pop	{r3, r4, r5, pc}
 80081da:	bf00      	nop
 80081dc:	200012f0 	.word	0x200012f0

080081e0 <_malloc_r>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	1ccd      	adds	r5, r1, #3
 80081e4:	f025 0503 	bic.w	r5, r5, #3
 80081e8:	3508      	adds	r5, #8
 80081ea:	2d0c      	cmp	r5, #12
 80081ec:	bf38      	it	cc
 80081ee:	250c      	movcc	r5, #12
 80081f0:	2d00      	cmp	r5, #0
 80081f2:	4606      	mov	r6, r0
 80081f4:	db01      	blt.n	80081fa <_malloc_r+0x1a>
 80081f6:	42a9      	cmp	r1, r5
 80081f8:	d903      	bls.n	8008202 <_malloc_r+0x22>
 80081fa:	230c      	movs	r3, #12
 80081fc:	6033      	str	r3, [r6, #0]
 80081fe:	2000      	movs	r0, #0
 8008200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008202:	f000 fffd 	bl	8009200 <__malloc_lock>
 8008206:	4921      	ldr	r1, [pc, #132]	; (800828c <_malloc_r+0xac>)
 8008208:	680a      	ldr	r2, [r1, #0]
 800820a:	4614      	mov	r4, r2
 800820c:	b99c      	cbnz	r4, 8008236 <_malloc_r+0x56>
 800820e:	4f20      	ldr	r7, [pc, #128]	; (8008290 <_malloc_r+0xb0>)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	b923      	cbnz	r3, 800821e <_malloc_r+0x3e>
 8008214:	4621      	mov	r1, r4
 8008216:	4630      	mov	r0, r6
 8008218:	f000 fcce 	bl	8008bb8 <_sbrk_r>
 800821c:	6038      	str	r0, [r7, #0]
 800821e:	4629      	mov	r1, r5
 8008220:	4630      	mov	r0, r6
 8008222:	f000 fcc9 	bl	8008bb8 <_sbrk_r>
 8008226:	1c43      	adds	r3, r0, #1
 8008228:	d123      	bne.n	8008272 <_malloc_r+0x92>
 800822a:	230c      	movs	r3, #12
 800822c:	4630      	mov	r0, r6
 800822e:	6033      	str	r3, [r6, #0]
 8008230:	f000 ffec 	bl	800920c <__malloc_unlock>
 8008234:	e7e3      	b.n	80081fe <_malloc_r+0x1e>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	1b5b      	subs	r3, r3, r5
 800823a:	d417      	bmi.n	800826c <_malloc_r+0x8c>
 800823c:	2b0b      	cmp	r3, #11
 800823e:	d903      	bls.n	8008248 <_malloc_r+0x68>
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	441c      	add	r4, r3
 8008244:	6025      	str	r5, [r4, #0]
 8008246:	e004      	b.n	8008252 <_malloc_r+0x72>
 8008248:	6863      	ldr	r3, [r4, #4]
 800824a:	42a2      	cmp	r2, r4
 800824c:	bf0c      	ite	eq
 800824e:	600b      	streq	r3, [r1, #0]
 8008250:	6053      	strne	r3, [r2, #4]
 8008252:	4630      	mov	r0, r6
 8008254:	f000 ffda 	bl	800920c <__malloc_unlock>
 8008258:	f104 000b 	add.w	r0, r4, #11
 800825c:	1d23      	adds	r3, r4, #4
 800825e:	f020 0007 	bic.w	r0, r0, #7
 8008262:	1ac2      	subs	r2, r0, r3
 8008264:	d0cc      	beq.n	8008200 <_malloc_r+0x20>
 8008266:	1a1b      	subs	r3, r3, r0
 8008268:	50a3      	str	r3, [r4, r2]
 800826a:	e7c9      	b.n	8008200 <_malloc_r+0x20>
 800826c:	4622      	mov	r2, r4
 800826e:	6864      	ldr	r4, [r4, #4]
 8008270:	e7cc      	b.n	800820c <_malloc_r+0x2c>
 8008272:	1cc4      	adds	r4, r0, #3
 8008274:	f024 0403 	bic.w	r4, r4, #3
 8008278:	42a0      	cmp	r0, r4
 800827a:	d0e3      	beq.n	8008244 <_malloc_r+0x64>
 800827c:	1a21      	subs	r1, r4, r0
 800827e:	4630      	mov	r0, r6
 8008280:	f000 fc9a 	bl	8008bb8 <_sbrk_r>
 8008284:	3001      	adds	r0, #1
 8008286:	d1dd      	bne.n	8008244 <_malloc_r+0x64>
 8008288:	e7cf      	b.n	800822a <_malloc_r+0x4a>
 800828a:	bf00      	nop
 800828c:	200012f0 	.word	0x200012f0
 8008290:	200012f4 	.word	0x200012f4

08008294 <__ssputs_r>:
 8008294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008298:	688e      	ldr	r6, [r1, #8]
 800829a:	4682      	mov	sl, r0
 800829c:	429e      	cmp	r6, r3
 800829e:	460c      	mov	r4, r1
 80082a0:	4690      	mov	r8, r2
 80082a2:	461f      	mov	r7, r3
 80082a4:	d838      	bhi.n	8008318 <__ssputs_r+0x84>
 80082a6:	898a      	ldrh	r2, [r1, #12]
 80082a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80082ac:	d032      	beq.n	8008314 <__ssputs_r+0x80>
 80082ae:	6825      	ldr	r5, [r4, #0]
 80082b0:	6909      	ldr	r1, [r1, #16]
 80082b2:	3301      	adds	r3, #1
 80082b4:	eba5 0901 	sub.w	r9, r5, r1
 80082b8:	6965      	ldr	r5, [r4, #20]
 80082ba:	444b      	add	r3, r9
 80082bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082c4:	106d      	asrs	r5, r5, #1
 80082c6:	429d      	cmp	r5, r3
 80082c8:	bf38      	it	cc
 80082ca:	461d      	movcc	r5, r3
 80082cc:	0553      	lsls	r3, r2, #21
 80082ce:	d531      	bpl.n	8008334 <__ssputs_r+0xa0>
 80082d0:	4629      	mov	r1, r5
 80082d2:	f7ff ff85 	bl	80081e0 <_malloc_r>
 80082d6:	4606      	mov	r6, r0
 80082d8:	b950      	cbnz	r0, 80082f0 <__ssputs_r+0x5c>
 80082da:	230c      	movs	r3, #12
 80082dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082e0:	f8ca 3000 	str.w	r3, [sl]
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ea:	81a3      	strh	r3, [r4, #12]
 80082ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f0:	464a      	mov	r2, r9
 80082f2:	6921      	ldr	r1, [r4, #16]
 80082f4:	f7fc fa5e 	bl	80047b4 <memcpy>
 80082f8:	89a3      	ldrh	r3, [r4, #12]
 80082fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80082fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	6126      	str	r6, [r4, #16]
 8008306:	444e      	add	r6, r9
 8008308:	6026      	str	r6, [r4, #0]
 800830a:	463e      	mov	r6, r7
 800830c:	6165      	str	r5, [r4, #20]
 800830e:	eba5 0509 	sub.w	r5, r5, r9
 8008312:	60a5      	str	r5, [r4, #8]
 8008314:	42be      	cmp	r6, r7
 8008316:	d900      	bls.n	800831a <__ssputs_r+0x86>
 8008318:	463e      	mov	r6, r7
 800831a:	4632      	mov	r2, r6
 800831c:	4641      	mov	r1, r8
 800831e:	6820      	ldr	r0, [r4, #0]
 8008320:	f000 ff54 	bl	80091cc <memmove>
 8008324:	68a3      	ldr	r3, [r4, #8]
 8008326:	6822      	ldr	r2, [r4, #0]
 8008328:	1b9b      	subs	r3, r3, r6
 800832a:	4432      	add	r2, r6
 800832c:	2000      	movs	r0, #0
 800832e:	60a3      	str	r3, [r4, #8]
 8008330:	6022      	str	r2, [r4, #0]
 8008332:	e7db      	b.n	80082ec <__ssputs_r+0x58>
 8008334:	462a      	mov	r2, r5
 8008336:	f000 ff6f 	bl	8009218 <_realloc_r>
 800833a:	4606      	mov	r6, r0
 800833c:	2800      	cmp	r0, #0
 800833e:	d1e1      	bne.n	8008304 <__ssputs_r+0x70>
 8008340:	4650      	mov	r0, sl
 8008342:	6921      	ldr	r1, [r4, #16]
 8008344:	f7ff ff00 	bl	8008148 <_free_r>
 8008348:	e7c7      	b.n	80082da <__ssputs_r+0x46>
	...

0800834c <_svfiprintf_r>:
 800834c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008350:	4698      	mov	r8, r3
 8008352:	898b      	ldrh	r3, [r1, #12]
 8008354:	4607      	mov	r7, r0
 8008356:	061b      	lsls	r3, r3, #24
 8008358:	460d      	mov	r5, r1
 800835a:	4614      	mov	r4, r2
 800835c:	b09d      	sub	sp, #116	; 0x74
 800835e:	d50e      	bpl.n	800837e <_svfiprintf_r+0x32>
 8008360:	690b      	ldr	r3, [r1, #16]
 8008362:	b963      	cbnz	r3, 800837e <_svfiprintf_r+0x32>
 8008364:	2140      	movs	r1, #64	; 0x40
 8008366:	f7ff ff3b 	bl	80081e0 <_malloc_r>
 800836a:	6028      	str	r0, [r5, #0]
 800836c:	6128      	str	r0, [r5, #16]
 800836e:	b920      	cbnz	r0, 800837a <_svfiprintf_r+0x2e>
 8008370:	230c      	movs	r3, #12
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008378:	e0d1      	b.n	800851e <_svfiprintf_r+0x1d2>
 800837a:	2340      	movs	r3, #64	; 0x40
 800837c:	616b      	str	r3, [r5, #20]
 800837e:	2300      	movs	r3, #0
 8008380:	9309      	str	r3, [sp, #36]	; 0x24
 8008382:	2320      	movs	r3, #32
 8008384:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008388:	2330      	movs	r3, #48	; 0x30
 800838a:	f04f 0901 	mov.w	r9, #1
 800838e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008392:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008538 <_svfiprintf_r+0x1ec>
 8008396:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800839a:	4623      	mov	r3, r4
 800839c:	469a      	mov	sl, r3
 800839e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a2:	b10a      	cbz	r2, 80083a8 <_svfiprintf_r+0x5c>
 80083a4:	2a25      	cmp	r2, #37	; 0x25
 80083a6:	d1f9      	bne.n	800839c <_svfiprintf_r+0x50>
 80083a8:	ebba 0b04 	subs.w	fp, sl, r4
 80083ac:	d00b      	beq.n	80083c6 <_svfiprintf_r+0x7a>
 80083ae:	465b      	mov	r3, fp
 80083b0:	4622      	mov	r2, r4
 80083b2:	4629      	mov	r1, r5
 80083b4:	4638      	mov	r0, r7
 80083b6:	f7ff ff6d 	bl	8008294 <__ssputs_r>
 80083ba:	3001      	adds	r0, #1
 80083bc:	f000 80aa 	beq.w	8008514 <_svfiprintf_r+0x1c8>
 80083c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80083c2:	445a      	add	r2, fp
 80083c4:	9209      	str	r2, [sp, #36]	; 0x24
 80083c6:	f89a 3000 	ldrb.w	r3, [sl]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 80a2 	beq.w	8008514 <_svfiprintf_r+0x1c8>
 80083d0:	2300      	movs	r3, #0
 80083d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083da:	f10a 0a01 	add.w	sl, sl, #1
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	9307      	str	r3, [sp, #28]
 80083e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80083e6:	931a      	str	r3, [sp, #104]	; 0x68
 80083e8:	4654      	mov	r4, sl
 80083ea:	2205      	movs	r2, #5
 80083ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083f0:	4851      	ldr	r0, [pc, #324]	; (8008538 <_svfiprintf_r+0x1ec>)
 80083f2:	f7ff f9d5 	bl	80077a0 <memchr>
 80083f6:	9a04      	ldr	r2, [sp, #16]
 80083f8:	b9d8      	cbnz	r0, 8008432 <_svfiprintf_r+0xe6>
 80083fa:	06d0      	lsls	r0, r2, #27
 80083fc:	bf44      	itt	mi
 80083fe:	2320      	movmi	r3, #32
 8008400:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008404:	0711      	lsls	r1, r2, #28
 8008406:	bf44      	itt	mi
 8008408:	232b      	movmi	r3, #43	; 0x2b
 800840a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800840e:	f89a 3000 	ldrb.w	r3, [sl]
 8008412:	2b2a      	cmp	r3, #42	; 0x2a
 8008414:	d015      	beq.n	8008442 <_svfiprintf_r+0xf6>
 8008416:	4654      	mov	r4, sl
 8008418:	2000      	movs	r0, #0
 800841a:	f04f 0c0a 	mov.w	ip, #10
 800841e:	9a07      	ldr	r2, [sp, #28]
 8008420:	4621      	mov	r1, r4
 8008422:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008426:	3b30      	subs	r3, #48	; 0x30
 8008428:	2b09      	cmp	r3, #9
 800842a:	d94e      	bls.n	80084ca <_svfiprintf_r+0x17e>
 800842c:	b1b0      	cbz	r0, 800845c <_svfiprintf_r+0x110>
 800842e:	9207      	str	r2, [sp, #28]
 8008430:	e014      	b.n	800845c <_svfiprintf_r+0x110>
 8008432:	eba0 0308 	sub.w	r3, r0, r8
 8008436:	fa09 f303 	lsl.w	r3, r9, r3
 800843a:	4313      	orrs	r3, r2
 800843c:	46a2      	mov	sl, r4
 800843e:	9304      	str	r3, [sp, #16]
 8008440:	e7d2      	b.n	80083e8 <_svfiprintf_r+0x9c>
 8008442:	9b03      	ldr	r3, [sp, #12]
 8008444:	1d19      	adds	r1, r3, #4
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	9103      	str	r1, [sp, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	bfbb      	ittet	lt
 800844e:	425b      	neglt	r3, r3
 8008450:	f042 0202 	orrlt.w	r2, r2, #2
 8008454:	9307      	strge	r3, [sp, #28]
 8008456:	9307      	strlt	r3, [sp, #28]
 8008458:	bfb8      	it	lt
 800845a:	9204      	strlt	r2, [sp, #16]
 800845c:	7823      	ldrb	r3, [r4, #0]
 800845e:	2b2e      	cmp	r3, #46	; 0x2e
 8008460:	d10c      	bne.n	800847c <_svfiprintf_r+0x130>
 8008462:	7863      	ldrb	r3, [r4, #1]
 8008464:	2b2a      	cmp	r3, #42	; 0x2a
 8008466:	d135      	bne.n	80084d4 <_svfiprintf_r+0x188>
 8008468:	9b03      	ldr	r3, [sp, #12]
 800846a:	3402      	adds	r4, #2
 800846c:	1d1a      	adds	r2, r3, #4
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	9203      	str	r2, [sp, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	bfb8      	it	lt
 8008476:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800847a:	9305      	str	r3, [sp, #20]
 800847c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008548 <_svfiprintf_r+0x1fc>
 8008480:	2203      	movs	r2, #3
 8008482:	4650      	mov	r0, sl
 8008484:	7821      	ldrb	r1, [r4, #0]
 8008486:	f7ff f98b 	bl	80077a0 <memchr>
 800848a:	b140      	cbz	r0, 800849e <_svfiprintf_r+0x152>
 800848c:	2340      	movs	r3, #64	; 0x40
 800848e:	eba0 000a 	sub.w	r0, r0, sl
 8008492:	fa03 f000 	lsl.w	r0, r3, r0
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	3401      	adds	r4, #1
 800849a:	4303      	orrs	r3, r0
 800849c:	9304      	str	r3, [sp, #16]
 800849e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084a2:	2206      	movs	r2, #6
 80084a4:	4825      	ldr	r0, [pc, #148]	; (800853c <_svfiprintf_r+0x1f0>)
 80084a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80084aa:	f7ff f979 	bl	80077a0 <memchr>
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d038      	beq.n	8008524 <_svfiprintf_r+0x1d8>
 80084b2:	4b23      	ldr	r3, [pc, #140]	; (8008540 <_svfiprintf_r+0x1f4>)
 80084b4:	bb1b      	cbnz	r3, 80084fe <_svfiprintf_r+0x1b2>
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	3307      	adds	r3, #7
 80084ba:	f023 0307 	bic.w	r3, r3, #7
 80084be:	3308      	adds	r3, #8
 80084c0:	9303      	str	r3, [sp, #12]
 80084c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084c4:	4433      	add	r3, r6
 80084c6:	9309      	str	r3, [sp, #36]	; 0x24
 80084c8:	e767      	b.n	800839a <_svfiprintf_r+0x4e>
 80084ca:	460c      	mov	r4, r1
 80084cc:	2001      	movs	r0, #1
 80084ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80084d2:	e7a5      	b.n	8008420 <_svfiprintf_r+0xd4>
 80084d4:	2300      	movs	r3, #0
 80084d6:	f04f 0c0a 	mov.w	ip, #10
 80084da:	4619      	mov	r1, r3
 80084dc:	3401      	adds	r4, #1
 80084de:	9305      	str	r3, [sp, #20]
 80084e0:	4620      	mov	r0, r4
 80084e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084e6:	3a30      	subs	r2, #48	; 0x30
 80084e8:	2a09      	cmp	r2, #9
 80084ea:	d903      	bls.n	80084f4 <_svfiprintf_r+0x1a8>
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d0c5      	beq.n	800847c <_svfiprintf_r+0x130>
 80084f0:	9105      	str	r1, [sp, #20]
 80084f2:	e7c3      	b.n	800847c <_svfiprintf_r+0x130>
 80084f4:	4604      	mov	r4, r0
 80084f6:	2301      	movs	r3, #1
 80084f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80084fc:	e7f0      	b.n	80084e0 <_svfiprintf_r+0x194>
 80084fe:	ab03      	add	r3, sp, #12
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	462a      	mov	r2, r5
 8008504:	4638      	mov	r0, r7
 8008506:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <_svfiprintf_r+0x1f8>)
 8008508:	a904      	add	r1, sp, #16
 800850a:	f7fc fa07 	bl	800491c <_printf_float>
 800850e:	1c42      	adds	r2, r0, #1
 8008510:	4606      	mov	r6, r0
 8008512:	d1d6      	bne.n	80084c2 <_svfiprintf_r+0x176>
 8008514:	89ab      	ldrh	r3, [r5, #12]
 8008516:	065b      	lsls	r3, r3, #25
 8008518:	f53f af2c 	bmi.w	8008374 <_svfiprintf_r+0x28>
 800851c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800851e:	b01d      	add	sp, #116	; 0x74
 8008520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008524:	ab03      	add	r3, sp, #12
 8008526:	9300      	str	r3, [sp, #0]
 8008528:	462a      	mov	r2, r5
 800852a:	4638      	mov	r0, r7
 800852c:	4b05      	ldr	r3, [pc, #20]	; (8008544 <_svfiprintf_r+0x1f8>)
 800852e:	a904      	add	r1, sp, #16
 8008530:	f7fc fc90 	bl	8004e54 <_printf_i>
 8008534:	e7eb      	b.n	800850e <_svfiprintf_r+0x1c2>
 8008536:	bf00      	nop
 8008538:	08009d2c 	.word	0x08009d2c
 800853c:	08009d36 	.word	0x08009d36
 8008540:	0800491d 	.word	0x0800491d
 8008544:	08008295 	.word	0x08008295
 8008548:	08009d32 	.word	0x08009d32

0800854c <_sungetc_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	1c4b      	adds	r3, r1, #1
 8008550:	4614      	mov	r4, r2
 8008552:	d103      	bne.n	800855c <_sungetc_r+0x10>
 8008554:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008558:	4628      	mov	r0, r5
 800855a:	bd38      	pop	{r3, r4, r5, pc}
 800855c:	8993      	ldrh	r3, [r2, #12]
 800855e:	b2cd      	uxtb	r5, r1
 8008560:	f023 0320 	bic.w	r3, r3, #32
 8008564:	8193      	strh	r3, [r2, #12]
 8008566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008568:	6852      	ldr	r2, [r2, #4]
 800856a:	b18b      	cbz	r3, 8008590 <_sungetc_r+0x44>
 800856c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800856e:	4293      	cmp	r3, r2
 8008570:	dd08      	ble.n	8008584 <_sungetc_r+0x38>
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	1e5a      	subs	r2, r3, #1
 8008576:	6022      	str	r2, [r4, #0]
 8008578:	f803 5c01 	strb.w	r5, [r3, #-1]
 800857c:	6863      	ldr	r3, [r4, #4]
 800857e:	3301      	adds	r3, #1
 8008580:	6063      	str	r3, [r4, #4]
 8008582:	e7e9      	b.n	8008558 <_sungetc_r+0xc>
 8008584:	4621      	mov	r1, r4
 8008586:	f000 fbf1 	bl	8008d6c <__submore>
 800858a:	2800      	cmp	r0, #0
 800858c:	d0f1      	beq.n	8008572 <_sungetc_r+0x26>
 800858e:	e7e1      	b.n	8008554 <_sungetc_r+0x8>
 8008590:	6921      	ldr	r1, [r4, #16]
 8008592:	6823      	ldr	r3, [r4, #0]
 8008594:	b151      	cbz	r1, 80085ac <_sungetc_r+0x60>
 8008596:	4299      	cmp	r1, r3
 8008598:	d208      	bcs.n	80085ac <_sungetc_r+0x60>
 800859a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800859e:	42a9      	cmp	r1, r5
 80085a0:	d104      	bne.n	80085ac <_sungetc_r+0x60>
 80085a2:	3b01      	subs	r3, #1
 80085a4:	3201      	adds	r2, #1
 80085a6:	6023      	str	r3, [r4, #0]
 80085a8:	6062      	str	r2, [r4, #4]
 80085aa:	e7d5      	b.n	8008558 <_sungetc_r+0xc>
 80085ac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80085b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085b4:	6363      	str	r3, [r4, #52]	; 0x34
 80085b6:	2303      	movs	r3, #3
 80085b8:	63a3      	str	r3, [r4, #56]	; 0x38
 80085ba:	4623      	mov	r3, r4
 80085bc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	2301      	movs	r3, #1
 80085c4:	e7dc      	b.n	8008580 <_sungetc_r+0x34>

080085c6 <__ssrefill_r>:
 80085c6:	b510      	push	{r4, lr}
 80085c8:	460c      	mov	r4, r1
 80085ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80085cc:	b169      	cbz	r1, 80085ea <__ssrefill_r+0x24>
 80085ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085d2:	4299      	cmp	r1, r3
 80085d4:	d001      	beq.n	80085da <__ssrefill_r+0x14>
 80085d6:	f7ff fdb7 	bl	8008148 <_free_r>
 80085da:	2000      	movs	r0, #0
 80085dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80085de:	6360      	str	r0, [r4, #52]	; 0x34
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	b113      	cbz	r3, 80085ea <__ssrefill_r+0x24>
 80085e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085e6:	6023      	str	r3, [r4, #0]
 80085e8:	bd10      	pop	{r4, pc}
 80085ea:	6923      	ldr	r3, [r4, #16]
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085f0:	6023      	str	r3, [r4, #0]
 80085f2:	2300      	movs	r3, #0
 80085f4:	6063      	str	r3, [r4, #4]
 80085f6:	89a3      	ldrh	r3, [r4, #12]
 80085f8:	f043 0320 	orr.w	r3, r3, #32
 80085fc:	81a3      	strh	r3, [r4, #12]
 80085fe:	e7f3      	b.n	80085e8 <__ssrefill_r+0x22>

08008600 <__ssvfiscanf_r>:
 8008600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008604:	460c      	mov	r4, r1
 8008606:	2100      	movs	r1, #0
 8008608:	4606      	mov	r6, r0
 800860a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800860e:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008612:	49b3      	ldr	r1, [pc, #716]	; (80088e0 <__ssvfiscanf_r+0x2e0>)
 8008614:	f10d 0804 	add.w	r8, sp, #4
 8008618:	91a0      	str	r1, [sp, #640]	; 0x280
 800861a:	49b2      	ldr	r1, [pc, #712]	; (80088e4 <__ssvfiscanf_r+0x2e4>)
 800861c:	4fb2      	ldr	r7, [pc, #712]	; (80088e8 <__ssvfiscanf_r+0x2e8>)
 800861e:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 80088ec <__ssvfiscanf_r+0x2ec>
 8008622:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008626:	91a1      	str	r1, [sp, #644]	; 0x284
 8008628:	9300      	str	r3, [sp, #0]
 800862a:	f892 a000 	ldrb.w	sl, [r2]
 800862e:	f1ba 0f00 	cmp.w	sl, #0
 8008632:	f000 8153 	beq.w	80088dc <__ssvfiscanf_r+0x2dc>
 8008636:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800863a:	1c55      	adds	r5, r2, #1
 800863c:	f013 0308 	ands.w	r3, r3, #8
 8008640:	d019      	beq.n	8008676 <__ssvfiscanf_r+0x76>
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd0f      	ble.n	8008668 <__ssvfiscanf_r+0x68>
 8008648:	6823      	ldr	r3, [r4, #0]
 800864a:	781a      	ldrb	r2, [r3, #0]
 800864c:	5cba      	ldrb	r2, [r7, r2]
 800864e:	0712      	lsls	r2, r2, #28
 8008650:	d401      	bmi.n	8008656 <__ssvfiscanf_r+0x56>
 8008652:	462a      	mov	r2, r5
 8008654:	e7e9      	b.n	800862a <__ssvfiscanf_r+0x2a>
 8008656:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008658:	3301      	adds	r3, #1
 800865a:	3201      	adds	r2, #1
 800865c:	9245      	str	r2, [sp, #276]	; 0x114
 800865e:	6862      	ldr	r2, [r4, #4]
 8008660:	6023      	str	r3, [r4, #0]
 8008662:	3a01      	subs	r2, #1
 8008664:	6062      	str	r2, [r4, #4]
 8008666:	e7ec      	b.n	8008642 <__ssvfiscanf_r+0x42>
 8008668:	4621      	mov	r1, r4
 800866a:	4630      	mov	r0, r6
 800866c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800866e:	4798      	blx	r3
 8008670:	2800      	cmp	r0, #0
 8008672:	d0e9      	beq.n	8008648 <__ssvfiscanf_r+0x48>
 8008674:	e7ed      	b.n	8008652 <__ssvfiscanf_r+0x52>
 8008676:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800867a:	f040 8086 	bne.w	800878a <__ssvfiscanf_r+0x18a>
 800867e:	9341      	str	r3, [sp, #260]	; 0x104
 8008680:	9343      	str	r3, [sp, #268]	; 0x10c
 8008682:	7853      	ldrb	r3, [r2, #1]
 8008684:	2b2a      	cmp	r3, #42	; 0x2a
 8008686:	bf04      	itt	eq
 8008688:	2310      	moveq	r3, #16
 800868a:	1c95      	addeq	r5, r2, #2
 800868c:	f04f 020a 	mov.w	r2, #10
 8008690:	bf08      	it	eq
 8008692:	9341      	streq	r3, [sp, #260]	; 0x104
 8008694:	46ab      	mov	fp, r5
 8008696:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800869a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800869e:	2b09      	cmp	r3, #9
 80086a0:	d91d      	bls.n	80086de <__ssvfiscanf_r+0xde>
 80086a2:	2203      	movs	r2, #3
 80086a4:	4891      	ldr	r0, [pc, #580]	; (80088ec <__ssvfiscanf_r+0x2ec>)
 80086a6:	f7ff f87b 	bl	80077a0 <memchr>
 80086aa:	b140      	cbz	r0, 80086be <__ssvfiscanf_r+0xbe>
 80086ac:	2301      	movs	r3, #1
 80086ae:	465d      	mov	r5, fp
 80086b0:	eba0 0009 	sub.w	r0, r0, r9
 80086b4:	fa03 f000 	lsl.w	r0, r3, r0
 80086b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80086ba:	4318      	orrs	r0, r3
 80086bc:	9041      	str	r0, [sp, #260]	; 0x104
 80086be:	f815 3b01 	ldrb.w	r3, [r5], #1
 80086c2:	2b78      	cmp	r3, #120	; 0x78
 80086c4:	d806      	bhi.n	80086d4 <__ssvfiscanf_r+0xd4>
 80086c6:	2b57      	cmp	r3, #87	; 0x57
 80086c8:	d810      	bhi.n	80086ec <__ssvfiscanf_r+0xec>
 80086ca:	2b25      	cmp	r3, #37	; 0x25
 80086cc:	d05d      	beq.n	800878a <__ssvfiscanf_r+0x18a>
 80086ce:	d857      	bhi.n	8008780 <__ssvfiscanf_r+0x180>
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d075      	beq.n	80087c0 <__ssvfiscanf_r+0x1c0>
 80086d4:	2303      	movs	r3, #3
 80086d6:	9347      	str	r3, [sp, #284]	; 0x11c
 80086d8:	230a      	movs	r3, #10
 80086da:	9342      	str	r3, [sp, #264]	; 0x108
 80086dc:	e082      	b.n	80087e4 <__ssvfiscanf_r+0x1e4>
 80086de:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80086e0:	465d      	mov	r5, fp
 80086e2:	fb02 1303 	mla	r3, r2, r3, r1
 80086e6:	3b30      	subs	r3, #48	; 0x30
 80086e8:	9343      	str	r3, [sp, #268]	; 0x10c
 80086ea:	e7d3      	b.n	8008694 <__ssvfiscanf_r+0x94>
 80086ec:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80086f0:	2a20      	cmp	r2, #32
 80086f2:	d8ef      	bhi.n	80086d4 <__ssvfiscanf_r+0xd4>
 80086f4:	a101      	add	r1, pc, #4	; (adr r1, 80086fc <__ssvfiscanf_r+0xfc>)
 80086f6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	080087cf 	.word	0x080087cf
 8008700:	080086d5 	.word	0x080086d5
 8008704:	080086d5 	.word	0x080086d5
 8008708:	0800882d 	.word	0x0800882d
 800870c:	080086d5 	.word	0x080086d5
 8008710:	080086d5 	.word	0x080086d5
 8008714:	080086d5 	.word	0x080086d5
 8008718:	080086d5 	.word	0x080086d5
 800871c:	080086d5 	.word	0x080086d5
 8008720:	080086d5 	.word	0x080086d5
 8008724:	080086d5 	.word	0x080086d5
 8008728:	08008843 	.word	0x08008843
 800872c:	08008819 	.word	0x08008819
 8008730:	08008787 	.word	0x08008787
 8008734:	08008787 	.word	0x08008787
 8008738:	08008787 	.word	0x08008787
 800873c:	080086d5 	.word	0x080086d5
 8008740:	0800881d 	.word	0x0800881d
 8008744:	080086d5 	.word	0x080086d5
 8008748:	080086d5 	.word	0x080086d5
 800874c:	080086d5 	.word	0x080086d5
 8008750:	080086d5 	.word	0x080086d5
 8008754:	08008853 	.word	0x08008853
 8008758:	08008825 	.word	0x08008825
 800875c:	080087c7 	.word	0x080087c7
 8008760:	080086d5 	.word	0x080086d5
 8008764:	080086d5 	.word	0x080086d5
 8008768:	0800884f 	.word	0x0800884f
 800876c:	080086d5 	.word	0x080086d5
 8008770:	08008819 	.word	0x08008819
 8008774:	080086d5 	.word	0x080086d5
 8008778:	080086d5 	.word	0x080086d5
 800877c:	080087cf 	.word	0x080087cf
 8008780:	3b45      	subs	r3, #69	; 0x45
 8008782:	2b02      	cmp	r3, #2
 8008784:	d8a6      	bhi.n	80086d4 <__ssvfiscanf_r+0xd4>
 8008786:	2305      	movs	r3, #5
 8008788:	e02b      	b.n	80087e2 <__ssvfiscanf_r+0x1e2>
 800878a:	6863      	ldr	r3, [r4, #4]
 800878c:	2b00      	cmp	r3, #0
 800878e:	dd0d      	ble.n	80087ac <__ssvfiscanf_r+0x1ac>
 8008790:	6823      	ldr	r3, [r4, #0]
 8008792:	781a      	ldrb	r2, [r3, #0]
 8008794:	4552      	cmp	r2, sl
 8008796:	f040 80a1 	bne.w	80088dc <__ssvfiscanf_r+0x2dc>
 800879a:	3301      	adds	r3, #1
 800879c:	6862      	ldr	r2, [r4, #4]
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80087a2:	3a01      	subs	r2, #1
 80087a4:	3301      	adds	r3, #1
 80087a6:	6062      	str	r2, [r4, #4]
 80087a8:	9345      	str	r3, [sp, #276]	; 0x114
 80087aa:	e752      	b.n	8008652 <__ssvfiscanf_r+0x52>
 80087ac:	4621      	mov	r1, r4
 80087ae:	4630      	mov	r0, r6
 80087b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80087b2:	4798      	blx	r3
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d0eb      	beq.n	8008790 <__ssvfiscanf_r+0x190>
 80087b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f040 8084 	bne.w	80088c8 <__ssvfiscanf_r+0x2c8>
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087c4:	e086      	b.n	80088d4 <__ssvfiscanf_r+0x2d4>
 80087c6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80087c8:	f042 0220 	orr.w	r2, r2, #32
 80087cc:	9241      	str	r2, [sp, #260]	; 0x104
 80087ce:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80087d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80087d4:	9241      	str	r2, [sp, #260]	; 0x104
 80087d6:	2210      	movs	r2, #16
 80087d8:	2b6f      	cmp	r3, #111	; 0x6f
 80087da:	bf34      	ite	cc
 80087dc:	2303      	movcc	r3, #3
 80087de:	2304      	movcs	r3, #4
 80087e0:	9242      	str	r2, [sp, #264]	; 0x108
 80087e2:	9347      	str	r3, [sp, #284]	; 0x11c
 80087e4:	6863      	ldr	r3, [r4, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	dd41      	ble.n	800886e <__ssvfiscanf_r+0x26e>
 80087ea:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80087ec:	0659      	lsls	r1, r3, #25
 80087ee:	d404      	bmi.n	80087fa <__ssvfiscanf_r+0x1fa>
 80087f0:	6823      	ldr	r3, [r4, #0]
 80087f2:	781a      	ldrb	r2, [r3, #0]
 80087f4:	5cba      	ldrb	r2, [r7, r2]
 80087f6:	0712      	lsls	r2, r2, #28
 80087f8:	d440      	bmi.n	800887c <__ssvfiscanf_r+0x27c>
 80087fa:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80087fc:	2b02      	cmp	r3, #2
 80087fe:	dc4f      	bgt.n	80088a0 <__ssvfiscanf_r+0x2a0>
 8008800:	466b      	mov	r3, sp
 8008802:	4622      	mov	r2, r4
 8008804:	4630      	mov	r0, r6
 8008806:	a941      	add	r1, sp, #260	; 0x104
 8008808:	f000 f874 	bl	80088f4 <_scanf_chars>
 800880c:	2801      	cmp	r0, #1
 800880e:	d065      	beq.n	80088dc <__ssvfiscanf_r+0x2dc>
 8008810:	2802      	cmp	r0, #2
 8008812:	f47f af1e 	bne.w	8008652 <__ssvfiscanf_r+0x52>
 8008816:	e7cf      	b.n	80087b8 <__ssvfiscanf_r+0x1b8>
 8008818:	220a      	movs	r2, #10
 800881a:	e7dd      	b.n	80087d8 <__ssvfiscanf_r+0x1d8>
 800881c:	2300      	movs	r3, #0
 800881e:	9342      	str	r3, [sp, #264]	; 0x108
 8008820:	2303      	movs	r3, #3
 8008822:	e7de      	b.n	80087e2 <__ssvfiscanf_r+0x1e2>
 8008824:	2308      	movs	r3, #8
 8008826:	9342      	str	r3, [sp, #264]	; 0x108
 8008828:	2304      	movs	r3, #4
 800882a:	e7da      	b.n	80087e2 <__ssvfiscanf_r+0x1e2>
 800882c:	4629      	mov	r1, r5
 800882e:	4640      	mov	r0, r8
 8008830:	f000 f9d2 	bl	8008bd8 <__sccl>
 8008834:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008836:	4605      	mov	r5, r0
 8008838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800883c:	9341      	str	r3, [sp, #260]	; 0x104
 800883e:	2301      	movs	r3, #1
 8008840:	e7cf      	b.n	80087e2 <__ssvfiscanf_r+0x1e2>
 8008842:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008848:	9341      	str	r3, [sp, #260]	; 0x104
 800884a:	2300      	movs	r3, #0
 800884c:	e7c9      	b.n	80087e2 <__ssvfiscanf_r+0x1e2>
 800884e:	2302      	movs	r3, #2
 8008850:	e7c7      	b.n	80087e2 <__ssvfiscanf_r+0x1e2>
 8008852:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008854:	06c3      	lsls	r3, r0, #27
 8008856:	f53f aefc 	bmi.w	8008652 <__ssvfiscanf_r+0x52>
 800885a:	9b00      	ldr	r3, [sp, #0]
 800885c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800885e:	1d19      	adds	r1, r3, #4
 8008860:	9100      	str	r1, [sp, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	07c0      	lsls	r0, r0, #31
 8008866:	bf4c      	ite	mi
 8008868:	801a      	strhmi	r2, [r3, #0]
 800886a:	601a      	strpl	r2, [r3, #0]
 800886c:	e6f1      	b.n	8008652 <__ssvfiscanf_r+0x52>
 800886e:	4621      	mov	r1, r4
 8008870:	4630      	mov	r0, r6
 8008872:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008874:	4798      	blx	r3
 8008876:	2800      	cmp	r0, #0
 8008878:	d0b7      	beq.n	80087ea <__ssvfiscanf_r+0x1ea>
 800887a:	e79d      	b.n	80087b8 <__ssvfiscanf_r+0x1b8>
 800887c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800887e:	3201      	adds	r2, #1
 8008880:	9245      	str	r2, [sp, #276]	; 0x114
 8008882:	6862      	ldr	r2, [r4, #4]
 8008884:	3a01      	subs	r2, #1
 8008886:	2a00      	cmp	r2, #0
 8008888:	6062      	str	r2, [r4, #4]
 800888a:	dd02      	ble.n	8008892 <__ssvfiscanf_r+0x292>
 800888c:	3301      	adds	r3, #1
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	e7ae      	b.n	80087f0 <__ssvfiscanf_r+0x1f0>
 8008892:	4621      	mov	r1, r4
 8008894:	4630      	mov	r0, r6
 8008896:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008898:	4798      	blx	r3
 800889a:	2800      	cmp	r0, #0
 800889c:	d0a8      	beq.n	80087f0 <__ssvfiscanf_r+0x1f0>
 800889e:	e78b      	b.n	80087b8 <__ssvfiscanf_r+0x1b8>
 80088a0:	2b04      	cmp	r3, #4
 80088a2:	dc06      	bgt.n	80088b2 <__ssvfiscanf_r+0x2b2>
 80088a4:	466b      	mov	r3, sp
 80088a6:	4622      	mov	r2, r4
 80088a8:	4630      	mov	r0, r6
 80088aa:	a941      	add	r1, sp, #260	; 0x104
 80088ac:	f000 f87a 	bl	80089a4 <_scanf_i>
 80088b0:	e7ac      	b.n	800880c <__ssvfiscanf_r+0x20c>
 80088b2:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <__ssvfiscanf_r+0x2f0>)
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	f43f aecc 	beq.w	8008652 <__ssvfiscanf_r+0x52>
 80088ba:	466b      	mov	r3, sp
 80088bc:	4622      	mov	r2, r4
 80088be:	4630      	mov	r0, r6
 80088c0:	a941      	add	r1, sp, #260	; 0x104
 80088c2:	f7fc fbed 	bl	80050a0 <_scanf_float>
 80088c6:	e7a1      	b.n	800880c <__ssvfiscanf_r+0x20c>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	f013 0f40 	tst.w	r3, #64	; 0x40
 80088ce:	bf18      	it	ne
 80088d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80088d4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80088d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80088de:	e7f9      	b.n	80088d4 <__ssvfiscanf_r+0x2d4>
 80088e0:	0800854d 	.word	0x0800854d
 80088e4:	080085c7 	.word	0x080085c7
 80088e8:	080099b9 	.word	0x080099b9
 80088ec:	08009d32 	.word	0x08009d32
 80088f0:	080050a1 	.word	0x080050a1

080088f4 <_scanf_chars>:
 80088f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f8:	4615      	mov	r5, r2
 80088fa:	688a      	ldr	r2, [r1, #8]
 80088fc:	4680      	mov	r8, r0
 80088fe:	460c      	mov	r4, r1
 8008900:	b932      	cbnz	r2, 8008910 <_scanf_chars+0x1c>
 8008902:	698a      	ldr	r2, [r1, #24]
 8008904:	2a00      	cmp	r2, #0
 8008906:	bf0c      	ite	eq
 8008908:	2201      	moveq	r2, #1
 800890a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800890e:	608a      	str	r2, [r1, #8]
 8008910:	2700      	movs	r7, #0
 8008912:	6822      	ldr	r2, [r4, #0]
 8008914:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80089a0 <_scanf_chars+0xac>
 8008918:	06d1      	lsls	r1, r2, #27
 800891a:	bf5f      	itttt	pl
 800891c:	681a      	ldrpl	r2, [r3, #0]
 800891e:	1d11      	addpl	r1, r2, #4
 8008920:	6019      	strpl	r1, [r3, #0]
 8008922:	6816      	ldrpl	r6, [r2, #0]
 8008924:	69a0      	ldr	r0, [r4, #24]
 8008926:	b188      	cbz	r0, 800894c <_scanf_chars+0x58>
 8008928:	2801      	cmp	r0, #1
 800892a:	d107      	bne.n	800893c <_scanf_chars+0x48>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	781a      	ldrb	r2, [r3, #0]
 8008930:	6963      	ldr	r3, [r4, #20]
 8008932:	5c9b      	ldrb	r3, [r3, r2]
 8008934:	b953      	cbnz	r3, 800894c <_scanf_chars+0x58>
 8008936:	bb27      	cbnz	r7, 8008982 <_scanf_chars+0x8e>
 8008938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800893c:	2802      	cmp	r0, #2
 800893e:	d120      	bne.n	8008982 <_scanf_chars+0x8e>
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008948:	071b      	lsls	r3, r3, #28
 800894a:	d41a      	bmi.n	8008982 <_scanf_chars+0x8e>
 800894c:	6823      	ldr	r3, [r4, #0]
 800894e:	3701      	adds	r7, #1
 8008950:	06da      	lsls	r2, r3, #27
 8008952:	bf5e      	ittt	pl
 8008954:	682b      	ldrpl	r3, [r5, #0]
 8008956:	781b      	ldrbpl	r3, [r3, #0]
 8008958:	f806 3b01 	strbpl.w	r3, [r6], #1
 800895c:	682a      	ldr	r2, [r5, #0]
 800895e:	686b      	ldr	r3, [r5, #4]
 8008960:	3201      	adds	r2, #1
 8008962:	602a      	str	r2, [r5, #0]
 8008964:	68a2      	ldr	r2, [r4, #8]
 8008966:	3b01      	subs	r3, #1
 8008968:	3a01      	subs	r2, #1
 800896a:	606b      	str	r3, [r5, #4]
 800896c:	60a2      	str	r2, [r4, #8]
 800896e:	b142      	cbz	r2, 8008982 <_scanf_chars+0x8e>
 8008970:	2b00      	cmp	r3, #0
 8008972:	dcd7      	bgt.n	8008924 <_scanf_chars+0x30>
 8008974:	4629      	mov	r1, r5
 8008976:	4640      	mov	r0, r8
 8008978:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800897c:	4798      	blx	r3
 800897e:	2800      	cmp	r0, #0
 8008980:	d0d0      	beq.n	8008924 <_scanf_chars+0x30>
 8008982:	6823      	ldr	r3, [r4, #0]
 8008984:	f013 0310 	ands.w	r3, r3, #16
 8008988:	d105      	bne.n	8008996 <_scanf_chars+0xa2>
 800898a:	68e2      	ldr	r2, [r4, #12]
 800898c:	3201      	adds	r2, #1
 800898e:	60e2      	str	r2, [r4, #12]
 8008990:	69a2      	ldr	r2, [r4, #24]
 8008992:	b102      	cbz	r2, 8008996 <_scanf_chars+0xa2>
 8008994:	7033      	strb	r3, [r6, #0]
 8008996:	6923      	ldr	r3, [r4, #16]
 8008998:	2000      	movs	r0, #0
 800899a:	441f      	add	r7, r3
 800899c:	6127      	str	r7, [r4, #16]
 800899e:	e7cb      	b.n	8008938 <_scanf_chars+0x44>
 80089a0:	080099b9 	.word	0x080099b9

080089a4 <_scanf_i>:
 80089a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a8:	460c      	mov	r4, r1
 80089aa:	4698      	mov	r8, r3
 80089ac:	4b72      	ldr	r3, [pc, #456]	; (8008b78 <_scanf_i+0x1d4>)
 80089ae:	b087      	sub	sp, #28
 80089b0:	4682      	mov	sl, r0
 80089b2:	4616      	mov	r6, r2
 80089b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089b8:	ab03      	add	r3, sp, #12
 80089ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089be:	4b6f      	ldr	r3, [pc, #444]	; (8008b7c <_scanf_i+0x1d8>)
 80089c0:	69a1      	ldr	r1, [r4, #24]
 80089c2:	4a6f      	ldr	r2, [pc, #444]	; (8008b80 <_scanf_i+0x1dc>)
 80089c4:	4627      	mov	r7, r4
 80089c6:	2903      	cmp	r1, #3
 80089c8:	bf18      	it	ne
 80089ca:	461a      	movne	r2, r3
 80089cc:	68a3      	ldr	r3, [r4, #8]
 80089ce:	9201      	str	r2, [sp, #4]
 80089d0:	1e5a      	subs	r2, r3, #1
 80089d2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089d6:	bf81      	itttt	hi
 80089d8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089dc:	eb03 0905 	addhi.w	r9, r3, r5
 80089e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089e4:	60a3      	strhi	r3, [r4, #8]
 80089e6:	f857 3b1c 	ldr.w	r3, [r7], #28
 80089ea:	bf98      	it	ls
 80089ec:	f04f 0900 	movls.w	r9, #0
 80089f0:	463d      	mov	r5, r7
 80089f2:	f04f 0b00 	mov.w	fp, #0
 80089f6:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80089fa:	6023      	str	r3, [r4, #0]
 80089fc:	6831      	ldr	r1, [r6, #0]
 80089fe:	ab03      	add	r3, sp, #12
 8008a00:	2202      	movs	r2, #2
 8008a02:	7809      	ldrb	r1, [r1, #0]
 8008a04:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008a08:	f7fe feca 	bl	80077a0 <memchr>
 8008a0c:	b328      	cbz	r0, 8008a5a <_scanf_i+0xb6>
 8008a0e:	f1bb 0f01 	cmp.w	fp, #1
 8008a12:	d159      	bne.n	8008ac8 <_scanf_i+0x124>
 8008a14:	6862      	ldr	r2, [r4, #4]
 8008a16:	b92a      	cbnz	r2, 8008a24 <_scanf_i+0x80>
 8008a18:	2308      	movs	r3, #8
 8008a1a:	6822      	ldr	r2, [r4, #0]
 8008a1c:	6063      	str	r3, [r4, #4]
 8008a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a22:	6022      	str	r2, [r4, #0]
 8008a24:	6822      	ldr	r2, [r4, #0]
 8008a26:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008a2a:	6022      	str	r2, [r4, #0]
 8008a2c:	68a2      	ldr	r2, [r4, #8]
 8008a2e:	1e51      	subs	r1, r2, #1
 8008a30:	60a1      	str	r1, [r4, #8]
 8008a32:	b192      	cbz	r2, 8008a5a <_scanf_i+0xb6>
 8008a34:	6832      	ldr	r2, [r6, #0]
 8008a36:	1c51      	adds	r1, r2, #1
 8008a38:	6031      	str	r1, [r6, #0]
 8008a3a:	7812      	ldrb	r2, [r2, #0]
 8008a3c:	f805 2b01 	strb.w	r2, [r5], #1
 8008a40:	6872      	ldr	r2, [r6, #4]
 8008a42:	3a01      	subs	r2, #1
 8008a44:	2a00      	cmp	r2, #0
 8008a46:	6072      	str	r2, [r6, #4]
 8008a48:	dc07      	bgt.n	8008a5a <_scanf_i+0xb6>
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4650      	mov	r0, sl
 8008a4e:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008a52:	4790      	blx	r2
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f040 8085 	bne.w	8008b64 <_scanf_i+0x1c0>
 8008a5a:	f10b 0b01 	add.w	fp, fp, #1
 8008a5e:	f1bb 0f03 	cmp.w	fp, #3
 8008a62:	d1cb      	bne.n	80089fc <_scanf_i+0x58>
 8008a64:	6863      	ldr	r3, [r4, #4]
 8008a66:	b90b      	cbnz	r3, 8008a6c <_scanf_i+0xc8>
 8008a68:	230a      	movs	r3, #10
 8008a6a:	6063      	str	r3, [r4, #4]
 8008a6c:	6863      	ldr	r3, [r4, #4]
 8008a6e:	4945      	ldr	r1, [pc, #276]	; (8008b84 <_scanf_i+0x1e0>)
 8008a70:	6960      	ldr	r0, [r4, #20]
 8008a72:	1ac9      	subs	r1, r1, r3
 8008a74:	f000 f8b0 	bl	8008bd8 <__sccl>
 8008a78:	f04f 0b00 	mov.w	fp, #0
 8008a7c:	68a3      	ldr	r3, [r4, #8]
 8008a7e:	6822      	ldr	r2, [r4, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d03d      	beq.n	8008b00 <_scanf_i+0x15c>
 8008a84:	6831      	ldr	r1, [r6, #0]
 8008a86:	6960      	ldr	r0, [r4, #20]
 8008a88:	f891 c000 	ldrb.w	ip, [r1]
 8008a8c:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d035      	beq.n	8008b00 <_scanf_i+0x15c>
 8008a94:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008a98:	d124      	bne.n	8008ae4 <_scanf_i+0x140>
 8008a9a:	0510      	lsls	r0, r2, #20
 8008a9c:	d522      	bpl.n	8008ae4 <_scanf_i+0x140>
 8008a9e:	f10b 0b01 	add.w	fp, fp, #1
 8008aa2:	f1b9 0f00 	cmp.w	r9, #0
 8008aa6:	d003      	beq.n	8008ab0 <_scanf_i+0x10c>
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008aae:	60a3      	str	r3, [r4, #8]
 8008ab0:	6873      	ldr	r3, [r6, #4]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	6073      	str	r3, [r6, #4]
 8008ab8:	dd1b      	ble.n	8008af2 <_scanf_i+0x14e>
 8008aba:	6833      	ldr	r3, [r6, #0]
 8008abc:	3301      	adds	r3, #1
 8008abe:	6033      	str	r3, [r6, #0]
 8008ac0:	68a3      	ldr	r3, [r4, #8]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	60a3      	str	r3, [r4, #8]
 8008ac6:	e7d9      	b.n	8008a7c <_scanf_i+0xd8>
 8008ac8:	f1bb 0f02 	cmp.w	fp, #2
 8008acc:	d1ae      	bne.n	8008a2c <_scanf_i+0x88>
 8008ace:	6822      	ldr	r2, [r4, #0]
 8008ad0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008ad4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008ad8:	d1bf      	bne.n	8008a5a <_scanf_i+0xb6>
 8008ada:	2310      	movs	r3, #16
 8008adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ae0:	6063      	str	r3, [r4, #4]
 8008ae2:	e7a2      	b.n	8008a2a <_scanf_i+0x86>
 8008ae4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008ae8:	6022      	str	r2, [r4, #0]
 8008aea:	780b      	ldrb	r3, [r1, #0]
 8008aec:	f805 3b01 	strb.w	r3, [r5], #1
 8008af0:	e7de      	b.n	8008ab0 <_scanf_i+0x10c>
 8008af2:	4631      	mov	r1, r6
 8008af4:	4650      	mov	r0, sl
 8008af6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008afa:	4798      	blx	r3
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d0df      	beq.n	8008ac0 <_scanf_i+0x11c>
 8008b00:	6823      	ldr	r3, [r4, #0]
 8008b02:	05d9      	lsls	r1, r3, #23
 8008b04:	d50d      	bpl.n	8008b22 <_scanf_i+0x17e>
 8008b06:	42bd      	cmp	r5, r7
 8008b08:	d909      	bls.n	8008b1e <_scanf_i+0x17a>
 8008b0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008b0e:	4632      	mov	r2, r6
 8008b10:	4650      	mov	r0, sl
 8008b12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b16:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008b1a:	4798      	blx	r3
 8008b1c:	464d      	mov	r5, r9
 8008b1e:	42bd      	cmp	r5, r7
 8008b20:	d028      	beq.n	8008b74 <_scanf_i+0x1d0>
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	f012 0210 	ands.w	r2, r2, #16
 8008b28:	d113      	bne.n	8008b52 <_scanf_i+0x1ae>
 8008b2a:	702a      	strb	r2, [r5, #0]
 8008b2c:	4639      	mov	r1, r7
 8008b2e:	6863      	ldr	r3, [r4, #4]
 8008b30:	4650      	mov	r0, sl
 8008b32:	9e01      	ldr	r6, [sp, #4]
 8008b34:	47b0      	blx	r6
 8008b36:	f8d8 3000 	ldr.w	r3, [r8]
 8008b3a:	6821      	ldr	r1, [r4, #0]
 8008b3c:	1d1a      	adds	r2, r3, #4
 8008b3e:	f8c8 2000 	str.w	r2, [r8]
 8008b42:	f011 0f20 	tst.w	r1, #32
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	d00f      	beq.n	8008b6a <_scanf_i+0x1c6>
 8008b4a:	6018      	str	r0, [r3, #0]
 8008b4c:	68e3      	ldr	r3, [r4, #12]
 8008b4e:	3301      	adds	r3, #1
 8008b50:	60e3      	str	r3, [r4, #12]
 8008b52:	2000      	movs	r0, #0
 8008b54:	1bed      	subs	r5, r5, r7
 8008b56:	44ab      	add	fp, r5
 8008b58:	6925      	ldr	r5, [r4, #16]
 8008b5a:	445d      	add	r5, fp
 8008b5c:	6125      	str	r5, [r4, #16]
 8008b5e:	b007      	add	sp, #28
 8008b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b64:	f04f 0b00 	mov.w	fp, #0
 8008b68:	e7ca      	b.n	8008b00 <_scanf_i+0x15c>
 8008b6a:	07ca      	lsls	r2, r1, #31
 8008b6c:	bf4c      	ite	mi
 8008b6e:	8018      	strhmi	r0, [r3, #0]
 8008b70:	6018      	strpl	r0, [r3, #0]
 8008b72:	e7eb      	b.n	8008b4c <_scanf_i+0x1a8>
 8008b74:	2001      	movs	r0, #1
 8008b76:	e7f2      	b.n	8008b5e <_scanf_i+0x1ba>
 8008b78:	08009908 	.word	0x08009908
 8008b7c:	08008d69 	.word	0x08008d69
 8008b80:	08006331 	.word	0x08006331
 8008b84:	08009d56 	.word	0x08009d56

08008b88 <_read_r>:
 8008b88:	b538      	push	{r3, r4, r5, lr}
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	4608      	mov	r0, r1
 8008b8e:	4611      	mov	r1, r2
 8008b90:	2200      	movs	r2, #0
 8008b92:	4d05      	ldr	r5, [pc, #20]	; (8008ba8 <_read_r+0x20>)
 8008b94:	602a      	str	r2, [r5, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	f7f8 fc61 	bl	800145e <_read>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	d102      	bne.n	8008ba6 <_read_r+0x1e>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	b103      	cbz	r3, 8008ba6 <_read_r+0x1e>
 8008ba4:	6023      	str	r3, [r4, #0]
 8008ba6:	bd38      	pop	{r3, r4, r5, pc}
 8008ba8:	2000147c 	.word	0x2000147c

08008bac <nan>:
 8008bac:	2000      	movs	r0, #0
 8008bae:	4901      	ldr	r1, [pc, #4]	; (8008bb4 <nan+0x8>)
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	7ff80000 	.word	0x7ff80000

08008bb8 <_sbrk_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	2300      	movs	r3, #0
 8008bbc:	4d05      	ldr	r5, [pc, #20]	; (8008bd4 <_sbrk_r+0x1c>)
 8008bbe:	4604      	mov	r4, r0
 8008bc0:	4608      	mov	r0, r1
 8008bc2:	602b      	str	r3, [r5, #0]
 8008bc4:	f7f8 fcb4 	bl	8001530 <_sbrk>
 8008bc8:	1c43      	adds	r3, r0, #1
 8008bca:	d102      	bne.n	8008bd2 <_sbrk_r+0x1a>
 8008bcc:	682b      	ldr	r3, [r5, #0]
 8008bce:	b103      	cbz	r3, 8008bd2 <_sbrk_r+0x1a>
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	bd38      	pop	{r3, r4, r5, pc}
 8008bd4:	2000147c 	.word	0x2000147c

08008bd8 <__sccl>:
 8008bd8:	b570      	push	{r4, r5, r6, lr}
 8008bda:	780b      	ldrb	r3, [r1, #0]
 8008bdc:	4604      	mov	r4, r0
 8008bde:	2b5e      	cmp	r3, #94	; 0x5e
 8008be0:	bf13      	iteet	ne
 8008be2:	2200      	movne	r2, #0
 8008be4:	2201      	moveq	r2, #1
 8008be6:	784b      	ldrbeq	r3, [r1, #1]
 8008be8:	1c48      	addne	r0, r1, #1
 8008bea:	bf08      	it	eq
 8008bec:	1c88      	addeq	r0, r1, #2
 8008bee:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008bf2:	1e61      	subs	r1, r4, #1
 8008bf4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008bf8:	42a9      	cmp	r1, r5
 8008bfa:	d1fb      	bne.n	8008bf4 <__sccl+0x1c>
 8008bfc:	b90b      	cbnz	r3, 8008c02 <__sccl+0x2a>
 8008bfe:	3801      	subs	r0, #1
 8008c00:	bd70      	pop	{r4, r5, r6, pc}
 8008c02:	f082 0101 	eor.w	r1, r2, #1
 8008c06:	54e1      	strb	r1, [r4, r3]
 8008c08:	1c42      	adds	r2, r0, #1
 8008c0a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8008c0e:	4610      	mov	r0, r2
 8008c10:	2d2d      	cmp	r5, #45	; 0x2d
 8008c12:	f102 36ff 	add.w	r6, r2, #4294967295	; 0xffffffff
 8008c16:	d006      	beq.n	8008c26 <__sccl+0x4e>
 8008c18:	2d5d      	cmp	r5, #93	; 0x5d
 8008c1a:	d0f1      	beq.n	8008c00 <__sccl+0x28>
 8008c1c:	b90d      	cbnz	r5, 8008c22 <__sccl+0x4a>
 8008c1e:	4630      	mov	r0, r6
 8008c20:	e7ee      	b.n	8008c00 <__sccl+0x28>
 8008c22:	462b      	mov	r3, r5
 8008c24:	e7ef      	b.n	8008c06 <__sccl+0x2e>
 8008c26:	7816      	ldrb	r6, [r2, #0]
 8008c28:	2e5d      	cmp	r6, #93	; 0x5d
 8008c2a:	d0fa      	beq.n	8008c22 <__sccl+0x4a>
 8008c2c:	42b3      	cmp	r3, r6
 8008c2e:	dcf8      	bgt.n	8008c22 <__sccl+0x4a>
 8008c30:	4618      	mov	r0, r3
 8008c32:	3001      	adds	r0, #1
 8008c34:	4286      	cmp	r6, r0
 8008c36:	5421      	strb	r1, [r4, r0]
 8008c38:	dcfb      	bgt.n	8008c32 <__sccl+0x5a>
 8008c3a:	43d8      	mvns	r0, r3
 8008c3c:	4430      	add	r0, r6
 8008c3e:	42b3      	cmp	r3, r6
 8008c40:	bfa8      	it	ge
 8008c42:	2000      	movge	r0, #0
 8008c44:	1c5d      	adds	r5, r3, #1
 8008c46:	182b      	adds	r3, r5, r0
 8008c48:	3202      	adds	r2, #2
 8008c4a:	e7de      	b.n	8008c0a <__sccl+0x32>

08008c4c <strncmp>:
 8008c4c:	b510      	push	{r4, lr}
 8008c4e:	b16a      	cbz	r2, 8008c6c <strncmp+0x20>
 8008c50:	3901      	subs	r1, #1
 8008c52:	1884      	adds	r4, r0, r2
 8008c54:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008c58:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d103      	bne.n	8008c68 <strncmp+0x1c>
 8008c60:	42a0      	cmp	r0, r4
 8008c62:	d001      	beq.n	8008c68 <strncmp+0x1c>
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d1f5      	bne.n	8008c54 <strncmp+0x8>
 8008c68:	1a98      	subs	r0, r3, r2
 8008c6a:	bd10      	pop	{r4, pc}
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	e7fc      	b.n	8008c6a <strncmp+0x1e>

08008c70 <_strtoul_l.isra.0>:
 8008c70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c74:	468c      	mov	ip, r1
 8008c76:	4686      	mov	lr, r0
 8008c78:	4e3a      	ldr	r6, [pc, #232]	; (8008d64 <_strtoul_l.isra.0+0xf4>)
 8008c7a:	4660      	mov	r0, ip
 8008c7c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008c80:	5da5      	ldrb	r5, [r4, r6]
 8008c82:	f015 0508 	ands.w	r5, r5, #8
 8008c86:	d1f8      	bne.n	8008c7a <_strtoul_l.isra.0+0xa>
 8008c88:	2c2d      	cmp	r4, #45	; 0x2d
 8008c8a:	d134      	bne.n	8008cf6 <_strtoul_l.isra.0+0x86>
 8008c8c:	f04f 0801 	mov.w	r8, #1
 8008c90:	f89c 4000 	ldrb.w	r4, [ip]
 8008c94:	f100 0c02 	add.w	ip, r0, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d05e      	beq.n	8008d5a <_strtoul_l.isra.0+0xea>
 8008c9c:	2b10      	cmp	r3, #16
 8008c9e:	d10c      	bne.n	8008cba <_strtoul_l.isra.0+0x4a>
 8008ca0:	2c30      	cmp	r4, #48	; 0x30
 8008ca2:	d10a      	bne.n	8008cba <_strtoul_l.isra.0+0x4a>
 8008ca4:	f89c 0000 	ldrb.w	r0, [ip]
 8008ca8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008cac:	2858      	cmp	r0, #88	; 0x58
 8008cae:	d14f      	bne.n	8008d50 <_strtoul_l.isra.0+0xe0>
 8008cb0:	2310      	movs	r3, #16
 8008cb2:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008cb6:	f10c 0c02 	add.w	ip, ip, #2
 8008cba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008cbe:	fbb7 f7f3 	udiv	r7, r7, r3
 8008cc2:	2500      	movs	r5, #0
 8008cc4:	fb03 f907 	mul.w	r9, r3, r7
 8008cc8:	4628      	mov	r0, r5
 8008cca:	ea6f 0909 	mvn.w	r9, r9
 8008cce:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008cd2:	2e09      	cmp	r6, #9
 8008cd4:	d818      	bhi.n	8008d08 <_strtoul_l.isra.0+0x98>
 8008cd6:	4634      	mov	r4, r6
 8008cd8:	42a3      	cmp	r3, r4
 8008cda:	dd24      	ble.n	8008d26 <_strtoul_l.isra.0+0xb6>
 8008cdc:	2d00      	cmp	r5, #0
 8008cde:	db1f      	blt.n	8008d20 <_strtoul_l.isra.0+0xb0>
 8008ce0:	4287      	cmp	r7, r0
 8008ce2:	d31d      	bcc.n	8008d20 <_strtoul_l.isra.0+0xb0>
 8008ce4:	d101      	bne.n	8008cea <_strtoul_l.isra.0+0x7a>
 8008ce6:	45a1      	cmp	r9, r4
 8008ce8:	db1a      	blt.n	8008d20 <_strtoul_l.isra.0+0xb0>
 8008cea:	2501      	movs	r5, #1
 8008cec:	fb00 4003 	mla	r0, r0, r3, r4
 8008cf0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008cf4:	e7eb      	b.n	8008cce <_strtoul_l.isra.0+0x5e>
 8008cf6:	2c2b      	cmp	r4, #43	; 0x2b
 8008cf8:	bf08      	it	eq
 8008cfa:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008cfe:	46a8      	mov	r8, r5
 8008d00:	bf08      	it	eq
 8008d02:	f100 0c02 	addeq.w	ip, r0, #2
 8008d06:	e7c7      	b.n	8008c98 <_strtoul_l.isra.0+0x28>
 8008d08:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008d0c:	2e19      	cmp	r6, #25
 8008d0e:	d801      	bhi.n	8008d14 <_strtoul_l.isra.0+0xa4>
 8008d10:	3c37      	subs	r4, #55	; 0x37
 8008d12:	e7e1      	b.n	8008cd8 <_strtoul_l.isra.0+0x68>
 8008d14:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008d18:	2e19      	cmp	r6, #25
 8008d1a:	d804      	bhi.n	8008d26 <_strtoul_l.isra.0+0xb6>
 8008d1c:	3c57      	subs	r4, #87	; 0x57
 8008d1e:	e7db      	b.n	8008cd8 <_strtoul_l.isra.0+0x68>
 8008d20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008d24:	e7e4      	b.n	8008cf0 <_strtoul_l.isra.0+0x80>
 8008d26:	2d00      	cmp	r5, #0
 8008d28:	da07      	bge.n	8008d3a <_strtoul_l.isra.0+0xca>
 8008d2a:	2322      	movs	r3, #34	; 0x22
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d30:	f8ce 3000 	str.w	r3, [lr]
 8008d34:	b942      	cbnz	r2, 8008d48 <_strtoul_l.isra.0+0xd8>
 8008d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d3a:	f1b8 0f00 	cmp.w	r8, #0
 8008d3e:	d000      	beq.n	8008d42 <_strtoul_l.isra.0+0xd2>
 8008d40:	4240      	negs	r0, r0
 8008d42:	2a00      	cmp	r2, #0
 8008d44:	d0f7      	beq.n	8008d36 <_strtoul_l.isra.0+0xc6>
 8008d46:	b10d      	cbz	r5, 8008d4c <_strtoul_l.isra.0+0xdc>
 8008d48:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8008d4c:	6011      	str	r1, [r2, #0]
 8008d4e:	e7f2      	b.n	8008d36 <_strtoul_l.isra.0+0xc6>
 8008d50:	2430      	movs	r4, #48	; 0x30
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1b1      	bne.n	8008cba <_strtoul_l.isra.0+0x4a>
 8008d56:	2308      	movs	r3, #8
 8008d58:	e7af      	b.n	8008cba <_strtoul_l.isra.0+0x4a>
 8008d5a:	2c30      	cmp	r4, #48	; 0x30
 8008d5c:	d0a2      	beq.n	8008ca4 <_strtoul_l.isra.0+0x34>
 8008d5e:	230a      	movs	r3, #10
 8008d60:	e7ab      	b.n	8008cba <_strtoul_l.isra.0+0x4a>
 8008d62:	bf00      	nop
 8008d64:	080099b9 	.word	0x080099b9

08008d68 <_strtoul_r>:
 8008d68:	f7ff bf82 	b.w	8008c70 <_strtoul_l.isra.0>

08008d6c <__submore>:
 8008d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d70:	460c      	mov	r4, r1
 8008d72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008d74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d78:	4299      	cmp	r1, r3
 8008d7a:	d11b      	bne.n	8008db4 <__submore+0x48>
 8008d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008d80:	f7ff fa2e 	bl	80081e0 <_malloc_r>
 8008d84:	b918      	cbnz	r0, 8008d8e <__submore+0x22>
 8008d86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d92:	63a3      	str	r3, [r4, #56]	; 0x38
 8008d94:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008d98:	6360      	str	r0, [r4, #52]	; 0x34
 8008d9a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008d9e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008da2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008da6:	7043      	strb	r3, [r0, #1]
 8008da8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008dac:	7003      	strb	r3, [r0, #0]
 8008dae:	6020      	str	r0, [r4, #0]
 8008db0:	2000      	movs	r0, #0
 8008db2:	e7ea      	b.n	8008d8a <__submore+0x1e>
 8008db4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008db6:	0077      	lsls	r7, r6, #1
 8008db8:	463a      	mov	r2, r7
 8008dba:	f000 fa2d 	bl	8009218 <_realloc_r>
 8008dbe:	4605      	mov	r5, r0
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d0e0      	beq.n	8008d86 <__submore+0x1a>
 8008dc4:	eb00 0806 	add.w	r8, r0, r6
 8008dc8:	4601      	mov	r1, r0
 8008dca:	4632      	mov	r2, r6
 8008dcc:	4640      	mov	r0, r8
 8008dce:	f7fb fcf1 	bl	80047b4 <memcpy>
 8008dd2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008dd6:	f8c4 8000 	str.w	r8, [r4]
 8008dda:	e7e9      	b.n	8008db0 <__submore+0x44>

08008ddc <__ascii_wctomb>:
 8008ddc:	4603      	mov	r3, r0
 8008dde:	4608      	mov	r0, r1
 8008de0:	b141      	cbz	r1, 8008df4 <__ascii_wctomb+0x18>
 8008de2:	2aff      	cmp	r2, #255	; 0xff
 8008de4:	d904      	bls.n	8008df0 <__ascii_wctomb+0x14>
 8008de6:	228a      	movs	r2, #138	; 0x8a
 8008de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dec:	601a      	str	r2, [r3, #0]
 8008dee:	4770      	bx	lr
 8008df0:	2001      	movs	r0, #1
 8008df2:	700a      	strb	r2, [r1, #0]
 8008df4:	4770      	bx	lr
	...

08008df8 <__assert_func>:
 8008df8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dfa:	4614      	mov	r4, r2
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	4b09      	ldr	r3, [pc, #36]	; (8008e24 <__assert_func+0x2c>)
 8008e00:	4605      	mov	r5, r0
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	68d8      	ldr	r0, [r3, #12]
 8008e06:	b14c      	cbz	r4, 8008e1c <__assert_func+0x24>
 8008e08:	4b07      	ldr	r3, [pc, #28]	; (8008e28 <__assert_func+0x30>)
 8008e0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e0e:	9100      	str	r1, [sp, #0]
 8008e10:	462b      	mov	r3, r5
 8008e12:	4906      	ldr	r1, [pc, #24]	; (8008e2c <__assert_func+0x34>)
 8008e14:	f000 f9a6 	bl	8009164 <fiprintf>
 8008e18:	f000 fc3c 	bl	8009694 <abort>
 8008e1c:	4b04      	ldr	r3, [pc, #16]	; (8008e30 <__assert_func+0x38>)
 8008e1e:	461c      	mov	r4, r3
 8008e20:	e7f3      	b.n	8008e0a <__assert_func+0x12>
 8008e22:	bf00      	nop
 8008e24:	200000bc 	.word	0x200000bc
 8008e28:	08009d58 	.word	0x08009d58
 8008e2c:	08009d65 	.word	0x08009d65
 8008e30:	08009d93 	.word	0x08009d93

08008e34 <__sflush_r>:
 8008e34:	898a      	ldrh	r2, [r1, #12]
 8008e36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	0710      	lsls	r0, r2, #28
 8008e3e:	460c      	mov	r4, r1
 8008e40:	d458      	bmi.n	8008ef4 <__sflush_r+0xc0>
 8008e42:	684b      	ldr	r3, [r1, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	dc05      	bgt.n	8008e54 <__sflush_r+0x20>
 8008e48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	dc02      	bgt.n	8008e54 <__sflush_r+0x20>
 8008e4e:	2000      	movs	r0, #0
 8008e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e56:	2e00      	cmp	r6, #0
 8008e58:	d0f9      	beq.n	8008e4e <__sflush_r+0x1a>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e60:	682f      	ldr	r7, [r5, #0]
 8008e62:	602b      	str	r3, [r5, #0]
 8008e64:	d032      	beq.n	8008ecc <__sflush_r+0x98>
 8008e66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e68:	89a3      	ldrh	r3, [r4, #12]
 8008e6a:	075a      	lsls	r2, r3, #29
 8008e6c:	d505      	bpl.n	8008e7a <__sflush_r+0x46>
 8008e6e:	6863      	ldr	r3, [r4, #4]
 8008e70:	1ac0      	subs	r0, r0, r3
 8008e72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e74:	b10b      	cbz	r3, 8008e7a <__sflush_r+0x46>
 8008e76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e78:	1ac0      	subs	r0, r0, r3
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e80:	4628      	mov	r0, r5
 8008e82:	6a21      	ldr	r1, [r4, #32]
 8008e84:	47b0      	blx	r6
 8008e86:	1c43      	adds	r3, r0, #1
 8008e88:	89a3      	ldrh	r3, [r4, #12]
 8008e8a:	d106      	bne.n	8008e9a <__sflush_r+0x66>
 8008e8c:	6829      	ldr	r1, [r5, #0]
 8008e8e:	291d      	cmp	r1, #29
 8008e90:	d82c      	bhi.n	8008eec <__sflush_r+0xb8>
 8008e92:	4a2a      	ldr	r2, [pc, #168]	; (8008f3c <__sflush_r+0x108>)
 8008e94:	40ca      	lsrs	r2, r1
 8008e96:	07d6      	lsls	r6, r2, #31
 8008e98:	d528      	bpl.n	8008eec <__sflush_r+0xb8>
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	6062      	str	r2, [r4, #4]
 8008e9e:	6922      	ldr	r2, [r4, #16]
 8008ea0:	04d9      	lsls	r1, r3, #19
 8008ea2:	6022      	str	r2, [r4, #0]
 8008ea4:	d504      	bpl.n	8008eb0 <__sflush_r+0x7c>
 8008ea6:	1c42      	adds	r2, r0, #1
 8008ea8:	d101      	bne.n	8008eae <__sflush_r+0x7a>
 8008eaa:	682b      	ldr	r3, [r5, #0]
 8008eac:	b903      	cbnz	r3, 8008eb0 <__sflush_r+0x7c>
 8008eae:	6560      	str	r0, [r4, #84]	; 0x54
 8008eb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eb2:	602f      	str	r7, [r5, #0]
 8008eb4:	2900      	cmp	r1, #0
 8008eb6:	d0ca      	beq.n	8008e4e <__sflush_r+0x1a>
 8008eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ebc:	4299      	cmp	r1, r3
 8008ebe:	d002      	beq.n	8008ec6 <__sflush_r+0x92>
 8008ec0:	4628      	mov	r0, r5
 8008ec2:	f7ff f941 	bl	8008148 <_free_r>
 8008ec6:	2000      	movs	r0, #0
 8008ec8:	6360      	str	r0, [r4, #52]	; 0x34
 8008eca:	e7c1      	b.n	8008e50 <__sflush_r+0x1c>
 8008ecc:	6a21      	ldr	r1, [r4, #32]
 8008ece:	2301      	movs	r3, #1
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	47b0      	blx	r6
 8008ed4:	1c41      	adds	r1, r0, #1
 8008ed6:	d1c7      	bne.n	8008e68 <__sflush_r+0x34>
 8008ed8:	682b      	ldr	r3, [r5, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0c4      	beq.n	8008e68 <__sflush_r+0x34>
 8008ede:	2b1d      	cmp	r3, #29
 8008ee0:	d001      	beq.n	8008ee6 <__sflush_r+0xb2>
 8008ee2:	2b16      	cmp	r3, #22
 8008ee4:	d101      	bne.n	8008eea <__sflush_r+0xb6>
 8008ee6:	602f      	str	r7, [r5, #0]
 8008ee8:	e7b1      	b.n	8008e4e <__sflush_r+0x1a>
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef0:	81a3      	strh	r3, [r4, #12]
 8008ef2:	e7ad      	b.n	8008e50 <__sflush_r+0x1c>
 8008ef4:	690f      	ldr	r7, [r1, #16]
 8008ef6:	2f00      	cmp	r7, #0
 8008ef8:	d0a9      	beq.n	8008e4e <__sflush_r+0x1a>
 8008efa:	0793      	lsls	r3, r2, #30
 8008efc:	bf18      	it	ne
 8008efe:	2300      	movne	r3, #0
 8008f00:	680e      	ldr	r6, [r1, #0]
 8008f02:	bf08      	it	eq
 8008f04:	694b      	ldreq	r3, [r1, #20]
 8008f06:	eba6 0807 	sub.w	r8, r6, r7
 8008f0a:	600f      	str	r7, [r1, #0]
 8008f0c:	608b      	str	r3, [r1, #8]
 8008f0e:	f1b8 0f00 	cmp.w	r8, #0
 8008f12:	dd9c      	ble.n	8008e4e <__sflush_r+0x1a>
 8008f14:	4643      	mov	r3, r8
 8008f16:	463a      	mov	r2, r7
 8008f18:	4628      	mov	r0, r5
 8008f1a:	6a21      	ldr	r1, [r4, #32]
 8008f1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f1e:	47b0      	blx	r6
 8008f20:	2800      	cmp	r0, #0
 8008f22:	dc06      	bgt.n	8008f32 <__sflush_r+0xfe>
 8008f24:	89a3      	ldrh	r3, [r4, #12]
 8008f26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f2e:	81a3      	strh	r3, [r4, #12]
 8008f30:	e78e      	b.n	8008e50 <__sflush_r+0x1c>
 8008f32:	4407      	add	r7, r0
 8008f34:	eba8 0800 	sub.w	r8, r8, r0
 8008f38:	e7e9      	b.n	8008f0e <__sflush_r+0xda>
 8008f3a:	bf00      	nop
 8008f3c:	20400001 	.word	0x20400001

08008f40 <_fflush_r>:
 8008f40:	b538      	push	{r3, r4, r5, lr}
 8008f42:	690b      	ldr	r3, [r1, #16]
 8008f44:	4605      	mov	r5, r0
 8008f46:	460c      	mov	r4, r1
 8008f48:	b913      	cbnz	r3, 8008f50 <_fflush_r+0x10>
 8008f4a:	2500      	movs	r5, #0
 8008f4c:	4628      	mov	r0, r5
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	b118      	cbz	r0, 8008f5a <_fflush_r+0x1a>
 8008f52:	6983      	ldr	r3, [r0, #24]
 8008f54:	b90b      	cbnz	r3, 8008f5a <_fflush_r+0x1a>
 8008f56:	f000 f887 	bl	8009068 <__sinit>
 8008f5a:	4b14      	ldr	r3, [pc, #80]	; (8008fac <_fflush_r+0x6c>)
 8008f5c:	429c      	cmp	r4, r3
 8008f5e:	d11b      	bne.n	8008f98 <_fflush_r+0x58>
 8008f60:	686c      	ldr	r4, [r5, #4]
 8008f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d0ef      	beq.n	8008f4a <_fflush_r+0xa>
 8008f6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f6c:	07d0      	lsls	r0, r2, #31
 8008f6e:	d404      	bmi.n	8008f7a <_fflush_r+0x3a>
 8008f70:	0599      	lsls	r1, r3, #22
 8008f72:	d402      	bmi.n	8008f7a <_fflush_r+0x3a>
 8008f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f76:	f000 f927 	bl	80091c8 <__retarget_lock_acquire_recursive>
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f7ff ff59 	bl	8008e34 <__sflush_r>
 8008f82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f84:	4605      	mov	r5, r0
 8008f86:	07da      	lsls	r2, r3, #31
 8008f88:	d4e0      	bmi.n	8008f4c <_fflush_r+0xc>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	059b      	lsls	r3, r3, #22
 8008f8e:	d4dd      	bmi.n	8008f4c <_fflush_r+0xc>
 8008f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f92:	f000 f91a 	bl	80091ca <__retarget_lock_release_recursive>
 8008f96:	e7d9      	b.n	8008f4c <_fflush_r+0xc>
 8008f98:	4b05      	ldr	r3, [pc, #20]	; (8008fb0 <_fflush_r+0x70>)
 8008f9a:	429c      	cmp	r4, r3
 8008f9c:	d101      	bne.n	8008fa2 <_fflush_r+0x62>
 8008f9e:	68ac      	ldr	r4, [r5, #8]
 8008fa0:	e7df      	b.n	8008f62 <_fflush_r+0x22>
 8008fa2:	4b04      	ldr	r3, [pc, #16]	; (8008fb4 <_fflush_r+0x74>)
 8008fa4:	429c      	cmp	r4, r3
 8008fa6:	bf08      	it	eq
 8008fa8:	68ec      	ldreq	r4, [r5, #12]
 8008faa:	e7da      	b.n	8008f62 <_fflush_r+0x22>
 8008fac:	08009db4 	.word	0x08009db4
 8008fb0:	08009dd4 	.word	0x08009dd4
 8008fb4:	08009d94 	.word	0x08009d94

08008fb8 <std>:
 8008fb8:	2300      	movs	r3, #0
 8008fba:	b510      	push	{r4, lr}
 8008fbc:	4604      	mov	r4, r0
 8008fbe:	e9c0 3300 	strd	r3, r3, [r0]
 8008fc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fc6:	6083      	str	r3, [r0, #8]
 8008fc8:	8181      	strh	r1, [r0, #12]
 8008fca:	6643      	str	r3, [r0, #100]	; 0x64
 8008fcc:	81c2      	strh	r2, [r0, #14]
 8008fce:	6183      	str	r3, [r0, #24]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	2208      	movs	r2, #8
 8008fd4:	305c      	adds	r0, #92	; 0x5c
 8008fd6:	f7fb fbfb 	bl	80047d0 <memset>
 8008fda:	4b05      	ldr	r3, [pc, #20]	; (8008ff0 <std+0x38>)
 8008fdc:	6224      	str	r4, [r4, #32]
 8008fde:	6263      	str	r3, [r4, #36]	; 0x24
 8008fe0:	4b04      	ldr	r3, [pc, #16]	; (8008ff4 <std+0x3c>)
 8008fe2:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fe4:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <std+0x40>)
 8008fe6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fe8:	4b04      	ldr	r3, [pc, #16]	; (8008ffc <std+0x44>)
 8008fea:	6323      	str	r3, [r4, #48]	; 0x30
 8008fec:	bd10      	pop	{r4, pc}
 8008fee:	bf00      	nop
 8008ff0:	08005561 	.word	0x08005561
 8008ff4:	08005587 	.word	0x08005587
 8008ff8:	080055bf 	.word	0x080055bf
 8008ffc:	080055e3 	.word	0x080055e3

08009000 <_cleanup_r>:
 8009000:	4901      	ldr	r1, [pc, #4]	; (8009008 <_cleanup_r+0x8>)
 8009002:	f000 b8c1 	b.w	8009188 <_fwalk_reent>
 8009006:	bf00      	nop
 8009008:	08008f41 	.word	0x08008f41

0800900c <__sfmoreglue>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	2568      	movs	r5, #104	; 0x68
 8009010:	1e4a      	subs	r2, r1, #1
 8009012:	4355      	muls	r5, r2
 8009014:	460e      	mov	r6, r1
 8009016:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800901a:	f7ff f8e1 	bl	80081e0 <_malloc_r>
 800901e:	4604      	mov	r4, r0
 8009020:	b140      	cbz	r0, 8009034 <__sfmoreglue+0x28>
 8009022:	2100      	movs	r1, #0
 8009024:	e9c0 1600 	strd	r1, r6, [r0]
 8009028:	300c      	adds	r0, #12
 800902a:	60a0      	str	r0, [r4, #8]
 800902c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009030:	f7fb fbce 	bl	80047d0 <memset>
 8009034:	4620      	mov	r0, r4
 8009036:	bd70      	pop	{r4, r5, r6, pc}

08009038 <__sfp_lock_acquire>:
 8009038:	4801      	ldr	r0, [pc, #4]	; (8009040 <__sfp_lock_acquire+0x8>)
 800903a:	f000 b8c5 	b.w	80091c8 <__retarget_lock_acquire_recursive>
 800903e:	bf00      	nop
 8009040:	20001488 	.word	0x20001488

08009044 <__sfp_lock_release>:
 8009044:	4801      	ldr	r0, [pc, #4]	; (800904c <__sfp_lock_release+0x8>)
 8009046:	f000 b8c0 	b.w	80091ca <__retarget_lock_release_recursive>
 800904a:	bf00      	nop
 800904c:	20001488 	.word	0x20001488

08009050 <__sinit_lock_acquire>:
 8009050:	4801      	ldr	r0, [pc, #4]	; (8009058 <__sinit_lock_acquire+0x8>)
 8009052:	f000 b8b9 	b.w	80091c8 <__retarget_lock_acquire_recursive>
 8009056:	bf00      	nop
 8009058:	20001483 	.word	0x20001483

0800905c <__sinit_lock_release>:
 800905c:	4801      	ldr	r0, [pc, #4]	; (8009064 <__sinit_lock_release+0x8>)
 800905e:	f000 b8b4 	b.w	80091ca <__retarget_lock_release_recursive>
 8009062:	bf00      	nop
 8009064:	20001483 	.word	0x20001483

08009068 <__sinit>:
 8009068:	b510      	push	{r4, lr}
 800906a:	4604      	mov	r4, r0
 800906c:	f7ff fff0 	bl	8009050 <__sinit_lock_acquire>
 8009070:	69a3      	ldr	r3, [r4, #24]
 8009072:	b11b      	cbz	r3, 800907c <__sinit+0x14>
 8009074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009078:	f7ff bff0 	b.w	800905c <__sinit_lock_release>
 800907c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009080:	6523      	str	r3, [r4, #80]	; 0x50
 8009082:	4b13      	ldr	r3, [pc, #76]	; (80090d0 <__sinit+0x68>)
 8009084:	4a13      	ldr	r2, [pc, #76]	; (80090d4 <__sinit+0x6c>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	62a2      	str	r2, [r4, #40]	; 0x28
 800908a:	42a3      	cmp	r3, r4
 800908c:	bf08      	it	eq
 800908e:	2301      	moveq	r3, #1
 8009090:	4620      	mov	r0, r4
 8009092:	bf08      	it	eq
 8009094:	61a3      	streq	r3, [r4, #24]
 8009096:	f000 f81f 	bl	80090d8 <__sfp>
 800909a:	6060      	str	r0, [r4, #4]
 800909c:	4620      	mov	r0, r4
 800909e:	f000 f81b 	bl	80090d8 <__sfp>
 80090a2:	60a0      	str	r0, [r4, #8]
 80090a4:	4620      	mov	r0, r4
 80090a6:	f000 f817 	bl	80090d8 <__sfp>
 80090aa:	2200      	movs	r2, #0
 80090ac:	2104      	movs	r1, #4
 80090ae:	60e0      	str	r0, [r4, #12]
 80090b0:	6860      	ldr	r0, [r4, #4]
 80090b2:	f7ff ff81 	bl	8008fb8 <std>
 80090b6:	2201      	movs	r2, #1
 80090b8:	2109      	movs	r1, #9
 80090ba:	68a0      	ldr	r0, [r4, #8]
 80090bc:	f7ff ff7c 	bl	8008fb8 <std>
 80090c0:	2202      	movs	r2, #2
 80090c2:	2112      	movs	r1, #18
 80090c4:	68e0      	ldr	r0, [r4, #12]
 80090c6:	f7ff ff77 	bl	8008fb8 <std>
 80090ca:	2301      	movs	r3, #1
 80090cc:	61a3      	str	r3, [r4, #24]
 80090ce:	e7d1      	b.n	8009074 <__sinit+0xc>
 80090d0:	0800992c 	.word	0x0800992c
 80090d4:	08009001 	.word	0x08009001

080090d8 <__sfp>:
 80090d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090da:	4607      	mov	r7, r0
 80090dc:	f7ff ffac 	bl	8009038 <__sfp_lock_acquire>
 80090e0:	4b1e      	ldr	r3, [pc, #120]	; (800915c <__sfp+0x84>)
 80090e2:	681e      	ldr	r6, [r3, #0]
 80090e4:	69b3      	ldr	r3, [r6, #24]
 80090e6:	b913      	cbnz	r3, 80090ee <__sfp+0x16>
 80090e8:	4630      	mov	r0, r6
 80090ea:	f7ff ffbd 	bl	8009068 <__sinit>
 80090ee:	3648      	adds	r6, #72	; 0x48
 80090f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80090f4:	3b01      	subs	r3, #1
 80090f6:	d503      	bpl.n	8009100 <__sfp+0x28>
 80090f8:	6833      	ldr	r3, [r6, #0]
 80090fa:	b30b      	cbz	r3, 8009140 <__sfp+0x68>
 80090fc:	6836      	ldr	r6, [r6, #0]
 80090fe:	e7f7      	b.n	80090f0 <__sfp+0x18>
 8009100:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009104:	b9d5      	cbnz	r5, 800913c <__sfp+0x64>
 8009106:	4b16      	ldr	r3, [pc, #88]	; (8009160 <__sfp+0x88>)
 8009108:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800910c:	60e3      	str	r3, [r4, #12]
 800910e:	6665      	str	r5, [r4, #100]	; 0x64
 8009110:	f000 f859 	bl	80091c6 <__retarget_lock_init_recursive>
 8009114:	f7ff ff96 	bl	8009044 <__sfp_lock_release>
 8009118:	2208      	movs	r2, #8
 800911a:	4629      	mov	r1, r5
 800911c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009120:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009124:	6025      	str	r5, [r4, #0]
 8009126:	61a5      	str	r5, [r4, #24]
 8009128:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800912c:	f7fb fb50 	bl	80047d0 <memset>
 8009130:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009134:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009138:	4620      	mov	r0, r4
 800913a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800913c:	3468      	adds	r4, #104	; 0x68
 800913e:	e7d9      	b.n	80090f4 <__sfp+0x1c>
 8009140:	2104      	movs	r1, #4
 8009142:	4638      	mov	r0, r7
 8009144:	f7ff ff62 	bl	800900c <__sfmoreglue>
 8009148:	4604      	mov	r4, r0
 800914a:	6030      	str	r0, [r6, #0]
 800914c:	2800      	cmp	r0, #0
 800914e:	d1d5      	bne.n	80090fc <__sfp+0x24>
 8009150:	f7ff ff78 	bl	8009044 <__sfp_lock_release>
 8009154:	230c      	movs	r3, #12
 8009156:	603b      	str	r3, [r7, #0]
 8009158:	e7ee      	b.n	8009138 <__sfp+0x60>
 800915a:	bf00      	nop
 800915c:	0800992c 	.word	0x0800992c
 8009160:	ffff0001 	.word	0xffff0001

08009164 <fiprintf>:
 8009164:	b40e      	push	{r1, r2, r3}
 8009166:	b503      	push	{r0, r1, lr}
 8009168:	4601      	mov	r1, r0
 800916a:	ab03      	add	r3, sp, #12
 800916c:	4805      	ldr	r0, [pc, #20]	; (8009184 <fiprintf+0x20>)
 800916e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009172:	6800      	ldr	r0, [r0, #0]
 8009174:	9301      	str	r3, [sp, #4]
 8009176:	f000 f89d 	bl	80092b4 <_vfiprintf_r>
 800917a:	b002      	add	sp, #8
 800917c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009180:	b003      	add	sp, #12
 8009182:	4770      	bx	lr
 8009184:	200000bc 	.word	0x200000bc

08009188 <_fwalk_reent>:
 8009188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800918c:	4606      	mov	r6, r0
 800918e:	4688      	mov	r8, r1
 8009190:	2700      	movs	r7, #0
 8009192:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009196:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800919a:	f1b9 0901 	subs.w	r9, r9, #1
 800919e:	d505      	bpl.n	80091ac <_fwalk_reent+0x24>
 80091a0:	6824      	ldr	r4, [r4, #0]
 80091a2:	2c00      	cmp	r4, #0
 80091a4:	d1f7      	bne.n	8009196 <_fwalk_reent+0xe>
 80091a6:	4638      	mov	r0, r7
 80091a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091ac:	89ab      	ldrh	r3, [r5, #12]
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d907      	bls.n	80091c2 <_fwalk_reent+0x3a>
 80091b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091b6:	3301      	adds	r3, #1
 80091b8:	d003      	beq.n	80091c2 <_fwalk_reent+0x3a>
 80091ba:	4629      	mov	r1, r5
 80091bc:	4630      	mov	r0, r6
 80091be:	47c0      	blx	r8
 80091c0:	4307      	orrs	r7, r0
 80091c2:	3568      	adds	r5, #104	; 0x68
 80091c4:	e7e9      	b.n	800919a <_fwalk_reent+0x12>

080091c6 <__retarget_lock_init_recursive>:
 80091c6:	4770      	bx	lr

080091c8 <__retarget_lock_acquire_recursive>:
 80091c8:	4770      	bx	lr

080091ca <__retarget_lock_release_recursive>:
 80091ca:	4770      	bx	lr

080091cc <memmove>:
 80091cc:	4288      	cmp	r0, r1
 80091ce:	b510      	push	{r4, lr}
 80091d0:	eb01 0402 	add.w	r4, r1, r2
 80091d4:	d902      	bls.n	80091dc <memmove+0x10>
 80091d6:	4284      	cmp	r4, r0
 80091d8:	4623      	mov	r3, r4
 80091da:	d807      	bhi.n	80091ec <memmove+0x20>
 80091dc:	1e43      	subs	r3, r0, #1
 80091de:	42a1      	cmp	r1, r4
 80091e0:	d008      	beq.n	80091f4 <memmove+0x28>
 80091e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091ea:	e7f8      	b.n	80091de <memmove+0x12>
 80091ec:	4601      	mov	r1, r0
 80091ee:	4402      	add	r2, r0
 80091f0:	428a      	cmp	r2, r1
 80091f2:	d100      	bne.n	80091f6 <memmove+0x2a>
 80091f4:	bd10      	pop	{r4, pc}
 80091f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091fe:	e7f7      	b.n	80091f0 <memmove+0x24>

08009200 <__malloc_lock>:
 8009200:	4801      	ldr	r0, [pc, #4]	; (8009208 <__malloc_lock+0x8>)
 8009202:	f7ff bfe1 	b.w	80091c8 <__retarget_lock_acquire_recursive>
 8009206:	bf00      	nop
 8009208:	20001484 	.word	0x20001484

0800920c <__malloc_unlock>:
 800920c:	4801      	ldr	r0, [pc, #4]	; (8009214 <__malloc_unlock+0x8>)
 800920e:	f7ff bfdc 	b.w	80091ca <__retarget_lock_release_recursive>
 8009212:	bf00      	nop
 8009214:	20001484 	.word	0x20001484

08009218 <_realloc_r>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	4607      	mov	r7, r0
 800921c:	4614      	mov	r4, r2
 800921e:	460e      	mov	r6, r1
 8009220:	b921      	cbnz	r1, 800922c <_realloc_r+0x14>
 8009222:	4611      	mov	r1, r2
 8009224:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009228:	f7fe bfda 	b.w	80081e0 <_malloc_r>
 800922c:	b922      	cbnz	r2, 8009238 <_realloc_r+0x20>
 800922e:	f7fe ff8b 	bl	8008148 <_free_r>
 8009232:	4625      	mov	r5, r4
 8009234:	4628      	mov	r0, r5
 8009236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009238:	f000 fa98 	bl	800976c <_malloc_usable_size_r>
 800923c:	42a0      	cmp	r0, r4
 800923e:	d20f      	bcs.n	8009260 <_realloc_r+0x48>
 8009240:	4621      	mov	r1, r4
 8009242:	4638      	mov	r0, r7
 8009244:	f7fe ffcc 	bl	80081e0 <_malloc_r>
 8009248:	4605      	mov	r5, r0
 800924a:	2800      	cmp	r0, #0
 800924c:	d0f2      	beq.n	8009234 <_realloc_r+0x1c>
 800924e:	4631      	mov	r1, r6
 8009250:	4622      	mov	r2, r4
 8009252:	f7fb faaf 	bl	80047b4 <memcpy>
 8009256:	4631      	mov	r1, r6
 8009258:	4638      	mov	r0, r7
 800925a:	f7fe ff75 	bl	8008148 <_free_r>
 800925e:	e7e9      	b.n	8009234 <_realloc_r+0x1c>
 8009260:	4635      	mov	r5, r6
 8009262:	e7e7      	b.n	8009234 <_realloc_r+0x1c>

08009264 <__sfputc_r>:
 8009264:	6893      	ldr	r3, [r2, #8]
 8009266:	b410      	push	{r4}
 8009268:	3b01      	subs	r3, #1
 800926a:	2b00      	cmp	r3, #0
 800926c:	6093      	str	r3, [r2, #8]
 800926e:	da07      	bge.n	8009280 <__sfputc_r+0x1c>
 8009270:	6994      	ldr	r4, [r2, #24]
 8009272:	42a3      	cmp	r3, r4
 8009274:	db01      	blt.n	800927a <__sfputc_r+0x16>
 8009276:	290a      	cmp	r1, #10
 8009278:	d102      	bne.n	8009280 <__sfputc_r+0x1c>
 800927a:	bc10      	pop	{r4}
 800927c:	f000 b94a 	b.w	8009514 <__swbuf_r>
 8009280:	6813      	ldr	r3, [r2, #0]
 8009282:	1c58      	adds	r0, r3, #1
 8009284:	6010      	str	r0, [r2, #0]
 8009286:	7019      	strb	r1, [r3, #0]
 8009288:	4608      	mov	r0, r1
 800928a:	bc10      	pop	{r4}
 800928c:	4770      	bx	lr

0800928e <__sfputs_r>:
 800928e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009290:	4606      	mov	r6, r0
 8009292:	460f      	mov	r7, r1
 8009294:	4614      	mov	r4, r2
 8009296:	18d5      	adds	r5, r2, r3
 8009298:	42ac      	cmp	r4, r5
 800929a:	d101      	bne.n	80092a0 <__sfputs_r+0x12>
 800929c:	2000      	movs	r0, #0
 800929e:	e007      	b.n	80092b0 <__sfputs_r+0x22>
 80092a0:	463a      	mov	r2, r7
 80092a2:	4630      	mov	r0, r6
 80092a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092a8:	f7ff ffdc 	bl	8009264 <__sfputc_r>
 80092ac:	1c43      	adds	r3, r0, #1
 80092ae:	d1f3      	bne.n	8009298 <__sfputs_r+0xa>
 80092b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092b4 <_vfiprintf_r>:
 80092b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b8:	460d      	mov	r5, r1
 80092ba:	4614      	mov	r4, r2
 80092bc:	4698      	mov	r8, r3
 80092be:	4606      	mov	r6, r0
 80092c0:	b09d      	sub	sp, #116	; 0x74
 80092c2:	b118      	cbz	r0, 80092cc <_vfiprintf_r+0x18>
 80092c4:	6983      	ldr	r3, [r0, #24]
 80092c6:	b90b      	cbnz	r3, 80092cc <_vfiprintf_r+0x18>
 80092c8:	f7ff fece 	bl	8009068 <__sinit>
 80092cc:	4b89      	ldr	r3, [pc, #548]	; (80094f4 <_vfiprintf_r+0x240>)
 80092ce:	429d      	cmp	r5, r3
 80092d0:	d11b      	bne.n	800930a <_vfiprintf_r+0x56>
 80092d2:	6875      	ldr	r5, [r6, #4]
 80092d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d6:	07d9      	lsls	r1, r3, #31
 80092d8:	d405      	bmi.n	80092e6 <_vfiprintf_r+0x32>
 80092da:	89ab      	ldrh	r3, [r5, #12]
 80092dc:	059a      	lsls	r2, r3, #22
 80092de:	d402      	bmi.n	80092e6 <_vfiprintf_r+0x32>
 80092e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092e2:	f7ff ff71 	bl	80091c8 <__retarget_lock_acquire_recursive>
 80092e6:	89ab      	ldrh	r3, [r5, #12]
 80092e8:	071b      	lsls	r3, r3, #28
 80092ea:	d501      	bpl.n	80092f0 <_vfiprintf_r+0x3c>
 80092ec:	692b      	ldr	r3, [r5, #16]
 80092ee:	b9eb      	cbnz	r3, 800932c <_vfiprintf_r+0x78>
 80092f0:	4629      	mov	r1, r5
 80092f2:	4630      	mov	r0, r6
 80092f4:	f000 f960 	bl	80095b8 <__swsetup_r>
 80092f8:	b1c0      	cbz	r0, 800932c <_vfiprintf_r+0x78>
 80092fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092fc:	07dc      	lsls	r4, r3, #31
 80092fe:	d50e      	bpl.n	800931e <_vfiprintf_r+0x6a>
 8009300:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009304:	b01d      	add	sp, #116	; 0x74
 8009306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930a:	4b7b      	ldr	r3, [pc, #492]	; (80094f8 <_vfiprintf_r+0x244>)
 800930c:	429d      	cmp	r5, r3
 800930e:	d101      	bne.n	8009314 <_vfiprintf_r+0x60>
 8009310:	68b5      	ldr	r5, [r6, #8]
 8009312:	e7df      	b.n	80092d4 <_vfiprintf_r+0x20>
 8009314:	4b79      	ldr	r3, [pc, #484]	; (80094fc <_vfiprintf_r+0x248>)
 8009316:	429d      	cmp	r5, r3
 8009318:	bf08      	it	eq
 800931a:	68f5      	ldreq	r5, [r6, #12]
 800931c:	e7da      	b.n	80092d4 <_vfiprintf_r+0x20>
 800931e:	89ab      	ldrh	r3, [r5, #12]
 8009320:	0598      	lsls	r0, r3, #22
 8009322:	d4ed      	bmi.n	8009300 <_vfiprintf_r+0x4c>
 8009324:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009326:	f7ff ff50 	bl	80091ca <__retarget_lock_release_recursive>
 800932a:	e7e9      	b.n	8009300 <_vfiprintf_r+0x4c>
 800932c:	2300      	movs	r3, #0
 800932e:	9309      	str	r3, [sp, #36]	; 0x24
 8009330:	2320      	movs	r3, #32
 8009332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009336:	2330      	movs	r3, #48	; 0x30
 8009338:	f04f 0901 	mov.w	r9, #1
 800933c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009340:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009500 <_vfiprintf_r+0x24c>
 8009344:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009348:	4623      	mov	r3, r4
 800934a:	469a      	mov	sl, r3
 800934c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009350:	b10a      	cbz	r2, 8009356 <_vfiprintf_r+0xa2>
 8009352:	2a25      	cmp	r2, #37	; 0x25
 8009354:	d1f9      	bne.n	800934a <_vfiprintf_r+0x96>
 8009356:	ebba 0b04 	subs.w	fp, sl, r4
 800935a:	d00b      	beq.n	8009374 <_vfiprintf_r+0xc0>
 800935c:	465b      	mov	r3, fp
 800935e:	4622      	mov	r2, r4
 8009360:	4629      	mov	r1, r5
 8009362:	4630      	mov	r0, r6
 8009364:	f7ff ff93 	bl	800928e <__sfputs_r>
 8009368:	3001      	adds	r0, #1
 800936a:	f000 80aa 	beq.w	80094c2 <_vfiprintf_r+0x20e>
 800936e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009370:	445a      	add	r2, fp
 8009372:	9209      	str	r2, [sp, #36]	; 0x24
 8009374:	f89a 3000 	ldrb.w	r3, [sl]
 8009378:	2b00      	cmp	r3, #0
 800937a:	f000 80a2 	beq.w	80094c2 <_vfiprintf_r+0x20e>
 800937e:	2300      	movs	r3, #0
 8009380:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009384:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009388:	f10a 0a01 	add.w	sl, sl, #1
 800938c:	9304      	str	r3, [sp, #16]
 800938e:	9307      	str	r3, [sp, #28]
 8009390:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009394:	931a      	str	r3, [sp, #104]	; 0x68
 8009396:	4654      	mov	r4, sl
 8009398:	2205      	movs	r2, #5
 800939a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800939e:	4858      	ldr	r0, [pc, #352]	; (8009500 <_vfiprintf_r+0x24c>)
 80093a0:	f7fe f9fe 	bl	80077a0 <memchr>
 80093a4:	9a04      	ldr	r2, [sp, #16]
 80093a6:	b9d8      	cbnz	r0, 80093e0 <_vfiprintf_r+0x12c>
 80093a8:	06d1      	lsls	r1, r2, #27
 80093aa:	bf44      	itt	mi
 80093ac:	2320      	movmi	r3, #32
 80093ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093b2:	0713      	lsls	r3, r2, #28
 80093b4:	bf44      	itt	mi
 80093b6:	232b      	movmi	r3, #43	; 0x2b
 80093b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093bc:	f89a 3000 	ldrb.w	r3, [sl]
 80093c0:	2b2a      	cmp	r3, #42	; 0x2a
 80093c2:	d015      	beq.n	80093f0 <_vfiprintf_r+0x13c>
 80093c4:	4654      	mov	r4, sl
 80093c6:	2000      	movs	r0, #0
 80093c8:	f04f 0c0a 	mov.w	ip, #10
 80093cc:	9a07      	ldr	r2, [sp, #28]
 80093ce:	4621      	mov	r1, r4
 80093d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093d4:	3b30      	subs	r3, #48	; 0x30
 80093d6:	2b09      	cmp	r3, #9
 80093d8:	d94e      	bls.n	8009478 <_vfiprintf_r+0x1c4>
 80093da:	b1b0      	cbz	r0, 800940a <_vfiprintf_r+0x156>
 80093dc:	9207      	str	r2, [sp, #28]
 80093de:	e014      	b.n	800940a <_vfiprintf_r+0x156>
 80093e0:	eba0 0308 	sub.w	r3, r0, r8
 80093e4:	fa09 f303 	lsl.w	r3, r9, r3
 80093e8:	4313      	orrs	r3, r2
 80093ea:	46a2      	mov	sl, r4
 80093ec:	9304      	str	r3, [sp, #16]
 80093ee:	e7d2      	b.n	8009396 <_vfiprintf_r+0xe2>
 80093f0:	9b03      	ldr	r3, [sp, #12]
 80093f2:	1d19      	adds	r1, r3, #4
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	9103      	str	r1, [sp, #12]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	bfbb      	ittet	lt
 80093fc:	425b      	neglt	r3, r3
 80093fe:	f042 0202 	orrlt.w	r2, r2, #2
 8009402:	9307      	strge	r3, [sp, #28]
 8009404:	9307      	strlt	r3, [sp, #28]
 8009406:	bfb8      	it	lt
 8009408:	9204      	strlt	r2, [sp, #16]
 800940a:	7823      	ldrb	r3, [r4, #0]
 800940c:	2b2e      	cmp	r3, #46	; 0x2e
 800940e:	d10c      	bne.n	800942a <_vfiprintf_r+0x176>
 8009410:	7863      	ldrb	r3, [r4, #1]
 8009412:	2b2a      	cmp	r3, #42	; 0x2a
 8009414:	d135      	bne.n	8009482 <_vfiprintf_r+0x1ce>
 8009416:	9b03      	ldr	r3, [sp, #12]
 8009418:	3402      	adds	r4, #2
 800941a:	1d1a      	adds	r2, r3, #4
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	9203      	str	r2, [sp, #12]
 8009420:	2b00      	cmp	r3, #0
 8009422:	bfb8      	it	lt
 8009424:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009428:	9305      	str	r3, [sp, #20]
 800942a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009510 <_vfiprintf_r+0x25c>
 800942e:	2203      	movs	r2, #3
 8009430:	4650      	mov	r0, sl
 8009432:	7821      	ldrb	r1, [r4, #0]
 8009434:	f7fe f9b4 	bl	80077a0 <memchr>
 8009438:	b140      	cbz	r0, 800944c <_vfiprintf_r+0x198>
 800943a:	2340      	movs	r3, #64	; 0x40
 800943c:	eba0 000a 	sub.w	r0, r0, sl
 8009440:	fa03 f000 	lsl.w	r0, r3, r0
 8009444:	9b04      	ldr	r3, [sp, #16]
 8009446:	3401      	adds	r4, #1
 8009448:	4303      	orrs	r3, r0
 800944a:	9304      	str	r3, [sp, #16]
 800944c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009450:	2206      	movs	r2, #6
 8009452:	482c      	ldr	r0, [pc, #176]	; (8009504 <_vfiprintf_r+0x250>)
 8009454:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009458:	f7fe f9a2 	bl	80077a0 <memchr>
 800945c:	2800      	cmp	r0, #0
 800945e:	d03f      	beq.n	80094e0 <_vfiprintf_r+0x22c>
 8009460:	4b29      	ldr	r3, [pc, #164]	; (8009508 <_vfiprintf_r+0x254>)
 8009462:	bb1b      	cbnz	r3, 80094ac <_vfiprintf_r+0x1f8>
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	3307      	adds	r3, #7
 8009468:	f023 0307 	bic.w	r3, r3, #7
 800946c:	3308      	adds	r3, #8
 800946e:	9303      	str	r3, [sp, #12]
 8009470:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009472:	443b      	add	r3, r7
 8009474:	9309      	str	r3, [sp, #36]	; 0x24
 8009476:	e767      	b.n	8009348 <_vfiprintf_r+0x94>
 8009478:	460c      	mov	r4, r1
 800947a:	2001      	movs	r0, #1
 800947c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009480:	e7a5      	b.n	80093ce <_vfiprintf_r+0x11a>
 8009482:	2300      	movs	r3, #0
 8009484:	f04f 0c0a 	mov.w	ip, #10
 8009488:	4619      	mov	r1, r3
 800948a:	3401      	adds	r4, #1
 800948c:	9305      	str	r3, [sp, #20]
 800948e:	4620      	mov	r0, r4
 8009490:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009494:	3a30      	subs	r2, #48	; 0x30
 8009496:	2a09      	cmp	r2, #9
 8009498:	d903      	bls.n	80094a2 <_vfiprintf_r+0x1ee>
 800949a:	2b00      	cmp	r3, #0
 800949c:	d0c5      	beq.n	800942a <_vfiprintf_r+0x176>
 800949e:	9105      	str	r1, [sp, #20]
 80094a0:	e7c3      	b.n	800942a <_vfiprintf_r+0x176>
 80094a2:	4604      	mov	r4, r0
 80094a4:	2301      	movs	r3, #1
 80094a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80094aa:	e7f0      	b.n	800948e <_vfiprintf_r+0x1da>
 80094ac:	ab03      	add	r3, sp, #12
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	462a      	mov	r2, r5
 80094b2:	4630      	mov	r0, r6
 80094b4:	4b15      	ldr	r3, [pc, #84]	; (800950c <_vfiprintf_r+0x258>)
 80094b6:	a904      	add	r1, sp, #16
 80094b8:	f7fb fa30 	bl	800491c <_printf_float>
 80094bc:	4607      	mov	r7, r0
 80094be:	1c78      	adds	r0, r7, #1
 80094c0:	d1d6      	bne.n	8009470 <_vfiprintf_r+0x1bc>
 80094c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094c4:	07d9      	lsls	r1, r3, #31
 80094c6:	d405      	bmi.n	80094d4 <_vfiprintf_r+0x220>
 80094c8:	89ab      	ldrh	r3, [r5, #12]
 80094ca:	059a      	lsls	r2, r3, #22
 80094cc:	d402      	bmi.n	80094d4 <_vfiprintf_r+0x220>
 80094ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094d0:	f7ff fe7b 	bl	80091ca <__retarget_lock_release_recursive>
 80094d4:	89ab      	ldrh	r3, [r5, #12]
 80094d6:	065b      	lsls	r3, r3, #25
 80094d8:	f53f af12 	bmi.w	8009300 <_vfiprintf_r+0x4c>
 80094dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094de:	e711      	b.n	8009304 <_vfiprintf_r+0x50>
 80094e0:	ab03      	add	r3, sp, #12
 80094e2:	9300      	str	r3, [sp, #0]
 80094e4:	462a      	mov	r2, r5
 80094e6:	4630      	mov	r0, r6
 80094e8:	4b08      	ldr	r3, [pc, #32]	; (800950c <_vfiprintf_r+0x258>)
 80094ea:	a904      	add	r1, sp, #16
 80094ec:	f7fb fcb2 	bl	8004e54 <_printf_i>
 80094f0:	e7e4      	b.n	80094bc <_vfiprintf_r+0x208>
 80094f2:	bf00      	nop
 80094f4:	08009db4 	.word	0x08009db4
 80094f8:	08009dd4 	.word	0x08009dd4
 80094fc:	08009d94 	.word	0x08009d94
 8009500:	08009d2c 	.word	0x08009d2c
 8009504:	08009d36 	.word	0x08009d36
 8009508:	0800491d 	.word	0x0800491d
 800950c:	0800928f 	.word	0x0800928f
 8009510:	08009d32 	.word	0x08009d32

08009514 <__swbuf_r>:
 8009514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009516:	460e      	mov	r6, r1
 8009518:	4614      	mov	r4, r2
 800951a:	4605      	mov	r5, r0
 800951c:	b118      	cbz	r0, 8009526 <__swbuf_r+0x12>
 800951e:	6983      	ldr	r3, [r0, #24]
 8009520:	b90b      	cbnz	r3, 8009526 <__swbuf_r+0x12>
 8009522:	f7ff fda1 	bl	8009068 <__sinit>
 8009526:	4b21      	ldr	r3, [pc, #132]	; (80095ac <__swbuf_r+0x98>)
 8009528:	429c      	cmp	r4, r3
 800952a:	d12b      	bne.n	8009584 <__swbuf_r+0x70>
 800952c:	686c      	ldr	r4, [r5, #4]
 800952e:	69a3      	ldr	r3, [r4, #24]
 8009530:	60a3      	str	r3, [r4, #8]
 8009532:	89a3      	ldrh	r3, [r4, #12]
 8009534:	071a      	lsls	r2, r3, #28
 8009536:	d52f      	bpl.n	8009598 <__swbuf_r+0x84>
 8009538:	6923      	ldr	r3, [r4, #16]
 800953a:	b36b      	cbz	r3, 8009598 <__swbuf_r+0x84>
 800953c:	6923      	ldr	r3, [r4, #16]
 800953e:	6820      	ldr	r0, [r4, #0]
 8009540:	b2f6      	uxtb	r6, r6
 8009542:	1ac0      	subs	r0, r0, r3
 8009544:	6963      	ldr	r3, [r4, #20]
 8009546:	4637      	mov	r7, r6
 8009548:	4283      	cmp	r3, r0
 800954a:	dc04      	bgt.n	8009556 <__swbuf_r+0x42>
 800954c:	4621      	mov	r1, r4
 800954e:	4628      	mov	r0, r5
 8009550:	f7ff fcf6 	bl	8008f40 <_fflush_r>
 8009554:	bb30      	cbnz	r0, 80095a4 <__swbuf_r+0x90>
 8009556:	68a3      	ldr	r3, [r4, #8]
 8009558:	3001      	adds	r0, #1
 800955a:	3b01      	subs	r3, #1
 800955c:	60a3      	str	r3, [r4, #8]
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	1c5a      	adds	r2, r3, #1
 8009562:	6022      	str	r2, [r4, #0]
 8009564:	701e      	strb	r6, [r3, #0]
 8009566:	6963      	ldr	r3, [r4, #20]
 8009568:	4283      	cmp	r3, r0
 800956a:	d004      	beq.n	8009576 <__swbuf_r+0x62>
 800956c:	89a3      	ldrh	r3, [r4, #12]
 800956e:	07db      	lsls	r3, r3, #31
 8009570:	d506      	bpl.n	8009580 <__swbuf_r+0x6c>
 8009572:	2e0a      	cmp	r6, #10
 8009574:	d104      	bne.n	8009580 <__swbuf_r+0x6c>
 8009576:	4621      	mov	r1, r4
 8009578:	4628      	mov	r0, r5
 800957a:	f7ff fce1 	bl	8008f40 <_fflush_r>
 800957e:	b988      	cbnz	r0, 80095a4 <__swbuf_r+0x90>
 8009580:	4638      	mov	r0, r7
 8009582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009584:	4b0a      	ldr	r3, [pc, #40]	; (80095b0 <__swbuf_r+0x9c>)
 8009586:	429c      	cmp	r4, r3
 8009588:	d101      	bne.n	800958e <__swbuf_r+0x7a>
 800958a:	68ac      	ldr	r4, [r5, #8]
 800958c:	e7cf      	b.n	800952e <__swbuf_r+0x1a>
 800958e:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <__swbuf_r+0xa0>)
 8009590:	429c      	cmp	r4, r3
 8009592:	bf08      	it	eq
 8009594:	68ec      	ldreq	r4, [r5, #12]
 8009596:	e7ca      	b.n	800952e <__swbuf_r+0x1a>
 8009598:	4621      	mov	r1, r4
 800959a:	4628      	mov	r0, r5
 800959c:	f000 f80c 	bl	80095b8 <__swsetup_r>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d0cb      	beq.n	800953c <__swbuf_r+0x28>
 80095a4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80095a8:	e7ea      	b.n	8009580 <__swbuf_r+0x6c>
 80095aa:	bf00      	nop
 80095ac:	08009db4 	.word	0x08009db4
 80095b0:	08009dd4 	.word	0x08009dd4
 80095b4:	08009d94 	.word	0x08009d94

080095b8 <__swsetup_r>:
 80095b8:	4b32      	ldr	r3, [pc, #200]	; (8009684 <__swsetup_r+0xcc>)
 80095ba:	b570      	push	{r4, r5, r6, lr}
 80095bc:	681d      	ldr	r5, [r3, #0]
 80095be:	4606      	mov	r6, r0
 80095c0:	460c      	mov	r4, r1
 80095c2:	b125      	cbz	r5, 80095ce <__swsetup_r+0x16>
 80095c4:	69ab      	ldr	r3, [r5, #24]
 80095c6:	b913      	cbnz	r3, 80095ce <__swsetup_r+0x16>
 80095c8:	4628      	mov	r0, r5
 80095ca:	f7ff fd4d 	bl	8009068 <__sinit>
 80095ce:	4b2e      	ldr	r3, [pc, #184]	; (8009688 <__swsetup_r+0xd0>)
 80095d0:	429c      	cmp	r4, r3
 80095d2:	d10f      	bne.n	80095f4 <__swsetup_r+0x3c>
 80095d4:	686c      	ldr	r4, [r5, #4]
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095dc:	0719      	lsls	r1, r3, #28
 80095de:	d42c      	bmi.n	800963a <__swsetup_r+0x82>
 80095e0:	06dd      	lsls	r5, r3, #27
 80095e2:	d411      	bmi.n	8009608 <__swsetup_r+0x50>
 80095e4:	2309      	movs	r3, #9
 80095e6:	6033      	str	r3, [r6, #0]
 80095e8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095f0:	81a3      	strh	r3, [r4, #12]
 80095f2:	e03e      	b.n	8009672 <__swsetup_r+0xba>
 80095f4:	4b25      	ldr	r3, [pc, #148]	; (800968c <__swsetup_r+0xd4>)
 80095f6:	429c      	cmp	r4, r3
 80095f8:	d101      	bne.n	80095fe <__swsetup_r+0x46>
 80095fa:	68ac      	ldr	r4, [r5, #8]
 80095fc:	e7eb      	b.n	80095d6 <__swsetup_r+0x1e>
 80095fe:	4b24      	ldr	r3, [pc, #144]	; (8009690 <__swsetup_r+0xd8>)
 8009600:	429c      	cmp	r4, r3
 8009602:	bf08      	it	eq
 8009604:	68ec      	ldreq	r4, [r5, #12]
 8009606:	e7e6      	b.n	80095d6 <__swsetup_r+0x1e>
 8009608:	0758      	lsls	r0, r3, #29
 800960a:	d512      	bpl.n	8009632 <__swsetup_r+0x7a>
 800960c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800960e:	b141      	cbz	r1, 8009622 <__swsetup_r+0x6a>
 8009610:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009614:	4299      	cmp	r1, r3
 8009616:	d002      	beq.n	800961e <__swsetup_r+0x66>
 8009618:	4630      	mov	r0, r6
 800961a:	f7fe fd95 	bl	8008148 <_free_r>
 800961e:	2300      	movs	r3, #0
 8009620:	6363      	str	r3, [r4, #52]	; 0x34
 8009622:	89a3      	ldrh	r3, [r4, #12]
 8009624:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009628:	81a3      	strh	r3, [r4, #12]
 800962a:	2300      	movs	r3, #0
 800962c:	6063      	str	r3, [r4, #4]
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f043 0308 	orr.w	r3, r3, #8
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	6923      	ldr	r3, [r4, #16]
 800963c:	b94b      	cbnz	r3, 8009652 <__swsetup_r+0x9a>
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009648:	d003      	beq.n	8009652 <__swsetup_r+0x9a>
 800964a:	4621      	mov	r1, r4
 800964c:	4630      	mov	r0, r6
 800964e:	f000 f84d 	bl	80096ec <__smakebuf_r>
 8009652:	89a0      	ldrh	r0, [r4, #12]
 8009654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009658:	f010 0301 	ands.w	r3, r0, #1
 800965c:	d00a      	beq.n	8009674 <__swsetup_r+0xbc>
 800965e:	2300      	movs	r3, #0
 8009660:	60a3      	str	r3, [r4, #8]
 8009662:	6963      	ldr	r3, [r4, #20]
 8009664:	425b      	negs	r3, r3
 8009666:	61a3      	str	r3, [r4, #24]
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	b943      	cbnz	r3, 800967e <__swsetup_r+0xc6>
 800966c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009670:	d1ba      	bne.n	80095e8 <__swsetup_r+0x30>
 8009672:	bd70      	pop	{r4, r5, r6, pc}
 8009674:	0781      	lsls	r1, r0, #30
 8009676:	bf58      	it	pl
 8009678:	6963      	ldrpl	r3, [r4, #20]
 800967a:	60a3      	str	r3, [r4, #8]
 800967c:	e7f4      	b.n	8009668 <__swsetup_r+0xb0>
 800967e:	2000      	movs	r0, #0
 8009680:	e7f7      	b.n	8009672 <__swsetup_r+0xba>
 8009682:	bf00      	nop
 8009684:	200000bc 	.word	0x200000bc
 8009688:	08009db4 	.word	0x08009db4
 800968c:	08009dd4 	.word	0x08009dd4
 8009690:	08009d94 	.word	0x08009d94

08009694 <abort>:
 8009694:	2006      	movs	r0, #6
 8009696:	b508      	push	{r3, lr}
 8009698:	f000 f898 	bl	80097cc <raise>
 800969c:	2001      	movs	r0, #1
 800969e:	f7f7 fed4 	bl	800144a <_exit>

080096a2 <__swhatbuf_r>:
 80096a2:	b570      	push	{r4, r5, r6, lr}
 80096a4:	460e      	mov	r6, r1
 80096a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096aa:	4614      	mov	r4, r2
 80096ac:	2900      	cmp	r1, #0
 80096ae:	461d      	mov	r5, r3
 80096b0:	b096      	sub	sp, #88	; 0x58
 80096b2:	da07      	bge.n	80096c4 <__swhatbuf_r+0x22>
 80096b4:	2300      	movs	r3, #0
 80096b6:	602b      	str	r3, [r5, #0]
 80096b8:	89b3      	ldrh	r3, [r6, #12]
 80096ba:	061a      	lsls	r2, r3, #24
 80096bc:	d410      	bmi.n	80096e0 <__swhatbuf_r+0x3e>
 80096be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096c2:	e00e      	b.n	80096e2 <__swhatbuf_r+0x40>
 80096c4:	466a      	mov	r2, sp
 80096c6:	f000 f89d 	bl	8009804 <_fstat_r>
 80096ca:	2800      	cmp	r0, #0
 80096cc:	dbf2      	blt.n	80096b4 <__swhatbuf_r+0x12>
 80096ce:	9a01      	ldr	r2, [sp, #4]
 80096d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80096d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80096d8:	425a      	negs	r2, r3
 80096da:	415a      	adcs	r2, r3
 80096dc:	602a      	str	r2, [r5, #0]
 80096de:	e7ee      	b.n	80096be <__swhatbuf_r+0x1c>
 80096e0:	2340      	movs	r3, #64	; 0x40
 80096e2:	2000      	movs	r0, #0
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	b016      	add	sp, #88	; 0x58
 80096e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080096ec <__smakebuf_r>:
 80096ec:	898b      	ldrh	r3, [r1, #12]
 80096ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096f0:	079d      	lsls	r5, r3, #30
 80096f2:	4606      	mov	r6, r0
 80096f4:	460c      	mov	r4, r1
 80096f6:	d507      	bpl.n	8009708 <__smakebuf_r+0x1c>
 80096f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096fc:	6023      	str	r3, [r4, #0]
 80096fe:	6123      	str	r3, [r4, #16]
 8009700:	2301      	movs	r3, #1
 8009702:	6163      	str	r3, [r4, #20]
 8009704:	b002      	add	sp, #8
 8009706:	bd70      	pop	{r4, r5, r6, pc}
 8009708:	466a      	mov	r2, sp
 800970a:	ab01      	add	r3, sp, #4
 800970c:	f7ff ffc9 	bl	80096a2 <__swhatbuf_r>
 8009710:	9900      	ldr	r1, [sp, #0]
 8009712:	4605      	mov	r5, r0
 8009714:	4630      	mov	r0, r6
 8009716:	f7fe fd63 	bl	80081e0 <_malloc_r>
 800971a:	b948      	cbnz	r0, 8009730 <__smakebuf_r+0x44>
 800971c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009720:	059a      	lsls	r2, r3, #22
 8009722:	d4ef      	bmi.n	8009704 <__smakebuf_r+0x18>
 8009724:	f023 0303 	bic.w	r3, r3, #3
 8009728:	f043 0302 	orr.w	r3, r3, #2
 800972c:	81a3      	strh	r3, [r4, #12]
 800972e:	e7e3      	b.n	80096f8 <__smakebuf_r+0xc>
 8009730:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <__smakebuf_r+0x7c>)
 8009732:	62b3      	str	r3, [r6, #40]	; 0x28
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	6020      	str	r0, [r4, #0]
 8009738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800973c:	81a3      	strh	r3, [r4, #12]
 800973e:	9b00      	ldr	r3, [sp, #0]
 8009740:	6120      	str	r0, [r4, #16]
 8009742:	6163      	str	r3, [r4, #20]
 8009744:	9b01      	ldr	r3, [sp, #4]
 8009746:	b15b      	cbz	r3, 8009760 <__smakebuf_r+0x74>
 8009748:	4630      	mov	r0, r6
 800974a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800974e:	f000 f86b 	bl	8009828 <_isatty_r>
 8009752:	b128      	cbz	r0, 8009760 <__smakebuf_r+0x74>
 8009754:	89a3      	ldrh	r3, [r4, #12]
 8009756:	f023 0303 	bic.w	r3, r3, #3
 800975a:	f043 0301 	orr.w	r3, r3, #1
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	89a0      	ldrh	r0, [r4, #12]
 8009762:	4305      	orrs	r5, r0
 8009764:	81a5      	strh	r5, [r4, #12]
 8009766:	e7cd      	b.n	8009704 <__smakebuf_r+0x18>
 8009768:	08009001 	.word	0x08009001

0800976c <_malloc_usable_size_r>:
 800976c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009770:	1f18      	subs	r0, r3, #4
 8009772:	2b00      	cmp	r3, #0
 8009774:	bfbc      	itt	lt
 8009776:	580b      	ldrlt	r3, [r1, r0]
 8009778:	18c0      	addlt	r0, r0, r3
 800977a:	4770      	bx	lr

0800977c <_raise_r>:
 800977c:	291f      	cmp	r1, #31
 800977e:	b538      	push	{r3, r4, r5, lr}
 8009780:	4604      	mov	r4, r0
 8009782:	460d      	mov	r5, r1
 8009784:	d904      	bls.n	8009790 <_raise_r+0x14>
 8009786:	2316      	movs	r3, #22
 8009788:	6003      	str	r3, [r0, #0]
 800978a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800978e:	bd38      	pop	{r3, r4, r5, pc}
 8009790:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009792:	b112      	cbz	r2, 800979a <_raise_r+0x1e>
 8009794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009798:	b94b      	cbnz	r3, 80097ae <_raise_r+0x32>
 800979a:	4620      	mov	r0, r4
 800979c:	f000 f830 	bl	8009800 <_getpid_r>
 80097a0:	462a      	mov	r2, r5
 80097a2:	4601      	mov	r1, r0
 80097a4:	4620      	mov	r0, r4
 80097a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097aa:	f000 b817 	b.w	80097dc <_kill_r>
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d00a      	beq.n	80097c8 <_raise_r+0x4c>
 80097b2:	1c59      	adds	r1, r3, #1
 80097b4:	d103      	bne.n	80097be <_raise_r+0x42>
 80097b6:	2316      	movs	r3, #22
 80097b8:	6003      	str	r3, [r0, #0]
 80097ba:	2001      	movs	r0, #1
 80097bc:	e7e7      	b.n	800978e <_raise_r+0x12>
 80097be:	2400      	movs	r4, #0
 80097c0:	4628      	mov	r0, r5
 80097c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097c6:	4798      	blx	r3
 80097c8:	2000      	movs	r0, #0
 80097ca:	e7e0      	b.n	800978e <_raise_r+0x12>

080097cc <raise>:
 80097cc:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <raise+0xc>)
 80097ce:	4601      	mov	r1, r0
 80097d0:	6818      	ldr	r0, [r3, #0]
 80097d2:	f7ff bfd3 	b.w	800977c <_raise_r>
 80097d6:	bf00      	nop
 80097d8:	200000bc 	.word	0x200000bc

080097dc <_kill_r>:
 80097dc:	b538      	push	{r3, r4, r5, lr}
 80097de:	2300      	movs	r3, #0
 80097e0:	4d06      	ldr	r5, [pc, #24]	; (80097fc <_kill_r+0x20>)
 80097e2:	4604      	mov	r4, r0
 80097e4:	4608      	mov	r0, r1
 80097e6:	4611      	mov	r1, r2
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	f7f7 fe1e 	bl	800142a <_kill>
 80097ee:	1c43      	adds	r3, r0, #1
 80097f0:	d102      	bne.n	80097f8 <_kill_r+0x1c>
 80097f2:	682b      	ldr	r3, [r5, #0]
 80097f4:	b103      	cbz	r3, 80097f8 <_kill_r+0x1c>
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	bd38      	pop	{r3, r4, r5, pc}
 80097fa:	bf00      	nop
 80097fc:	2000147c 	.word	0x2000147c

08009800 <_getpid_r>:
 8009800:	f7f7 be0c 	b.w	800141c <_getpid>

08009804 <_fstat_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	2300      	movs	r3, #0
 8009808:	4d06      	ldr	r5, [pc, #24]	; (8009824 <_fstat_r+0x20>)
 800980a:	4604      	mov	r4, r0
 800980c:	4608      	mov	r0, r1
 800980e:	4611      	mov	r1, r2
 8009810:	602b      	str	r3, [r5, #0]
 8009812:	f7f7 fe68 	bl	80014e6 <_fstat>
 8009816:	1c43      	adds	r3, r0, #1
 8009818:	d102      	bne.n	8009820 <_fstat_r+0x1c>
 800981a:	682b      	ldr	r3, [r5, #0]
 800981c:	b103      	cbz	r3, 8009820 <_fstat_r+0x1c>
 800981e:	6023      	str	r3, [r4, #0]
 8009820:	bd38      	pop	{r3, r4, r5, pc}
 8009822:	bf00      	nop
 8009824:	2000147c 	.word	0x2000147c

08009828 <_isatty_r>:
 8009828:	b538      	push	{r3, r4, r5, lr}
 800982a:	2300      	movs	r3, #0
 800982c:	4d05      	ldr	r5, [pc, #20]	; (8009844 <_isatty_r+0x1c>)
 800982e:	4604      	mov	r4, r0
 8009830:	4608      	mov	r0, r1
 8009832:	602b      	str	r3, [r5, #0]
 8009834:	f7f7 fe66 	bl	8001504 <_isatty>
 8009838:	1c43      	adds	r3, r0, #1
 800983a:	d102      	bne.n	8009842 <_isatty_r+0x1a>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	b103      	cbz	r3, 8009842 <_isatty_r+0x1a>
 8009840:	6023      	str	r3, [r4, #0]
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	2000147c 	.word	0x2000147c

08009848 <_init>:
 8009848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984a:	bf00      	nop
 800984c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984e:	bc08      	pop	{r3}
 8009850:	469e      	mov	lr, r3
 8009852:	4770      	bx	lr

08009854 <_fini>:
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	bf00      	nop
 8009858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985a:	bc08      	pop	{r3}
 800985c:	469e      	mov	lr, r3
 800985e:	4770      	bx	lr
