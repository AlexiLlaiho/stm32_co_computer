
stm32_co_computer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c578  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c8  0800c688  0800c688  0001c688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc50  0800cc50  00020a1c  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc50  0800cc50  0001cc50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc58  0800cc58  00020a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cc58  0800cc58  0001cc58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc60  0800cc60  0001cc60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a1c  20000000  0800cc64  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000123c  20000a1c  0800d680  00020a1c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c58  0800d680  00021c58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a1c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013b82  00000000  00000000  00020a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325e  00000000  00000000  000345c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001170  00000000  00000000  00037828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001018  00000000  00000000  00038998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a758  00000000  00000000  000399b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011804  00000000  00000000  00054108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093ebd  00000000  00000000  0006590c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f97c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  000f981c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000a1c 	.word	0x20000a1c
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c670 	.word	0x0800c670

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000a20 	.word	0x20000a20
 800014c:	0800c670 	.word	0x0800c670

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_uldivmod>:
 8000d84:	b953      	cbnz	r3, 8000d9c <__aeabi_uldivmod+0x18>
 8000d86:	b94a      	cbnz	r2, 8000d9c <__aeabi_uldivmod+0x18>
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	bf08      	it	eq
 8000d8c:	2800      	cmpeq	r0, #0
 8000d8e:	bf1c      	itt	ne
 8000d90:	f04f 31ff 	movne.w	r1, #4294967295
 8000d94:	f04f 30ff 	movne.w	r0, #4294967295
 8000d98:	f000 b9a6 	b.w	80010e8 <__aeabi_idiv0>
 8000d9c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da4:	f000 f83e 	bl	8000e24 <__udivmoddi4>
 8000da8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db0:	b004      	add	sp, #16
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_d2lz>:
 8000db4:	b538      	push	{r3, r4, r5, lr}
 8000db6:	460c      	mov	r4, r1
 8000db8:	4605      	mov	r5, r0
 8000dba:	4621      	mov	r1, r4
 8000dbc:	4628      	mov	r0, r5
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	f7ff fdfb 	bl	80009bc <__aeabi_dcmplt>
 8000dc6:	b928      	cbnz	r0, 8000dd4 <__aeabi_d2lz+0x20>
 8000dc8:	4628      	mov	r0, r5
 8000dca:	4621      	mov	r1, r4
 8000dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000dd0:	f000 b80a 	b.w	8000de8 <__aeabi_d2ulz>
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000dda:	f000 f805 	bl	8000de8 <__aeabi_d2ulz>
 8000dde:	4240      	negs	r0, r0
 8000de0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de4:	bd38      	pop	{r3, r4, r5, pc}
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2ulz>:
 8000de8:	b5d0      	push	{r4, r6, r7, lr}
 8000dea:	2200      	movs	r2, #0
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <__aeabi_d2ulz+0x34>)
 8000dee:	4606      	mov	r6, r0
 8000df0:	460f      	mov	r7, r1
 8000df2:	f7ff fb71 	bl	80004d8 <__aeabi_dmul>
 8000df6:	f7ff fe47 	bl	8000a88 <__aeabi_d2uiz>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	f7ff faf2 	bl	80003e4 <__aeabi_ui2d>
 8000e00:	2200      	movs	r2, #0
 8000e02:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <__aeabi_d2ulz+0x38>)
 8000e04:	f7ff fb68 	bl	80004d8 <__aeabi_dmul>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	4639      	mov	r1, r7
 8000e10:	f7ff f9aa 	bl	8000168 <__aeabi_dsub>
 8000e14:	f7ff fe38 	bl	8000a88 <__aeabi_d2uiz>
 8000e18:	4621      	mov	r1, r4
 8000e1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000e1c:	3df00000 	.word	0x3df00000
 8000e20:	41f00000 	.word	0x41f00000

08000e24 <__udivmoddi4>:
 8000e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e28:	9e08      	ldr	r6, [sp, #32]
 8000e2a:	460d      	mov	r5, r1
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	468e      	mov	lr, r1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f040 8083 	bne.w	8000f3c <__udivmoddi4+0x118>
 8000e36:	428a      	cmp	r2, r1
 8000e38:	4617      	mov	r7, r2
 8000e3a:	d947      	bls.n	8000ecc <__udivmoddi4+0xa8>
 8000e3c:	fab2 f382 	clz	r3, r2
 8000e40:	b14b      	cbz	r3, 8000e56 <__udivmoddi4+0x32>
 8000e42:	f1c3 0120 	rsb	r1, r3, #32
 8000e46:	fa05 fe03 	lsl.w	lr, r5, r3
 8000e4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000e4e:	409f      	lsls	r7, r3
 8000e50:	ea41 0e0e 	orr.w	lr, r1, lr
 8000e54:	409c      	lsls	r4, r3
 8000e56:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e5a:	fbbe fcf8 	udiv	ip, lr, r8
 8000e5e:	fa1f f987 	uxth.w	r9, r7
 8000e62:	fb08 e21c 	mls	r2, r8, ip, lr
 8000e66:	fb0c f009 	mul.w	r0, ip, r9
 8000e6a:	0c21      	lsrs	r1, r4, #16
 8000e6c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d90a      	bls.n	8000e8a <__udivmoddi4+0x66>
 8000e74:	18ba      	adds	r2, r7, r2
 8000e76:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000e7a:	f080 8118 	bcs.w	80010ae <__udivmoddi4+0x28a>
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	f240 8115 	bls.w	80010ae <__udivmoddi4+0x28a>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	443a      	add	r2, r7
 8000e8a:	1a12      	subs	r2, r2, r0
 8000e8c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000e90:	fb08 2210 	mls	r2, r8, r0, r2
 8000e94:	fb00 f109 	mul.w	r1, r0, r9
 8000e98:	b2a4      	uxth	r4, r4
 8000e9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e9e:	42a1      	cmp	r1, r4
 8000ea0:	d909      	bls.n	8000eb6 <__udivmoddi4+0x92>
 8000ea2:	193c      	adds	r4, r7, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	f080 8103 	bcs.w	80010b2 <__udivmoddi4+0x28e>
 8000eac:	42a1      	cmp	r1, r4
 8000eae:	f240 8100 	bls.w	80010b2 <__udivmoddi4+0x28e>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	443c      	add	r4, r7
 8000eb6:	1a64      	subs	r4, r4, r1
 8000eb8:	2100      	movs	r1, #0
 8000eba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ebe:	b11e      	cbz	r6, 8000ec8 <__udivmoddi4+0xa4>
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	40dc      	lsrs	r4, r3
 8000ec4:	e9c6 4200 	strd	r4, r2, [r6]
 8000ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ecc:	b902      	cbnz	r2, 8000ed0 <__udivmoddi4+0xac>
 8000ece:	deff      	udf	#255	; 0xff
 8000ed0:	fab2 f382 	clz	r3, r2
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d14f      	bne.n	8000f78 <__udivmoddi4+0x154>
 8000ed8:	1a8d      	subs	r5, r1, r2
 8000eda:	2101      	movs	r1, #1
 8000edc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ee0:	fa1f f882 	uxth.w	r8, r2
 8000ee4:	fbb5 fcfe 	udiv	ip, r5, lr
 8000ee8:	fb0e 551c 	mls	r5, lr, ip, r5
 8000eec:	fb08 f00c 	mul.w	r0, r8, ip
 8000ef0:	0c22      	lsrs	r2, r4, #16
 8000ef2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000ef6:	42a8      	cmp	r0, r5
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0xe6>
 8000efa:	197d      	adds	r5, r7, r5
 8000efc:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000f00:	d202      	bcs.n	8000f08 <__udivmoddi4+0xe4>
 8000f02:	42a8      	cmp	r0, r5
 8000f04:	f200 80e9 	bhi.w	80010da <__udivmoddi4+0x2b6>
 8000f08:	4694      	mov	ip, r2
 8000f0a:	1a2d      	subs	r5, r5, r0
 8000f0c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000f10:	fb0e 5510 	mls	r5, lr, r0, r5
 8000f14:	fb08 f800 	mul.w	r8, r8, r0
 8000f18:	b2a4      	uxth	r4, r4
 8000f1a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f1e:	45a0      	cmp	r8, r4
 8000f20:	d907      	bls.n	8000f32 <__udivmoddi4+0x10e>
 8000f22:	193c      	adds	r4, r7, r4
 8000f24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f28:	d202      	bcs.n	8000f30 <__udivmoddi4+0x10c>
 8000f2a:	45a0      	cmp	r8, r4
 8000f2c:	f200 80d9 	bhi.w	80010e2 <__udivmoddi4+0x2be>
 8000f30:	4610      	mov	r0, r2
 8000f32:	eba4 0408 	sub.w	r4, r4, r8
 8000f36:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f3a:	e7c0      	b.n	8000ebe <__udivmoddi4+0x9a>
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x12e>
 8000f40:	2e00      	cmp	r6, #0
 8000f42:	f000 80b1 	beq.w	80010a8 <__udivmoddi4+0x284>
 8000f46:	2100      	movs	r1, #0
 8000f48:	e9c6 0500 	strd	r0, r5, [r6]
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	fab3 f183 	clz	r1, r3
 8000f56:	2900      	cmp	r1, #0
 8000f58:	d14b      	bne.n	8000ff2 <__udivmoddi4+0x1ce>
 8000f5a:	42ab      	cmp	r3, r5
 8000f5c:	d302      	bcc.n	8000f64 <__udivmoddi4+0x140>
 8000f5e:	4282      	cmp	r2, r0
 8000f60:	f200 80b9 	bhi.w	80010d6 <__udivmoddi4+0x2b2>
 8000f64:	1a84      	subs	r4, r0, r2
 8000f66:	eb65 0303 	sbc.w	r3, r5, r3
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	469e      	mov	lr, r3
 8000f6e:	2e00      	cmp	r6, #0
 8000f70:	d0aa      	beq.n	8000ec8 <__udivmoddi4+0xa4>
 8000f72:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f76:	e7a7      	b.n	8000ec8 <__udivmoddi4+0xa4>
 8000f78:	409f      	lsls	r7, r3
 8000f7a:	f1c3 0220 	rsb	r2, r3, #32
 8000f7e:	40d1      	lsrs	r1, r2
 8000f80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f88:	fa1f f887 	uxth.w	r8, r7
 8000f8c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f90:	fa24 f202 	lsr.w	r2, r4, r2
 8000f94:	409d      	lsls	r5, r3
 8000f96:	fb00 fc08 	mul.w	ip, r0, r8
 8000f9a:	432a      	orrs	r2, r5
 8000f9c:	0c15      	lsrs	r5, r2, #16
 8000f9e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000fa2:	45ac      	cmp	ip, r5
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d909      	bls.n	8000fbe <__udivmoddi4+0x19a>
 8000faa:	197d      	adds	r5, r7, r5
 8000fac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fb0:	f080 808f 	bcs.w	80010d2 <__udivmoddi4+0x2ae>
 8000fb4:	45ac      	cmp	ip, r5
 8000fb6:	f240 808c 	bls.w	80010d2 <__udivmoddi4+0x2ae>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	443d      	add	r5, r7
 8000fbe:	eba5 050c 	sub.w	r5, r5, ip
 8000fc2:	fbb5 f1fe 	udiv	r1, r5, lr
 8000fc6:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000fca:	fb01 f908 	mul.w	r9, r1, r8
 8000fce:	b295      	uxth	r5, r2
 8000fd0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000fd4:	45a9      	cmp	r9, r5
 8000fd6:	d907      	bls.n	8000fe8 <__udivmoddi4+0x1c4>
 8000fd8:	197d      	adds	r5, r7, r5
 8000fda:	f101 32ff 	add.w	r2, r1, #4294967295
 8000fde:	d274      	bcs.n	80010ca <__udivmoddi4+0x2a6>
 8000fe0:	45a9      	cmp	r9, r5
 8000fe2:	d972      	bls.n	80010ca <__udivmoddi4+0x2a6>
 8000fe4:	3902      	subs	r1, #2
 8000fe6:	443d      	add	r5, r7
 8000fe8:	eba5 0509 	sub.w	r5, r5, r9
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e778      	b.n	8000ee4 <__udivmoddi4+0xc0>
 8000ff2:	f1c1 0720 	rsb	r7, r1, #32
 8000ff6:	408b      	lsls	r3, r1
 8000ff8:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ffc:	ea4c 0c03 	orr.w	ip, ip, r3
 8001000:	fa25 f407 	lsr.w	r4, r5, r7
 8001004:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001008:	fbb4 f9fe 	udiv	r9, r4, lr
 800100c:	fa1f f88c 	uxth.w	r8, ip
 8001010:	fb0e 4419 	mls	r4, lr, r9, r4
 8001014:	fa20 f307 	lsr.w	r3, r0, r7
 8001018:	fb09 fa08 	mul.w	sl, r9, r8
 800101c:	408d      	lsls	r5, r1
 800101e:	431d      	orrs	r5, r3
 8001020:	0c2b      	lsrs	r3, r5, #16
 8001022:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001026:	45a2      	cmp	sl, r4
 8001028:	fa02 f201 	lsl.w	r2, r2, r1
 800102c:	fa00 f301 	lsl.w	r3, r0, r1
 8001030:	d909      	bls.n	8001046 <__udivmoddi4+0x222>
 8001032:	eb1c 0404 	adds.w	r4, ip, r4
 8001036:	f109 30ff 	add.w	r0, r9, #4294967295
 800103a:	d248      	bcs.n	80010ce <__udivmoddi4+0x2aa>
 800103c:	45a2      	cmp	sl, r4
 800103e:	d946      	bls.n	80010ce <__udivmoddi4+0x2aa>
 8001040:	f1a9 0902 	sub.w	r9, r9, #2
 8001044:	4464      	add	r4, ip
 8001046:	eba4 040a 	sub.w	r4, r4, sl
 800104a:	fbb4 f0fe 	udiv	r0, r4, lr
 800104e:	fb0e 4410 	mls	r4, lr, r0, r4
 8001052:	fb00 fa08 	mul.w	sl, r0, r8
 8001056:	b2ad      	uxth	r5, r5
 8001058:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800105c:	45a2      	cmp	sl, r4
 800105e:	d908      	bls.n	8001072 <__udivmoddi4+0x24e>
 8001060:	eb1c 0404 	adds.w	r4, ip, r4
 8001064:	f100 35ff 	add.w	r5, r0, #4294967295
 8001068:	d22d      	bcs.n	80010c6 <__udivmoddi4+0x2a2>
 800106a:	45a2      	cmp	sl, r4
 800106c:	d92b      	bls.n	80010c6 <__udivmoddi4+0x2a2>
 800106e:	3802      	subs	r0, #2
 8001070:	4464      	add	r4, ip
 8001072:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001076:	fba0 8902 	umull	r8, r9, r0, r2
 800107a:	eba4 040a 	sub.w	r4, r4, sl
 800107e:	454c      	cmp	r4, r9
 8001080:	46c6      	mov	lr, r8
 8001082:	464d      	mov	r5, r9
 8001084:	d319      	bcc.n	80010ba <__udivmoddi4+0x296>
 8001086:	d016      	beq.n	80010b6 <__udivmoddi4+0x292>
 8001088:	b15e      	cbz	r6, 80010a2 <__udivmoddi4+0x27e>
 800108a:	ebb3 020e 	subs.w	r2, r3, lr
 800108e:	eb64 0405 	sbc.w	r4, r4, r5
 8001092:	fa04 f707 	lsl.w	r7, r4, r7
 8001096:	fa22 f301 	lsr.w	r3, r2, r1
 800109a:	431f      	orrs	r7, r3
 800109c:	40cc      	lsrs	r4, r1
 800109e:	e9c6 7400 	strd	r7, r4, [r6]
 80010a2:	2100      	movs	r1, #0
 80010a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010a8:	4631      	mov	r1, r6
 80010aa:	4630      	mov	r0, r6
 80010ac:	e70c      	b.n	8000ec8 <__udivmoddi4+0xa4>
 80010ae:	468c      	mov	ip, r1
 80010b0:	e6eb      	b.n	8000e8a <__udivmoddi4+0x66>
 80010b2:	4610      	mov	r0, r2
 80010b4:	e6ff      	b.n	8000eb6 <__udivmoddi4+0x92>
 80010b6:	4543      	cmp	r3, r8
 80010b8:	d2e6      	bcs.n	8001088 <__udivmoddi4+0x264>
 80010ba:	ebb8 0e02 	subs.w	lr, r8, r2
 80010be:	eb69 050c 	sbc.w	r5, r9, ip
 80010c2:	3801      	subs	r0, #1
 80010c4:	e7e0      	b.n	8001088 <__udivmoddi4+0x264>
 80010c6:	4628      	mov	r0, r5
 80010c8:	e7d3      	b.n	8001072 <__udivmoddi4+0x24e>
 80010ca:	4611      	mov	r1, r2
 80010cc:	e78c      	b.n	8000fe8 <__udivmoddi4+0x1c4>
 80010ce:	4681      	mov	r9, r0
 80010d0:	e7b9      	b.n	8001046 <__udivmoddi4+0x222>
 80010d2:	4608      	mov	r0, r1
 80010d4:	e773      	b.n	8000fbe <__udivmoddi4+0x19a>
 80010d6:	4608      	mov	r0, r1
 80010d8:	e749      	b.n	8000f6e <__udivmoddi4+0x14a>
 80010da:	f1ac 0c02 	sub.w	ip, ip, #2
 80010de:	443d      	add	r5, r7
 80010e0:	e713      	b.n	8000f0a <__udivmoddi4+0xe6>
 80010e2:	3802      	subs	r0, #2
 80010e4:	443c      	add	r4, r7
 80010e6:	e724      	b.n	8000f32 <__udivmoddi4+0x10e>

080010e8 <__aeabi_idiv0>:
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop

080010ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4a06      	ldr	r2, [pc, #24]	; (8001114 <vApplicationGetIdleTaskMemory+0x28>)
 80010fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	4a05      	ldr	r2, [pc, #20]	; (8001118 <vApplicationGetIdleTaskMemory+0x2c>)
 8001102:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2280      	movs	r2, #128	; 0x80
 8001108:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	20000a38 	.word	0x20000a38
 8001118:	20000a8c 	.word	0x20000a8c

0800111c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800111c:	b5b0      	push	{r4, r5, r7, lr}
 800111e:	b090      	sub	sp, #64	; 0x40
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001122:	f000 fccd 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001126:	f000 f863 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112a:	f000 f967 	bl	80013fc <MX_GPIO_Init>
  MX_TIM2_Init();
 800112e:	f000 f89b 	bl	8001268 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001132:	f000 f8e5 	bl	8001300 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001136:	f000 f90d 	bl	8001354 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800113a:	f000 f935 	bl	80013a8 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512);
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <main+0xa8>)
 8001140:	f107 0420 	add.w	r4, r7, #32
 8001144:	461d      	mov	r5, r3
 8001146:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800114a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800114e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f002 fa85 	bl	8003668 <osThreadCreate>
 800115e:	4603      	mov	r3, r0
 8001160:	4a19      	ldr	r2, [pc, #100]	; (80011c8 <main+0xac>)
 8001162:	6013      	str	r3, [r2, #0]

  osThreadDef(ledTask, StartLedTask, osPriorityNormal, 0, 128);
 8001164:	4b19      	ldr	r3, [pc, #100]	; (80011cc <main+0xb0>)
 8001166:	1d3c      	adds	r4, r7, #4
 8001168:	461d      	mov	r5, r3
 800116a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800116c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800116e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f002 fa74 	bl	8003668 <osThreadCreate>
 8001180:	4603      	mov	r3, r0
 8001182:	4a13      	ldr	r2, [pc, #76]	; (80011d0 <main+0xb4>)
 8001184:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  HAL_UART_Receive_IT(&huart1, rgps_data, 1);
 8001186:	2201      	movs	r2, #1
 8001188:	4912      	ldr	r1, [pc, #72]	; (80011d4 <main+0xb8>)
 800118a:	4813      	ldr	r0, [pc, #76]	; (80011d8 <main+0xbc>)
 800118c:	f001 ff49 	bl	8003022 <HAL_UART_Receive_IT>
  HAL_UART_Transmit_IT (&huart2, str1, (sizeof(str1)/sizeof(str1[0])));
 8001190:	2247      	movs	r2, #71	; 0x47
 8001192:	4912      	ldr	r1, [pc, #72]	; (80011dc <main+0xc0>)
 8001194:	4812      	ldr	r0, [pc, #72]	; (80011e0 <main+0xc4>)
 8001196:	f001 ff00 	bl	8002f9a <HAL_UART_Transmit_IT>
  uint8_t *p_buff = to_pc_gps_data;
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <main+0xc8>)
 800119c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_UART_Transmit_IT (&huart3, p_buff, strlen(to_pc_gps_data));
 800119e:	4811      	ldr	r0, [pc, #68]	; (80011e4 <main+0xc8>)
 80011a0:	f7fe ffd6 	bl	8000150 <strlen>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80011ac:	480e      	ldr	r0, [pc, #56]	; (80011e8 <main+0xcc>)
 80011ae:	f001 fef4 	bl	8002f9a <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart3, rgcs_data, 1);
 80011b2:	2201      	movs	r2, #1
 80011b4:	490d      	ldr	r1, [pc, #52]	; (80011ec <main+0xd0>)
 80011b6:	480c      	ldr	r0, [pc, #48]	; (80011e8 <main+0xcc>)
 80011b8:	f001 ff33 	bl	8003022 <HAL_UART_Receive_IT>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011bc:	f002 fa4d 	bl	800365a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <main+0xa4>
 80011c2:	bf00      	nop
 80011c4:	0800c69c 	.word	0x0800c69c
 80011c8:	20001a68 	.word	0x20001a68
 80011cc:	0800c6b8 	.word	0x0800c6b8
 80011d0:	20001aac 	.word	0x20001aac
 80011d4:	20000c90 	.word	0x20000c90
 80011d8:	20001ab0 	.word	0x20001ab0
 80011dc:	20000000 	.word	0x20000000
 80011e0:	20001b38 	.word	0x20001b38
 80011e4:	20000048 	.word	0x20000048
 80011e8:	20001a6c 	.word	0x20001a6c
 80011ec:	20000cdc 	.word	0x20000cdc

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b090      	sub	sp, #64	; 0x40
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0318 	add.w	r3, r7, #24
 80011fa:	2228      	movs	r2, #40	; 0x28
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 fd7e 	bl	8004d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001212:	2302      	movs	r3, #2
 8001214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001216:	2301      	movs	r3, #1
 8001218:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800121a:	2310      	movs	r3, #16
 800121c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800121e:	2300      	movs	r3, #0
 8001220:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001222:	f107 0318 	add.w	r3, r7, #24
 8001226:	4618      	mov	r0, r3
 8001228:	f000 ffe6 	bl	80021f8 <HAL_RCC_OscConfig>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001232:	f000 f9e7 	bl	8001604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001236:	230f      	movs	r3, #15
 8001238:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001246:	2300      	movs	r3, #0
 8001248:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f001 fa52 	bl	80026f8 <HAL_RCC_ClockConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800125a:	f000 f9d3 	bl	8001604 <Error_Handler>
  }
}
 800125e:	bf00      	nop
 8001260:	3740      	adds	r7, #64	; 0x40
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	463b      	mov	r3, r7
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001284:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_TIM2_Init+0x94>)
 8001286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <MX_TIM2_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b1a      	ldr	r3, [pc, #104]	; (80012fc <MX_TIM2_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_TIM2_Init+0x94>)
 800129a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800129e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_TIM2_Init+0x94>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a6:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_TIM2_Init+0x94>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012ac:	4813      	ldr	r0, [pc, #76]	; (80012fc <MX_TIM2_Init+0x94>)
 80012ae:	f001 fbbd 	bl	8002a2c <HAL_TIM_Base_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80012b8:	f000 f9a4 	bl	8001604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c2:	f107 0308 	add.w	r3, r7, #8
 80012c6:	4619      	mov	r1, r3
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <MX_TIM2_Init+0x94>)
 80012ca:	f001 fbfe 	bl	8002aca <HAL_TIM_ConfigClockSource>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80012d4:	f000 f996 	bl	8001604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_TIM2_Init+0x94>)
 80012e6:	f001 fdad 	bl	8002e44 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80012f0:	f000 f988 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20001af0 	.word	0x20001af0

08001300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <MX_USART1_UART_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_USART1_UART_Init+0x4c>)
 800130c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART1_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART1_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART1_UART_Init+0x4c>)
 8001338:	f001 fde2 	bl	8002f00 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001342:	f000 f95f 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20001ab0 	.word	0x20001ab0
 8001350:	40013800 	.word	0x40013800

08001354 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_USART2_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001360:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001364:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART2_UART_Init+0x4c>)
 800138c:	f001 fdb8 	bl	8002f00 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 f935 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20001b38 	.word	0x20001b38
 80013a4:	40004400 	.word	0x40004400

080013a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <MX_USART3_UART_Init+0x50>)
 80013b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013b4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80013b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80013c6:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80013cc:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013ce:	220c      	movs	r2, #12
 80013d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d2:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013de:	4805      	ldr	r0, [pc, #20]	; (80013f4 <MX_USART3_UART_Init+0x4c>)
 80013e0:	f001 fd8e 	bl	8002f00 <HAL_UART_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013ea:	f000 f90b 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20001a6c 	.word	0x20001a6c
 80013f8:	40004800 	.word	0x40004800

080013fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001402:	f107 0310 	add.w	r3, r7, #16
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001410:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MX_GPIO_Init+0x90>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	4a1d      	ldr	r2, [pc, #116]	; (800148c <MX_GPIO_Init+0x90>)
 8001416:	f043 0320 	orr.w	r3, r3, #32
 800141a:	6193      	str	r3, [r2, #24]
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_GPIO_Init+0x90>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	f003 0320 	and.w	r3, r3, #32
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_GPIO_Init+0x90>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	4a17      	ldr	r2, [pc, #92]	; (800148c <MX_GPIO_Init+0x90>)
 800142e:	f043 0304 	orr.w	r3, r3, #4
 8001432:	6193      	str	r3, [r2, #24]
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_GPIO_Init+0x90>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	60bb      	str	r3, [r7, #8]
 800143e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <MX_GPIO_Init+0x90>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	4a11      	ldr	r2, [pc, #68]	; (800148c <MX_GPIO_Init+0x90>)
 8001446:	f043 0308 	orr.w	r3, r3, #8
 800144a:	6193      	str	r3, [r2, #24]
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_GPIO_Init+0x90>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	f003 0308 	and.w	r3, r3, #8
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <MX_GPIO_Init+0x94>)
 8001460:	f000 fe98 	bl	8002194 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146a:	2301      	movs	r3, #1
 800146c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2302      	movs	r3, #2
 8001474:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	4619      	mov	r1, r3
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_GPIO_Init+0x94>)
 800147e:	f000 fd05 	bl	8001e8c <HAL_GPIO_Init>

}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	40010c00 	.word	0x40010c00

08001494 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <HAL_UART_RxCpltCallback+0xc4>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d146      	bne.n	8001534 <HAL_UART_RxCpltCallback+0xa0>
	{
		if (*(rgps_data + rgps_i) == '$') // $
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <HAL_UART_RxCpltCallback+0xc8>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <HAL_UART_RxCpltCallback+0xcc>)
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b24      	cmp	r3, #36	; 0x24
 80014b4:	d10c      	bne.n	80014d0 <HAL_UART_RxCpltCallback+0x3c>
		{
			start_byte = true;
 80014b6:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <HAL_UART_RxCpltCallback+0xd0>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	701a      	strb	r2, [r3, #0]
			end_byte = false;
 80014bc:	4b2a      	ldr	r3, [pc, #168]	; (8001568 <HAL_UART_RxCpltCallback+0xd4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
			++rgps_i;
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_UART_RxCpltCallback+0xc8>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b24      	ldr	r3, [pc, #144]	; (800155c <HAL_UART_RxCpltCallback+0xc8>)
 80014cc:	701a      	strb	r2, [r3, #0]
 80014ce:	e027      	b.n	8001520 <HAL_UART_RxCpltCallback+0x8c>
		}
		else if ((start_byte) && (*(rgps_data + rgps_i) != '\n')) //*
 80014d0:	4b24      	ldr	r3, [pc, #144]	; (8001564 <HAL_UART_RxCpltCallback+0xd0>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d00e      	beq.n	80014f6 <HAL_UART_RxCpltCallback+0x62>
 80014d8:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_UART_RxCpltCallback+0xc8>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_UART_RxCpltCallback+0xcc>)
 80014e0:	4413      	add	r3, r2
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b0a      	cmp	r3, #10
 80014e6:	d006      	beq.n	80014f6 <HAL_UART_RxCpltCallback+0x62>
		{
			++rgps_i;
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_UART_RxCpltCallback+0xc8>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	3301      	adds	r3, #1
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	4b1a      	ldr	r3, [pc, #104]	; (800155c <HAL_UART_RxCpltCallback+0xc8>)
 80014f2:	701a      	strb	r2, [r3, #0]
 80014f4:	e014      	b.n	8001520 <HAL_UART_RxCpltCallback+0x8c>
		}
		else if ((start_byte) && (*(rgps_data + rgps_i) == '\n'))
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <HAL_UART_RxCpltCallback+0xd0>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d010      	beq.n	8001520 <HAL_UART_RxCpltCallback+0x8c>
 80014fe:	4b17      	ldr	r3, [pc, #92]	; (800155c <HAL_UART_RxCpltCallback+0xc8>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4b16      	ldr	r3, [pc, #88]	; (8001560 <HAL_UART_RxCpltCallback+0xcc>)
 8001506:	4413      	add	r3, r2
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b0a      	cmp	r3, #10
 800150c:	d108      	bne.n	8001520 <HAL_UART_RxCpltCallback+0x8c>
		{
			start_byte = false;
 800150e:	4b15      	ldr	r3, [pc, #84]	; (8001564 <HAL_UART_RxCpltCallback+0xd0>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
			end_byte = true;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_UART_RxCpltCallback+0xd4>)
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]
			rgps_i = 0;
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <HAL_UART_RxCpltCallback+0xc8>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart1, (rgps_data + rgps_i), 1);
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_UART_RxCpltCallback+0xc8>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_UART_RxCpltCallback+0xcc>)
 8001528:	4413      	add	r3, r2
 800152a:	2201      	movs	r2, #1
 800152c:	4619      	mov	r1, r3
 800152e:	480f      	ldr	r0, [pc, #60]	; (800156c <HAL_UART_RxCpltCallback+0xd8>)
 8001530:	f001 fd77 	bl	8003022 <HAL_UART_Receive_IT>
	}
	if (huart->Instance == USART3)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <HAL_UART_RxCpltCallback+0xdc>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d107      	bne.n	800154e <HAL_UART_RxCpltCallback+0xba>
	{
		//ToDO: RingBuffer for receive a data from the GCS
		HAL_UART_Receive_IT(&huart3, rgcs_data, 1);
 800153e:	2201      	movs	r2, #1
 8001540:	490c      	ldr	r1, [pc, #48]	; (8001574 <HAL_UART_RxCpltCallback+0xe0>)
 8001542:	480d      	ldr	r0, [pc, #52]	; (8001578 <HAL_UART_RxCpltCallback+0xe4>)
 8001544:	f001 fd6d 	bl	8003022 <HAL_UART_Receive_IT>
		geb = true;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_UART_RxCpltCallback+0xe8>)
 800154a:	2201      	movs	r2, #1
 800154c:	701a      	strb	r2, [r3, #0]
	}
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40013800 	.word	0x40013800
 800155c:	20000cde 	.word	0x20000cde
 8001560:	20000c90 	.word	0x20000c90
 8001564:	20000c8c 	.word	0x20000c8c
 8001568:	20000c8d 	.word	0x20000c8d
 800156c:	20001ab0 	.word	0x20001ab0
 8001570:	40004800 	.word	0x40004800
 8001574:	20000cdc 	.word	0x20000cdc
 8001578:	20001a6c 	.word	0x20001a6c
 800157c:	20000c8e 	.word	0x20000c8e

08001580 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
//  }
//  else if(huart->Instance == USART3)
//  {
//
//  }
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
	...

08001594 <StartLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartLedTask(void const * argument)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 800159c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015a0:	4803      	ldr	r0, [pc, #12]	; (80015b0 <StartLedTask+0x1c>)
 80015a2:	f000 fe0f 	bl	80021c4 <HAL_GPIO_TogglePin>
		osDelay(250);
 80015a6:	20fa      	movs	r0, #250	; 0xfa
 80015a8:	f002 f8aa 	bl	8003700 <osDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_12);
 80015ac:	e7f6      	b.n	800159c <StartLedTask+0x8>
 80015ae:	bf00      	nop
 80015b0:	40010c00 	.word	0x40010c00

080015b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;)
	{
		if(end_byte == true)
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <StartDefaultTask+0x40>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d012      	beq.n	80015ea <StartDefaultTask+0x36>
		{
			GPRMS_Analyze(rgps_data);
 80015c4:	480c      	ldr	r0, [pc, #48]	; (80015f8 <StartDefaultTask+0x44>)
 80015c6:	f003 fa2b 	bl	8004a20 <GPRMS_Analyze>
			uint8_t lenght = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	72fb      	strb	r3, [r7, #11]
			uint8_t *p_coordinates_packet = coordinates_packet(&lenght, rgcs_data);
 80015ce:	f107 030b 	add.w	r3, r7, #11
 80015d2:	490a      	ldr	r1, [pc, #40]	; (80015fc <StartDefaultTask+0x48>)
 80015d4:	4618      	mov	r0, r3
 80015d6:	f003 fa5f 	bl	8004a98 <coordinates_packet>
 80015da:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit_IT(&huart3, p_coordinates_packet, lenght);
 80015dc:	7afb      	ldrb	r3, [r7, #11]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	68f9      	ldr	r1, [r7, #12]
 80015e4:	4806      	ldr	r0, [pc, #24]	; (8001600 <StartDefaultTask+0x4c>)
 80015e6:	f001 fcd8 	bl	8002f9a <HAL_UART_Transmit_IT>
		}
		osDelay(50);
 80015ea:	2032      	movs	r0, #50	; 0x32
 80015ec:	f002 f888 	bl	8003700 <osDelay>
		if(end_byte == true)
 80015f0:	e7e4      	b.n	80015bc <StartDefaultTask+0x8>
 80015f2:	bf00      	nop
 80015f4:	20000c8d 	.word	0x20000c8d
 80015f8:	20000c90 	.word	0x20000c90
 80015fc:	20000cdc 	.word	0x20000cdc
 8001600:	20001a6c 	.word	0x20001a6c

08001604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  asm("nop");
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <Error_Handler+0x8>

08001610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_MspInit+0x68>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	4a17      	ldr	r2, [pc, #92]	; (8001678 <HAL_MspInit+0x68>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6193      	str	r3, [r2, #24]
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_MspInit+0x68>)
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_MspInit+0x68>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_MspInit+0x68>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_MspInit+0x68>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	210f      	movs	r1, #15
 800164a:	f06f 0001 	mvn.w	r0, #1
 800164e:	f000 fb70 	bl	8001d32 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_MspInit+0x6c>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	4a04      	ldr	r2, [pc, #16]	; (800167c <HAL_MspInit+0x6c>)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	40010000 	.word	0x40010000

08001680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001690:	d10b      	bne.n	80016aa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <HAL_TIM_Base_MspInit+0x34>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a07      	ldr	r2, [pc, #28]	; (80016b4 <HAL_TIM_Base_MspInit+0x34>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <HAL_TIM_Base_MspInit+0x34>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016aa:	bf00      	nop
 80016ac:	3714      	adds	r7, #20
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	40021000 	.word	0x40021000

080016b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08c      	sub	sp, #48	; 0x30
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a5f      	ldr	r2, [pc, #380]	; (8001850 <HAL_UART_MspInit+0x198>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d13a      	bne.n	800174e <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d8:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a5d      	ldr	r2, [pc, #372]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80016de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b58      	ldr	r3, [pc, #352]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a57      	ldr	r2, [pc, #348]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001708:	f44f 7300 	mov.w	r3, #512	; 0x200
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001716:	f107 0320 	add.w	r3, r7, #32
 800171a:	4619      	mov	r1, r3
 800171c:	484e      	ldr	r0, [pc, #312]	; (8001858 <HAL_UART_MspInit+0x1a0>)
 800171e:	f000 fbb5 	bl	8001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001728:	2300      	movs	r3, #0
 800172a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4619      	mov	r1, r3
 8001736:	4848      	ldr	r0, [pc, #288]	; (8001858 <HAL_UART_MspInit+0x1a0>)
 8001738:	f000 fba8 	bl	8001e8c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800173c:	2200      	movs	r2, #0
 800173e:	2105      	movs	r1, #5
 8001740:	2025      	movs	r0, #37	; 0x25
 8001742:	f000 faf6 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001746:	2025      	movs	r0, #37	; 0x25
 8001748:	f000 fb0f 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800174c:	e07c      	b.n	8001848 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a42      	ldr	r2, [pc, #264]	; (800185c <HAL_UART_MspInit+0x1a4>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d138      	bne.n	80017ca <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001758:	4b3e      	ldr	r3, [pc, #248]	; (8001854 <HAL_UART_MspInit+0x19c>)
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	4a3d      	ldr	r2, [pc, #244]	; (8001854 <HAL_UART_MspInit+0x19c>)
 800175e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001762:	61d3      	str	r3, [r2, #28]
 8001764:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_UART_MspInit+0x19c>)
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176c:	617b      	str	r3, [r7, #20]
 800176e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	4b38      	ldr	r3, [pc, #224]	; (8001854 <HAL_UART_MspInit+0x19c>)
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	4a37      	ldr	r2, [pc, #220]	; (8001854 <HAL_UART_MspInit+0x19c>)
 8001776:	f043 0304 	orr.w	r3, r3, #4
 800177a:	6193      	str	r3, [r2, #24]
 800177c:	4b35      	ldr	r3, [pc, #212]	; (8001854 <HAL_UART_MspInit+0x19c>)
 800177e:	699b      	ldr	r3, [r3, #24]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001788:	2304      	movs	r3, #4
 800178a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	4619      	mov	r1, r3
 800179a:	482f      	ldr	r0, [pc, #188]	; (8001858 <HAL_UART_MspInit+0x1a0>)
 800179c:	f000 fb76 	bl	8001e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80017a0:	2308      	movs	r3, #8
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ac:	f107 0320 	add.w	r3, r7, #32
 80017b0:	4619      	mov	r1, r3
 80017b2:	4829      	ldr	r0, [pc, #164]	; (8001858 <HAL_UART_MspInit+0x1a0>)
 80017b4:	f000 fb6a 	bl	8001e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2105      	movs	r1, #5
 80017bc:	2026      	movs	r0, #38	; 0x26
 80017be:	f000 fab8 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80017c2:	2026      	movs	r0, #38	; 0x26
 80017c4:	f000 fad1 	bl	8001d6a <HAL_NVIC_EnableIRQ>
}
 80017c8:	e03e      	b.n	8001848 <HAL_UART_MspInit+0x190>
  else if(huart->Instance==USART3)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a24      	ldr	r2, [pc, #144]	; (8001860 <HAL_UART_MspInit+0x1a8>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d139      	bne.n	8001848 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80017da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017de:	61d3      	str	r3, [r2, #28]
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80017e2:	69db      	ldr	r3, [r3, #28]
 80017e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ec:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	4a18      	ldr	r2, [pc, #96]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80017f2:	f043 0308 	orr.w	r3, r3, #8
 80017f6:	6193      	str	r3, [r2, #24]
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_UART_MspInit+0x19c>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001812:	f107 0320 	add.w	r3, r7, #32
 8001816:	4619      	mov	r1, r3
 8001818:	4812      	ldr	r0, [pc, #72]	; (8001864 <HAL_UART_MspInit+0x1ac>)
 800181a:	f000 fb37 	bl	8001e8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800181e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0320 	add.w	r3, r7, #32
 8001830:	4619      	mov	r1, r3
 8001832:	480c      	ldr	r0, [pc, #48]	; (8001864 <HAL_UART_MspInit+0x1ac>)
 8001834:	f000 fb2a 	bl	8001e8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001838:	2200      	movs	r2, #0
 800183a:	2105      	movs	r1, #5
 800183c:	2027      	movs	r0, #39	; 0x27
 800183e:	f000 fa78 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001842:	2027      	movs	r0, #39	; 0x27
 8001844:	f000 fa91 	bl	8001d6a <HAL_NVIC_EnableIRQ>
}
 8001848:	bf00      	nop
 800184a:	3730      	adds	r7, #48	; 0x30
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40013800 	.word	0x40013800
 8001854:	40021000 	.word	0x40021000
 8001858:	40010800 	.word	0x40010800
 800185c:	40004400 	.word	0x40004400
 8001860:	40004800 	.word	0x40004800
 8001864:	40010c00 	.word	0x40010c00

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800186c:	e7fe      	b.n	800186c <NMI_Handler+0x4>

0800186e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001872:	e7fe      	b.n	8001872 <HardFault_Handler+0x4>

08001874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <MemManage_Handler+0x4>

0800187a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <BusFault_Handler+0x4>

08001880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <UsageFault_Handler+0x4>

08001886 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	bc80      	pop	{r7}
 8001890:	4770      	bx	lr

08001892 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001896:	f000 f959 	bl	8001b4c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800189a:	f002 fcaf 	bl	80041fc <xTaskGetSchedulerState>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d001      	beq.n	80018a8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018a4:	f002 fea0 	bl	80045e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}

080018ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <USART1_IRQHandler+0x10>)
 80018b2:	f001 fc0b 	bl	80030cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20001ab0 	.word	0x20001ab0

080018c0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <USART2_IRQHandler+0x10>)
 80018c6:	f001 fc01 	bl	80030cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20001b38 	.word	0x20001b38

080018d4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <USART3_IRQHandler+0x10>)
 80018da:	f001 fbf7 	bl	80030cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20001a6c 	.word	0x20001a6c

080018e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr

080018f6 <_kill>:

int _kill(int pid, int sig)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001900:	f003 f9c6 	bl	8004c90 <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	2216      	movs	r2, #22
 8001908:	601a      	str	r2, [r3, #0]
	return -1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800190e:	4618      	mov	r0, r3
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <_exit>:

void _exit (int status)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800191e:	f04f 31ff 	mov.w	r1, #4294967295
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7ff ffe7 	bl	80018f6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001928:	e7fe      	b.n	8001928 <_exit+0x12>

0800192a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b086      	sub	sp, #24
 800192e:	af00      	add	r7, sp, #0
 8001930:	60f8      	str	r0, [r7, #12]
 8001932:	60b9      	str	r1, [r7, #8]
 8001934:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
 800193a:	e00a      	b.n	8001952 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800193c:	f3af 8000 	nop.w
 8001940:	4601      	mov	r1, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1c5a      	adds	r2, r3, #1
 8001946:	60ba      	str	r2, [r7, #8]
 8001948:	b2ca      	uxtb	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	429a      	cmp	r2, r3
 8001958:	dbf0      	blt.n	800193c <_read+0x12>
	}

return len;
 800195a:	687b      	ldr	r3, [r7, #4]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e009      	b.n	800198a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	3301      	adds	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	429a      	cmp	r2, r3
 8001990:	dbf1      	blt.n	8001976 <_write+0x12>
	}
	return len;
 8001992:	687b      	ldr	r3, [r7, #4]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <_close>:

int _close(int file)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
	return -1;
 80019a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bc80      	pop	{r7}
 80019b0:	4770      	bx	lr

080019b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019c2:	605a      	str	r2, [r3, #4]
	return 0;
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <_isatty>:

int _isatty(int file)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	return 1;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <_sbrk+0x5c>)
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <_sbrk+0x60>)
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a10:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <_sbrk+0x64>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d102      	bne.n	8001a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a18:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <_sbrk+0x64>)
 8001a1a:	4a12      	ldr	r2, [pc, #72]	; (8001a64 <_sbrk+0x68>)
 8001a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a1e:	4b10      	ldr	r3, [pc, #64]	; (8001a60 <_sbrk+0x64>)
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4413      	add	r3, r2
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d207      	bcs.n	8001a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a2c:	f003 f930 	bl	8004c90 <__errno>
 8001a30:	4603      	mov	r3, r0
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b07      	ldr	r3, [pc, #28]	; (8001a60 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a05      	ldr	r2, [pc, #20]	; (8001a60 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20005000 	.word	0x20005000
 8001a5c:	00000400 	.word	0x00000400
 8001a60:	20000ce0 	.word	0x20000ce0
 8001a64:	20001c58 	.word	0x20001c58

08001a68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr

08001a74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001a74:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001a76:	e003      	b.n	8001a80 <LoopCopyDataInit>

08001a78 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001a78:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001a7a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001a7c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001a7e:	3104      	adds	r1, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001a80:	480a      	ldr	r0, [pc, #40]	; (8001aac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001a84:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001a86:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001a88:	d3f6      	bcc.n	8001a78 <CopyDataInit>
  ldr r2, =_sbss
 8001a8a:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001a8c:	e002      	b.n	8001a94 <LoopFillZerobss>

08001a8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a90:	f842 3b04 	str.w	r3, [r2], #4

08001a94 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a96:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a98:	d3f9      	bcc.n	8001a8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a9a:	f7ff ffe5 	bl	8001a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a9e:	f003 f8fd 	bl	8004c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aa2:	f7ff fb3b 	bl	800111c <main>
  bx lr
 8001aa6:	4770      	bx	lr
  ldr r3, =_sidata
 8001aa8:	0800cc64 	.word	0x0800cc64
  ldr r0, =_sdata
 8001aac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ab0:	20000a1c 	.word	0x20000a1c
  ldr r2, =_sbss
 8001ab4:	20000a1c 	.word	0x20000a1c
  ldr r3, = _ebss
 8001ab8:	20001c58 	.word	0x20001c58

08001abc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <ADC1_2_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <HAL_Init+0x28>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_Init+0x28>)
 8001aca:	f043 0310 	orr.w	r3, r3, #16
 8001ace:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f923 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad6:	200f      	movs	r0, #15
 8001ad8:	f000 f808 	bl	8001aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001adc:	f7ff fd98 	bl	8001610 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x54>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_InitTick+0x58>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f93b 	bl	8001d86 <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d001      	beq.n	8001b1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00e      	b.n	8001b38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2b0f      	cmp	r3, #15
 8001b1e:	d80a      	bhi.n	8001b36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b20:	2200      	movs	r2, #0
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	f000 f903 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b2c:	4a06      	ldr	r2, [pc, #24]	; (8001b48 <HAL_InitTick+0x5c>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b32:	2300      	movs	r3, #0
 8001b34:	e000      	b.n	8001b38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000058 	.word	0x20000058
 8001b44:	20000060 	.word	0x20000060
 8001b48:	2000005c 	.word	0x2000005c

08001b4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_IncTick+0x1c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x20>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	4a03      	ldr	r2, [pc, #12]	; (8001b6c <HAL_IncTick+0x20>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	20000060 	.word	0x20000060
 8001b6c:	20001b78 	.word	0x20001b78

08001b70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b02      	ldr	r3, [pc, #8]	; (8001b80 <HAL_GetTick+0x10>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	20001b78 	.word	0x20001b78

08001b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4906      	ldr	r1, [pc, #24]	; (8001c1c <__NVIC_EnableIRQ+0x34>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff90 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff2d 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff42 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff90 	bl	8001c74 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5f 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff35 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da8:	2300      	movs	r3, #0
 8001daa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d005      	beq.n	8001dc2 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e051      	b.n	8001e66 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 020e 	bic.w	r2, r2, #14
 8001dd0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <HAL_DMA_Abort_IT+0xd0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d029      	beq.n	8001e40 <HAL_DMA_Abort_IT+0xa0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_DMA_Abort_IT+0xd4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d022      	beq.n	8001e3c <HAL_DMA_Abort_IT+0x9c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_DMA_Abort_IT+0xd8>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d01a      	beq.n	8001e36 <HAL_DMA_Abort_IT+0x96>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a1d      	ldr	r2, [pc, #116]	; (8001e7c <HAL_DMA_Abort_IT+0xdc>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d012      	beq.n	8001e30 <HAL_DMA_Abort_IT+0x90>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_DMA_Abort_IT+0xe0>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d00a      	beq.n	8001e2a <HAL_DMA_Abort_IT+0x8a>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1a      	ldr	r2, [pc, #104]	; (8001e84 <HAL_DMA_Abort_IT+0xe4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d102      	bne.n	8001e24 <HAL_DMA_Abort_IT+0x84>
 8001e1e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e22:	e00e      	b.n	8001e42 <HAL_DMA_Abort_IT+0xa2>
 8001e24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e28:	e00b      	b.n	8001e42 <HAL_DMA_Abort_IT+0xa2>
 8001e2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e2e:	e008      	b.n	8001e42 <HAL_DMA_Abort_IT+0xa2>
 8001e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e34:	e005      	b.n	8001e42 <HAL_DMA_Abort_IT+0xa2>
 8001e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e3a:	e002      	b.n	8001e42 <HAL_DMA_Abort_IT+0xa2>
 8001e3c:	2310      	movs	r3, #16
 8001e3e:	e000      	b.n	8001e42 <HAL_DMA_Abort_IT+0xa2>
 8001e40:	2301      	movs	r3, #1
 8001e42:	4a11      	ldr	r2, [pc, #68]	; (8001e88 <HAL_DMA_Abort_IT+0xe8>)
 8001e44:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	4798      	blx	r3
    } 
  }
  return status;
 8001e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40020008 	.word	0x40020008
 8001e74:	4002001c 	.word	0x4002001c
 8001e78:	40020030 	.word	0x40020030
 8001e7c:	40020044 	.word	0x40020044
 8001e80:	40020058 	.word	0x40020058
 8001e84:	4002006c 	.word	0x4002006c
 8001e88:	40020000 	.word	0x40020000

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b08b      	sub	sp, #44	; 0x2c
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9e:	e169      	b.n	8002174 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69fa      	ldr	r2, [r7, #28]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	f040 8158 	bne.w	800216e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	4a9a      	ldr	r2, [pc, #616]	; (800212c <HAL_GPIO_Init+0x2a0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d05e      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
 8001ec8:	4a98      	ldr	r2, [pc, #608]	; (800212c <HAL_GPIO_Init+0x2a0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d875      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001ece:	4a98      	ldr	r2, [pc, #608]	; (8002130 <HAL_GPIO_Init+0x2a4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d058      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
 8001ed4:	4a96      	ldr	r2, [pc, #600]	; (8002130 <HAL_GPIO_Init+0x2a4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d86f      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001eda:	4a96      	ldr	r2, [pc, #600]	; (8002134 <HAL_GPIO_Init+0x2a8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d052      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
 8001ee0:	4a94      	ldr	r2, [pc, #592]	; (8002134 <HAL_GPIO_Init+0x2a8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d869      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001ee6:	4a94      	ldr	r2, [pc, #592]	; (8002138 <HAL_GPIO_Init+0x2ac>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d04c      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
 8001eec:	4a92      	ldr	r2, [pc, #584]	; (8002138 <HAL_GPIO_Init+0x2ac>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d863      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001ef2:	4a92      	ldr	r2, [pc, #584]	; (800213c <HAL_GPIO_Init+0x2b0>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d046      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
 8001ef8:	4a90      	ldr	r2, [pc, #576]	; (800213c <HAL_GPIO_Init+0x2b0>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d85d      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001efe:	2b12      	cmp	r3, #18
 8001f00:	d82a      	bhi.n	8001f58 <HAL_GPIO_Init+0xcc>
 8001f02:	2b12      	cmp	r3, #18
 8001f04:	d859      	bhi.n	8001fba <HAL_GPIO_Init+0x12e>
 8001f06:	a201      	add	r2, pc, #4	; (adr r2, 8001f0c <HAL_GPIO_Init+0x80>)
 8001f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f0c:	08001f87 	.word	0x08001f87
 8001f10:	08001f61 	.word	0x08001f61
 8001f14:	08001f73 	.word	0x08001f73
 8001f18:	08001fb5 	.word	0x08001fb5
 8001f1c:	08001fbb 	.word	0x08001fbb
 8001f20:	08001fbb 	.word	0x08001fbb
 8001f24:	08001fbb 	.word	0x08001fbb
 8001f28:	08001fbb 	.word	0x08001fbb
 8001f2c:	08001fbb 	.word	0x08001fbb
 8001f30:	08001fbb 	.word	0x08001fbb
 8001f34:	08001fbb 	.word	0x08001fbb
 8001f38:	08001fbb 	.word	0x08001fbb
 8001f3c:	08001fbb 	.word	0x08001fbb
 8001f40:	08001fbb 	.word	0x08001fbb
 8001f44:	08001fbb 	.word	0x08001fbb
 8001f48:	08001fbb 	.word	0x08001fbb
 8001f4c:	08001fbb 	.word	0x08001fbb
 8001f50:	08001f69 	.word	0x08001f69
 8001f54:	08001f7d 	.word	0x08001f7d
 8001f58:	4a79      	ldr	r2, [pc, #484]	; (8002140 <HAL_GPIO_Init+0x2b4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f5e:	e02c      	b.n	8001fba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	623b      	str	r3, [r7, #32]
          break;
 8001f66:	e029      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	623b      	str	r3, [r7, #32]
          break;
 8001f70:	e024      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	3308      	adds	r3, #8
 8001f78:	623b      	str	r3, [r7, #32]
          break;
 8001f7a:	e01f      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	330c      	adds	r3, #12
 8001f82:	623b      	str	r3, [r7, #32]
          break;
 8001f84:	e01a      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d102      	bne.n	8001f94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	623b      	str	r3, [r7, #32]
          break;
 8001f92:	e013      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	611a      	str	r2, [r3, #16]
          break;
 8001fa6:	e009      	b.n	8001fbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fa8:	2308      	movs	r3, #8
 8001faa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	615a      	str	r2, [r3, #20]
          break;
 8001fb2:	e003      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	623b      	str	r3, [r7, #32]
          break;
 8001fb8:	e000      	b.n	8001fbc <HAL_GPIO_Init+0x130>
          break;
 8001fba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	2bff      	cmp	r3, #255	; 0xff
 8001fc0:	d801      	bhi.n	8001fc6 <HAL_GPIO_Init+0x13a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	e001      	b.n	8001fca <HAL_GPIO_Init+0x13e>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	2bff      	cmp	r3, #255	; 0xff
 8001fd0:	d802      	bhi.n	8001fd8 <HAL_GPIO_Init+0x14c>
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	e002      	b.n	8001fde <HAL_GPIO_Init+0x152>
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	3b08      	subs	r3, #8
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	210f      	movs	r1, #15
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fec:	43db      	mvns	r3, r3
 8001fee:	401a      	ands	r2, r3
 8001ff0:	6a39      	ldr	r1, [r7, #32]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	f000 80b1 	beq.w	800216e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800200c:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	4a4c      	ldr	r2, [pc, #304]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 8002012:	f043 0301 	orr.w	r3, r3, #1
 8002016:	6193      	str	r3, [r2, #24]
 8002018:	4b4a      	ldr	r3, [pc, #296]	; (8002144 <HAL_GPIO_Init+0x2b8>)
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002024:	4a48      	ldr	r2, [pc, #288]	; (8002148 <HAL_GPIO_Init+0x2bc>)
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	089b      	lsrs	r3, r3, #2
 800202a:	3302      	adds	r3, #2
 800202c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002030:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	f003 0303 	and.w	r3, r3, #3
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4013      	ands	r3, r2
 8002046:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a40      	ldr	r2, [pc, #256]	; (800214c <HAL_GPIO_Init+0x2c0>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d013      	beq.n	8002078 <HAL_GPIO_Init+0x1ec>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a3f      	ldr	r2, [pc, #252]	; (8002150 <HAL_GPIO_Init+0x2c4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d00d      	beq.n	8002074 <HAL_GPIO_Init+0x1e8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a3e      	ldr	r2, [pc, #248]	; (8002154 <HAL_GPIO_Init+0x2c8>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d007      	beq.n	8002070 <HAL_GPIO_Init+0x1e4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a3d      	ldr	r2, [pc, #244]	; (8002158 <HAL_GPIO_Init+0x2cc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_GPIO_Init+0x1e0>
 8002068:	2303      	movs	r3, #3
 800206a:	e006      	b.n	800207a <HAL_GPIO_Init+0x1ee>
 800206c:	2304      	movs	r3, #4
 800206e:	e004      	b.n	800207a <HAL_GPIO_Init+0x1ee>
 8002070:	2302      	movs	r3, #2
 8002072:	e002      	b.n	800207a <HAL_GPIO_Init+0x1ee>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_GPIO_Init+0x1ee>
 8002078:	2300      	movs	r3, #0
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	f002 0203 	and.w	r2, r2, #3
 8002080:	0092      	lsls	r2, r2, #2
 8002082:	4093      	lsls	r3, r2
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800208a:	492f      	ldr	r1, [pc, #188]	; (8002148 <HAL_GPIO_Init+0x2bc>)
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	3302      	adds	r3, #2
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d006      	beq.n	80020b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a4:	4b2d      	ldr	r3, [pc, #180]	; (800215c <HAL_GPIO_Init+0x2d0>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	492c      	ldr	r1, [pc, #176]	; (800215c <HAL_GPIO_Init+0x2d0>)
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	e006      	b.n	80020c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020b2:	4b2a      	ldr	r3, [pc, #168]	; (800215c <HAL_GPIO_Init+0x2d0>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	43db      	mvns	r3, r3
 80020ba:	4928      	ldr	r1, [pc, #160]	; (800215c <HAL_GPIO_Init+0x2d0>)
 80020bc:	4013      	ands	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d006      	beq.n	80020da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020cc:	4b23      	ldr	r3, [pc, #140]	; (800215c <HAL_GPIO_Init+0x2d0>)
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4922      	ldr	r1, [pc, #136]	; (800215c <HAL_GPIO_Init+0x2d0>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	604b      	str	r3, [r1, #4]
 80020d8:	e006      	b.n	80020e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020da:	4b20      	ldr	r3, [pc, #128]	; (800215c <HAL_GPIO_Init+0x2d0>)
 80020dc:	685a      	ldr	r2, [r3, #4]
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	43db      	mvns	r3, r3
 80020e2:	491e      	ldr	r1, [pc, #120]	; (800215c <HAL_GPIO_Init+0x2d0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_GPIO_Init+0x2d0>)
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	4918      	ldr	r1, [pc, #96]	; (800215c <HAL_GPIO_Init+0x2d0>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	608b      	str	r3, [r1, #8]
 8002100:	e006      	b.n	8002110 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002102:	4b16      	ldr	r3, [pc, #88]	; (800215c <HAL_GPIO_Init+0x2d0>)
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	43db      	mvns	r3, r3
 800210a:	4914      	ldr	r1, [pc, #80]	; (800215c <HAL_GPIO_Init+0x2d0>)
 800210c:	4013      	ands	r3, r2
 800210e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d021      	beq.n	8002160 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <HAL_GPIO_Init+0x2d0>)
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	490e      	ldr	r1, [pc, #56]	; (800215c <HAL_GPIO_Init+0x2d0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	60cb      	str	r3, [r1, #12]
 8002128:	e021      	b.n	800216e <HAL_GPIO_Init+0x2e2>
 800212a:	bf00      	nop
 800212c:	10320000 	.word	0x10320000
 8002130:	10310000 	.word	0x10310000
 8002134:	10220000 	.word	0x10220000
 8002138:	10210000 	.word	0x10210000
 800213c:	10120000 	.word	0x10120000
 8002140:	10110000 	.word	0x10110000
 8002144:	40021000 	.word	0x40021000
 8002148:	40010000 	.word	0x40010000
 800214c:	40010800 	.word	0x40010800
 8002150:	40010c00 	.word	0x40010c00
 8002154:	40011000 	.word	0x40011000
 8002158:	40011400 	.word	0x40011400
 800215c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <HAL_GPIO_Init+0x304>)
 8002162:	68da      	ldr	r2, [r3, #12]
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	43db      	mvns	r3, r3
 8002168:	4909      	ldr	r1, [pc, #36]	; (8002190 <HAL_GPIO_Init+0x304>)
 800216a:	4013      	ands	r3, r2
 800216c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	3301      	adds	r3, #1
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	fa22 f303 	lsr.w	r3, r2, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	f47f ae8e 	bne.w	8001ea0 <HAL_GPIO_Init+0x14>
  }
}
 8002184:	bf00      	nop
 8002186:	bf00      	nop
 8002188:	372c      	adds	r7, #44	; 0x2c
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr
 8002190:	40010400 	.word	0x40010400

08002194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	807b      	strh	r3, [r7, #2]
 80021a0:	4613      	mov	r3, r2
 80021a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021a4:	787b      	ldrb	r3, [r7, #1]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021aa:	887a      	ldrh	r2, [r7, #2]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80021b0:	e003      	b.n	80021ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021b2:	887b      	ldrh	r3, [r7, #2]
 80021b4:	041a      	lsls	r2, r3, #16
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	611a      	str	r2, [r3, #16]
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	460b      	mov	r3, r1
 80021ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021d6:	887a      	ldrh	r2, [r7, #2]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	041a      	lsls	r2, r3, #16
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	43d9      	mvns	r1, r3
 80021e2:	887b      	ldrh	r3, [r7, #2]
 80021e4:	400b      	ands	r3, r1
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	611a      	str	r2, [r3, #16]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e26c      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8087 	beq.w	8002326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002218:	4b92      	ldr	r3, [pc, #584]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b04      	cmp	r3, #4
 8002222:	d00c      	beq.n	800223e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002224:	4b8f      	ldr	r3, [pc, #572]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d112      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
 8002230:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d10b      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d06c      	beq.n	8002324 <HAL_RCC_OscConfig+0x12c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d168      	bne.n	8002324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e246      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x76>
 8002260:	4b80      	ldr	r3, [pc, #512]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a7f      	ldr	r2, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e02e      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x98>
 8002276:	4b7b      	ldr	r3, [pc, #492]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7a      	ldr	r2, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b78      	ldr	r3, [pc, #480]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a77      	ldr	r2, [pc, #476]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0xbc>
 800229a:	4b72      	ldr	r3, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a71      	ldr	r2, [pc, #452]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6f      	ldr	r3, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 80022b4:	4b6b      	ldr	r3, [pc, #428]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a67      	ldr	r2, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7ff fc4c 	bl	8001b70 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fc48 	bl	8001b70 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e1fa      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5d      	ldr	r3, [pc, #372]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xe4>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7ff fc38 	bl	8001b70 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fc34 	bl	8001b70 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1e6      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x10c>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800233e:	4b49      	ldr	r3, [pc, #292]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1ba      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4939      	ldr	r1, [pc, #228]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7ff fbed 	bl	8001b70 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff fbe9 	bl	8001b70 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e19b      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4927      	ldr	r1, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7ff fbcc 	bl	8001b70 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7ff fbc8 	bl	8001b70 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e17a      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03a      	beq.n	800247c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7ff fbac 	bl	8001b70 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7ff fba8 	bl	8001b70 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e15a      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 fad8 	bl	80029f0 <RCC_Delay>
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7ff fb92 	bl	8001b70 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244e:	e00f      	b.n	8002470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7ff fb8e 	bl	8001b70 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d908      	bls.n	8002470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e140      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	42420000 	.word	0x42420000
 800246c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b9e      	ldr	r3, [pc, #632]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e9      	bne.n	8002450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a6 	beq.w	80025d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b97      	ldr	r3, [pc, #604]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b94      	ldr	r3, [pc, #592]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a93      	ldr	r2, [pc, #588]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b91      	ldr	r3, [pc, #580]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b8e      	ldr	r3, [pc, #568]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b8b      	ldr	r3, [pc, #556]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a8a      	ldr	r2, [pc, #552]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7ff fb4f 	bl	8001b70 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7ff fb4b 	bl	8001b70 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0fd      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b81      	ldr	r3, [pc, #516]	; (80026f0 <HAL_RCC_OscConfig+0x4f8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x312>
 80024fc:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a7a      	ldr	r2, [pc, #488]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e02d      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x334>
 8002512:	4b76      	ldr	r3, [pc, #472]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a75      	ldr	r2, [pc, #468]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b73      	ldr	r3, [pc, #460]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a72      	ldr	r2, [pc, #456]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	e01c      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x356>
 8002534:	4b6d      	ldr	r3, [pc, #436]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a6c      	ldr	r2, [pc, #432]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a69      	ldr	r2, [pc, #420]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800254e:	4b67      	ldr	r3, [pc, #412]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a66      	ldr	r2, [pc, #408]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b64      	ldr	r3, [pc, #400]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a63      	ldr	r2, [pc, #396]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d015      	beq.n	800259a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7ff faff 	bl	8001b70 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7ff fafb 	bl	8001b70 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0ab      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	4b57      	ldr	r3, [pc, #348]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ee      	beq.n	8002576 <HAL_RCC_OscConfig+0x37e>
 8002598:	e014      	b.n	80025c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7ff fae9 	bl	8001b70 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7ff fae5 	bl	8001b70 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e095      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	4b4c      	ldr	r3, [pc, #304]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b48      	ldr	r3, [pc, #288]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a47      	ldr	r2, [pc, #284]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8081 	beq.w	80026e2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b42      	ldr	r3, [pc, #264]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d061      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d146      	bne.n	8002682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b3f      	ldr	r3, [pc, #252]	; (80026f4 <HAL_RCC_OscConfig+0x4fc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7ff fab9 	bl	8001b70 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7ff fab5 	bl	8001b70 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e067      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d108      	bne.n	800263c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800262a:	4b30      	ldr	r3, [pc, #192]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	492d      	ldr	r1, [pc, #180]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263c:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a19      	ldr	r1, [r3, #32]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	430b      	orrs	r3, r1
 800264e:	4927      	ldr	r1, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <HAL_RCC_OscConfig+0x4fc>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7ff fa89 	bl	8001b70 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7ff fa85 	bl	8001b70 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e037      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x46a>
 8002680:	e02f      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b1c      	ldr	r3, [pc, #112]	; (80026f4 <HAL_RCC_OscConfig+0x4fc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7ff fa72 	bl	8001b70 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7ff fa6e 	bl	8001b70 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e020      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x498>
 80026ae:	e018      	b.n	80026e2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e013      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_OscConfig+0x4f4>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40007000 	.word	0x40007000
 80026f4:	42420060 	.word	0x42420060

080026f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0d0      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b6a      	ldr	r3, [pc, #424]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d910      	bls.n	800273c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b67      	ldr	r3, [pc, #412]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 0207 	bic.w	r2, r3, #7
 8002722:	4965      	ldr	r1, [pc, #404]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b63      	ldr	r3, [pc, #396]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0b8      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002754:	4b59      	ldr	r3, [pc, #356]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a58      	ldr	r2, [pc, #352]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800275e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800276c:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a52      	ldr	r2, [pc, #328]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002778:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	494d      	ldr	r1, [pc, #308]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d040      	beq.n	8002818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d115      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e07f      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e073      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b3d      	ldr	r3, [pc, #244]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e06b      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4936      	ldr	r1, [pc, #216]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e8:	f7ff f9c2 	bl	8001b70 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7ff f9be 	bl	8001b70 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e053      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b2d      	ldr	r3, [pc, #180]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b27      	ldr	r3, [pc, #156]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d210      	bcs.n	8002848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0207 	bic.w	r2, r3, #7
 800282e:	4922      	ldr	r1, [pc, #136]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e032      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002854:	4b19      	ldr	r3, [pc, #100]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4916      	ldr	r1, [pc, #88]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	490e      	ldr	r1, [pc, #56]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002886:	f000 f821 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800288a:	4602      	mov	r2, r0
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	490a      	ldr	r1, [pc, #40]	; (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	5ccb      	ldrb	r3, [r1, r3]
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	4a09      	ldr	r2, [pc, #36]	; (80028c4 <HAL_RCC_ClockConfig+0x1cc>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1d0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff f920 	bl	8001aec <HAL_InitTick>

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40021000 	.word	0x40021000
 80028c0:	0800c7b0 	.word	0x0800c7b0
 80028c4:	20000058 	.word	0x20000058
 80028c8:	2000005c 	.word	0x2000005c

080028cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b490      	push	{r4, r7}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80028d2:	4b2a      	ldr	r3, [pc, #168]	; (800297c <HAL_RCC_GetSysClockFreq+0xb0>)
 80028d4:	1d3c      	adds	r4, r7, #4
 80028d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80028d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80028dc:	f240 2301 	movw	r3, #513	; 0x201
 80028e0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	61fb      	str	r3, [r7, #28]
 80028e6:	2300      	movs	r3, #0
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028f2:	2300      	movs	r3, #0
 80028f4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028f6:	4b22      	ldr	r3, [pc, #136]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b04      	cmp	r3, #4
 8002904:	d002      	beq.n	800290c <HAL_RCC_GetSysClockFreq+0x40>
 8002906:	2b08      	cmp	r3, #8
 8002908:	d003      	beq.n	8002912 <HAL_RCC_GetSysClockFreq+0x46>
 800290a:	e02d      	b.n	8002968 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800290c:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290e:	623b      	str	r3, [r7, #32]
      break;
 8002910:	e02d      	b.n	800296e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	0c9b      	lsrs	r3, r3, #18
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800291e:	4413      	add	r3, r2
 8002920:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002924:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002930:	4b13      	ldr	r3, [pc, #76]	; (8002980 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	0c5b      	lsrs	r3, r3, #17
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800293e:	4413      	add	r3, r2
 8002940:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002944:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	4a0e      	ldr	r2, [pc, #56]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800294a:	fb02 f203 	mul.w	r2, r2, r3
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	fbb2 f3f3 	udiv	r3, r2, r3
 8002954:	627b      	str	r3, [r7, #36]	; 0x24
 8002956:	e004      	b.n	8002962 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_RCC_GetSysClockFreq+0xbc>)
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002964:	623b      	str	r3, [r7, #32]
      break;
 8002966:	e002      	b.n	800296e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002968:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_RCC_GetSysClockFreq+0xb8>)
 800296a:	623b      	str	r3, [r7, #32]
      break;
 800296c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296e:	6a3b      	ldr	r3, [r7, #32]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3728      	adds	r7, #40	; 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bc90      	pop	{r4, r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	0800c6d4 	.word	0x0800c6d4
 8002980:	40021000 	.word	0x40021000
 8002984:	007a1200 	.word	0x007a1200
 8002988:	003d0900 	.word	0x003d0900

0800298c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <HAL_RCC_GetHCLKFreq+0x10>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	20000058 	.word	0x20000058

080029a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a4:	f7ff fff2 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0a1b      	lsrs	r3, r3, #8
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	0800c7c0 	.word	0x0800c7c0

080029c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029cc:	f7ff ffde 	bl	800298c <HAL_RCC_GetHCLKFreq>
 80029d0:	4602      	mov	r2, r0
 80029d2:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	0adb      	lsrs	r3, r3, #11
 80029d8:	f003 0307 	and.w	r3, r3, #7
 80029dc:	4903      	ldr	r1, [pc, #12]	; (80029ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80029de:	5ccb      	ldrb	r3, [r1, r3]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	0800c7c0 	.word	0x0800c7c0

080029f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <RCC_Delay+0x34>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <RCC_Delay+0x38>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0a5b      	lsrs	r3, r3, #9
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a0c:	bf00      	nop
  }
  while (Delay --);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1e5a      	subs	r2, r3, #1
 8002a12:	60fa      	str	r2, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d1f9      	bne.n	8002a0c <RCC_Delay+0x1c>
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000058 	.word	0x20000058
 8002a28:	10624dd3 	.word	0x10624dd3

08002a2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e041      	b.n	8002ac2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d106      	bne.n	8002a58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7fe fe14 	bl	8001680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2202      	movs	r2, #2
 8002a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3304      	adds	r3, #4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	f000 f8f2 	bl	8002c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
 8002ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d101      	bne.n	8002ae2 <HAL_TIM_ConfigClockSource+0x18>
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e0b3      	b.n	8002c4a <HAL_TIM_ConfigClockSource+0x180>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b00:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b08:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1a:	d03e      	beq.n	8002b9a <HAL_TIM_ConfigClockSource+0xd0>
 8002b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b20:	f200 8087 	bhi.w	8002c32 <HAL_TIM_ConfigClockSource+0x168>
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b28:	f000 8085 	beq.w	8002c36 <HAL_TIM_ConfigClockSource+0x16c>
 8002b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b30:	d87f      	bhi.n	8002c32 <HAL_TIM_ConfigClockSource+0x168>
 8002b32:	2b70      	cmp	r3, #112	; 0x70
 8002b34:	d01a      	beq.n	8002b6c <HAL_TIM_ConfigClockSource+0xa2>
 8002b36:	2b70      	cmp	r3, #112	; 0x70
 8002b38:	d87b      	bhi.n	8002c32 <HAL_TIM_ConfigClockSource+0x168>
 8002b3a:	2b60      	cmp	r3, #96	; 0x60
 8002b3c:	d050      	beq.n	8002be0 <HAL_TIM_ConfigClockSource+0x116>
 8002b3e:	2b60      	cmp	r3, #96	; 0x60
 8002b40:	d877      	bhi.n	8002c32 <HAL_TIM_ConfigClockSource+0x168>
 8002b42:	2b50      	cmp	r3, #80	; 0x50
 8002b44:	d03c      	beq.n	8002bc0 <HAL_TIM_ConfigClockSource+0xf6>
 8002b46:	2b50      	cmp	r3, #80	; 0x50
 8002b48:	d873      	bhi.n	8002c32 <HAL_TIM_ConfigClockSource+0x168>
 8002b4a:	2b40      	cmp	r3, #64	; 0x40
 8002b4c:	d058      	beq.n	8002c00 <HAL_TIM_ConfigClockSource+0x136>
 8002b4e:	2b40      	cmp	r3, #64	; 0x40
 8002b50:	d86f      	bhi.n	8002c32 <HAL_TIM_ConfigClockSource+0x168>
 8002b52:	2b30      	cmp	r3, #48	; 0x30
 8002b54:	d064      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0x156>
 8002b56:	2b30      	cmp	r3, #48	; 0x30
 8002b58:	d86b      	bhi.n	8002c32 <HAL_TIM_ConfigClockSource+0x168>
 8002b5a:	2b20      	cmp	r3, #32
 8002b5c:	d060      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0x156>
 8002b5e:	2b20      	cmp	r3, #32
 8002b60:	d867      	bhi.n	8002c32 <HAL_TIM_ConfigClockSource+0x168>
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d05c      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0x156>
 8002b66:	2b10      	cmp	r3, #16
 8002b68:	d05a      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b6a:	e062      	b.n	8002c32 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	6899      	ldr	r1, [r3, #8]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685a      	ldr	r2, [r3, #4]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f000 f943 	bl	8002e06 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68fa      	ldr	r2, [r7, #12]
 8002b96:	609a      	str	r2, [r3, #8]
      break;
 8002b98:	e04e      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6899      	ldr	r1, [r3, #8]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	f000 f92c 	bl	8002e06 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bbc:	609a      	str	r2, [r3, #8]
      break;
 8002bbe:	e03b      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6818      	ldr	r0, [r3, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	6859      	ldr	r1, [r3, #4]
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f000 f8a3 	bl	8002d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2150      	movs	r1, #80	; 0x50
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f8fa 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002bde:	e02b      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6859      	ldr	r1, [r3, #4]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	461a      	mov	r2, r3
 8002bee:	f000 f8c1 	bl	8002d74 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2160      	movs	r1, #96	; 0x60
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 f8ea 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002bfe:	e01b      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	6859      	ldr	r1, [r3, #4]
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	f000 f883 	bl	8002d18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2140      	movs	r1, #64	; 0x40
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 f8da 	bl	8002dd2 <TIM_ITRx_SetConfig>
      break;
 8002c1e:	e00b      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4619      	mov	r1, r3
 8002c2a:	4610      	mov	r0, r2
 8002c2c:	f000 f8d1 	bl	8002dd2 <TIM_ITRx_SetConfig>
        break;
 8002c30:	e002      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c32:	bf00      	nop
 8002c34:	e000      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002c36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a29      	ldr	r2, [pc, #164]	; (8002d0c <TIM_Base_SetConfig+0xb8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d00b      	beq.n	8002c84 <TIM_Base_SetConfig+0x30>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c72:	d007      	beq.n	8002c84 <TIM_Base_SetConfig+0x30>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4a26      	ldr	r2, [pc, #152]	; (8002d10 <TIM_Base_SetConfig+0xbc>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d003      	beq.n	8002c84 <TIM_Base_SetConfig+0x30>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a25      	ldr	r2, [pc, #148]	; (8002d14 <TIM_Base_SetConfig+0xc0>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d108      	bne.n	8002c96 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	68fa      	ldr	r2, [r7, #12]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a1c      	ldr	r2, [pc, #112]	; (8002d0c <TIM_Base_SetConfig+0xb8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00b      	beq.n	8002cb6 <TIM_Base_SetConfig+0x62>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ca4:	d007      	beq.n	8002cb6 <TIM_Base_SetConfig+0x62>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a19      	ldr	r2, [pc, #100]	; (8002d10 <TIM_Base_SetConfig+0xbc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d003      	beq.n	8002cb6 <TIM_Base_SetConfig+0x62>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a18      	ldr	r2, [pc, #96]	; (8002d14 <TIM_Base_SetConfig+0xc0>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d108      	bne.n	8002cc8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4a07      	ldr	r2, [pc, #28]	; (8002d0c <TIM_Base_SetConfig+0xb8>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d103      	bne.n	8002cfc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	615a      	str	r2, [r3, #20]
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	40012c00 	.word	0x40012c00
 8002d10:	40000400 	.word	0x40000400
 8002d14:	40000800 	.word	0x40000800

08002d18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	f023 0201 	bic.w	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 030a 	bic.w	r3, r3, #10
 8002d54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	621a      	str	r2, [r3, #32]
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	f023 0210 	bic.w	r2, r3, #16
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d9e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	031b      	lsls	r3, r3, #12
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002db0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	697a      	ldr	r2, [r7, #20]
 8002dc0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	621a      	str	r2, [r3, #32]
}
 8002dc8:	bf00      	nop
 8002dca:	371c      	adds	r7, #28
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bc80      	pop	{r7}
 8002dd0:	4770      	bx	lr

08002dd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b085      	sub	sp, #20
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002de8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f043 0307 	orr.w	r3, r3, #7
 8002df4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bc80      	pop	{r7}
 8002e04:	4770      	bx	lr

08002e06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b087      	sub	sp, #28
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	60f8      	str	r0, [r7, #12]
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	021a      	lsls	r2, r3, #8
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	609a      	str	r2, [r3, #8]
}
 8002e3a:	bf00      	nop
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr

08002e44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e046      	b.n	8002eea <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68fa      	ldr	r2, [r7, #12]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d00e      	beq.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea8:	d009      	beq.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a10      	ldr	r2, [pc, #64]	; (8002efc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d10c      	bne.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr
 8002ef4:	40012c00 	.word	0x40012c00
 8002ef8:	40000400 	.word	0x40000400
 8002efc:	40000800 	.word	0x40000800

08002f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e03f      	b.n	8002f92 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d106      	bne.n	8002f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe fbc6 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2224      	movs	r2, #36	; 0x24
 8002f30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 fae3 	bl	8003510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2220      	movs	r2, #32
 8002f84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3708      	adds	r7, #8
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b085      	sub	sp, #20
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d130      	bne.n	8003016 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d002      	beq.n	8002fc0 <HAL_UART_Transmit_IT+0x26>
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e029      	b.n	8003018 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d101      	bne.n	8002fd2 <HAL_UART_Transmit_IT+0x38>
 8002fce:	2302      	movs	r3, #2
 8002fd0:	e022      	b.n	8003018 <HAL_UART_Transmit_IT+0x7e>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	88fa      	ldrh	r2, [r7, #6]
 8002fe4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	88fa      	ldrh	r2, [r7, #6]
 8002fea:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2221      	movs	r2, #33	; 0x21
 8002ff6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003010:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	e000      	b.n	8003018 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8003016:	2302      	movs	r3, #2
  }
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr

08003022 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003022:	b480      	push	{r7}
 8003024:	b085      	sub	sp, #20
 8003026:	af00      	add	r7, sp, #0
 8003028:	60f8      	str	r0, [r7, #12]
 800302a:	60b9      	str	r1, [r7, #8]
 800302c:	4613      	mov	r3, r2
 800302e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b20      	cmp	r3, #32
 800303a:	d140      	bne.n	80030be <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_UART_Receive_IT+0x26>
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e039      	b.n	80030c0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_UART_Receive_IT+0x38>
 8003056:	2302      	movs	r3, #2
 8003058:	e032      	b.n	80030c0 <HAL_UART_Receive_IT+0x9e>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	88fa      	ldrh	r2, [r7, #6]
 800306c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2222      	movs	r2, #34	; 0x22
 800307e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003098:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0220 	orr.w	r2, r2, #32
 80030b8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bc80      	pop	{r7}
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d10d      	bne.n	800311e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <HAL_UART_IRQHandler+0x52>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f979 	bl	800340e <UART_Receive_IT>
      return;
 800311c:	e0d0      	b.n	80032c0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 80b0 	beq.w	8003286 <HAL_UART_IRQHandler+0x1ba>
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 0301 	and.w	r3, r3, #1
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <HAL_UART_IRQHandler+0x70>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80a5 	beq.w	8003286 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_UART_IRQHandler+0x90>
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003154:	f043 0201 	orr.w	r2, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800315c:	69fb      	ldr	r3, [r7, #28]
 800315e:	f003 0304 	and.w	r3, r3, #4
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_UART_IRQHandler+0xb0>
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003174:	f043 0202 	orr.w	r2, r3, #2
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_UART_IRQHandler+0xd0>
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d005      	beq.n	800319c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003194:	f043 0204 	orr.w	r2, r3, #4
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00f      	beq.n	80031c6 <HAL_UART_IRQHandler+0xfa>
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f003 0320 	and.w	r3, r3, #32
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d104      	bne.n	80031ba <HAL_UART_IRQHandler+0xee>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0301 	and.w	r3, r3, #1
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d005      	beq.n	80031c6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	f043 0208 	orr.w	r2, r3, #8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d077      	beq.n	80032be <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <HAL_UART_IRQHandler+0x11c>
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f913 	bl	800340e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	bf14      	ite	ne
 80031f6:	2301      	movne	r3, #1
 80031f8:	2300      	moveq	r3, #0
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003202:	f003 0308 	and.w	r3, r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_UART_IRQHandler+0x144>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d031      	beq.n	8003274 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f864 	bl	80032de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003220:	2b00      	cmp	r3, #0
 8003222:	d023      	beq.n	800326c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695a      	ldr	r2, [r3, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003232:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003238:	2b00      	cmp	r3, #0
 800323a:	d013      	beq.n	8003264 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003240:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <HAL_UART_IRQHandler+0x1fc>)
 8003242:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003248:	4618      	mov	r0, r3
 800324a:	f7fe fda9 	bl	8001da0 <HAL_DMA_Abort_IT>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d016      	beq.n	8003282 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800325e:	4610      	mov	r0, r2
 8003260:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003262:	e00e      	b.n	8003282 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f000 f831 	bl	80032cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326a:	e00a      	b.n	8003282 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f82d 	bl	80032cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003272:	e006      	b.n	8003282 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f829 	bl	80032cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003280:	e01d      	b.n	80032be <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003282:	bf00      	nop
    return;
 8003284:	e01b      	b.n	80032be <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <HAL_UART_IRQHandler+0x1d6>
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d003      	beq.n	80032a2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f850 	bl	8003340 <UART_Transmit_IT>
    return;
 80032a0:	e00e      	b.n	80032c0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d009      	beq.n	80032c0 <HAL_UART_IRQHandler+0x1f4>
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d004      	beq.n	80032c0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f891 	bl	80033de <UART_EndTransmit_IT>
    return;
 80032bc:	e000      	b.n	80032c0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80032be:	bf00      	nop
  }
}
 80032c0:	3720      	adds	r7, #32
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	08003319 	.word	0x08003319

080032cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr

080032de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80032f4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr

08003318 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f7ff ffca 	bl	80032cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b21      	cmp	r3, #33	; 0x21
 8003352:	d13e      	bne.n	80033d2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335c:	d114      	bne.n	8003388 <UART_Transmit_IT+0x48>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d110      	bne.n	8003388 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	461a      	mov	r2, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800337a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	1c9a      	adds	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	621a      	str	r2, [r3, #32]
 8003386:	e008      	b.n	800339a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	1c59      	adds	r1, r3, #1
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	6211      	str	r1, [r2, #32]
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800339e:	b29b      	uxth	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4619      	mov	r1, r3
 80033a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10f      	bne.n	80033ce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	bc80      	pop	{r7}
 80033dc:	4770      	bx	lr

080033de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b082      	sub	sp, #8
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7fe f8be 	bl	8001580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b22      	cmp	r3, #34	; 0x22
 8003420:	d170      	bne.n	8003504 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800342a:	d117      	bne.n	800345c <UART_Receive_IT+0x4e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d113      	bne.n	800345c <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343c:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	b29b      	uxth	r3, r3
 8003446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800344a:	b29a      	uxth	r2, r3
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003454:	1c9a      	adds	r2, r3, #2
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	629a      	str	r2, [r3, #40]	; 0x28
 800345a:	e026      	b.n	80034aa <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003460:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003462:	2300      	movs	r3, #0
 8003464:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346e:	d007      	beq.n	8003480 <UART_Receive_IT+0x72>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d10a      	bne.n	800348e <UART_Receive_IT+0x80>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d106      	bne.n	800348e <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	701a      	strb	r2, [r3, #0]
 800348c:	e008      	b.n	80034a0 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	b2db      	uxtb	r3, r3
 8003496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349a:	b2da      	uxtb	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4619      	mov	r1, r3
 80034b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d120      	bne.n	8003500 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68da      	ldr	r2, [r3, #12]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0220 	bic.w	r2, r2, #32
 80034cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695a      	ldr	r2, [r3, #20]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0201 	bic.w	r2, r2, #1
 80034ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd ffcc 	bl	8001494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e002      	b.n	8003506 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8003504:	2302      	movs	r3, #2
  }
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68da      	ldr	r2, [r3, #12]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	695b      	ldr	r3, [r3, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800354a:	f023 030c 	bic.w	r3, r3, #12
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6812      	ldr	r2, [r2, #0]
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	430b      	orrs	r3, r1
 8003556:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699a      	ldr	r2, [r3, #24]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a2c      	ldr	r2, [pc, #176]	; (8003624 <UART_SetConfig+0x114>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003578:	f7ff fa26 	bl	80029c8 <HAL_RCC_GetPCLK2Freq>
 800357c:	60f8      	str	r0, [r7, #12]
 800357e:	e002      	b.n	8003586 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003580:	f7ff fa0e 	bl	80029a0 <HAL_RCC_GetPCLK1Freq>
 8003584:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	009a      	lsls	r2, r3, #2
 8003590:	441a      	add	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	fbb2 f3f3 	udiv	r3, r2, r3
 800359c:	4a22      	ldr	r2, [pc, #136]	; (8003628 <UART_SetConfig+0x118>)
 800359e:	fba2 2303 	umull	r2, r3, r2, r3
 80035a2:	095b      	lsrs	r3, r3, #5
 80035a4:	0119      	lsls	r1, r3, #4
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009a      	lsls	r2, r3, #2
 80035b0:	441a      	add	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035bc:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <UART_SetConfig+0x118>)
 80035be:	fba3 0302 	umull	r0, r3, r3, r2
 80035c2:	095b      	lsrs	r3, r3, #5
 80035c4:	2064      	movs	r0, #100	; 0x64
 80035c6:	fb00 f303 	mul.w	r3, r0, r3
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	011b      	lsls	r3, r3, #4
 80035ce:	3332      	adds	r3, #50	; 0x32
 80035d0:	4a15      	ldr	r2, [pc, #84]	; (8003628 <UART_SetConfig+0x118>)
 80035d2:	fba2 2303 	umull	r2, r3, r2, r3
 80035d6:	095b      	lsrs	r3, r3, #5
 80035d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035dc:	4419      	add	r1, r3
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009a      	lsls	r2, r3, #2
 80035e8:	441a      	add	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80035f4:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <UART_SetConfig+0x118>)
 80035f6:	fba3 0302 	umull	r0, r3, r3, r2
 80035fa:	095b      	lsrs	r3, r3, #5
 80035fc:	2064      	movs	r0, #100	; 0x64
 80035fe:	fb00 f303 	mul.w	r3, r0, r3
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	3332      	adds	r3, #50	; 0x32
 8003608:	4a07      	ldr	r2, [pc, #28]	; (8003628 <UART_SetConfig+0x118>)
 800360a:	fba2 2303 	umull	r2, r3, r2, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	f003 020f 	and.w	r2, r3, #15
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	440a      	add	r2, r1
 800361a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800361c:	bf00      	nop
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	40013800 	.word	0x40013800
 8003628:	51eb851f 	.word	0x51eb851f

0800362c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800363a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800363e:	2b84      	cmp	r3, #132	; 0x84
 8003640:	d005      	beq.n	800364e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003642:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	3303      	adds	r3, #3
 800364c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800364e:	68fb      	ldr	r3, [r7, #12]
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800365e:	f000 fad1 	bl	8003c04 <vTaskStartScheduler>
  
  return osOK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	bd80      	pop	{r7, pc}

08003668 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800366a:	b089      	sub	sp, #36	; 0x24
 800366c:	af04      	add	r7, sp, #16
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d020      	beq.n	80036bc <osThreadCreate+0x54>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	699b      	ldr	r3, [r3, #24]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d01c      	beq.n	80036bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685c      	ldr	r4, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681d      	ldr	r5, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691e      	ldr	r6, [r3, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff ffc9 	bl	800362c <makeFreeRtosPriority>
 800369a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036a4:	9202      	str	r2, [sp, #8]
 80036a6:	9301      	str	r3, [sp, #4]
 80036a8:	9100      	str	r1, [sp, #0]
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	4632      	mov	r2, r6
 80036ae:	4629      	mov	r1, r5
 80036b0:	4620      	mov	r0, r4
 80036b2:	f000 f8e8 	bl	8003886 <xTaskCreateStatic>
 80036b6:	4603      	mov	r3, r0
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e01c      	b.n	80036f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685c      	ldr	r4, [r3, #4]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80036c8:	b29e      	uxth	r6, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ffab 	bl	800362c <makeFreeRtosPriority>
 80036d6:	4602      	mov	r2, r0
 80036d8:	f107 030c 	add.w	r3, r7, #12
 80036dc:	9301      	str	r3, [sp, #4]
 80036de:	9200      	str	r2, [sp, #0]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	4632      	mov	r2, r6
 80036e4:	4629      	mov	r1, r5
 80036e6:	4620      	mov	r0, r4
 80036e8:	f000 f929 	bl	800393e <xTaskCreate>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d001      	beq.n	80036f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e000      	b.n	80036f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80036f6:	68fb      	ldr	r3, [r7, #12]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003700 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <osDelay+0x16>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	e000      	b.n	8003718 <osDelay+0x18>
 8003716:	2301      	movs	r3, #1
 8003718:	4618      	mov	r0, r3
 800371a:	f000 fa3f 	bl	8003b9c <vTaskDelay>
  
  return osOK;
 800371e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f103 0208 	add.w	r2, r3, #8
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f04f 32ff 	mov.w	r2, #4294967295
 8003740:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f103 0208 	add.w	r2, r3, #8
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f103 0208 	add.w	r2, r3, #8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003766:	b480      	push	{r7}
 8003768:	b083      	sub	sp, #12
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
 8003786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	601a      	str	r2, [r3, #0]
}
 80037ba:	bf00      	nop
 80037bc:	3714      	adds	r7, #20
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d103      	bne.n	80037e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	60fb      	str	r3, [r7, #12]
 80037e2:	e00c      	b.n	80037fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3308      	adds	r3, #8
 80037e8:	60fb      	str	r3, [r7, #12]
 80037ea:	e002      	b.n	80037f2 <vListInsert+0x2e>
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d2f6      	bcs.n	80037ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	683a      	ldr	r2, [r7, #0]
 800380c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	1c5a      	adds	r2, r3, #1
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	601a      	str	r2, [r3, #0]
}
 800382a:	bf00      	nop
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003834:	b480      	push	{r7}
 8003836:	b085      	sub	sp, #20
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6892      	ldr	r2, [r2, #8]
 800384a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	6852      	ldr	r2, [r2, #4]
 8003854:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	429a      	cmp	r2, r3
 800385e:	d103      	bne.n	8003868 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	1e5a      	subs	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	bc80      	pop	{r7}
 8003884:	4770      	bx	lr

08003886 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003886:	b580      	push	{r7, lr}
 8003888:	b08e      	sub	sp, #56	; 0x38
 800388a:	af04      	add	r7, sp, #16
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10a      	bne.n	80038b0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038ac:	bf00      	nop
 80038ae:	e7fe      	b.n	80038ae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80038b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <xTaskCreateStatic+0x46>
	__asm volatile
 80038b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ba:	f383 8811 	msr	BASEPRI, r3
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f3bf 8f4f 	dsb	sy
 80038c6:	61fb      	str	r3, [r7, #28]
}
 80038c8:	bf00      	nop
 80038ca:	e7fe      	b.n	80038ca <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80038cc:	2354      	movs	r3, #84	; 0x54
 80038ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	2b54      	cmp	r3, #84	; 0x54
 80038d4:	d00a      	beq.n	80038ec <xTaskCreateStatic+0x66>
	__asm volatile
 80038d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038da:	f383 8811 	msr	BASEPRI, r3
 80038de:	f3bf 8f6f 	isb	sy
 80038e2:	f3bf 8f4f 	dsb	sy
 80038e6:	61bb      	str	r3, [r7, #24]
}
 80038e8:	bf00      	nop
 80038ea:	e7fe      	b.n	80038ea <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80038ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d01e      	beq.n	8003930 <xTaskCreateStatic+0xaa>
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d01b      	beq.n	8003930 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80038f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003900:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	2202      	movs	r2, #2
 8003906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800390a:	2300      	movs	r3, #0
 800390c:	9303      	str	r3, [sp, #12]
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	9302      	str	r3, [sp, #8]
 8003912:	f107 0314 	add.w	r3, r7, #20
 8003916:	9301      	str	r3, [sp, #4]
 8003918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f850 	bl	80039c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800392a:	f000 f8cd 	bl	8003ac8 <prvAddNewTaskToReadyList>
 800392e:	e001      	b.n	8003934 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003930:	2300      	movs	r3, #0
 8003932:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003934:	697b      	ldr	r3, [r7, #20]
	}
 8003936:	4618      	mov	r0, r3
 8003938:	3728      	adds	r7, #40	; 0x28
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800393e:	b580      	push	{r7, lr}
 8003940:	b08c      	sub	sp, #48	; 0x30
 8003942:	af04      	add	r7, sp, #16
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	603b      	str	r3, [r7, #0]
 800394a:	4613      	mov	r3, r2
 800394c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fe8c 	bl	8004670 <pvPortMalloc>
 8003958:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00e      	beq.n	800397e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003960:	2054      	movs	r0, #84	; 0x54
 8003962:	f000 fe85 	bl	8004670 <pvPortMalloc>
 8003966:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
 8003974:	e005      	b.n	8003982 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003976:	6978      	ldr	r0, [r7, #20]
 8003978:	f000 ff3e 	bl	80047f8 <vPortFree>
 800397c:	e001      	b.n	8003982 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d017      	beq.n	80039b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003990:	88fa      	ldrh	r2, [r7, #6]
 8003992:	2300      	movs	r3, #0
 8003994:	9303      	str	r3, [sp, #12]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	9302      	str	r3, [sp, #8]
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68b9      	ldr	r1, [r7, #8]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f80e 	bl	80039c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ac:	69f8      	ldr	r0, [r7, #28]
 80039ae:	f000 f88b 	bl	8003ac8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80039b2:	2301      	movs	r3, #1
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	e002      	b.n	80039be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80039b8:	f04f 33ff 	mov.w	r3, #4294967295
 80039bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80039be:	69bb      	ldr	r3, [r7, #24]
	}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3720      	adds	r7, #32
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
 80039d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80039d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80039e0:	3b01      	subs	r3, #1
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	4413      	add	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	f023 0307 	bic.w	r3, r3, #7
 80039ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <prvInitialiseNewTask+0x48>
	__asm volatile
 80039fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fe:	f383 8811 	msr	BASEPRI, r3
 8003a02:	f3bf 8f6f 	isb	sy
 8003a06:	f3bf 8f4f 	dsb	sy
 8003a0a:	617b      	str	r3, [r7, #20]
}
 8003a0c:	bf00      	nop
 8003a0e:	e7fe      	b.n	8003a0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e012      	b.n	8003a3c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	7819      	ldrb	r1, [r3, #0]
 8003a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	3334      	adds	r3, #52	; 0x34
 8003a26:	460a      	mov	r2, r1
 8003a28:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	4413      	add	r3, r2
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d006      	beq.n	8003a44 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	d9e9      	bls.n	8003a16 <prvInitialiseNewTask+0x4e>
 8003a42:	e000      	b.n	8003a46 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003a44:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	2b06      	cmp	r3, #6
 8003a52:	d901      	bls.n	8003a58 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003a54:	2306      	movs	r3, #6
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a66:	2200      	movs	r2, #0
 8003a68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fe79 	bl	8003766 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a76:	3318      	adds	r3, #24
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff fe74 	bl	8003766 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	f1c3 0207 	rsb	r2, r3, #7
 8003a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a96:	2200      	movs	r2, #0
 8003a98:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	68f9      	ldr	r1, [r7, #12]
 8003aa6:	69b8      	ldr	r0, [r7, #24]
 8003aa8:	f000 fc2c 	bl	8004304 <pxPortInitialiseStack>
 8003aac:	4602      	mov	r2, r0
 8003aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab0:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003abc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003abe:	bf00      	nop
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ad0:	f000 fd0c 	bl	80044ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003ad4:	4b2a      	ldr	r3, [pc, #168]	; (8003b80 <prvAddNewTaskToReadyList+0xb8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	4a29      	ldr	r2, [pc, #164]	; (8003b80 <prvAddNewTaskToReadyList+0xb8>)
 8003adc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ade:	4b29      	ldr	r3, [pc, #164]	; (8003b84 <prvAddNewTaskToReadyList+0xbc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003ae6:	4a27      	ldr	r2, [pc, #156]	; (8003b84 <prvAddNewTaskToReadyList+0xbc>)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003aec:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <prvAddNewTaskToReadyList+0xb8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d110      	bne.n	8003b16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003af4:	f000 fac0 	bl	8004078 <prvInitialiseTaskLists>
 8003af8:	e00d      	b.n	8003b16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003afa:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <prvAddNewTaskToReadyList+0xc0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b02:	4b20      	ldr	r3, [pc, #128]	; (8003b84 <prvAddNewTaskToReadyList+0xbc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d802      	bhi.n	8003b16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003b10:	4a1c      	ldr	r2, [pc, #112]	; (8003b84 <prvAddNewTaskToReadyList+0xbc>)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <prvAddNewTaskToReadyList+0xc4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a1b      	ldr	r2, [pc, #108]	; (8003b8c <prvAddNewTaskToReadyList+0xc4>)
 8003b1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	2201      	movs	r2, #1
 8003b26:	409a      	lsls	r2, r3
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <prvAddNewTaskToReadyList+0xc8>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	4a18      	ldr	r2, [pc, #96]	; (8003b90 <prvAddNewTaskToReadyList+0xc8>)
 8003b30:	6013      	str	r3, [r2, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <prvAddNewTaskToReadyList+0xcc>)
 8003b40:	441a      	add	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4610      	mov	r0, r2
 8003b4a:	f7ff fe18 	bl	800377e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003b4e:	f000 fcfd 	bl	800454c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003b52:	4b0d      	ldr	r3, [pc, #52]	; (8003b88 <prvAddNewTaskToReadyList+0xc0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00e      	beq.n	8003b78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b5a:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <prvAddNewTaskToReadyList+0xbc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d207      	bcs.n	8003b78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <prvAddNewTaskToReadyList+0xd0>)
 8003b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b78:	bf00      	nop
 8003b7a:	3708      	adds	r7, #8
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	20000de4 	.word	0x20000de4
 8003b84:	20000ce4 	.word	0x20000ce4
 8003b88:	20000df0 	.word	0x20000df0
 8003b8c:	20000e00 	.word	0x20000e00
 8003b90:	20000dec 	.word	0x20000dec
 8003b94:	20000ce8 	.word	0x20000ce8
 8003b98:	e000ed04 	.word	0xe000ed04

08003b9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d017      	beq.n	8003bde <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003bae:	4b13      	ldr	r3, [pc, #76]	; (8003bfc <vTaskDelay+0x60>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <vTaskDelay+0x30>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	60bb      	str	r3, [r7, #8]
}
 8003bc8:	bf00      	nop
 8003bca:	e7fe      	b.n	8003bca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003bcc:	f000 f87a 	bl	8003cc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fb30 	bl	8004238 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003bd8:	f000 f882 	bl	8003ce0 <xTaskResumeAll>
 8003bdc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d107      	bne.n	8003bf4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <vTaskDelay+0x64>)
 8003be6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000e0c 	.word	0x20000e0c
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	; 0x28
 8003c08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c12:	463a      	mov	r2, r7
 8003c14:	1d39      	adds	r1, r7, #4
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fd fa66 	bl	80010ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c20:	6839      	ldr	r1, [r7, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	9202      	str	r2, [sp, #8]
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	460a      	mov	r2, r1
 8003c32:	491e      	ldr	r1, [pc, #120]	; (8003cac <vTaskStartScheduler+0xa8>)
 8003c34:	481e      	ldr	r0, [pc, #120]	; (8003cb0 <vTaskStartScheduler+0xac>)
 8003c36:	f7ff fe26 	bl	8003886 <xTaskCreateStatic>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4a1d      	ldr	r2, [pc, #116]	; (8003cb4 <vTaskStartScheduler+0xb0>)
 8003c3e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c40:	4b1c      	ldr	r3, [pc, #112]	; (8003cb4 <vTaskStartScheduler+0xb0>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	617b      	str	r3, [r7, #20]
 8003c4c:	e001      	b.n	8003c52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d116      	bne.n	8003c86 <vTaskStartScheduler+0x82>
	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	613b      	str	r3, [r7, #16]
}
 8003c6a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c6c:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <vTaskStartScheduler+0xb4>)
 8003c6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c74:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <vTaskStartScheduler+0xb8>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c7a:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <vTaskStartScheduler+0xbc>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c80:	f000 fbc2 	bl	8004408 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c84:	e00e      	b.n	8003ca4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8c:	d10a      	bne.n	8003ca4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	60fb      	str	r3, [r7, #12]
}
 8003ca0:	bf00      	nop
 8003ca2:	e7fe      	b.n	8003ca2 <vTaskStartScheduler+0x9e>
}
 8003ca4:	bf00      	nop
 8003ca6:	3718      	adds	r7, #24
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	0800c6e4 	.word	0x0800c6e4
 8003cb0:	08004049 	.word	0x08004049
 8003cb4:	20000e08 	.word	0x20000e08
 8003cb8:	20000e04 	.word	0x20000e04
 8003cbc:	20000df0 	.word	0x20000df0
 8003cc0:	20000de8 	.word	0x20000de8

08003cc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003cc8:	4b04      	ldr	r3, [pc, #16]	; (8003cdc <vTaskSuspendAll+0x18>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	4a03      	ldr	r2, [pc, #12]	; (8003cdc <vTaskSuspendAll+0x18>)
 8003cd0:	6013      	str	r3, [r2, #0]
}
 8003cd2:	bf00      	nop
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000e0c 	.word	0x20000e0c

08003ce0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003cee:	4b41      	ldr	r3, [pc, #260]	; (8003df4 <xTaskResumeAll+0x114>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <xTaskResumeAll+0x2c>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	603b      	str	r3, [r7, #0]
}
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d0c:	f000 fbee 	bl	80044ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d10:	4b38      	ldr	r3, [pc, #224]	; (8003df4 <xTaskResumeAll+0x114>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	4a37      	ldr	r2, [pc, #220]	; (8003df4 <xTaskResumeAll+0x114>)
 8003d18:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d1a:	4b36      	ldr	r3, [pc, #216]	; (8003df4 <xTaskResumeAll+0x114>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d161      	bne.n	8003de6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d22:	4b35      	ldr	r3, [pc, #212]	; (8003df8 <xTaskResumeAll+0x118>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d05d      	beq.n	8003de6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d2a:	e02e      	b.n	8003d8a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d2c:	4b33      	ldr	r3, [pc, #204]	; (8003dfc <xTaskResumeAll+0x11c>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	3318      	adds	r3, #24
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff fd7b 	bl	8003834 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3304      	adds	r3, #4
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff fd76 	bl	8003834 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	4b2b      	ldr	r3, [pc, #172]	; (8003e00 <xTaskResumeAll+0x120>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	4a2a      	ldr	r2, [pc, #168]	; (8003e00 <xTaskResumeAll+0x120>)
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5e:	4613      	mov	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4a27      	ldr	r2, [pc, #156]	; (8003e04 <xTaskResumeAll+0x124>)
 8003d68:	441a      	add	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4610      	mov	r0, r2
 8003d72:	f7ff fd04 	bl	800377e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d7a:	4b23      	ldr	r3, [pc, #140]	; (8003e08 <xTaskResumeAll+0x128>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d302      	bcc.n	8003d8a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003d84:	4b21      	ldr	r3, [pc, #132]	; (8003e0c <xTaskResumeAll+0x12c>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d8a:	4b1c      	ldr	r3, [pc, #112]	; (8003dfc <xTaskResumeAll+0x11c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1cc      	bne.n	8003d2c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d98:	f000 fa0c 	bl	80041b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d9c:	4b1c      	ldr	r3, [pc, #112]	; (8003e10 <xTaskResumeAll+0x130>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d010      	beq.n	8003dca <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003da8:	f000 f836 	bl	8003e18 <xTaskIncrementTick>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d002      	beq.n	8003db8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003db2:	4b16      	ldr	r3, [pc, #88]	; (8003e0c <xTaskResumeAll+0x12c>)
 8003db4:	2201      	movs	r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f1      	bne.n	8003da8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <xTaskResumeAll+0x130>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dca:	4b10      	ldr	r3, [pc, #64]	; (8003e0c <xTaskResumeAll+0x12c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d009      	beq.n	8003de6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003dd6:	4b0f      	ldr	r3, [pc, #60]	; (8003e14 <xTaskResumeAll+0x134>)
 8003dd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003de6:	f000 fbb1 	bl	800454c <vPortExitCritical>

	return xAlreadyYielded;
 8003dea:	68bb      	ldr	r3, [r7, #8]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3710      	adds	r7, #16
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000e0c 	.word	0x20000e0c
 8003df8:	20000de4 	.word	0x20000de4
 8003dfc:	20000da4 	.word	0x20000da4
 8003e00:	20000dec 	.word	0x20000dec
 8003e04:	20000ce8 	.word	0x20000ce8
 8003e08:	20000ce4 	.word	0x20000ce4
 8003e0c:	20000df8 	.word	0x20000df8
 8003e10:	20000df4 	.word	0x20000df4
 8003e14:	e000ed04 	.word	0xe000ed04

08003e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e22:	4b51      	ldr	r3, [pc, #324]	; (8003f68 <xTaskIncrementTick+0x150>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 808d 	bne.w	8003f46 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e2c:	4b4f      	ldr	r3, [pc, #316]	; (8003f6c <xTaskIncrementTick+0x154>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3301      	adds	r3, #1
 8003e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e34:	4a4d      	ldr	r2, [pc, #308]	; (8003f6c <xTaskIncrementTick+0x154>)
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d120      	bne.n	8003e82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e40:	4b4b      	ldr	r3, [pc, #300]	; (8003f70 <xTaskIncrementTick+0x158>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	603b      	str	r3, [r7, #0]
}
 8003e5c:	bf00      	nop
 8003e5e:	e7fe      	b.n	8003e5e <xTaskIncrementTick+0x46>
 8003e60:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <xTaskIncrementTick+0x158>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	4b43      	ldr	r3, [pc, #268]	; (8003f74 <xTaskIncrementTick+0x15c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a41      	ldr	r2, [pc, #260]	; (8003f70 <xTaskIncrementTick+0x158>)
 8003e6c:	6013      	str	r3, [r2, #0]
 8003e6e:	4a41      	ldr	r2, [pc, #260]	; (8003f74 <xTaskIncrementTick+0x15c>)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	4b40      	ldr	r3, [pc, #256]	; (8003f78 <xTaskIncrementTick+0x160>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	4a3f      	ldr	r2, [pc, #252]	; (8003f78 <xTaskIncrementTick+0x160>)
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	f000 f999 	bl	80041b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e82:	4b3e      	ldr	r3, [pc, #248]	; (8003f7c <xTaskIncrementTick+0x164>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d34d      	bcc.n	8003f28 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e8c:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <xTaskIncrementTick+0x158>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <xTaskIncrementTick+0x82>
 8003e96:	2301      	movs	r3, #1
 8003e98:	e000      	b.n	8003e9c <xTaskIncrementTick+0x84>
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d004      	beq.n	8003eaa <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ea0:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <xTaskIncrementTick+0x164>)
 8003ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea6:	601a      	str	r2, [r3, #0]
					break;
 8003ea8:	e03e      	b.n	8003f28 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <xTaskIncrementTick+0x158>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d203      	bcs.n	8003eca <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ec2:	4a2e      	ldr	r2, [pc, #184]	; (8003f7c <xTaskIncrementTick+0x164>)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6013      	str	r3, [r2, #0]
						break;
 8003ec8:	e02e      	b.n	8003f28 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff fcb0 	bl	8003834 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	3318      	adds	r3, #24
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7ff fca7 	bl	8003834 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eea:	2201      	movs	r2, #1
 8003eec:	409a      	lsls	r2, r3
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <xTaskIncrementTick+0x168>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	4a22      	ldr	r2, [pc, #136]	; (8003f80 <xTaskIncrementTick+0x168>)
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	4a1f      	ldr	r2, [pc, #124]	; (8003f84 <xTaskIncrementTick+0x16c>)
 8003f06:	441a      	add	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f7ff fc35 	bl	800377e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f18:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <xTaskIncrementTick+0x170>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d3b4      	bcc.n	8003e8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f22:	2301      	movs	r3, #1
 8003f24:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f26:	e7b1      	b.n	8003e8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f28:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <xTaskIncrementTick+0x170>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2e:	4915      	ldr	r1, [pc, #84]	; (8003f84 <xTaskIncrementTick+0x16c>)
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d907      	bls.n	8003f50 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003f40:	2301      	movs	r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	e004      	b.n	8003f50 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f46:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <xTaskIncrementTick+0x174>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	4a0f      	ldr	r2, [pc, #60]	; (8003f8c <xTaskIncrementTick+0x174>)
 8003f4e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <xTaskIncrementTick+0x178>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f5c:	697b      	ldr	r3, [r7, #20]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3718      	adds	r7, #24
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	20000e0c 	.word	0x20000e0c
 8003f6c:	20000de8 	.word	0x20000de8
 8003f70:	20000d9c 	.word	0x20000d9c
 8003f74:	20000da0 	.word	0x20000da0
 8003f78:	20000dfc 	.word	0x20000dfc
 8003f7c:	20000e04 	.word	0x20000e04
 8003f80:	20000dec 	.word	0x20000dec
 8003f84:	20000ce8 	.word	0x20000ce8
 8003f88:	20000ce4 	.word	0x20000ce4
 8003f8c:	20000df4 	.word	0x20000df4
 8003f90:	20000df8 	.word	0x20000df8

08003f94 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <vTaskSwitchContext+0xa0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fa2:	4b25      	ldr	r3, [pc, #148]	; (8004038 <vTaskSwitchContext+0xa4>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fa8:	e03f      	b.n	800402a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003faa:	4b23      	ldr	r3, [pc, #140]	; (8004038 <vTaskSwitchContext+0xa4>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003fb0:	4b22      	ldr	r3, [pc, #136]	; (800403c <vTaskSwitchContext+0xa8>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	fab3 f383 	clz	r3, r3
 8003fbc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
 8003fc0:	f1c3 031f 	rsb	r3, r3, #31
 8003fc4:	617b      	str	r3, [r7, #20]
 8003fc6:	491e      	ldr	r1, [pc, #120]	; (8004040 <vTaskSwitchContext+0xac>)
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	607b      	str	r3, [r7, #4]
}
 8003fec:	bf00      	nop
 8003fee:	e7fe      	b.n	8003fee <vTaskSwitchContext+0x5a>
 8003ff0:	697a      	ldr	r2, [r7, #20]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4a11      	ldr	r2, [pc, #68]	; (8004040 <vTaskSwitchContext+0xac>)
 8003ffc:	4413      	add	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	605a      	str	r2, [r3, #4]
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	685a      	ldr	r2, [r3, #4]
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	3308      	adds	r3, #8
 8004012:	429a      	cmp	r2, r3
 8004014:	d104      	bne.n	8004020 <vTaskSwitchContext+0x8c>
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	605a      	str	r2, [r3, #4]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	4a07      	ldr	r2, [pc, #28]	; (8004044 <vTaskSwitchContext+0xb0>)
 8004028:	6013      	str	r3, [r2, #0]
}
 800402a:	bf00      	nop
 800402c:	371c      	adds	r7, #28
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr
 8004034:	20000e0c 	.word	0x20000e0c
 8004038:	20000df8 	.word	0x20000df8
 800403c:	20000dec 	.word	0x20000dec
 8004040:	20000ce8 	.word	0x20000ce8
 8004044:	20000ce4 	.word	0x20000ce4

08004048 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004050:	f000 f852 	bl	80040f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004054:	4b06      	ldr	r3, [pc, #24]	; (8004070 <prvIdleTask+0x28>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d9f9      	bls.n	8004050 <prvIdleTask+0x8>
			{
				taskYIELD();
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <prvIdleTask+0x2c>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800406c:	e7f0      	b.n	8004050 <prvIdleTask+0x8>
 800406e:	bf00      	nop
 8004070:	20000ce8 	.word	0x20000ce8
 8004074:	e000ed04 	.word	0xe000ed04

08004078 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800407e:	2300      	movs	r3, #0
 8004080:	607b      	str	r3, [r7, #4]
 8004082:	e00c      	b.n	800409e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4a12      	ldr	r2, [pc, #72]	; (80040d8 <prvInitialiseTaskLists+0x60>)
 8004090:	4413      	add	r3, r2
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fb48 	bl	8003728 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3301      	adds	r3, #1
 800409c:	607b      	str	r3, [r7, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b06      	cmp	r3, #6
 80040a2:	d9ef      	bls.n	8004084 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80040a4:	480d      	ldr	r0, [pc, #52]	; (80040dc <prvInitialiseTaskLists+0x64>)
 80040a6:	f7ff fb3f 	bl	8003728 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80040aa:	480d      	ldr	r0, [pc, #52]	; (80040e0 <prvInitialiseTaskLists+0x68>)
 80040ac:	f7ff fb3c 	bl	8003728 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80040b0:	480c      	ldr	r0, [pc, #48]	; (80040e4 <prvInitialiseTaskLists+0x6c>)
 80040b2:	f7ff fb39 	bl	8003728 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80040b6:	480c      	ldr	r0, [pc, #48]	; (80040e8 <prvInitialiseTaskLists+0x70>)
 80040b8:	f7ff fb36 	bl	8003728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80040bc:	480b      	ldr	r0, [pc, #44]	; (80040ec <prvInitialiseTaskLists+0x74>)
 80040be:	f7ff fb33 	bl	8003728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80040c2:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <prvInitialiseTaskLists+0x78>)
 80040c4:	4a05      	ldr	r2, [pc, #20]	; (80040dc <prvInitialiseTaskLists+0x64>)
 80040c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <prvInitialiseTaskLists+0x7c>)
 80040ca:	4a05      	ldr	r2, [pc, #20]	; (80040e0 <prvInitialiseTaskLists+0x68>)
 80040cc:	601a      	str	r2, [r3, #0]
}
 80040ce:	bf00      	nop
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	20000ce8 	.word	0x20000ce8
 80040dc:	20000d74 	.word	0x20000d74
 80040e0:	20000d88 	.word	0x20000d88
 80040e4:	20000da4 	.word	0x20000da4
 80040e8:	20000db8 	.word	0x20000db8
 80040ec:	20000dd0 	.word	0x20000dd0
 80040f0:	20000d9c 	.word	0x20000d9c
 80040f4:	20000da0 	.word	0x20000da0

080040f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040fe:	e019      	b.n	8004134 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004100:	f000 f9f4 	bl	80044ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004104:	4b10      	ldr	r3, [pc, #64]	; (8004148 <prvCheckTasksWaitingTermination+0x50>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	3304      	adds	r3, #4
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fb8f 	bl	8003834 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004116:	4b0d      	ldr	r3, [pc, #52]	; (800414c <prvCheckTasksWaitingTermination+0x54>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3b01      	subs	r3, #1
 800411c:	4a0b      	ldr	r2, [pc, #44]	; (800414c <prvCheckTasksWaitingTermination+0x54>)
 800411e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <prvCheckTasksWaitingTermination+0x58>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3b01      	subs	r3, #1
 8004126:	4a0a      	ldr	r2, [pc, #40]	; (8004150 <prvCheckTasksWaitingTermination+0x58>)
 8004128:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800412a:	f000 fa0f 	bl	800454c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f810 	bl	8004154 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004134:	4b06      	ldr	r3, [pc, #24]	; (8004150 <prvCheckTasksWaitingTermination+0x58>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e1      	bne.n	8004100 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800413c:	bf00      	nop
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	20000db8 	.word	0x20000db8
 800414c:	20000de4 	.word	0x20000de4
 8004150:	20000dcc 	.word	0x20000dcc

08004154 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004162:	2b00      	cmp	r3, #0
 8004164:	d108      	bne.n	8004178 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416a:	4618      	mov	r0, r3
 800416c:	f000 fb44 	bl	80047f8 <vPortFree>
				vPortFree( pxTCB );
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fb41 	bl	80047f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004176:	e018      	b.n	80041aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800417e:	2b01      	cmp	r3, #1
 8004180:	d103      	bne.n	800418a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fb38 	bl	80047f8 <vPortFree>
	}
 8004188:	e00f      	b.n	80041aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004190:	2b02      	cmp	r3, #2
 8004192:	d00a      	beq.n	80041aa <prvDeleteTCB+0x56>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	60fb      	str	r3, [r7, #12]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <prvDeleteTCB+0x54>
	}
 80041aa:	bf00      	nop
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041ba:	4b0e      	ldr	r3, [pc, #56]	; (80041f4 <prvResetNextTaskUnblockTime+0x40>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <prvResetNextTaskUnblockTime+0x14>
 80041c4:	2301      	movs	r3, #1
 80041c6:	e000      	b.n	80041ca <prvResetNextTaskUnblockTime+0x16>
 80041c8:	2300      	movs	r3, #0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d004      	beq.n	80041d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <prvResetNextTaskUnblockTime+0x44>)
 80041d0:	f04f 32ff 	mov.w	r2, #4294967295
 80041d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80041d6:	e008      	b.n	80041ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041d8:	4b06      	ldr	r3, [pc, #24]	; (80041f4 <prvResetNextTaskUnblockTime+0x40>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	4a04      	ldr	r2, [pc, #16]	; (80041f8 <prvResetNextTaskUnblockTime+0x44>)
 80041e8:	6013      	str	r3, [r2, #0]
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bc80      	pop	{r7}
 80041f2:	4770      	bx	lr
 80041f4:	20000d9c 	.word	0x20000d9c
 80041f8:	20000e04 	.word	0x20000e04

080041fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <xTaskGetSchedulerState+0x34>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d102      	bne.n	8004210 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800420a:	2301      	movs	r3, #1
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	e008      	b.n	8004222 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004210:	4b08      	ldr	r3, [pc, #32]	; (8004234 <xTaskGetSchedulerState+0x38>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004218:	2302      	movs	r3, #2
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	e001      	b.n	8004222 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004222:	687b      	ldr	r3, [r7, #4]
	}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000df0 	.word	0x20000df0
 8004234:	20000e0c 	.word	0x20000e0c

08004238 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004242:	4b29      	ldr	r3, [pc, #164]	; (80042e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004248:	4b28      	ldr	r3, [pc, #160]	; (80042ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3304      	adds	r3, #4
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff faf0 	bl	8003834 <uxListRemove>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800425a:	4b24      	ldr	r3, [pc, #144]	; (80042ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	2201      	movs	r2, #1
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43da      	mvns	r2, r3
 8004268:	4b21      	ldr	r3, [pc, #132]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4013      	ands	r3, r2
 800426e:	4a20      	ldr	r2, [pc, #128]	; (80042f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004270:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004278:	d10a      	bne.n	8004290 <prvAddCurrentTaskToDelayedList+0x58>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d007      	beq.n	8004290 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004280:	4b1a      	ldr	r3, [pc, #104]	; (80042ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3304      	adds	r3, #4
 8004286:	4619      	mov	r1, r3
 8004288:	481a      	ldr	r0, [pc, #104]	; (80042f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800428a:	f7ff fa78 	bl	800377e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800428e:	e026      	b.n	80042de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004298:	4b14      	ldr	r3, [pc, #80]	; (80042ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80042a0:	68ba      	ldr	r2, [r7, #8]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d209      	bcs.n	80042bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042a8:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	3304      	adds	r3, #4
 80042b2:	4619      	mov	r1, r3
 80042b4:	4610      	mov	r0, r2
 80042b6:	f7ff fa85 	bl	80037c4 <vListInsert>
}
 80042ba:	e010      	b.n	80042de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80042bc:	4b0f      	ldr	r3, [pc, #60]	; (80042fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f7ff fa7b 	bl	80037c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80042ce:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d202      	bcs.n	80042de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80042d8:	4a09      	ldr	r2, [pc, #36]	; (8004300 <prvAddCurrentTaskToDelayedList+0xc8>)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6013      	str	r3, [r2, #0]
}
 80042de:	bf00      	nop
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20000de8 	.word	0x20000de8
 80042ec:	20000ce4 	.word	0x20000ce4
 80042f0:	20000dec 	.word	0x20000dec
 80042f4:	20000dd0 	.word	0x20000dd0
 80042f8:	20000da0 	.word	0x20000da0
 80042fc:	20000d9c 	.word	0x20000d9c
 8004300:	20000e04 	.word	0x20000e04

08004304 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b04      	subs	r3, #4
 8004314:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800431c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	3b04      	subs	r3, #4
 8004322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f023 0201 	bic.w	r2, r3, #1
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b04      	subs	r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <pxPortInitialiseStack+0x54>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3b14      	subs	r3, #20
 800433e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3b20      	subs	r3, #32
 800434a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800434c:	68fb      	ldr	r3, [r7, #12]
}
 800434e:	4618      	mov	r0, r3
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	bc80      	pop	{r7}
 8004356:	4770      	bx	lr
 8004358:	0800435d 	.word	0x0800435d

0800435c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004362:	2300      	movs	r3, #0
 8004364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004366:	4b12      	ldr	r3, [pc, #72]	; (80043b0 <prvTaskExitError+0x54>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d00a      	beq.n	8004386 <prvTaskExitError+0x2a>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	60fb      	str	r3, [r7, #12]
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <prvTaskExitError+0x28>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	60bb      	str	r3, [r7, #8]
}
 8004398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800439a:	bf00      	nop
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0fc      	beq.n	800439c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80043a2:	bf00      	nop
 80043a4:	bf00      	nop
 80043a6:	3714      	adds	r7, #20
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bc80      	pop	{r7}
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20000064 	.word	0x20000064
	...

080043c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80043c0:	4b07      	ldr	r3, [pc, #28]	; (80043e0 <pxCurrentTCBConst2>)
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	6808      	ldr	r0, [r1, #0]
 80043c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80043ca:	f380 8809 	msr	PSP, r0
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f380 8811 	msr	BASEPRI, r0
 80043da:	f04e 0e0d 	orr.w	lr, lr, #13
 80043de:	4770      	bx	lr

080043e0 <pxCurrentTCBConst2>:
 80043e0:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop

080043e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80043e8:	4806      	ldr	r0, [pc, #24]	; (8004404 <prvPortStartFirstTask+0x1c>)
 80043ea:	6800      	ldr	r0, [r0, #0]
 80043ec:	6800      	ldr	r0, [r0, #0]
 80043ee:	f380 8808 	msr	MSP, r0
 80043f2:	b662      	cpsie	i
 80043f4:	b661      	cpsie	f
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	df00      	svc	0
 8004400:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004402:	bf00      	nop
 8004404:	e000ed08 	.word	0xe000ed08

08004408 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800440e:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <xPortStartScheduler+0xd0>)
 8004410:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	22ff      	movs	r2, #255	; 0xff
 800441e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004430:	b2da      	uxtb	r2, r3
 8004432:	4b2a      	ldr	r3, [pc, #168]	; (80044dc <xPortStartScheduler+0xd4>)
 8004434:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004436:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <xPortStartScheduler+0xd8>)
 8004438:	2207      	movs	r2, #7
 800443a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800443c:	e009      	b.n	8004452 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800443e:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <xPortStartScheduler+0xd8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3b01      	subs	r3, #1
 8004444:	4a26      	ldr	r2, [pc, #152]	; (80044e0 <xPortStartScheduler+0xd8>)
 8004446:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	b2db      	uxtb	r3, r3
 8004450:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004452:	78fb      	ldrb	r3, [r7, #3]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800445a:	2b80      	cmp	r3, #128	; 0x80
 800445c:	d0ef      	beq.n	800443e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800445e:	4b20      	ldr	r3, [pc, #128]	; (80044e0 <xPortStartScheduler+0xd8>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f1c3 0307 	rsb	r3, r3, #7
 8004466:	2b04      	cmp	r3, #4
 8004468:	d00a      	beq.n	8004480 <xPortStartScheduler+0x78>
	__asm volatile
 800446a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800446e:	f383 8811 	msr	BASEPRI, r3
 8004472:	f3bf 8f6f 	isb	sy
 8004476:	f3bf 8f4f 	dsb	sy
 800447a:	60bb      	str	r3, [r7, #8]
}
 800447c:	bf00      	nop
 800447e:	e7fe      	b.n	800447e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004480:	4b17      	ldr	r3, [pc, #92]	; (80044e0 <xPortStartScheduler+0xd8>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	4a16      	ldr	r2, [pc, #88]	; (80044e0 <xPortStartScheduler+0xd8>)
 8004488:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800448a:	4b15      	ldr	r3, [pc, #84]	; (80044e0 <xPortStartScheduler+0xd8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004492:	4a13      	ldr	r2, [pc, #76]	; (80044e0 <xPortStartScheduler+0xd8>)
 8004494:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <xPortStartScheduler+0xdc>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a10      	ldr	r2, [pc, #64]	; (80044e4 <xPortStartScheduler+0xdc>)
 80044a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <xPortStartScheduler+0xdc>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a0d      	ldr	r2, [pc, #52]	; (80044e4 <xPortStartScheduler+0xdc>)
 80044b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80044b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80044b6:	f000 f8b9 	bl	800462c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <xPortStartScheduler+0xe0>)
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80044c0:	f7ff ff92 	bl	80043e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80044c4:	f7ff fd66 	bl	8003f94 <vTaskSwitchContext>
	prvTaskExitError();
 80044c8:	f7ff ff48 	bl	800435c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	e000e400 	.word	0xe000e400
 80044dc:	20000e10 	.word	0x20000e10
 80044e0:	20000e14 	.word	0x20000e14
 80044e4:	e000ed20 	.word	0xe000ed20
 80044e8:	20000064 	.word	0x20000064

080044ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
	__asm volatile
 80044f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f6:	f383 8811 	msr	BASEPRI, r3
 80044fa:	f3bf 8f6f 	isb	sy
 80044fe:	f3bf 8f4f 	dsb	sy
 8004502:	607b      	str	r3, [r7, #4]
}
 8004504:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004506:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <vPortEnterCritical+0x58>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3301      	adds	r3, #1
 800450c:	4a0d      	ldr	r2, [pc, #52]	; (8004544 <vPortEnterCritical+0x58>)
 800450e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004510:	4b0c      	ldr	r3, [pc, #48]	; (8004544 <vPortEnterCritical+0x58>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d10f      	bne.n	8004538 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004518:	4b0b      	ldr	r3, [pc, #44]	; (8004548 <vPortEnterCritical+0x5c>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00a      	beq.n	8004538 <vPortEnterCritical+0x4c>
	__asm volatile
 8004522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004526:	f383 8811 	msr	BASEPRI, r3
 800452a:	f3bf 8f6f 	isb	sy
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	603b      	str	r3, [r7, #0]
}
 8004534:	bf00      	nop
 8004536:	e7fe      	b.n	8004536 <vPortEnterCritical+0x4a>
	}
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	bc80      	pop	{r7}
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	20000064 	.word	0x20000064
 8004548:	e000ed04 	.word	0xe000ed04

0800454c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004552:	4b11      	ldr	r3, [pc, #68]	; (8004598 <vPortExitCritical+0x4c>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10a      	bne.n	8004570 <vPortExitCritical+0x24>
	__asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	607b      	str	r3, [r7, #4]
}
 800456c:	bf00      	nop
 800456e:	e7fe      	b.n	800456e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004570:	4b09      	ldr	r3, [pc, #36]	; (8004598 <vPortExitCritical+0x4c>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3b01      	subs	r3, #1
 8004576:	4a08      	ldr	r2, [pc, #32]	; (8004598 <vPortExitCritical+0x4c>)
 8004578:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <vPortExitCritical+0x4c>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d105      	bne.n	800458e <vPortExitCritical+0x42>
 8004582:	2300      	movs	r3, #0
 8004584:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800458c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800458e:	bf00      	nop
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	20000064 	.word	0x20000064
 800459c:	00000000 	.word	0x00000000

080045a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045a0:	f3ef 8009 	mrs	r0, PSP
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <pxCurrentTCBConst>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045b0:	6010      	str	r0, [r2, #0]
 80045b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80045b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045ba:	f380 8811 	msr	BASEPRI, r0
 80045be:	f7ff fce9 	bl	8003f94 <vTaskSwitchContext>
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f380 8811 	msr	BASEPRI, r0
 80045ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	6808      	ldr	r0, [r1, #0]
 80045d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80045d6:	f380 8809 	msr	PSP, r0
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	4770      	bx	lr

080045e0 <pxCurrentTCBConst>:
 80045e0:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
	__asm volatile
 80045ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f2:	f383 8811 	msr	BASEPRI, r3
 80045f6:	f3bf 8f6f 	isb	sy
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	607b      	str	r3, [r7, #4]
}
 8004600:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004602:	f7ff fc09 	bl	8003e18 <xTaskIncrementTick>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <xPortSysTickHandler+0x40>)
 800460e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	2300      	movs	r3, #0
 8004616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	f383 8811 	msr	BASEPRI, r3
}
 800461e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004630:	4b0a      	ldr	r3, [pc, #40]	; (800465c <vPortSetupTimerInterrupt+0x30>)
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <vPortSetupTimerInterrupt+0x34>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800463c:	4b09      	ldr	r3, [pc, #36]	; (8004664 <vPortSetupTimerInterrupt+0x38>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a09      	ldr	r2, [pc, #36]	; (8004668 <vPortSetupTimerInterrupt+0x3c>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	099b      	lsrs	r3, r3, #6
 8004648:	4a08      	ldr	r2, [pc, #32]	; (800466c <vPortSetupTimerInterrupt+0x40>)
 800464a:	3b01      	subs	r3, #1
 800464c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800464e:	4b03      	ldr	r3, [pc, #12]	; (800465c <vPortSetupTimerInterrupt+0x30>)
 8004650:	2207      	movs	r2, #7
 8004652:	601a      	str	r2, [r3, #0]
}
 8004654:	bf00      	nop
 8004656:	46bd      	mov	sp, r7
 8004658:	bc80      	pop	{r7}
 800465a:	4770      	bx	lr
 800465c:	e000e010 	.word	0xe000e010
 8004660:	e000e018 	.word	0xe000e018
 8004664:	20000058 	.word	0x20000058
 8004668:	10624dd3 	.word	0x10624dd3
 800466c:	e000e014 	.word	0xe000e014

08004670 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b08a      	sub	sp, #40	; 0x28
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800467c:	f7ff fb22 	bl	8003cc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004680:	4b58      	ldr	r3, [pc, #352]	; (80047e4 <pvPortMalloc+0x174>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004688:	f000 f910 	bl	80048ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800468c:	4b56      	ldr	r3, [pc, #344]	; (80047e8 <pvPortMalloc+0x178>)
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 808e 	bne.w	80047b6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01d      	beq.n	80046dc <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80046a0:	2208      	movs	r2, #8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d014      	beq.n	80046dc <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f023 0307 	bic.w	r3, r3, #7
 80046b8:	3308      	adds	r3, #8
 80046ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00a      	beq.n	80046dc <pvPortMalloc+0x6c>
	__asm volatile
 80046c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ca:	f383 8811 	msr	BASEPRI, r3
 80046ce:	f3bf 8f6f 	isb	sy
 80046d2:	f3bf 8f4f 	dsb	sy
 80046d6:	617b      	str	r3, [r7, #20]
}
 80046d8:	bf00      	nop
 80046da:	e7fe      	b.n	80046da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d069      	beq.n	80047b6 <pvPortMalloc+0x146>
 80046e2:	4b42      	ldr	r3, [pc, #264]	; (80047ec <pvPortMalloc+0x17c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d864      	bhi.n	80047b6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046ec:	4b40      	ldr	r3, [pc, #256]	; (80047f0 <pvPortMalloc+0x180>)
 80046ee:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046f0:	4b3f      	ldr	r3, [pc, #252]	; (80047f0 <pvPortMalloc+0x180>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046f6:	e004      	b.n	8004702 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	d903      	bls.n	8004714 <pvPortMalloc+0xa4>
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f1      	bne.n	80046f8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004714:	4b33      	ldr	r3, [pc, #204]	; (80047e4 <pvPortMalloc+0x174>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471a:	429a      	cmp	r2, r3
 800471c:	d04b      	beq.n	80047b6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800471e:	6a3b      	ldr	r3, [r7, #32]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2208      	movs	r2, #8
 8004724:	4413      	add	r3, r2
 8004726:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	6a3b      	ldr	r3, [r7, #32]
 800472e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	1ad2      	subs	r2, r2, r3
 8004738:	2308      	movs	r3, #8
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	429a      	cmp	r2, r3
 800473e:	d91f      	bls.n	8004780 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4413      	add	r3, r2
 8004746:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f003 0307 	and.w	r3, r3, #7
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00a      	beq.n	8004768 <pvPortMalloc+0xf8>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	613b      	str	r3, [r7, #16]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	1ad2      	subs	r2, r2, r3
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800477a:	69b8      	ldr	r0, [r7, #24]
 800477c:	f000 f8f8 	bl	8004970 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <pvPortMalloc+0x17c>)
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	4a18      	ldr	r2, [pc, #96]	; (80047ec <pvPortMalloc+0x17c>)
 800478c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800478e:	4b17      	ldr	r3, [pc, #92]	; (80047ec <pvPortMalloc+0x17c>)
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	4b18      	ldr	r3, [pc, #96]	; (80047f4 <pvPortMalloc+0x184>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	429a      	cmp	r2, r3
 8004798:	d203      	bcs.n	80047a2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800479a:	4b14      	ldr	r3, [pc, #80]	; (80047ec <pvPortMalloc+0x17c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <pvPortMalloc+0x184>)
 80047a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <pvPortMalloc+0x178>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80047b6:	f7ff fa93 	bl	8003ce0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00a      	beq.n	80047da <pvPortMalloc+0x16a>
	__asm volatile
 80047c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c8:	f383 8811 	msr	BASEPRI, r3
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	f3bf 8f4f 	dsb	sy
 80047d4:	60fb      	str	r3, [r7, #12]
}
 80047d6:	bf00      	nop
 80047d8:	e7fe      	b.n	80047d8 <pvPortMalloc+0x168>
	return pvReturn;
 80047da:	69fb      	ldr	r3, [r7, #28]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3728      	adds	r7, #40	; 0x28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20001a20 	.word	0x20001a20
 80047e8:	20001a2c 	.word	0x20001a2c
 80047ec:	20001a24 	.word	0x20001a24
 80047f0:	20001a18 	.word	0x20001a18
 80047f4:	20001a28 	.word	0x20001a28

080047f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d048      	beq.n	800489c <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800480a:	2308      	movs	r3, #8
 800480c:	425b      	negs	r3, r3
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4413      	add	r3, r2
 8004812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	4b21      	ldr	r3, [pc, #132]	; (80048a4 <vPortFree+0xac>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4013      	ands	r3, r2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <vPortFree+0x44>
	__asm volatile
 8004826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482a:	f383 8811 	msr	BASEPRI, r3
 800482e:	f3bf 8f6f 	isb	sy
 8004832:	f3bf 8f4f 	dsb	sy
 8004836:	60fb      	str	r3, [r7, #12]
}
 8004838:	bf00      	nop
 800483a:	e7fe      	b.n	800483a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <vPortFree+0x62>
	__asm volatile
 8004844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004848:	f383 8811 	msr	BASEPRI, r3
 800484c:	f3bf 8f6f 	isb	sy
 8004850:	f3bf 8f4f 	dsb	sy
 8004854:	60bb      	str	r3, [r7, #8]
}
 8004856:	bf00      	nop
 8004858:	e7fe      	b.n	8004858 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	4b11      	ldr	r3, [pc, #68]	; (80048a4 <vPortFree+0xac>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4013      	ands	r3, r2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d019      	beq.n	800489c <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d115      	bne.n	800489c <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	4b0b      	ldr	r3, [pc, #44]	; (80048a4 <vPortFree+0xac>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	43db      	mvns	r3, r3
 800487a:	401a      	ands	r2, r3
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004880:	f7ff fa20 	bl	8003cc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <vPortFree+0xb0>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4413      	add	r3, r2
 800488e:	4a06      	ldr	r2, [pc, #24]	; (80048a8 <vPortFree+0xb0>)
 8004890:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004892:	6938      	ldr	r0, [r7, #16]
 8004894:	f000 f86c 	bl	8004970 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004898:	f7ff fa22 	bl	8003ce0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800489c:	bf00      	nop
 800489e:	3718      	adds	r7, #24
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	20001a2c 	.word	0x20001a2c
 80048a8:	20001a24 	.word	0x20001a24

080048ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80048b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048b8:	4b27      	ldr	r3, [pc, #156]	; (8004958 <prvHeapInit+0xac>)
 80048ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f003 0307 	and.w	r3, r3, #7
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00c      	beq.n	80048e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3307      	adds	r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f023 0307 	bic.w	r3, r3, #7
 80048d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	4a1f      	ldr	r2, [pc, #124]	; (8004958 <prvHeapInit+0xac>)
 80048dc:	4413      	add	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048e4:	4a1d      	ldr	r2, [pc, #116]	; (800495c <prvHeapInit+0xb0>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048ea:	4b1c      	ldr	r3, [pc, #112]	; (800495c <prvHeapInit+0xb0>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	4413      	add	r3, r2
 80048f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048f8:	2208      	movs	r2, #8
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1a9b      	subs	r3, r3, r2
 80048fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f023 0307 	bic.w	r3, r3, #7
 8004906:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a15      	ldr	r2, [pc, #84]	; (8004960 <prvHeapInit+0xb4>)
 800490c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <prvHeapInit+0xb4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2200      	movs	r2, #0
 8004914:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004916:	4b12      	ldr	r3, [pc, #72]	; (8004960 <prvHeapInit+0xb4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	1ad2      	subs	r2, r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800492c:	4b0c      	ldr	r3, [pc, #48]	; (8004960 <prvHeapInit+0xb4>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	4a0a      	ldr	r2, [pc, #40]	; (8004964 <prvHeapInit+0xb8>)
 800493a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	4a09      	ldr	r2, [pc, #36]	; (8004968 <prvHeapInit+0xbc>)
 8004942:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004944:	4b09      	ldr	r3, [pc, #36]	; (800496c <prvHeapInit+0xc0>)
 8004946:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800494a:	601a      	str	r2, [r3, #0]
}
 800494c:	bf00      	nop
 800494e:	3714      	adds	r7, #20
 8004950:	46bd      	mov	sp, r7
 8004952:	bc80      	pop	{r7}
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000e18 	.word	0x20000e18
 800495c:	20001a18 	.word	0x20001a18
 8004960:	20001a20 	.word	0x20001a20
 8004964:	20001a28 	.word	0x20001a28
 8004968:	20001a24 	.word	0x20001a24
 800496c:	20001a2c 	.word	0x20001a2c

08004970 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004978:	4b27      	ldr	r3, [pc, #156]	; (8004a18 <prvInsertBlockIntoFreeList+0xa8>)
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	e002      	b.n	8004984 <prvInsertBlockIntoFreeList+0x14>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	429a      	cmp	r2, r3
 800498c:	d8f7      	bhi.n	800497e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	4413      	add	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d108      	bne.n	80049b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	441a      	add	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	68ba      	ldr	r2, [r7, #8]
 80049bc:	441a      	add	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d118      	bne.n	80049f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <prvInsertBlockIntoFreeList+0xac>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d00d      	beq.n	80049ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685a      	ldr	r2, [r3, #4]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	441a      	add	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e008      	b.n	8004a00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049ee:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <prvInsertBlockIntoFreeList+0xac>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e003      	b.n	8004a00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d002      	beq.n	8004a0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a0e:	bf00      	nop
 8004a10:	3714      	adds	r7, #20
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	20001a18 	.word	0x20001a18
 8004a1c:	20001a20 	.word	0x20001a20

08004a20 <GPRMS_Analyze>:

uint8_t calc_checksum(uint8_t *s);


void GPRMS_Analyze(uint8_t *Data_from_GPS) /* */
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08c      	sub	sp, #48	; 0x30
 8004a24:	af0a      	add	r7, sp, #40	; 0x28
 8004a26:	6078      	str	r0, [r7, #4]
      sscanf (Data_from_GPS, "$GPRMC,%u,%c,%f,%c,%f,%c,%f,%f,%d,,,%c*%X",
 8004a28:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <GPRMS_Analyze+0x44>)
 8004a2a:	9308      	str	r3, [sp, #32]
 8004a2c:	4b0e      	ldr	r3, [pc, #56]	; (8004a68 <GPRMS_Analyze+0x48>)
 8004a2e:	9307      	str	r3, [sp, #28]
 8004a30:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <GPRMS_Analyze+0x4c>)
 8004a32:	9306      	str	r3, [sp, #24]
 8004a34:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <GPRMS_Analyze+0x50>)
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	4b0e      	ldr	r3, [pc, #56]	; (8004a74 <GPRMS_Analyze+0x54>)
 8004a3a:	9304      	str	r3, [sp, #16]
 8004a3c:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <GPRMS_Analyze+0x58>)
 8004a3e:	9303      	str	r3, [sp, #12]
 8004a40:	4b0e      	ldr	r3, [pc, #56]	; (8004a7c <GPRMS_Analyze+0x5c>)
 8004a42:	9302      	str	r3, [sp, #8]
 8004a44:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <GPRMS_Analyze+0x60>)
 8004a46:	9301      	str	r3, [sp, #4]
 8004a48:	4b0e      	ldr	r3, [pc, #56]	; (8004a84 <GPRMS_Analyze+0x64>)
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <GPRMS_Analyze+0x68>)
 8004a4e:	4a0f      	ldr	r2, [pc, #60]	; (8004a8c <GPRMS_Analyze+0x6c>)
 8004a50:	490f      	ldr	r1, [pc, #60]	; (8004a90 <GPRMS_Analyze+0x70>)
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f97c 	bl	8004d50 <sscanf>
              &in_gps_pck.courseOverGround,
              &in_gps_pck.date,
              &in_gps_pck.mode,
              &in_gps_pck.CheckSum
              );
      asm("nop");
 8004a58:	bf00      	nop
}
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20001bd0 	.word	0x20001bd0
 8004a68:	20001bcc 	.word	0x20001bcc
 8004a6c:	20001bc8 	.word	0x20001bc8
 8004a70:	20001bc4 	.word	0x20001bc4
 8004a74:	20001bc0 	.word	0x20001bc0
 8004a78:	20001bbc 	.word	0x20001bbc
 8004a7c:	20001bb8 	.word	0x20001bb8
 8004a80:	20001bb4 	.word	0x20001bb4
 8004a84:	20001bb0 	.word	0x20001bb0
 8004a88:	20001bac 	.word	0x20001bac
 8004a8c:	20001ba8 	.word	0x20001ba8
 8004a90:	0800c6ec 	.word	0x0800c6ec
 8004a94:	00000000 	.word	0x00000000

08004a98 <coordinates_packet>:
			  &in_gga_pck.CheckSum
              );
}

uint8_t *coordinates_packet(uint8_t *size, uint8_t *data_frm_gcs)
{
 8004a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9c:	b097      	sub	sp, #92	; 0x5c
 8004a9e:	af10      	add	r7, sp, #64	; 0x40
 8004aa0:	6178      	str	r0, [r7, #20]
 8004aa2:	6139      	str	r1, [r7, #16]
//	struct GPS_Packet *p_in_gps = &in_gps_pck;
//	int32_t mresult = 0;

	if(*(data_frm_gcs) == '!')
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	2b21      	cmp	r3, #33	; 0x21
 8004aaa:	d104      	bne.n	8004ab6 <coordinates_packet+0x1e>
		delta = 0.0;
 8004aac:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <coordinates_packet+0x1a0>)
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	e01a      	b.n	8004aec <coordinates_packet+0x54>
	else
	{
		delta = *(data_frm_gcs);
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fc f90a 	bl	8000cd4 <__aeabi_ui2f>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	4a5d      	ldr	r2, [pc, #372]	; (8004c38 <coordinates_packet+0x1a0>)
 8004ac4:	6013      	str	r3, [r2, #0]
		delta *= 0.001;
 8004ac6:	4b5c      	ldr	r3, [pc, #368]	; (8004c38 <coordinates_packet+0x1a0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fb fcac 	bl	8000428 <__aeabi_f2d>
 8004ad0:	a357      	add	r3, pc, #348	; (adr r3, 8004c30 <coordinates_packet+0x198>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	f7fb fcff 	bl	80004d8 <__aeabi_dmul>
 8004ada:	4602      	mov	r2, r0
 8004adc:	460b      	mov	r3, r1
 8004ade:	4610      	mov	r0, r2
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f7fb fff1 	bl	8000ac8 <__aeabi_d2f>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	4a53      	ldr	r2, [pc, #332]	; (8004c38 <coordinates_packet+0x1a0>)
 8004aea:	6013      	str	r3, [r2, #0]
	}
	sprintf (buffer, "$GPRMC,%u,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*",
 8004aec:	4b53      	ldr	r3, [pc, #332]	; (8004c3c <coordinates_packet+0x1a4>)
 8004aee:	681e      	ldr	r6, [r3, #0]
 	   	   	  	  	  in_gps_pck.utcTime,
					  in_gps_pck.status,
 8004af0:	4b52      	ldr	r3, [pc, #328]	; (8004c3c <coordinates_packet+0x1a4>)
 8004af2:	791b      	ldrb	r3, [r3, #4]
	sprintf (buffer, "$GPRMC,%u,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*",
 8004af4:	60fb      	str	r3, [r7, #12]
					  in_gps_pck.latitude - delta,
 8004af6:	4b51      	ldr	r3, [pc, #324]	; (8004c3c <coordinates_packet+0x1a4>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	4a4f      	ldr	r2, [pc, #316]	; (8004c38 <coordinates_packet+0x1a0>)
 8004afc:	6812      	ldr	r2, [r2, #0]
 8004afe:	4611      	mov	r1, r2
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fc f835 	bl	8000b70 <__aeabi_fsub>
 8004b06:	4603      	mov	r3, r0
	sprintf (buffer, "$GPRMC,%u,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*",
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fb fc8d 	bl	8000428 <__aeabi_f2d>
 8004b0e:	4604      	mov	r4, r0
 8004b10:	460d      	mov	r5, r1
					  in_gps_pck.nsIndicator,
 8004b12:	4b4a      	ldr	r3, [pc, #296]	; (8004c3c <coordinates_packet+0x1a4>)
 8004b14:	7b1b      	ldrb	r3, [r3, #12]
	sprintf (buffer, "$GPRMC,%u,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*",
 8004b16:	60bb      	str	r3, [r7, #8]
					  in_gps_pck.longitude,
 8004b18:	4b48      	ldr	r3, [pc, #288]	; (8004c3c <coordinates_packet+0x1a4>)
 8004b1a:	691b      	ldr	r3, [r3, #16]
	sprintf (buffer, "$GPRMC,%u,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*",
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fb fc83 	bl	8000428 <__aeabi_f2d>
 8004b22:	4680      	mov	r8, r0
 8004b24:	4689      	mov	r9, r1
					  in_gps_pck.ewIndicator,
 8004b26:	4b45      	ldr	r3, [pc, #276]	; (8004c3c <coordinates_packet+0x1a4>)
 8004b28:	7d1b      	ldrb	r3, [r3, #20]
	sprintf (buffer, "$GPRMC,%u,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*",
 8004b2a:	607b      	str	r3, [r7, #4]
					  in_gps_pck.speedOverGround,
 8004b2c:	4b43      	ldr	r3, [pc, #268]	; (8004c3c <coordinates_packet+0x1a4>)
 8004b2e:	699b      	ldr	r3, [r3, #24]
	sprintf (buffer, "$GPRMC,%u,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*",
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fb fc79 	bl	8000428 <__aeabi_f2d>
 8004b36:	4682      	mov	sl, r0
 8004b38:	468b      	mov	fp, r1
					  in_gps_pck.courseOverGround,
 8004b3a:	4b40      	ldr	r3, [pc, #256]	; (8004c3c <coordinates_packet+0x1a4>)
 8004b3c:	69db      	ldr	r3, [r3, #28]
	sprintf (buffer, "$GPRMC,%u,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*",
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fb fc72 	bl	8000428 <__aeabi_f2d>
 8004b44:	4b3d      	ldr	r3, [pc, #244]	; (8004c3c <coordinates_packet+0x1a4>)
 8004b46:	6a1a      	ldr	r2, [r3, #32]
					  in_gps_pck.date,
					  in_gps_pck.mode
 8004b48:	4b3c      	ldr	r3, [pc, #240]	; (8004c3c <coordinates_packet+0x1a4>)
 8004b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	sprintf (buffer, "$GPRMC,%u,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*",
 8004b4e:	930d      	str	r3, [sp, #52]	; 0x34
 8004b50:	920c      	str	r2, [sp, #48]	; 0x30
 8004b52:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b56:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	9206      	str	r2, [sp, #24]
 8004b5e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	9202      	str	r2, [sp, #8]
 8004b66:	e9cd 4500 	strd	r4, r5, [sp]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	4632      	mov	r2, r6
 8004b6e:	4934      	ldr	r1, [pc, #208]	; (8004c40 <coordinates_packet+0x1a8>)
 8004b70:	4834      	ldr	r0, [pc, #208]	; (8004c44 <coordinates_packet+0x1ac>)
 8004b72:	f000 f8cd 	bl	8004d10 <sprintf>
//	for (uint8_t i = 0; i < 5; i++)
//	{
//		mresult = (*(p_in_gps + i)).utcTime;
//		asm("nop");
//	}
	out_gps_pck.CheckSum = calc_checksum(buffer);
 8004b76:	4833      	ldr	r0, [pc, #204]	; (8004c44 <coordinates_packet+0x1ac>)
 8004b78:	f000 f86a 	bl	8004c50 <calc_checksum>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	461a      	mov	r2, r3
 8004b80:	4b31      	ldr	r3, [pc, #196]	; (8004c48 <coordinates_packet+0x1b0>)
 8004b82:	629a      	str	r2, [r3, #40]	; 0x28
	*size = sprintf (buffer, "$GPRMC,%.3f,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*%X\n",
 8004b84:	4b2d      	ldr	r3, [pc, #180]	; (8004c3c <coordinates_packet+0x1a4>)
 8004b86:	681e      	ldr	r6, [r3, #0]
					in_gps_pck.utcTime,
					in_gps_pck.status,
 8004b88:	4b2c      	ldr	r3, [pc, #176]	; (8004c3c <coordinates_packet+0x1a4>)
 8004b8a:	791b      	ldrb	r3, [r3, #4]
	*size = sprintf (buffer, "$GPRMC,%.3f,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*%X\n",
 8004b8c:	60fb      	str	r3, [r7, #12]
					in_gps_pck.latitude - delta,
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <coordinates_packet+0x1a4>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	4a29      	ldr	r2, [pc, #164]	; (8004c38 <coordinates_packet+0x1a0>)
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	4611      	mov	r1, r2
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f7fb ffe9 	bl	8000b70 <__aeabi_fsub>
 8004b9e:	4603      	mov	r3, r0
	*size = sprintf (buffer, "$GPRMC,%.3f,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*%X\n",
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fb fc41 	bl	8000428 <__aeabi_f2d>
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	460d      	mov	r5, r1
					in_gps_pck.nsIndicator,
 8004baa:	4b24      	ldr	r3, [pc, #144]	; (8004c3c <coordinates_packet+0x1a4>)
 8004bac:	7b1b      	ldrb	r3, [r3, #12]
	*size = sprintf (buffer, "$GPRMC,%.3f,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*%X\n",
 8004bae:	60bb      	str	r3, [r7, #8]
					in_gps_pck.longitude,
 8004bb0:	4b22      	ldr	r3, [pc, #136]	; (8004c3c <coordinates_packet+0x1a4>)
 8004bb2:	691b      	ldr	r3, [r3, #16]
	*size = sprintf (buffer, "$GPRMC,%.3f,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*%X\n",
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7fb fc37 	bl	8000428 <__aeabi_f2d>
 8004bba:	4680      	mov	r8, r0
 8004bbc:	4689      	mov	r9, r1
					in_gps_pck.ewIndicator,
 8004bbe:	4b1f      	ldr	r3, [pc, #124]	; (8004c3c <coordinates_packet+0x1a4>)
 8004bc0:	7d1b      	ldrb	r3, [r3, #20]
	*size = sprintf (buffer, "$GPRMC,%.3f,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*%X\n",
 8004bc2:	607b      	str	r3, [r7, #4]
					in_gps_pck.speedOverGround,
 8004bc4:	4b1d      	ldr	r3, [pc, #116]	; (8004c3c <coordinates_packet+0x1a4>)
 8004bc6:	699b      	ldr	r3, [r3, #24]
	*size = sprintf (buffer, "$GPRMC,%.3f,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*%X\n",
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fb fc2d 	bl	8000428 <__aeabi_f2d>
 8004bce:	4682      	mov	sl, r0
 8004bd0:	468b      	mov	fp, r1
					in_gps_pck.courseOverGround,
 8004bd2:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <coordinates_packet+0x1a4>)
 8004bd4:	69db      	ldr	r3, [r3, #28]
	*size = sprintf (buffer, "$GPRMC,%.3f,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*%X\n",
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fb fc26 	bl	8000428 <__aeabi_f2d>
 8004bdc:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <coordinates_packet+0x1a4>)
 8004bde:	6a1a      	ldr	r2, [r3, #32]
					in_gps_pck.date,
					in_gps_pck.mode,
 8004be0:	4b16      	ldr	r3, [pc, #88]	; (8004c3c <coordinates_packet+0x1a4>)
 8004be2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	*size = sprintf (buffer, "$GPRMC,%.3f,%c,%.4f,%c,%.4f,%c,%.2f,%.2f,%d,,,%c*%X\n",
 8004be6:	603b      	str	r3, [r7, #0]
 8004be8:	4b17      	ldr	r3, [pc, #92]	; (8004c48 <coordinates_packet+0x1b0>)
 8004bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bec:	930e      	str	r3, [sp, #56]	; 0x38
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	930d      	str	r3, [sp, #52]	; 0x34
 8004bf2:	920c      	str	r2, [sp, #48]	; 0x30
 8004bf4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004bf8:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	9206      	str	r2, [sp, #24]
 8004c00:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	9202      	str	r2, [sp, #8]
 8004c08:	e9cd 4500 	strd	r4, r5, [sp]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4632      	mov	r2, r6
 8004c10:	490e      	ldr	r1, [pc, #56]	; (8004c4c <coordinates_packet+0x1b4>)
 8004c12:	480c      	ldr	r0, [pc, #48]	; (8004c44 <coordinates_packet+0x1ac>)
 8004c14:	f000 f87c 	bl	8004d10 <sprintf>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	701a      	strb	r2, [r3, #0]
					out_gps_pck.CheckSum
					);
	return buffer;
 8004c20:	4b08      	ldr	r3, [pc, #32]	; (8004c44 <coordinates_packet+0x1ac>)
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c2c:	f3af 8000 	nop.w
 8004c30:	d2f1a9fc 	.word	0xd2f1a9fc
 8004c34:	3f50624d 	.word	0x3f50624d
 8004c38:	20001a30 	.word	0x20001a30
 8004c3c:	20001ba8 	.word	0x20001ba8
 8004c40:	0800c748 	.word	0x0800c748
 8004c44:	20001c00 	.word	0x20001c00
 8004c48:	20001b7c 	.word	0x20001b7c
 8004c4c:	0800c778 	.word	0x0800c778

08004c50 <calc_checksum>:

	return raw_buff;
}

uint8_t calc_checksum(uint8_t *s)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	uint8_t result;
	result = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]
	s++; // Skip dollar sign
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	607b      	str	r3, [r7, #4]
	while ((*s != '*') && (*s != '\0'))
 8004c62:	e006      	b.n	8004c72 <calc_checksum+0x22>
		result ^= *s++;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1c5a      	adds	r2, r3, #1
 8004c68:	607a      	str	r2, [r7, #4]
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	4053      	eors	r3, r2
 8004c70:	73fb      	strb	r3, [r7, #15]
	while ((*s != '*') && (*s != '\0'))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b2a      	cmp	r3, #42	; 0x2a
 8004c78:	d003      	beq.n	8004c82 <calc_checksum+0x32>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1f0      	bne.n	8004c64 <calc_checksum+0x14>
	return result;
 8004c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3714      	adds	r7, #20
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bc80      	pop	{r7}
 8004c8c:	4770      	bx	lr
	...

08004c90 <__errno>:
 8004c90:	4b01      	ldr	r3, [pc, #4]	; (8004c98 <__errno+0x8>)
 8004c92:	6818      	ldr	r0, [r3, #0]
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000068 	.word	0x20000068

08004c9c <__libc_init_array>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	2600      	movs	r6, #0
 8004ca0:	4d0c      	ldr	r5, [pc, #48]	; (8004cd4 <__libc_init_array+0x38>)
 8004ca2:	4c0d      	ldr	r4, [pc, #52]	; (8004cd8 <__libc_init_array+0x3c>)
 8004ca4:	1b64      	subs	r4, r4, r5
 8004ca6:	10a4      	asrs	r4, r4, #2
 8004ca8:	42a6      	cmp	r6, r4
 8004caa:	d109      	bne.n	8004cc0 <__libc_init_array+0x24>
 8004cac:	f007 fce0 	bl	800c670 <_init>
 8004cb0:	2600      	movs	r6, #0
 8004cb2:	4d0a      	ldr	r5, [pc, #40]	; (8004cdc <__libc_init_array+0x40>)
 8004cb4:	4c0a      	ldr	r4, [pc, #40]	; (8004ce0 <__libc_init_array+0x44>)
 8004cb6:	1b64      	subs	r4, r4, r5
 8004cb8:	10a4      	asrs	r4, r4, #2
 8004cba:	42a6      	cmp	r6, r4
 8004cbc:	d105      	bne.n	8004cca <__libc_init_array+0x2e>
 8004cbe:	bd70      	pop	{r4, r5, r6, pc}
 8004cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc4:	4798      	blx	r3
 8004cc6:	3601      	adds	r6, #1
 8004cc8:	e7ee      	b.n	8004ca8 <__libc_init_array+0xc>
 8004cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cce:	4798      	blx	r3
 8004cd0:	3601      	adds	r6, #1
 8004cd2:	e7f2      	b.n	8004cba <__libc_init_array+0x1e>
 8004cd4:	0800cc58 	.word	0x0800cc58
 8004cd8:	0800cc58 	.word	0x0800cc58
 8004cdc:	0800cc58 	.word	0x0800cc58
 8004ce0:	0800cc60 	.word	0x0800cc60

08004ce4 <memcpy>:
 8004ce4:	440a      	add	r2, r1
 8004ce6:	4291      	cmp	r1, r2
 8004ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004cec:	d100      	bne.n	8004cf0 <memcpy+0xc>
 8004cee:	4770      	bx	lr
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cf6:	4291      	cmp	r1, r2
 8004cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cfc:	d1f9      	bne.n	8004cf2 <memcpy+0xe>
 8004cfe:	bd10      	pop	{r4, pc}

08004d00 <memset>:
 8004d00:	4603      	mov	r3, r0
 8004d02:	4402      	add	r2, r0
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d100      	bne.n	8004d0a <memset+0xa>
 8004d08:	4770      	bx	lr
 8004d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0e:	e7f9      	b.n	8004d04 <memset+0x4>

08004d10 <sprintf>:
 8004d10:	b40e      	push	{r1, r2, r3}
 8004d12:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d16:	b500      	push	{lr}
 8004d18:	b09c      	sub	sp, #112	; 0x70
 8004d1a:	ab1d      	add	r3, sp, #116	; 0x74
 8004d1c:	9002      	str	r0, [sp, #8]
 8004d1e:	9006      	str	r0, [sp, #24]
 8004d20:	9107      	str	r1, [sp, #28]
 8004d22:	9104      	str	r1, [sp, #16]
 8004d24:	4808      	ldr	r0, [pc, #32]	; (8004d48 <sprintf+0x38>)
 8004d26:	4909      	ldr	r1, [pc, #36]	; (8004d4c <sprintf+0x3c>)
 8004d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d2c:	9105      	str	r1, [sp, #20]
 8004d2e:	6800      	ldr	r0, [r0, #0]
 8004d30:	a902      	add	r1, sp, #8
 8004d32:	9301      	str	r3, [sp, #4]
 8004d34:	f000 f87c 	bl	8004e30 <_svfprintf_r>
 8004d38:	2200      	movs	r2, #0
 8004d3a:	9b02      	ldr	r3, [sp, #8]
 8004d3c:	701a      	strb	r2, [r3, #0]
 8004d3e:	b01c      	add	sp, #112	; 0x70
 8004d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d44:	b003      	add	sp, #12
 8004d46:	4770      	bx	lr
 8004d48:	20000068 	.word	0x20000068
 8004d4c:	ffff0208 	.word	0xffff0208

08004d50 <sscanf>:
 8004d50:	b40e      	push	{r1, r2, r3}
 8004d52:	f44f 7201 	mov.w	r2, #516	; 0x204
 8004d56:	b530      	push	{r4, r5, lr}
 8004d58:	b09c      	sub	sp, #112	; 0x70
 8004d5a:	ac1f      	add	r4, sp, #124	; 0x7c
 8004d5c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004d60:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004d64:	9002      	str	r0, [sp, #8]
 8004d66:	9006      	str	r0, [sp, #24]
 8004d68:	f7fb f9f2 	bl	8000150 <strlen>
 8004d6c:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <sscanf+0x4c>)
 8004d6e:	9003      	str	r0, [sp, #12]
 8004d70:	930a      	str	r3, [sp, #40]	; 0x28
 8004d72:	2300      	movs	r3, #0
 8004d74:	930e      	str	r3, [sp, #56]	; 0x38
 8004d76:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d7c:	9007      	str	r0, [sp, #28]
 8004d7e:	4808      	ldr	r0, [pc, #32]	; (8004da0 <sscanf+0x50>)
 8004d80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d84:	462a      	mov	r2, r5
 8004d86:	4623      	mov	r3, r4
 8004d88:	a902      	add	r1, sp, #8
 8004d8a:	6800      	ldr	r0, [r0, #0]
 8004d8c:	9401      	str	r4, [sp, #4]
 8004d8e:	f001 fa25 	bl	80061dc <__ssvfscanf_r>
 8004d92:	b01c      	add	sp, #112	; 0x70
 8004d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d98:	b003      	add	sp, #12
 8004d9a:	4770      	bx	lr
 8004d9c:	08004dc7 	.word	0x08004dc7
 8004da0:	20000068 	.word	0x20000068

08004da4 <__sread>:
 8004da4:	b510      	push	{r4, lr}
 8004da6:	460c      	mov	r4, r1
 8004da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dac:	f004 fa4a 	bl	8009244 <_read_r>
 8004db0:	2800      	cmp	r0, #0
 8004db2:	bfab      	itete	ge
 8004db4:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8004db6:	89a3      	ldrhlt	r3, [r4, #12]
 8004db8:	181b      	addge	r3, r3, r0
 8004dba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004dbe:	bfac      	ite	ge
 8004dc0:	6523      	strge	r3, [r4, #80]	; 0x50
 8004dc2:	81a3      	strhlt	r3, [r4, #12]
 8004dc4:	bd10      	pop	{r4, pc}

08004dc6 <__seofread>:
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	4770      	bx	lr

08004dca <__swrite>:
 8004dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dce:	461f      	mov	r7, r3
 8004dd0:	898b      	ldrh	r3, [r1, #12]
 8004dd2:	4605      	mov	r5, r0
 8004dd4:	05db      	lsls	r3, r3, #23
 8004dd6:	460c      	mov	r4, r1
 8004dd8:	4616      	mov	r6, r2
 8004dda:	d505      	bpl.n	8004de8 <__swrite+0x1e>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	2200      	movs	r2, #0
 8004de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de4:	f003 fb1a 	bl	800841c <_lseek_r>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	4632      	mov	r2, r6
 8004dec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004df0:	81a3      	strh	r3, [r4, #12]
 8004df2:	4628      	mov	r0, r5
 8004df4:	463b      	mov	r3, r7
 8004df6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfe:	f002 bb4b 	b.w	8007498 <_write_r>

08004e02 <__sseek>:
 8004e02:	b510      	push	{r4, lr}
 8004e04:	460c      	mov	r4, r1
 8004e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0a:	f003 fb07 	bl	800841c <_lseek_r>
 8004e0e:	1c43      	adds	r3, r0, #1
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	bf15      	itete	ne
 8004e14:	6520      	strne	r0, [r4, #80]	; 0x50
 8004e16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e1e:	81a3      	strheq	r3, [r4, #12]
 8004e20:	bf18      	it	ne
 8004e22:	81a3      	strhne	r3, [r4, #12]
 8004e24:	bd10      	pop	{r4, pc}

08004e26 <__sclose>:
 8004e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e2a:	f002 bb57 	b.w	80074dc <_close_r>
	...

08004e30 <_svfprintf_r>:
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	b0d3      	sub	sp, #332	; 0x14c
 8004e36:	468b      	mov	fp, r1
 8004e38:	9207      	str	r2, [sp, #28]
 8004e3a:	461e      	mov	r6, r3
 8004e3c:	4681      	mov	r9, r0
 8004e3e:	f003 fae5 	bl	800840c <_localeconv_r>
 8004e42:	6803      	ldr	r3, [r0, #0]
 8004e44:	4618      	mov	r0, r3
 8004e46:	9318      	str	r3, [sp, #96]	; 0x60
 8004e48:	f7fb f982 	bl	8000150 <strlen>
 8004e4c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004e50:	9012      	str	r0, [sp, #72]	; 0x48
 8004e52:	061a      	lsls	r2, r3, #24
 8004e54:	d518      	bpl.n	8004e88 <_svfprintf_r+0x58>
 8004e56:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004e5a:	b9ab      	cbnz	r3, 8004e88 <_svfprintf_r+0x58>
 8004e5c:	2140      	movs	r1, #64	; 0x40
 8004e5e:	4648      	mov	r0, r9
 8004e60:	f003 fafe 	bl	8008460 <_malloc_r>
 8004e64:	f8cb 0000 	str.w	r0, [fp]
 8004e68:	f8cb 0010 	str.w	r0, [fp, #16]
 8004e6c:	b948      	cbnz	r0, 8004e82 <_svfprintf_r+0x52>
 8004e6e:	230c      	movs	r3, #12
 8004e70:	f8c9 3000 	str.w	r3, [r9]
 8004e74:	f04f 33ff 	mov.w	r3, #4294967295
 8004e78:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e7a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004e7c:	b053      	add	sp, #332	; 0x14c
 8004e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e82:	2340      	movs	r3, #64	; 0x40
 8004e84:	f8cb 3014 	str.w	r3, [fp, #20]
 8004e88:	2500      	movs	r5, #0
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	e9cd 5527 	strd	r5, r5, [sp, #156]	; 0x9c
 8004e92:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004e96:	e9cd 551a 	strd	r5, r5, [sp, #104]	; 0x68
 8004e9a:	ac29      	add	r4, sp, #164	; 0xa4
 8004e9c:	9426      	str	r4, [sp, #152]	; 0x98
 8004e9e:	9508      	str	r5, [sp, #32]
 8004ea0:	950e      	str	r5, [sp, #56]	; 0x38
 8004ea2:	9516      	str	r5, [sp, #88]	; 0x58
 8004ea4:	9519      	str	r5, [sp, #100]	; 0x64
 8004ea6:	9513      	str	r5, [sp, #76]	; 0x4c
 8004ea8:	9b07      	ldr	r3, [sp, #28]
 8004eaa:	461d      	mov	r5, r3
 8004eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004eb0:	b10a      	cbz	r2, 8004eb6 <_svfprintf_r+0x86>
 8004eb2:	2a25      	cmp	r2, #37	; 0x25
 8004eb4:	d1f9      	bne.n	8004eaa <_svfprintf_r+0x7a>
 8004eb6:	9b07      	ldr	r3, [sp, #28]
 8004eb8:	1aef      	subs	r7, r5, r3
 8004eba:	d00d      	beq.n	8004ed8 <_svfprintf_r+0xa8>
 8004ebc:	e9c4 3700 	strd	r3, r7, [r4]
 8004ec0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8004ec2:	443b      	add	r3, r7
 8004ec4:	9328      	str	r3, [sp, #160]	; 0xa0
 8004ec6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8004ec8:	3301      	adds	r3, #1
 8004eca:	2b07      	cmp	r3, #7
 8004ecc:	9327      	str	r3, [sp, #156]	; 0x9c
 8004ece:	dc78      	bgt.n	8004fc2 <_svfprintf_r+0x192>
 8004ed0:	3408      	adds	r4, #8
 8004ed2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ed4:	443b      	add	r3, r7
 8004ed6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ed8:	782b      	ldrb	r3, [r5, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f001 8142 	beq.w	8006164 <_svfprintf_r+0x1334>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	f04f 38ff 	mov.w	r8, #4294967295
 8004ee6:	469a      	mov	sl, r3
 8004ee8:	270a      	movs	r7, #10
 8004eea:	212b      	movs	r1, #43	; 0x2b
 8004eec:	3501      	adds	r5, #1
 8004eee:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8004ef2:	9314      	str	r3, [sp, #80]	; 0x50
 8004ef4:	462a      	mov	r2, r5
 8004ef6:	f812 3b01 	ldrb.w	r3, [r2], #1
 8004efa:	930b      	str	r3, [sp, #44]	; 0x2c
 8004efc:	920f      	str	r2, [sp, #60]	; 0x3c
 8004efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f00:	3b20      	subs	r3, #32
 8004f02:	2b5a      	cmp	r3, #90	; 0x5a
 8004f04:	f200 85a0 	bhi.w	8005a48 <_svfprintf_r+0xc18>
 8004f08:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004f0c:	059e007e 	.word	0x059e007e
 8004f10:	0086059e 	.word	0x0086059e
 8004f14:	059e059e 	.word	0x059e059e
 8004f18:	0065059e 	.word	0x0065059e
 8004f1c:	059e059e 	.word	0x059e059e
 8004f20:	00930089 	.word	0x00930089
 8004f24:	0090059e 	.word	0x0090059e
 8004f28:	059e0096 	.word	0x059e0096
 8004f2c:	00b300b0 	.word	0x00b300b0
 8004f30:	00b300b3 	.word	0x00b300b3
 8004f34:	00b300b3 	.word	0x00b300b3
 8004f38:	00b300b3 	.word	0x00b300b3
 8004f3c:	00b300b3 	.word	0x00b300b3
 8004f40:	059e059e 	.word	0x059e059e
 8004f44:	059e059e 	.word	0x059e059e
 8004f48:	059e059e 	.word	0x059e059e
 8004f4c:	011d059e 	.word	0x011d059e
 8004f50:	00e0059e 	.word	0x00e0059e
 8004f54:	011d00f3 	.word	0x011d00f3
 8004f58:	011d011d 	.word	0x011d011d
 8004f5c:	059e059e 	.word	0x059e059e
 8004f60:	059e059e 	.word	0x059e059e
 8004f64:	059e00c3 	.word	0x059e00c3
 8004f68:	0471059e 	.word	0x0471059e
 8004f6c:	059e059e 	.word	0x059e059e
 8004f70:	04b8059e 	.word	0x04b8059e
 8004f74:	04da059e 	.word	0x04da059e
 8004f78:	059e059e 	.word	0x059e059e
 8004f7c:	059e04f9 	.word	0x059e04f9
 8004f80:	059e059e 	.word	0x059e059e
 8004f84:	059e059e 	.word	0x059e059e
 8004f88:	059e059e 	.word	0x059e059e
 8004f8c:	011d059e 	.word	0x011d059e
 8004f90:	00e0059e 	.word	0x00e0059e
 8004f94:	011d00f5 	.word	0x011d00f5
 8004f98:	011d011d 	.word	0x011d011d
 8004f9c:	00f500c6 	.word	0x00f500c6
 8004fa0:	059e00da 	.word	0x059e00da
 8004fa4:	059e00d3 	.word	0x059e00d3
 8004fa8:	0473044e 	.word	0x0473044e
 8004fac:	00da04a7 	.word	0x00da04a7
 8004fb0:	04b8059e 	.word	0x04b8059e
 8004fb4:	04dc007c 	.word	0x04dc007c
 8004fb8:	059e059e 	.word	0x059e059e
 8004fbc:	059e0516 	.word	0x059e0516
 8004fc0:	007c      	.short	0x007c
 8004fc2:	4659      	mov	r1, fp
 8004fc4:	4648      	mov	r0, r9
 8004fc6:	aa26      	add	r2, sp, #152	; 0x98
 8004fc8:	f005 fbea 	bl	800a7a0 <__ssprint_r>
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	f040 8128 	bne.w	8005222 <_svfprintf_r+0x3f2>
 8004fd2:	ac29      	add	r4, sp, #164	; 0xa4
 8004fd4:	e77d      	b.n	8004ed2 <_svfprintf_r+0xa2>
 8004fd6:	4648      	mov	r0, r9
 8004fd8:	f003 fa18 	bl	800840c <_localeconv_r>
 8004fdc:	6843      	ldr	r3, [r0, #4]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	9319      	str	r3, [sp, #100]	; 0x64
 8004fe2:	f7fb f8b5 	bl	8000150 <strlen>
 8004fe6:	9016      	str	r0, [sp, #88]	; 0x58
 8004fe8:	4648      	mov	r0, r9
 8004fea:	f003 fa0f 	bl	800840c <_localeconv_r>
 8004fee:	6883      	ldr	r3, [r0, #8]
 8004ff0:	212b      	movs	r1, #43	; 0x2b
 8004ff2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ff4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004ff6:	b12b      	cbz	r3, 8005004 <_svfprintf_r+0x1d4>
 8004ff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ffa:	b11b      	cbz	r3, 8005004 <_svfprintf_r+0x1d4>
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	b10b      	cbz	r3, 8005004 <_svfprintf_r+0x1d4>
 8005000:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8005004:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005006:	e775      	b.n	8004ef4 <_svfprintf_r+0xc4>
 8005008:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1f9      	bne.n	8005004 <_svfprintf_r+0x1d4>
 8005010:	2320      	movs	r3, #32
 8005012:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005016:	e7f5      	b.n	8005004 <_svfprintf_r+0x1d4>
 8005018:	f04a 0a01 	orr.w	sl, sl, #1
 800501c:	e7f2      	b.n	8005004 <_svfprintf_r+0x1d4>
 800501e:	f856 3b04 	ldr.w	r3, [r6], #4
 8005022:	2b00      	cmp	r3, #0
 8005024:	9314      	str	r3, [sp, #80]	; 0x50
 8005026:	daed      	bge.n	8005004 <_svfprintf_r+0x1d4>
 8005028:	425b      	negs	r3, r3
 800502a:	9314      	str	r3, [sp, #80]	; 0x50
 800502c:	f04a 0a04 	orr.w	sl, sl, #4
 8005030:	e7e8      	b.n	8005004 <_svfprintf_r+0x1d4>
 8005032:	f88d 107b 	strb.w	r1, [sp, #123]	; 0x7b
 8005036:	e7e5      	b.n	8005004 <_svfprintf_r+0x1d4>
 8005038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800503a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800503e:	2b2a      	cmp	r3, #42	; 0x2a
 8005040:	930b      	str	r3, [sp, #44]	; 0x2c
 8005042:	d110      	bne.n	8005066 <_svfprintf_r+0x236>
 8005044:	f856 0b04 	ldr.w	r0, [r6], #4
 8005048:	920f      	str	r2, [sp, #60]	; 0x3c
 800504a:	ea40 78e0 	orr.w	r8, r0, r0, asr #31
 800504e:	e7d9      	b.n	8005004 <_svfprintf_r+0x1d4>
 8005050:	fb07 3808 	mla	r8, r7, r8, r3
 8005054:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005058:	930b      	str	r3, [sp, #44]	; 0x2c
 800505a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800505c:	3b30      	subs	r3, #48	; 0x30
 800505e:	2b09      	cmp	r3, #9
 8005060:	d9f6      	bls.n	8005050 <_svfprintf_r+0x220>
 8005062:	920f      	str	r2, [sp, #60]	; 0x3c
 8005064:	e74b      	b.n	8004efe <_svfprintf_r+0xce>
 8005066:	f04f 0800 	mov.w	r8, #0
 800506a:	e7f6      	b.n	800505a <_svfprintf_r+0x22a>
 800506c:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8005070:	e7c8      	b.n	8005004 <_svfprintf_r+0x1d4>
 8005072:	2300      	movs	r3, #0
 8005074:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005076:	9314      	str	r3, [sp, #80]	; 0x50
 8005078:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800507a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800507c:	3b30      	subs	r3, #48	; 0x30
 800507e:	fb07 3300 	mla	r3, r7, r0, r3
 8005082:	9314      	str	r3, [sp, #80]	; 0x50
 8005084:	f812 3b01 	ldrb.w	r3, [r2], #1
 8005088:	930b      	str	r3, [sp, #44]	; 0x2c
 800508a:	3b30      	subs	r3, #48	; 0x30
 800508c:	2b09      	cmp	r3, #9
 800508e:	d9f3      	bls.n	8005078 <_svfprintf_r+0x248>
 8005090:	e7e7      	b.n	8005062 <_svfprintf_r+0x232>
 8005092:	f04a 0a08 	orr.w	sl, sl, #8
 8005096:	e7b5      	b.n	8005004 <_svfprintf_r+0x1d4>
 8005098:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b68      	cmp	r3, #104	; 0x68
 800509e:	bf01      	itttt	eq
 80050a0:	9b0f      	ldreq	r3, [sp, #60]	; 0x3c
 80050a2:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80050a6:	3301      	addeq	r3, #1
 80050a8:	930f      	streq	r3, [sp, #60]	; 0x3c
 80050aa:	bf18      	it	ne
 80050ac:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80050b0:	e7a8      	b.n	8005004 <_svfprintf_r+0x1d4>
 80050b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b6c      	cmp	r3, #108	; 0x6c
 80050b8:	d105      	bne.n	80050c6 <_svfprintf_r+0x296>
 80050ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050bc:	3301      	adds	r3, #1
 80050be:	930f      	str	r3, [sp, #60]	; 0x3c
 80050c0:	f04a 0a20 	orr.w	sl, sl, #32
 80050c4:	e79e      	b.n	8005004 <_svfprintf_r+0x1d4>
 80050c6:	f04a 0a10 	orr.w	sl, sl, #16
 80050ca:	e79b      	b.n	8005004 <_svfprintf_r+0x1d4>
 80050cc:	4632      	mov	r2, r6
 80050ce:	2000      	movs	r0, #0
 80050d0:	f852 3b04 	ldr.w	r3, [r2], #4
 80050d4:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80050d8:	920a      	str	r2, [sp, #40]	; 0x28
 80050da:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80050de:	ab39      	add	r3, sp, #228	; 0xe4
 80050e0:	4607      	mov	r7, r0
 80050e2:	f04f 0801 	mov.w	r8, #1
 80050e6:	4606      	mov	r6, r0
 80050e8:	4605      	mov	r5, r0
 80050ea:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 80050ee:	9307      	str	r3, [sp, #28]
 80050f0:	e1a9      	b.n	8005446 <_svfprintf_r+0x616>
 80050f2:	f04a 0a10 	orr.w	sl, sl, #16
 80050f6:	f01a 0f20 	tst.w	sl, #32
 80050fa:	d011      	beq.n	8005120 <_svfprintf_r+0x2f0>
 80050fc:	3607      	adds	r6, #7
 80050fe:	f026 0307 	bic.w	r3, r6, #7
 8005102:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8005106:	930a      	str	r3, [sp, #40]	; 0x28
 8005108:	2e00      	cmp	r6, #0
 800510a:	f177 0300 	sbcs.w	r3, r7, #0
 800510e:	da05      	bge.n	800511c <_svfprintf_r+0x2ec>
 8005110:	232d      	movs	r3, #45	; 0x2d
 8005112:	4276      	negs	r6, r6
 8005114:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8005118:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800511c:	2301      	movs	r3, #1
 800511e:	e377      	b.n	8005810 <_svfprintf_r+0x9e0>
 8005120:	1d33      	adds	r3, r6, #4
 8005122:	f01a 0f10 	tst.w	sl, #16
 8005126:	930a      	str	r3, [sp, #40]	; 0x28
 8005128:	d002      	beq.n	8005130 <_svfprintf_r+0x300>
 800512a:	6836      	ldr	r6, [r6, #0]
 800512c:	17f7      	asrs	r7, r6, #31
 800512e:	e7eb      	b.n	8005108 <_svfprintf_r+0x2d8>
 8005130:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005134:	6836      	ldr	r6, [r6, #0]
 8005136:	d001      	beq.n	800513c <_svfprintf_r+0x30c>
 8005138:	b236      	sxth	r6, r6
 800513a:	e7f7      	b.n	800512c <_svfprintf_r+0x2fc>
 800513c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8005140:	bf18      	it	ne
 8005142:	b276      	sxtbne	r6, r6
 8005144:	e7f2      	b.n	800512c <_svfprintf_r+0x2fc>
 8005146:	3607      	adds	r6, #7
 8005148:	f026 0307 	bic.w	r3, r6, #7
 800514c:	4619      	mov	r1, r3
 800514e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8005152:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005156:	e9dd 6310 	ldrd	r6, r3, [sp, #64]	; 0x40
 800515a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800515e:	910a      	str	r1, [sp, #40]	; 0x28
 8005160:	f04f 32ff 	mov.w	r2, #4294967295
 8005164:	4630      	mov	r0, r6
 8005166:	4629      	mov	r1, r5
 8005168:	4b32      	ldr	r3, [pc, #200]	; (8005234 <_svfprintf_r+0x404>)
 800516a:	f7fb fc4f 	bl	8000a0c <__aeabi_dcmpun>
 800516e:	bb08      	cbnz	r0, 80051b4 <_svfprintf_r+0x384>
 8005170:	f04f 32ff 	mov.w	r2, #4294967295
 8005174:	4630      	mov	r0, r6
 8005176:	4629      	mov	r1, r5
 8005178:	4b2e      	ldr	r3, [pc, #184]	; (8005234 <_svfprintf_r+0x404>)
 800517a:	f7fb fc29 	bl	80009d0 <__aeabi_dcmple>
 800517e:	b9c8      	cbnz	r0, 80051b4 <_svfprintf_r+0x384>
 8005180:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005184:	2200      	movs	r2, #0
 8005186:	2300      	movs	r3, #0
 8005188:	f7fb fc18 	bl	80009bc <__aeabi_dcmplt>
 800518c:	b110      	cbz	r0, 8005194 <_svfprintf_r+0x364>
 800518e:	232d      	movs	r3, #45	; 0x2d
 8005190:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005194:	4a28      	ldr	r2, [pc, #160]	; (8005238 <_svfprintf_r+0x408>)
 8005196:	4829      	ldr	r0, [pc, #164]	; (800523c <_svfprintf_r+0x40c>)
 8005198:	4613      	mov	r3, r2
 800519a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800519c:	2700      	movs	r7, #0
 800519e:	2947      	cmp	r1, #71	; 0x47
 80051a0:	bfc8      	it	gt
 80051a2:	4603      	movgt	r3, r0
 80051a4:	f04f 0803 	mov.w	r8, #3
 80051a8:	9307      	str	r3, [sp, #28]
 80051aa:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80051ae:	463e      	mov	r6, r7
 80051b0:	f000 bc24 	b.w	80059fc <_svfprintf_r+0xbcc>
 80051b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051b8:	4610      	mov	r0, r2
 80051ba:	4619      	mov	r1, r3
 80051bc:	f7fb fc26 	bl	8000a0c <__aeabi_dcmpun>
 80051c0:	4607      	mov	r7, r0
 80051c2:	b148      	cbz	r0, 80051d8 <_svfprintf_r+0x3a8>
 80051c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051c6:	4a1e      	ldr	r2, [pc, #120]	; (8005240 <_svfprintf_r+0x410>)
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bfb8      	it	lt
 80051cc:	232d      	movlt	r3, #45	; 0x2d
 80051ce:	481d      	ldr	r0, [pc, #116]	; (8005244 <_svfprintf_r+0x414>)
 80051d0:	bfb8      	it	lt
 80051d2:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 80051d6:	e7df      	b.n	8005198 <_svfprintf_r+0x368>
 80051d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051da:	f023 0320 	bic.w	r3, r3, #32
 80051de:	2b41      	cmp	r3, #65	; 0x41
 80051e0:	930c      	str	r3, [sp, #48]	; 0x30
 80051e2:	d131      	bne.n	8005248 <_svfprintf_r+0x418>
 80051e4:	2330      	movs	r3, #48	; 0x30
 80051e6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80051ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ec:	f04a 0a02 	orr.w	sl, sl, #2
 80051f0:	2b61      	cmp	r3, #97	; 0x61
 80051f2:	bf0c      	ite	eq
 80051f4:	2378      	moveq	r3, #120	; 0x78
 80051f6:	2358      	movne	r3, #88	; 0x58
 80051f8:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 80051fc:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8005200:	f340 81fa 	ble.w	80055f8 <_svfprintf_r+0x7c8>
 8005204:	4648      	mov	r0, r9
 8005206:	f108 0101 	add.w	r1, r8, #1
 800520a:	f003 f929 	bl	8008460 <_malloc_r>
 800520e:	9007      	str	r0, [sp, #28]
 8005210:	2800      	cmp	r0, #0
 8005212:	f040 81f4 	bne.w	80055fe <_svfprintf_r+0x7ce>
 8005216:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800521a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800521e:	f8ab 300c 	strh.w	r3, [fp, #12]
 8005222:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005226:	f013 0f40 	tst.w	r3, #64	; 0x40
 800522a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800522c:	bf18      	it	ne
 800522e:	f04f 33ff 	movne.w	r3, #4294967295
 8005232:	e621      	b.n	8004e78 <_svfprintf_r+0x48>
 8005234:	7fefffff 	.word	0x7fefffff
 8005238:	0800c7cc 	.word	0x0800c7cc
 800523c:	0800c7d0 	.word	0x0800c7d0
 8005240:	0800c7d4 	.word	0x0800c7d4
 8005244:	0800c7d8 	.word	0x0800c7d8
 8005248:	f1b8 3fff 	cmp.w	r8, #4294967295
 800524c:	f000 81d9 	beq.w	8005602 <_svfprintf_r+0x7d2>
 8005250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005252:	2b47      	cmp	r3, #71	; 0x47
 8005254:	d105      	bne.n	8005262 <_svfprintf_r+0x432>
 8005256:	f1b8 0f00 	cmp.w	r8, #0
 800525a:	d102      	bne.n	8005262 <_svfprintf_r+0x432>
 800525c:	4647      	mov	r7, r8
 800525e:	f04f 0801 	mov.w	r8, #1
 8005262:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8005266:	9315      	str	r3, [sp, #84]	; 0x54
 8005268:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800526a:	1e1d      	subs	r5, r3, #0
 800526c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800526e:	9308      	str	r3, [sp, #32]
 8005270:	bfb7      	itett	lt
 8005272:	462b      	movlt	r3, r5
 8005274:	2300      	movge	r3, #0
 8005276:	f103 4500 	addlt.w	r5, r3, #2147483648	; 0x80000000
 800527a:	232d      	movlt	r3, #45	; 0x2d
 800527c:	931c      	str	r3, [sp, #112]	; 0x70
 800527e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005280:	2b41      	cmp	r3, #65	; 0x41
 8005282:	f040 81d7 	bne.w	8005634 <_svfprintf_r+0x804>
 8005286:	aa20      	add	r2, sp, #128	; 0x80
 8005288:	4629      	mov	r1, r5
 800528a:	9808      	ldr	r0, [sp, #32]
 800528c:	f004 f99e 	bl	80095cc <frexp>
 8005290:	2200      	movs	r2, #0
 8005292:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005296:	f7fb f91f 	bl	80004d8 <__aeabi_dmul>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80052a2:	2200      	movs	r2, #0
 80052a4:	2300      	movs	r3, #0
 80052a6:	f7fb fb7f 	bl	80009a8 <__aeabi_dcmpeq>
 80052aa:	b108      	cbz	r0, 80052b0 <_svfprintf_r+0x480>
 80052ac:	2301      	movs	r3, #1
 80052ae:	9320      	str	r3, [sp, #128]	; 0x80
 80052b0:	4eb4      	ldr	r6, [pc, #720]	; (8005584 <_svfprintf_r+0x754>)
 80052b2:	4bb5      	ldr	r3, [pc, #724]	; (8005588 <_svfprintf_r+0x758>)
 80052b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80052b6:	9d07      	ldr	r5, [sp, #28]
 80052b8:	2a61      	cmp	r2, #97	; 0x61
 80052ba:	bf18      	it	ne
 80052bc:	461e      	movne	r6, r3
 80052be:	9617      	str	r6, [sp, #92]	; 0x5c
 80052c0:	f108 36ff 	add.w	r6, r8, #4294967295
 80052c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052c8:	2200      	movs	r2, #0
 80052ca:	4bb0      	ldr	r3, [pc, #704]	; (800558c <_svfprintf_r+0x75c>)
 80052cc:	f7fb f904 	bl	80004d8 <__aeabi_dmul>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80052d8:	f7fb fbae 	bl	8000a38 <__aeabi_d2iz>
 80052dc:	901d      	str	r0, [sp, #116]	; 0x74
 80052de:	f7fb f891 	bl	8000404 <__aeabi_i2d>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80052ea:	f7fa ff3d 	bl	8000168 <__aeabi_dsub>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80052f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80052f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80052fa:	960d      	str	r6, [sp, #52]	; 0x34
 80052fc:	5c9b      	ldrb	r3, [r3, r2]
 80052fe:	f805 3b01 	strb.w	r3, [r5], #1
 8005302:	1c73      	adds	r3, r6, #1
 8005304:	d006      	beq.n	8005314 <_svfprintf_r+0x4e4>
 8005306:	2200      	movs	r2, #0
 8005308:	2300      	movs	r3, #0
 800530a:	3e01      	subs	r6, #1
 800530c:	f7fb fb4c 	bl	80009a8 <__aeabi_dcmpeq>
 8005310:	2800      	cmp	r0, #0
 8005312:	d0d7      	beq.n	80052c4 <_svfprintf_r+0x494>
 8005314:	2200      	movs	r2, #0
 8005316:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800531a:	4b9d      	ldr	r3, [pc, #628]	; (8005590 <_svfprintf_r+0x760>)
 800531c:	f7fb fb6c 	bl	80009f8 <__aeabi_dcmpgt>
 8005320:	b960      	cbnz	r0, 800533c <_svfprintf_r+0x50c>
 8005322:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005326:	2200      	movs	r2, #0
 8005328:	4b99      	ldr	r3, [pc, #612]	; (8005590 <_svfprintf_r+0x760>)
 800532a:	f7fb fb3d 	bl	80009a8 <__aeabi_dcmpeq>
 800532e:	2800      	cmp	r0, #0
 8005330:	f000 817b 	beq.w	800562a <_svfprintf_r+0x7fa>
 8005334:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005336:	07d8      	lsls	r0, r3, #31
 8005338:	f140 8177 	bpl.w	800562a <_svfprintf_r+0x7fa>
 800533c:	2030      	movs	r0, #48	; 0x30
 800533e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005340:	9524      	str	r5, [sp, #144]	; 0x90
 8005342:	7bd9      	ldrb	r1, [r3, #15]
 8005344:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005346:	1e53      	subs	r3, r2, #1
 8005348:	9324      	str	r3, [sp, #144]	; 0x90
 800534a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800534e:	428b      	cmp	r3, r1
 8005350:	f000 815a 	beq.w	8005608 <_svfprintf_r+0x7d8>
 8005354:	2b39      	cmp	r3, #57	; 0x39
 8005356:	bf0b      	itete	eq
 8005358:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800535a:	3301      	addne	r3, #1
 800535c:	7a9b      	ldrbeq	r3, [r3, #10]
 800535e:	b2db      	uxtbne	r3, r3
 8005360:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005364:	9b07      	ldr	r3, [sp, #28]
 8005366:	1aeb      	subs	r3, r5, r3
 8005368:	9308      	str	r3, [sp, #32]
 800536a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800536c:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800536e:	2b47      	cmp	r3, #71	; 0x47
 8005370:	f040 81ad 	bne.w	80056ce <_svfprintf_r+0x89e>
 8005374:	1ce9      	adds	r1, r5, #3
 8005376:	db02      	blt.n	800537e <_svfprintf_r+0x54e>
 8005378:	45a8      	cmp	r8, r5
 800537a:	f280 81cf 	bge.w	800571c <_svfprintf_r+0x8ec>
 800537e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005380:	3b02      	subs	r3, #2
 8005382:	930b      	str	r3, [sp, #44]	; 0x2c
 8005384:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005386:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
 800538a:	f021 0120 	bic.w	r1, r1, #32
 800538e:	2941      	cmp	r1, #65	; 0x41
 8005390:	bf08      	it	eq
 8005392:	320f      	addeq	r2, #15
 8005394:	f105 33ff 	add.w	r3, r5, #4294967295
 8005398:	bf06      	itte	eq
 800539a:	b2d2      	uxtbeq	r2, r2
 800539c:	2101      	moveq	r1, #1
 800539e:	2100      	movne	r1, #0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80053a6:	bfb4      	ite	lt
 80053a8:	222d      	movlt	r2, #45	; 0x2d
 80053aa:	222b      	movge	r2, #43	; 0x2b
 80053ac:	9320      	str	r3, [sp, #128]	; 0x80
 80053ae:	bfb8      	it	lt
 80053b0:	f1c5 0301 	rsblt	r3, r5, #1
 80053b4:	2b09      	cmp	r3, #9
 80053b6:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 80053ba:	f340 819e 	ble.w	80056fa <_svfprintf_r+0x8ca>
 80053be:	260a      	movs	r6, #10
 80053c0:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 80053c4:	fb93 f5f6 	sdiv	r5, r3, r6
 80053c8:	4611      	mov	r1, r2
 80053ca:	fb06 3015 	mls	r0, r6, r5, r3
 80053ce:	3030      	adds	r0, #48	; 0x30
 80053d0:	f801 0c01 	strb.w	r0, [r1, #-1]
 80053d4:	4618      	mov	r0, r3
 80053d6:	2863      	cmp	r0, #99	; 0x63
 80053d8:	462b      	mov	r3, r5
 80053da:	f102 32ff 	add.w	r2, r2, #4294967295
 80053de:	dcf1      	bgt.n	80053c4 <_svfprintf_r+0x594>
 80053e0:	3330      	adds	r3, #48	; 0x30
 80053e2:	1e88      	subs	r0, r1, #2
 80053e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80053e8:	4603      	mov	r3, r0
 80053ea:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80053ee:	f10d 0597 	add.w	r5, sp, #151	; 0x97
 80053f2:	42ab      	cmp	r3, r5
 80053f4:	f0c0 817c 	bcc.w	80056f0 <_svfprintf_r+0x8c0>
 80053f8:	f10d 0299 	add.w	r2, sp, #153	; 0x99
 80053fc:	1a52      	subs	r2, r2, r1
 80053fe:	42a8      	cmp	r0, r5
 8005400:	bf88      	it	hi
 8005402:	2200      	movhi	r2, #0
 8005404:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 8005408:	441a      	add	r2, r3
 800540a:	ab22      	add	r3, sp, #136	; 0x88
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	9a08      	ldr	r2, [sp, #32]
 8005410:	931a      	str	r3, [sp, #104]	; 0x68
 8005412:	2a01      	cmp	r2, #1
 8005414:	eb03 0802 	add.w	r8, r3, r2
 8005418:	dc02      	bgt.n	8005420 <_svfprintf_r+0x5f0>
 800541a:	f01a 0f01 	tst.w	sl, #1
 800541e:	d001      	beq.n	8005424 <_svfprintf_r+0x5f4>
 8005420:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005422:	4498      	add	r8, r3
 8005424:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8005428:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800542c:	9315      	str	r3, [sp, #84]	; 0x54
 800542e:	2300      	movs	r3, #0
 8005430:	461d      	mov	r5, r3
 8005432:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8005436:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8005438:	b113      	cbz	r3, 8005440 <_svfprintf_r+0x610>
 800543a:	232d      	movs	r3, #45	; 0x2d
 800543c:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8005440:	2600      	movs	r6, #0
 8005442:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8005446:	4546      	cmp	r6, r8
 8005448:	4633      	mov	r3, r6
 800544a:	bfb8      	it	lt
 800544c:	4643      	movlt	r3, r8
 800544e:	9315      	str	r3, [sp, #84]	; 0x54
 8005450:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8005454:	b113      	cbz	r3, 800545c <_svfprintf_r+0x62c>
 8005456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005458:	3301      	adds	r3, #1
 800545a:	9315      	str	r3, [sp, #84]	; 0x54
 800545c:	f01a 0302 	ands.w	r3, sl, #2
 8005460:	931c      	str	r3, [sp, #112]	; 0x70
 8005462:	bf1e      	ittt	ne
 8005464:	9b15      	ldrne	r3, [sp, #84]	; 0x54
 8005466:	3302      	addne	r3, #2
 8005468:	9315      	strne	r3, [sp, #84]	; 0x54
 800546a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800546e:	931d      	str	r3, [sp, #116]	; 0x74
 8005470:	d121      	bne.n	80054b6 <_svfprintf_r+0x686>
 8005472:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8005476:	1a9b      	subs	r3, r3, r2
 8005478:	2b00      	cmp	r3, #0
 800547a:	9317      	str	r3, [sp, #92]	; 0x5c
 800547c:	dd1b      	ble.n	80054b6 <_svfprintf_r+0x686>
 800547e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005482:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005484:	3301      	adds	r3, #1
 8005486:	2810      	cmp	r0, #16
 8005488:	4842      	ldr	r0, [pc, #264]	; (8005594 <_svfprintf_r+0x764>)
 800548a:	f104 0108 	add.w	r1, r4, #8
 800548e:	6020      	str	r0, [r4, #0]
 8005490:	f300 82e6 	bgt.w	8005a60 <_svfprintf_r+0xc30>
 8005494:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005496:	2b07      	cmp	r3, #7
 8005498:	4402      	add	r2, r0
 800549a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800549e:	6060      	str	r0, [r4, #4]
 80054a0:	f340 82f3 	ble.w	8005a8a <_svfprintf_r+0xc5a>
 80054a4:	4659      	mov	r1, fp
 80054a6:	4648      	mov	r0, r9
 80054a8:	aa26      	add	r2, sp, #152	; 0x98
 80054aa:	f005 f979 	bl	800a7a0 <__ssprint_r>
 80054ae:	2800      	cmp	r0, #0
 80054b0:	f040 8636 	bne.w	8006120 <_svfprintf_r+0x12f0>
 80054b4:	ac29      	add	r4, sp, #164	; 0xa4
 80054b6:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80054ba:	b173      	cbz	r3, 80054da <_svfprintf_r+0x6aa>
 80054bc:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 80054c0:	6023      	str	r3, [r4, #0]
 80054c2:	2301      	movs	r3, #1
 80054c4:	6063      	str	r3, [r4, #4]
 80054c6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80054c8:	3301      	adds	r3, #1
 80054ca:	9328      	str	r3, [sp, #160]	; 0xa0
 80054cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80054ce:	3301      	adds	r3, #1
 80054d0:	2b07      	cmp	r3, #7
 80054d2:	9327      	str	r3, [sp, #156]	; 0x9c
 80054d4:	f300 82db 	bgt.w	8005a8e <_svfprintf_r+0xc5e>
 80054d8:	3408      	adds	r4, #8
 80054da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80054dc:	b16b      	cbz	r3, 80054fa <_svfprintf_r+0x6ca>
 80054de:	ab1f      	add	r3, sp, #124	; 0x7c
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	2302      	movs	r3, #2
 80054e4:	6063      	str	r3, [r4, #4]
 80054e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80054e8:	3302      	adds	r3, #2
 80054ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80054ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80054ee:	3301      	adds	r3, #1
 80054f0:	2b07      	cmp	r3, #7
 80054f2:	9327      	str	r3, [sp, #156]	; 0x9c
 80054f4:	f300 82d5 	bgt.w	8005aa2 <_svfprintf_r+0xc72>
 80054f8:	3408      	adds	r4, #8
 80054fa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80054fc:	2b80      	cmp	r3, #128	; 0x80
 80054fe:	d121      	bne.n	8005544 <_svfprintf_r+0x714>
 8005500:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 8005504:	1a9b      	subs	r3, r3, r2
 8005506:	2b00      	cmp	r3, #0
 8005508:	9317      	str	r3, [sp, #92]	; 0x5c
 800550a:	dd1b      	ble.n	8005544 <_svfprintf_r+0x714>
 800550c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005510:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005512:	3301      	adds	r3, #1
 8005514:	2810      	cmp	r0, #16
 8005516:	4820      	ldr	r0, [pc, #128]	; (8005598 <_svfprintf_r+0x768>)
 8005518:	f104 0108 	add.w	r1, r4, #8
 800551c:	6020      	str	r0, [r4, #0]
 800551e:	f300 82ca 	bgt.w	8005ab6 <_svfprintf_r+0xc86>
 8005522:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005524:	2b07      	cmp	r3, #7
 8005526:	4402      	add	r2, r0
 8005528:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800552c:	6060      	str	r0, [r4, #4]
 800552e:	f340 82d7 	ble.w	8005ae0 <_svfprintf_r+0xcb0>
 8005532:	4659      	mov	r1, fp
 8005534:	4648      	mov	r0, r9
 8005536:	aa26      	add	r2, sp, #152	; 0x98
 8005538:	f005 f932 	bl	800a7a0 <__ssprint_r>
 800553c:	2800      	cmp	r0, #0
 800553e:	f040 85ef 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005542:	ac29      	add	r4, sp, #164	; 0xa4
 8005544:	eba6 0608 	sub.w	r6, r6, r8
 8005548:	2e00      	cmp	r6, #0
 800554a:	dd27      	ble.n	800559c <_svfprintf_r+0x76c>
 800554c:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005550:	4811      	ldr	r0, [pc, #68]	; (8005598 <_svfprintf_r+0x768>)
 8005552:	2e10      	cmp	r6, #16
 8005554:	f103 0301 	add.w	r3, r3, #1
 8005558:	f104 0108 	add.w	r1, r4, #8
 800555c:	6020      	str	r0, [r4, #0]
 800555e:	f300 82c1 	bgt.w	8005ae4 <_svfprintf_r+0xcb4>
 8005562:	6066      	str	r6, [r4, #4]
 8005564:	2b07      	cmp	r3, #7
 8005566:	4416      	add	r6, r2
 8005568:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 800556c:	f340 82cd 	ble.w	8005b0a <_svfprintf_r+0xcda>
 8005570:	4659      	mov	r1, fp
 8005572:	4648      	mov	r0, r9
 8005574:	aa26      	add	r2, sp, #152	; 0x98
 8005576:	f005 f913 	bl	800a7a0 <__ssprint_r>
 800557a:	2800      	cmp	r0, #0
 800557c:	f040 85d0 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005580:	ac29      	add	r4, sp, #164	; 0xa4
 8005582:	e00b      	b.n	800559c <_svfprintf_r+0x76c>
 8005584:	0800c7dc 	.word	0x0800c7dc
 8005588:	0800c7ed 	.word	0x0800c7ed
 800558c:	40300000 	.word	0x40300000
 8005590:	3fe00000 	.word	0x3fe00000
 8005594:	0800c800 	.word	0x0800c800
 8005598:	0800c810 	.word	0x0800c810
 800559c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80055a0:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 80055a2:	f040 82b9 	bne.w	8005b18 <_svfprintf_r+0xce8>
 80055a6:	9b07      	ldr	r3, [sp, #28]
 80055a8:	4446      	add	r6, r8
 80055aa:	e9c4 3800 	strd	r3, r8, [r4]
 80055ae:	9628      	str	r6, [sp, #160]	; 0xa0
 80055b0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80055b2:	3301      	adds	r3, #1
 80055b4:	2b07      	cmp	r3, #7
 80055b6:	9327      	str	r3, [sp, #156]	; 0x9c
 80055b8:	f300 82f4 	bgt.w	8005ba4 <_svfprintf_r+0xd74>
 80055bc:	3408      	adds	r4, #8
 80055be:	f01a 0f04 	tst.w	sl, #4
 80055c2:	f040 858e 	bne.w	80060e2 <_svfprintf_r+0x12b2>
 80055c6:	e9dd 3213 	ldrd	r3, r2, [sp, #76]	; 0x4c
 80055ca:	9915      	ldr	r1, [sp, #84]	; 0x54
 80055cc:	428a      	cmp	r2, r1
 80055ce:	bfac      	ite	ge
 80055d0:	189b      	addge	r3, r3, r2
 80055d2:	185b      	addlt	r3, r3, r1
 80055d4:	9313      	str	r3, [sp, #76]	; 0x4c
 80055d6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80055d8:	b13b      	cbz	r3, 80055ea <_svfprintf_r+0x7ba>
 80055da:	4659      	mov	r1, fp
 80055dc:	4648      	mov	r0, r9
 80055de:	aa26      	add	r2, sp, #152	; 0x98
 80055e0:	f005 f8de 	bl	800a7a0 <__ssprint_r>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	f040 859b 	bne.w	8006120 <_svfprintf_r+0x12f0>
 80055ea:	2300      	movs	r3, #0
 80055ec:	9327      	str	r3, [sp, #156]	; 0x9c
 80055ee:	2f00      	cmp	r7, #0
 80055f0:	f040 85b2 	bne.w	8006158 <_svfprintf_r+0x1328>
 80055f4:	ac29      	add	r4, sp, #164	; 0xa4
 80055f6:	e0e3      	b.n	80057c0 <_svfprintf_r+0x990>
 80055f8:	ab39      	add	r3, sp, #228	; 0xe4
 80055fa:	9307      	str	r3, [sp, #28]
 80055fc:	e631      	b.n	8005262 <_svfprintf_r+0x432>
 80055fe:	9f07      	ldr	r7, [sp, #28]
 8005600:	e62f      	b.n	8005262 <_svfprintf_r+0x432>
 8005602:	f04f 0806 	mov.w	r8, #6
 8005606:	e62c      	b.n	8005262 <_svfprintf_r+0x432>
 8005608:	f802 0c01 	strb.w	r0, [r2, #-1]
 800560c:	e69a      	b.n	8005344 <_svfprintf_r+0x514>
 800560e:	f803 0b01 	strb.w	r0, [r3], #1
 8005612:	1aca      	subs	r2, r1, r3
 8005614:	2a00      	cmp	r2, #0
 8005616:	dafa      	bge.n	800560e <_svfprintf_r+0x7de>
 8005618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800561a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800561c:	3201      	adds	r2, #1
 800561e:	f103 0301 	add.w	r3, r3, #1
 8005622:	bfb8      	it	lt
 8005624:	2300      	movlt	r3, #0
 8005626:	441d      	add	r5, r3
 8005628:	e69c      	b.n	8005364 <_svfprintf_r+0x534>
 800562a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800562c:	462b      	mov	r3, r5
 800562e:	2030      	movs	r0, #48	; 0x30
 8005630:	18a9      	adds	r1, r5, r2
 8005632:	e7ee      	b.n	8005612 <_svfprintf_r+0x7e2>
 8005634:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005636:	2b46      	cmp	r3, #70	; 0x46
 8005638:	d005      	beq.n	8005646 <_svfprintf_r+0x816>
 800563a:	2b45      	cmp	r3, #69	; 0x45
 800563c:	d11b      	bne.n	8005676 <_svfprintf_r+0x846>
 800563e:	f108 0601 	add.w	r6, r8, #1
 8005642:	2302      	movs	r3, #2
 8005644:	e001      	b.n	800564a <_svfprintf_r+0x81a>
 8005646:	4646      	mov	r6, r8
 8005648:	2303      	movs	r3, #3
 800564a:	aa24      	add	r2, sp, #144	; 0x90
 800564c:	9204      	str	r2, [sp, #16]
 800564e:	aa21      	add	r2, sp, #132	; 0x84
 8005650:	9203      	str	r2, [sp, #12]
 8005652:	aa20      	add	r2, sp, #128	; 0x80
 8005654:	e9cd 6201 	strd	r6, r2, [sp, #4]
 8005658:	9300      	str	r3, [sp, #0]
 800565a:	4648      	mov	r0, r9
 800565c:	462b      	mov	r3, r5
 800565e:	9a08      	ldr	r2, [sp, #32]
 8005660:	f001 ffda 	bl	8007618 <_dtoa_r>
 8005664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005666:	9007      	str	r0, [sp, #28]
 8005668:	2b47      	cmp	r3, #71	; 0x47
 800566a:	d106      	bne.n	800567a <_svfprintf_r+0x84a>
 800566c:	f01a 0f01 	tst.w	sl, #1
 8005670:	d103      	bne.n	800567a <_svfprintf_r+0x84a>
 8005672:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8005674:	e676      	b.n	8005364 <_svfprintf_r+0x534>
 8005676:	4646      	mov	r6, r8
 8005678:	e7e3      	b.n	8005642 <_svfprintf_r+0x812>
 800567a:	9b07      	ldr	r3, [sp, #28]
 800567c:	4433      	add	r3, r6
 800567e:	930d      	str	r3, [sp, #52]	; 0x34
 8005680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005682:	2b46      	cmp	r3, #70	; 0x46
 8005684:	d111      	bne.n	80056aa <_svfprintf_r+0x87a>
 8005686:	9b07      	ldr	r3, [sp, #28]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b30      	cmp	r3, #48	; 0x30
 800568c:	d109      	bne.n	80056a2 <_svfprintf_r+0x872>
 800568e:	2200      	movs	r2, #0
 8005690:	2300      	movs	r3, #0
 8005692:	4629      	mov	r1, r5
 8005694:	9808      	ldr	r0, [sp, #32]
 8005696:	f7fb f987 	bl	80009a8 <__aeabi_dcmpeq>
 800569a:	b910      	cbnz	r0, 80056a2 <_svfprintf_r+0x872>
 800569c:	f1c6 0601 	rsb	r6, r6, #1
 80056a0:	9620      	str	r6, [sp, #128]	; 0x80
 80056a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056a4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056a6:	441a      	add	r2, r3
 80056a8:	920d      	str	r2, [sp, #52]	; 0x34
 80056aa:	2200      	movs	r2, #0
 80056ac:	2300      	movs	r3, #0
 80056ae:	4629      	mov	r1, r5
 80056b0:	9808      	ldr	r0, [sp, #32]
 80056b2:	f7fb f979 	bl	80009a8 <__aeabi_dcmpeq>
 80056b6:	b108      	cbz	r0, 80056bc <_svfprintf_r+0x88c>
 80056b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056ba:	9324      	str	r3, [sp, #144]	; 0x90
 80056bc:	2230      	movs	r2, #48	; 0x30
 80056be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80056c2:	4299      	cmp	r1, r3
 80056c4:	d9d5      	bls.n	8005672 <_svfprintf_r+0x842>
 80056c6:	1c59      	adds	r1, r3, #1
 80056c8:	9124      	str	r1, [sp, #144]	; 0x90
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	e7f7      	b.n	80056be <_svfprintf_r+0x88e>
 80056ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056d0:	2b46      	cmp	r3, #70	; 0x46
 80056d2:	f47f ae57 	bne.w	8005384 <_svfprintf_r+0x554>
 80056d6:	f00a 0301 	and.w	r3, sl, #1
 80056da:	2d00      	cmp	r5, #0
 80056dc:	ea43 0308 	orr.w	r3, r3, r8
 80056e0:	dd18      	ble.n	8005714 <_svfprintf_r+0x8e4>
 80056e2:	b383      	cbz	r3, 8005746 <_svfprintf_r+0x916>
 80056e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056e6:	18eb      	adds	r3, r5, r3
 80056e8:	4498      	add	r8, r3
 80056ea:	2366      	movs	r3, #102	; 0x66
 80056ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80056ee:	e030      	b.n	8005752 <_svfprintf_r+0x922>
 80056f0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80056f4:	f802 6b01 	strb.w	r6, [r2], #1
 80056f8:	e67b      	b.n	80053f2 <_svfprintf_r+0x5c2>
 80056fa:	b941      	cbnz	r1, 800570e <_svfprintf_r+0x8de>
 80056fc:	2230      	movs	r2, #48	; 0x30
 80056fe:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8005702:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8005706:	3330      	adds	r3, #48	; 0x30
 8005708:	f802 3b01 	strb.w	r3, [r2], #1
 800570c:	e67d      	b.n	800540a <_svfprintf_r+0x5da>
 800570e:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8005712:	e7f8      	b.n	8005706 <_svfprintf_r+0x8d6>
 8005714:	b1cb      	cbz	r3, 800574a <_svfprintf_r+0x91a>
 8005716:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005718:	3301      	adds	r3, #1
 800571a:	e7e5      	b.n	80056e8 <_svfprintf_r+0x8b8>
 800571c:	9b08      	ldr	r3, [sp, #32]
 800571e:	429d      	cmp	r5, r3
 8005720:	db07      	blt.n	8005732 <_svfprintf_r+0x902>
 8005722:	f01a 0f01 	tst.w	sl, #1
 8005726:	d029      	beq.n	800577c <_svfprintf_r+0x94c>
 8005728:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800572a:	eb05 0803 	add.w	r8, r5, r3
 800572e:	2367      	movs	r3, #103	; 0x67
 8005730:	e7dc      	b.n	80056ec <_svfprintf_r+0x8bc>
 8005732:	9b08      	ldr	r3, [sp, #32]
 8005734:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005736:	2d00      	cmp	r5, #0
 8005738:	eb03 0802 	add.w	r8, r3, r2
 800573c:	dcf7      	bgt.n	800572e <_svfprintf_r+0x8fe>
 800573e:	f1c5 0301 	rsb	r3, r5, #1
 8005742:	4498      	add	r8, r3
 8005744:	e7f3      	b.n	800572e <_svfprintf_r+0x8fe>
 8005746:	46a8      	mov	r8, r5
 8005748:	e7cf      	b.n	80056ea <_svfprintf_r+0x8ba>
 800574a:	2366      	movs	r3, #102	; 0x66
 800574c:	f04f 0801 	mov.w	r8, #1
 8005750:	930b      	str	r3, [sp, #44]	; 0x2c
 8005752:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8005756:	930d      	str	r3, [sp, #52]	; 0x34
 8005758:	d023      	beq.n	80057a2 <_svfprintf_r+0x972>
 800575a:	2300      	movs	r3, #0
 800575c:	2d00      	cmp	r5, #0
 800575e:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 8005762:	f77f ae68 	ble.w	8005436 <_svfprintf_r+0x606>
 8005766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	2bff      	cmp	r3, #255	; 0xff
 800576c:	d108      	bne.n	8005780 <_svfprintf_r+0x950>
 800576e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005772:	4413      	add	r3, r2
 8005774:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005776:	fb02 8803 	mla	r8, r2, r3, r8
 800577a:	e65c      	b.n	8005436 <_svfprintf_r+0x606>
 800577c:	46a8      	mov	r8, r5
 800577e:	e7d6      	b.n	800572e <_svfprintf_r+0x8fe>
 8005780:	42ab      	cmp	r3, r5
 8005782:	daf4      	bge.n	800576e <_svfprintf_r+0x93e>
 8005784:	1aed      	subs	r5, r5, r3
 8005786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	b133      	cbz	r3, 800579a <_svfprintf_r+0x96a>
 800578c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800578e:	3301      	adds	r3, #1
 8005790:	930d      	str	r3, [sp, #52]	; 0x34
 8005792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005794:	3301      	adds	r3, #1
 8005796:	930e      	str	r3, [sp, #56]	; 0x38
 8005798:	e7e5      	b.n	8005766 <_svfprintf_r+0x936>
 800579a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800579c:	3301      	adds	r3, #1
 800579e:	930c      	str	r3, [sp, #48]	; 0x30
 80057a0:	e7e1      	b.n	8005766 <_svfprintf_r+0x936>
 80057a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80057a4:	930c      	str	r3, [sp, #48]	; 0x30
 80057a6:	e646      	b.n	8005436 <_svfprintf_r+0x606>
 80057a8:	4632      	mov	r2, r6
 80057aa:	f852 3b04 	ldr.w	r3, [r2], #4
 80057ae:	f01a 0f20 	tst.w	sl, #32
 80057b2:	920a      	str	r2, [sp, #40]	; 0x28
 80057b4:	d009      	beq.n	80057ca <_svfprintf_r+0x99a>
 80057b6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057b8:	4610      	mov	r0, r2
 80057ba:	17d1      	asrs	r1, r2, #31
 80057bc:	e9c3 0100 	strd	r0, r1, [r3]
 80057c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057c2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80057c4:	9307      	str	r3, [sp, #28]
 80057c6:	f7ff bb6f 	b.w	8004ea8 <_svfprintf_r+0x78>
 80057ca:	f01a 0f10 	tst.w	sl, #16
 80057ce:	d002      	beq.n	80057d6 <_svfprintf_r+0x9a6>
 80057d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e7f4      	b.n	80057c0 <_svfprintf_r+0x990>
 80057d6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80057da:	d002      	beq.n	80057e2 <_svfprintf_r+0x9b2>
 80057dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057de:	801a      	strh	r2, [r3, #0]
 80057e0:	e7ee      	b.n	80057c0 <_svfprintf_r+0x990>
 80057e2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80057e6:	d0f3      	beq.n	80057d0 <_svfprintf_r+0x9a0>
 80057e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057ea:	701a      	strb	r2, [r3, #0]
 80057ec:	e7e8      	b.n	80057c0 <_svfprintf_r+0x990>
 80057ee:	f04a 0a10 	orr.w	sl, sl, #16
 80057f2:	f01a 0f20 	tst.w	sl, #32
 80057f6:	d01e      	beq.n	8005836 <_svfprintf_r+0xa06>
 80057f8:	3607      	adds	r6, #7
 80057fa:	f026 0307 	bic.w	r3, r6, #7
 80057fe:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8005802:	930a      	str	r3, [sp, #40]	; 0x28
 8005804:	2300      	movs	r3, #0
 8005806:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800580a:	2200      	movs	r2, #0
 800580c:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8005810:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005814:	f000 84b1 	beq.w	800617a <_svfprintf_r+0x134a>
 8005818:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800581c:	920c      	str	r2, [sp, #48]	; 0x30
 800581e:	ea56 0207 	orrs.w	r2, r6, r7
 8005822:	f040 84b0 	bne.w	8006186 <_svfprintf_r+0x1356>
 8005826:	f1b8 0f00 	cmp.w	r8, #0
 800582a:	f000 8103 	beq.w	8005a34 <_svfprintf_r+0xc04>
 800582e:	2b01      	cmp	r3, #1
 8005830:	f040 84ac 	bne.w	800618c <_svfprintf_r+0x135c>
 8005834:	e098      	b.n	8005968 <_svfprintf_r+0xb38>
 8005836:	1d33      	adds	r3, r6, #4
 8005838:	f01a 0f10 	tst.w	sl, #16
 800583c:	930a      	str	r3, [sp, #40]	; 0x28
 800583e:	d001      	beq.n	8005844 <_svfprintf_r+0xa14>
 8005840:	6836      	ldr	r6, [r6, #0]
 8005842:	e003      	b.n	800584c <_svfprintf_r+0xa1c>
 8005844:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8005848:	d002      	beq.n	8005850 <_svfprintf_r+0xa20>
 800584a:	8836      	ldrh	r6, [r6, #0]
 800584c:	2700      	movs	r7, #0
 800584e:	e7d9      	b.n	8005804 <_svfprintf_r+0x9d4>
 8005850:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8005854:	d0f4      	beq.n	8005840 <_svfprintf_r+0xa10>
 8005856:	7836      	ldrb	r6, [r6, #0]
 8005858:	e7f8      	b.n	800584c <_svfprintf_r+0xa1c>
 800585a:	4633      	mov	r3, r6
 800585c:	f853 6b04 	ldr.w	r6, [r3], #4
 8005860:	2278      	movs	r2, #120	; 0x78
 8005862:	930a      	str	r3, [sp, #40]	; 0x28
 8005864:	f647 0330 	movw	r3, #30768	; 0x7830
 8005868:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 800586c:	4ba8      	ldr	r3, [pc, #672]	; (8005b10 <_svfprintf_r+0xce0>)
 800586e:	2700      	movs	r7, #0
 8005870:	931b      	str	r3, [sp, #108]	; 0x6c
 8005872:	f04a 0a02 	orr.w	sl, sl, #2
 8005876:	2302      	movs	r3, #2
 8005878:	920b      	str	r2, [sp, #44]	; 0x2c
 800587a:	e7c6      	b.n	800580a <_svfprintf_r+0x9da>
 800587c:	4632      	mov	r2, r6
 800587e:	2500      	movs	r5, #0
 8005880:	f852 3b04 	ldr.w	r3, [r2], #4
 8005884:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005888:	9307      	str	r3, [sp, #28]
 800588a:	920a      	str	r2, [sp, #40]	; 0x28
 800588c:	f88d 507b 	strb.w	r5, [sp, #123]	; 0x7b
 8005890:	d010      	beq.n	80058b4 <_svfprintf_r+0xa84>
 8005892:	4642      	mov	r2, r8
 8005894:	4629      	mov	r1, r5
 8005896:	9807      	ldr	r0, [sp, #28]
 8005898:	f003 f850 	bl	800893c <memchr>
 800589c:	4607      	mov	r7, r0
 800589e:	2800      	cmp	r0, #0
 80058a0:	f43f ac85 	beq.w	80051ae <_svfprintf_r+0x37e>
 80058a4:	9b07      	ldr	r3, [sp, #28]
 80058a6:	462f      	mov	r7, r5
 80058a8:	462e      	mov	r6, r5
 80058aa:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 80058ae:	eba0 0803 	sub.w	r8, r0, r3
 80058b2:	e5c8      	b.n	8005446 <_svfprintf_r+0x616>
 80058b4:	9807      	ldr	r0, [sp, #28]
 80058b6:	f7fa fc4b 	bl	8000150 <strlen>
 80058ba:	462f      	mov	r7, r5
 80058bc:	4680      	mov	r8, r0
 80058be:	e476      	b.n	80051ae <_svfprintf_r+0x37e>
 80058c0:	f04a 0a10 	orr.w	sl, sl, #16
 80058c4:	f01a 0f20 	tst.w	sl, #32
 80058c8:	d007      	beq.n	80058da <_svfprintf_r+0xaaa>
 80058ca:	3607      	adds	r6, #7
 80058cc:	f026 0307 	bic.w	r3, r6, #7
 80058d0:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 80058d4:	930a      	str	r3, [sp, #40]	; 0x28
 80058d6:	2301      	movs	r3, #1
 80058d8:	e797      	b.n	800580a <_svfprintf_r+0x9da>
 80058da:	1d33      	adds	r3, r6, #4
 80058dc:	f01a 0f10 	tst.w	sl, #16
 80058e0:	930a      	str	r3, [sp, #40]	; 0x28
 80058e2:	d001      	beq.n	80058e8 <_svfprintf_r+0xab8>
 80058e4:	6836      	ldr	r6, [r6, #0]
 80058e6:	e003      	b.n	80058f0 <_svfprintf_r+0xac0>
 80058e8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80058ec:	d002      	beq.n	80058f4 <_svfprintf_r+0xac4>
 80058ee:	8836      	ldrh	r6, [r6, #0]
 80058f0:	2700      	movs	r7, #0
 80058f2:	e7f0      	b.n	80058d6 <_svfprintf_r+0xaa6>
 80058f4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80058f8:	d0f4      	beq.n	80058e4 <_svfprintf_r+0xab4>
 80058fa:	7836      	ldrb	r6, [r6, #0]
 80058fc:	e7f8      	b.n	80058f0 <_svfprintf_r+0xac0>
 80058fe:	4b85      	ldr	r3, [pc, #532]	; (8005b14 <_svfprintf_r+0xce4>)
 8005900:	f01a 0f20 	tst.w	sl, #32
 8005904:	931b      	str	r3, [sp, #108]	; 0x6c
 8005906:	d019      	beq.n	800593c <_svfprintf_r+0xb0c>
 8005908:	3607      	adds	r6, #7
 800590a:	f026 0307 	bic.w	r3, r6, #7
 800590e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8005912:	930a      	str	r3, [sp, #40]	; 0x28
 8005914:	f01a 0f01 	tst.w	sl, #1
 8005918:	d00a      	beq.n	8005930 <_svfprintf_r+0xb00>
 800591a:	ea56 0307 	orrs.w	r3, r6, r7
 800591e:	d007      	beq.n	8005930 <_svfprintf_r+0xb00>
 8005920:	2330      	movs	r3, #48	; 0x30
 8005922:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8005926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005928:	f04a 0a02 	orr.w	sl, sl, #2
 800592c:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8005930:	2302      	movs	r3, #2
 8005932:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8005936:	e768      	b.n	800580a <_svfprintf_r+0x9da>
 8005938:	4b75      	ldr	r3, [pc, #468]	; (8005b10 <_svfprintf_r+0xce0>)
 800593a:	e7e1      	b.n	8005900 <_svfprintf_r+0xad0>
 800593c:	1d33      	adds	r3, r6, #4
 800593e:	f01a 0f10 	tst.w	sl, #16
 8005942:	930a      	str	r3, [sp, #40]	; 0x28
 8005944:	d001      	beq.n	800594a <_svfprintf_r+0xb1a>
 8005946:	6836      	ldr	r6, [r6, #0]
 8005948:	e003      	b.n	8005952 <_svfprintf_r+0xb22>
 800594a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800594e:	d002      	beq.n	8005956 <_svfprintf_r+0xb26>
 8005950:	8836      	ldrh	r6, [r6, #0]
 8005952:	2700      	movs	r7, #0
 8005954:	e7de      	b.n	8005914 <_svfprintf_r+0xae4>
 8005956:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800595a:	d0f4      	beq.n	8005946 <_svfprintf_r+0xb16>
 800595c:	7836      	ldrb	r6, [r6, #0]
 800595e:	e7f8      	b.n	8005952 <_svfprintf_r+0xb22>
 8005960:	2f00      	cmp	r7, #0
 8005962:	bf08      	it	eq
 8005964:	2e0a      	cmpeq	r6, #10
 8005966:	d206      	bcs.n	8005976 <_svfprintf_r+0xb46>
 8005968:	3630      	adds	r6, #48	; 0x30
 800596a:	f88d 6147 	strb.w	r6, [sp, #327]	; 0x147
 800596e:	f20d 1347 	addw	r3, sp, #327	; 0x147
 8005972:	f000 bc2d 	b.w	80061d0 <_svfprintf_r+0x13a0>
 8005976:	2300      	movs	r3, #0
 8005978:	9308      	str	r3, [sp, #32]
 800597a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800597c:	ad52      	add	r5, sp, #328	; 0x148
 800597e:	f403 6a80 	and.w	sl, r3, #1024	; 0x400
 8005982:	1e6b      	subs	r3, r5, #1
 8005984:	9307      	str	r3, [sp, #28]
 8005986:	220a      	movs	r2, #10
 8005988:	2300      	movs	r3, #0
 800598a:	4630      	mov	r0, r6
 800598c:	4639      	mov	r1, r7
 800598e:	f7fb f9f9 	bl	8000d84 <__aeabi_uldivmod>
 8005992:	9b08      	ldr	r3, [sp, #32]
 8005994:	3230      	adds	r2, #48	; 0x30
 8005996:	3301      	adds	r3, #1
 8005998:	f805 2c01 	strb.w	r2, [r5, #-1]
 800599c:	9308      	str	r3, [sp, #32]
 800599e:	f1ba 0f00 	cmp.w	sl, #0
 80059a2:	d019      	beq.n	80059d8 <_svfprintf_r+0xba8>
 80059a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059a6:	9a08      	ldr	r2, [sp, #32]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d114      	bne.n	80059d8 <_svfprintf_r+0xba8>
 80059ae:	2aff      	cmp	r2, #255	; 0xff
 80059b0:	d012      	beq.n	80059d8 <_svfprintf_r+0xba8>
 80059b2:	2f00      	cmp	r7, #0
 80059b4:	bf08      	it	eq
 80059b6:	2e0a      	cmpeq	r6, #10
 80059b8:	d30e      	bcc.n	80059d8 <_svfprintf_r+0xba8>
 80059ba:	9b07      	ldr	r3, [sp, #28]
 80059bc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80059be:	9919      	ldr	r1, [sp, #100]	; 0x64
 80059c0:	1a9b      	subs	r3, r3, r2
 80059c2:	4618      	mov	r0, r3
 80059c4:	9307      	str	r3, [sp, #28]
 80059c6:	f003 fe83 	bl	80096d0 <strncpy>
 80059ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059cc:	785d      	ldrb	r5, [r3, #1]
 80059ce:	b1ed      	cbz	r5, 8005a0c <_svfprintf_r+0xbdc>
 80059d0:	3301      	adds	r3, #1
 80059d2:	930e      	str	r3, [sp, #56]	; 0x38
 80059d4:	2300      	movs	r3, #0
 80059d6:	9308      	str	r3, [sp, #32]
 80059d8:	220a      	movs	r2, #10
 80059da:	2300      	movs	r3, #0
 80059dc:	4630      	mov	r0, r6
 80059de:	4639      	mov	r1, r7
 80059e0:	f7fb f9d0 	bl	8000d84 <__aeabi_uldivmod>
 80059e4:	2f00      	cmp	r7, #0
 80059e6:	bf08      	it	eq
 80059e8:	2e0a      	cmpeq	r6, #10
 80059ea:	d20b      	bcs.n	8005a04 <_svfprintf_r+0xbd4>
 80059ec:	2700      	movs	r7, #0
 80059ee:	9b07      	ldr	r3, [sp, #28]
 80059f0:	aa52      	add	r2, sp, #328	; 0x148
 80059f2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80059f6:	4646      	mov	r6, r8
 80059f8:	eba2 0803 	sub.w	r8, r2, r3
 80059fc:	463d      	mov	r5, r7
 80059fe:	e9cd 770c 	strd	r7, r7, [sp, #48]	; 0x30
 8005a02:	e520      	b.n	8005446 <_svfprintf_r+0x616>
 8005a04:	4606      	mov	r6, r0
 8005a06:	460f      	mov	r7, r1
 8005a08:	9d07      	ldr	r5, [sp, #28]
 8005a0a:	e7ba      	b.n	8005982 <_svfprintf_r+0xb52>
 8005a0c:	9508      	str	r5, [sp, #32]
 8005a0e:	e7e3      	b.n	80059d8 <_svfprintf_r+0xba8>
 8005a10:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005a12:	f006 030f 	and.w	r3, r6, #15
 8005a16:	5cd3      	ldrb	r3, [r2, r3]
 8005a18:	9a07      	ldr	r2, [sp, #28]
 8005a1a:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8005a1e:	0933      	lsrs	r3, r6, #4
 8005a20:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005a24:	9207      	str	r2, [sp, #28]
 8005a26:	093a      	lsrs	r2, r7, #4
 8005a28:	461e      	mov	r6, r3
 8005a2a:	4617      	mov	r7, r2
 8005a2c:	ea56 0307 	orrs.w	r3, r6, r7
 8005a30:	d1ee      	bne.n	8005a10 <_svfprintf_r+0xbe0>
 8005a32:	e7db      	b.n	80059ec <_svfprintf_r+0xbbc>
 8005a34:	b933      	cbnz	r3, 8005a44 <_svfprintf_r+0xc14>
 8005a36:	f01a 0f01 	tst.w	sl, #1
 8005a3a:	d003      	beq.n	8005a44 <_svfprintf_r+0xc14>
 8005a3c:	2330      	movs	r3, #48	; 0x30
 8005a3e:	f88d 3147 	strb.w	r3, [sp, #327]	; 0x147
 8005a42:	e794      	b.n	800596e <_svfprintf_r+0xb3e>
 8005a44:	ab52      	add	r3, sp, #328	; 0x148
 8005a46:	e3c3      	b.n	80061d0 <_svfprintf_r+0x13a0>
 8005a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	f000 838a 	beq.w	8006164 <_svfprintf_r+0x1334>
 8005a50:	2000      	movs	r0, #0
 8005a52:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8005a56:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8005a5a:	960a      	str	r6, [sp, #40]	; 0x28
 8005a5c:	f7ff bb3f 	b.w	80050de <_svfprintf_r+0x2ae>
 8005a60:	2010      	movs	r0, #16
 8005a62:	2b07      	cmp	r3, #7
 8005a64:	4402      	add	r2, r0
 8005a66:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005a6a:	6060      	str	r0, [r4, #4]
 8005a6c:	dd08      	ble.n	8005a80 <_svfprintf_r+0xc50>
 8005a6e:	4659      	mov	r1, fp
 8005a70:	4648      	mov	r0, r9
 8005a72:	aa26      	add	r2, sp, #152	; 0x98
 8005a74:	f004 fe94 	bl	800a7a0 <__ssprint_r>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f040 8351 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005a7e:	a929      	add	r1, sp, #164	; 0xa4
 8005a80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a82:	460c      	mov	r4, r1
 8005a84:	3b10      	subs	r3, #16
 8005a86:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a88:	e4f9      	b.n	800547e <_svfprintf_r+0x64e>
 8005a8a:	460c      	mov	r4, r1
 8005a8c:	e513      	b.n	80054b6 <_svfprintf_r+0x686>
 8005a8e:	4659      	mov	r1, fp
 8005a90:	4648      	mov	r0, r9
 8005a92:	aa26      	add	r2, sp, #152	; 0x98
 8005a94:	f004 fe84 	bl	800a7a0 <__ssprint_r>
 8005a98:	2800      	cmp	r0, #0
 8005a9a:	f040 8341 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005a9e:	ac29      	add	r4, sp, #164	; 0xa4
 8005aa0:	e51b      	b.n	80054da <_svfprintf_r+0x6aa>
 8005aa2:	4659      	mov	r1, fp
 8005aa4:	4648      	mov	r0, r9
 8005aa6:	aa26      	add	r2, sp, #152	; 0x98
 8005aa8:	f004 fe7a 	bl	800a7a0 <__ssprint_r>
 8005aac:	2800      	cmp	r0, #0
 8005aae:	f040 8337 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005ab2:	ac29      	add	r4, sp, #164	; 0xa4
 8005ab4:	e521      	b.n	80054fa <_svfprintf_r+0x6ca>
 8005ab6:	2010      	movs	r0, #16
 8005ab8:	2b07      	cmp	r3, #7
 8005aba:	4402      	add	r2, r0
 8005abc:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005ac0:	6060      	str	r0, [r4, #4]
 8005ac2:	dd08      	ble.n	8005ad6 <_svfprintf_r+0xca6>
 8005ac4:	4659      	mov	r1, fp
 8005ac6:	4648      	mov	r0, r9
 8005ac8:	aa26      	add	r2, sp, #152	; 0x98
 8005aca:	f004 fe69 	bl	800a7a0 <__ssprint_r>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	f040 8326 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005ad4:	a929      	add	r1, sp, #164	; 0xa4
 8005ad6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ad8:	460c      	mov	r4, r1
 8005ada:	3b10      	subs	r3, #16
 8005adc:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ade:	e515      	b.n	800550c <_svfprintf_r+0x6dc>
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	e52f      	b.n	8005544 <_svfprintf_r+0x714>
 8005ae4:	2010      	movs	r0, #16
 8005ae6:	2b07      	cmp	r3, #7
 8005ae8:	4402      	add	r2, r0
 8005aea:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005aee:	6060      	str	r0, [r4, #4]
 8005af0:	dd08      	ble.n	8005b04 <_svfprintf_r+0xcd4>
 8005af2:	4659      	mov	r1, fp
 8005af4:	4648      	mov	r0, r9
 8005af6:	aa26      	add	r2, sp, #152	; 0x98
 8005af8:	f004 fe52 	bl	800a7a0 <__ssprint_r>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	f040 830f 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005b02:	a929      	add	r1, sp, #164	; 0xa4
 8005b04:	460c      	mov	r4, r1
 8005b06:	3e10      	subs	r6, #16
 8005b08:	e520      	b.n	800554c <_svfprintf_r+0x71c>
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	e546      	b.n	800559c <_svfprintf_r+0x76c>
 8005b0e:	bf00      	nop
 8005b10:	0800c7dc 	.word	0x0800c7dc
 8005b14:	0800c7ed 	.word	0x0800c7ed
 8005b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b1a:	2b65      	cmp	r3, #101	; 0x65
 8005b1c:	f340 824a 	ble.w	8005fb4 <_svfprintf_r+0x1184>
 8005b20:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005b24:	2200      	movs	r2, #0
 8005b26:	2300      	movs	r3, #0
 8005b28:	f7fa ff3e 	bl	80009a8 <__aeabi_dcmpeq>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	d06a      	beq.n	8005c06 <_svfprintf_r+0xdd6>
 8005b30:	4b6f      	ldr	r3, [pc, #444]	; (8005cf0 <_svfprintf_r+0xec0>)
 8005b32:	6023      	str	r3, [r4, #0]
 8005b34:	2301      	movs	r3, #1
 8005b36:	441e      	add	r6, r3
 8005b38:	6063      	str	r3, [r4, #4]
 8005b3a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005b3c:	9628      	str	r6, [sp, #160]	; 0xa0
 8005b3e:	3301      	adds	r3, #1
 8005b40:	2b07      	cmp	r3, #7
 8005b42:	9327      	str	r3, [sp, #156]	; 0x9c
 8005b44:	dc38      	bgt.n	8005bb8 <_svfprintf_r+0xd88>
 8005b46:	3408      	adds	r4, #8
 8005b48:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005b4a:	9a08      	ldr	r2, [sp, #32]
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	db03      	blt.n	8005b58 <_svfprintf_r+0xd28>
 8005b50:	f01a 0f01 	tst.w	sl, #1
 8005b54:	f43f ad33 	beq.w	80055be <_svfprintf_r+0x78e>
 8005b58:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005b5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b60:	6063      	str	r3, [r4, #4]
 8005b62:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005b64:	4413      	add	r3, r2
 8005b66:	9328      	str	r3, [sp, #160]	; 0xa0
 8005b68:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	2b07      	cmp	r3, #7
 8005b6e:	9327      	str	r3, [sp, #156]	; 0x9c
 8005b70:	dc2c      	bgt.n	8005bcc <_svfprintf_r+0xd9c>
 8005b72:	3408      	adds	r4, #8
 8005b74:	9b08      	ldr	r3, [sp, #32]
 8005b76:	1e5d      	subs	r5, r3, #1
 8005b78:	2d00      	cmp	r5, #0
 8005b7a:	f77f ad20 	ble.w	80055be <_svfprintf_r+0x78e>
 8005b7e:	f04f 0810 	mov.w	r8, #16
 8005b82:	4e5c      	ldr	r6, [pc, #368]	; (8005cf4 <_svfprintf_r+0xec4>)
 8005b84:	2d10      	cmp	r5, #16
 8005b86:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005b8a:	f104 0108 	add.w	r1, r4, #8
 8005b8e:	f103 0301 	add.w	r3, r3, #1
 8005b92:	6026      	str	r6, [r4, #0]
 8005b94:	dc24      	bgt.n	8005be0 <_svfprintf_r+0xdb0>
 8005b96:	6065      	str	r5, [r4, #4]
 8005b98:	2b07      	cmp	r3, #7
 8005b9a:	4415      	add	r5, r2
 8005b9c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8005ba0:	f340 829c 	ble.w	80060dc <_svfprintf_r+0x12ac>
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	4648      	mov	r0, r9
 8005ba8:	aa26      	add	r2, sp, #152	; 0x98
 8005baa:	f004 fdf9 	bl	800a7a0 <__ssprint_r>
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	f040 82b6 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005bb4:	ac29      	add	r4, sp, #164	; 0xa4
 8005bb6:	e502      	b.n	80055be <_svfprintf_r+0x78e>
 8005bb8:	4659      	mov	r1, fp
 8005bba:	4648      	mov	r0, r9
 8005bbc:	aa26      	add	r2, sp, #152	; 0x98
 8005bbe:	f004 fdef 	bl	800a7a0 <__ssprint_r>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	f040 82ac 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005bc8:	ac29      	add	r4, sp, #164	; 0xa4
 8005bca:	e7bd      	b.n	8005b48 <_svfprintf_r+0xd18>
 8005bcc:	4659      	mov	r1, fp
 8005bce:	4648      	mov	r0, r9
 8005bd0:	aa26      	add	r2, sp, #152	; 0x98
 8005bd2:	f004 fde5 	bl	800a7a0 <__ssprint_r>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	f040 82a2 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005bdc:	ac29      	add	r4, sp, #164	; 0xa4
 8005bde:	e7c9      	b.n	8005b74 <_svfprintf_r+0xd44>
 8005be0:	3210      	adds	r2, #16
 8005be2:	2b07      	cmp	r3, #7
 8005be4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005be8:	f8c4 8004 	str.w	r8, [r4, #4]
 8005bec:	dd08      	ble.n	8005c00 <_svfprintf_r+0xdd0>
 8005bee:	4659      	mov	r1, fp
 8005bf0:	4648      	mov	r0, r9
 8005bf2:	aa26      	add	r2, sp, #152	; 0x98
 8005bf4:	f004 fdd4 	bl	800a7a0 <__ssprint_r>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	f040 8291 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005bfe:	a929      	add	r1, sp, #164	; 0xa4
 8005c00:	460c      	mov	r4, r1
 8005c02:	3d10      	subs	r5, #16
 8005c04:	e7be      	b.n	8005b84 <_svfprintf_r+0xd54>
 8005c06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	dc75      	bgt.n	8005cf8 <_svfprintf_r+0xec8>
 8005c0c:	4b38      	ldr	r3, [pc, #224]	; (8005cf0 <_svfprintf_r+0xec0>)
 8005c0e:	6023      	str	r3, [r4, #0]
 8005c10:	2301      	movs	r3, #1
 8005c12:	441e      	add	r6, r3
 8005c14:	6063      	str	r3, [r4, #4]
 8005c16:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005c18:	9628      	str	r6, [sp, #160]	; 0xa0
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	2b07      	cmp	r3, #7
 8005c1e:	9327      	str	r3, [sp, #156]	; 0x9c
 8005c20:	dc3e      	bgt.n	8005ca0 <_svfprintf_r+0xe70>
 8005c22:	3408      	adds	r4, #8
 8005c24:	9908      	ldr	r1, [sp, #32]
 8005c26:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c28:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c2a:	430a      	orrs	r2, r1
 8005c2c:	f00a 0101 	and.w	r1, sl, #1
 8005c30:	430a      	orrs	r2, r1
 8005c32:	f43f acc4 	beq.w	80055be <_svfprintf_r+0x78e>
 8005c36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005c38:	6022      	str	r2, [r4, #0]
 8005c3a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005c3c:	4413      	add	r3, r2
 8005c3e:	9328      	str	r3, [sp, #160]	; 0xa0
 8005c40:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005c42:	6062      	str	r2, [r4, #4]
 8005c44:	3301      	adds	r3, #1
 8005c46:	2b07      	cmp	r3, #7
 8005c48:	9327      	str	r3, [sp, #156]	; 0x9c
 8005c4a:	dc33      	bgt.n	8005cb4 <_svfprintf_r+0xe84>
 8005c4c:	3408      	adds	r4, #8
 8005c4e:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005c50:	2d00      	cmp	r5, #0
 8005c52:	da1c      	bge.n	8005c8e <_svfprintf_r+0xe5e>
 8005c54:	4623      	mov	r3, r4
 8005c56:	f04f 0810 	mov.w	r8, #16
 8005c5a:	4e26      	ldr	r6, [pc, #152]	; (8005cf4 <_svfprintf_r+0xec4>)
 8005c5c:	426d      	negs	r5, r5
 8005c5e:	2d10      	cmp	r5, #16
 8005c60:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8005c64:	f104 0408 	add.w	r4, r4, #8
 8005c68:	f102 0201 	add.w	r2, r2, #1
 8005c6c:	601e      	str	r6, [r3, #0]
 8005c6e:	dc2b      	bgt.n	8005cc8 <_svfprintf_r+0xe98>
 8005c70:	605d      	str	r5, [r3, #4]
 8005c72:	2a07      	cmp	r2, #7
 8005c74:	440d      	add	r5, r1
 8005c76:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8005c7a:	dd08      	ble.n	8005c8e <_svfprintf_r+0xe5e>
 8005c7c:	4659      	mov	r1, fp
 8005c7e:	4648      	mov	r0, r9
 8005c80:	aa26      	add	r2, sp, #152	; 0x98
 8005c82:	f004 fd8d 	bl	800a7a0 <__ssprint_r>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	f040 824a 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005c8c:	ac29      	add	r4, sp, #164	; 0xa4
 8005c8e:	9b07      	ldr	r3, [sp, #28]
 8005c90:	9a08      	ldr	r2, [sp, #32]
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	9b08      	ldr	r3, [sp, #32]
 8005c96:	6063      	str	r3, [r4, #4]
 8005c98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005c9a:	4413      	add	r3, r2
 8005c9c:	9328      	str	r3, [sp, #160]	; 0xa0
 8005c9e:	e487      	b.n	80055b0 <_svfprintf_r+0x780>
 8005ca0:	4659      	mov	r1, fp
 8005ca2:	4648      	mov	r0, r9
 8005ca4:	aa26      	add	r2, sp, #152	; 0x98
 8005ca6:	f004 fd7b 	bl	800a7a0 <__ssprint_r>
 8005caa:	2800      	cmp	r0, #0
 8005cac:	f040 8238 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005cb0:	ac29      	add	r4, sp, #164	; 0xa4
 8005cb2:	e7b7      	b.n	8005c24 <_svfprintf_r+0xdf4>
 8005cb4:	4659      	mov	r1, fp
 8005cb6:	4648      	mov	r0, r9
 8005cb8:	aa26      	add	r2, sp, #152	; 0x98
 8005cba:	f004 fd71 	bl	800a7a0 <__ssprint_r>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	f040 822e 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005cc4:	ac29      	add	r4, sp, #164	; 0xa4
 8005cc6:	e7c2      	b.n	8005c4e <_svfprintf_r+0xe1e>
 8005cc8:	3110      	adds	r1, #16
 8005cca:	2a07      	cmp	r2, #7
 8005ccc:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 8005cd0:	f8c3 8004 	str.w	r8, [r3, #4]
 8005cd4:	dd08      	ble.n	8005ce8 <_svfprintf_r+0xeb8>
 8005cd6:	4659      	mov	r1, fp
 8005cd8:	4648      	mov	r0, r9
 8005cda:	aa26      	add	r2, sp, #152	; 0x98
 8005cdc:	f004 fd60 	bl	800a7a0 <__ssprint_r>
 8005ce0:	2800      	cmp	r0, #0
 8005ce2:	f040 821d 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005ce6:	ac29      	add	r4, sp, #164	; 0xa4
 8005ce8:	4623      	mov	r3, r4
 8005cea:	3d10      	subs	r5, #16
 8005cec:	e7b7      	b.n	8005c5e <_svfprintf_r+0xe2e>
 8005cee:	bf00      	nop
 8005cf0:	0800c7fe 	.word	0x0800c7fe
 8005cf4:	0800c810 	.word	0x0800c810
 8005cf8:	9b08      	ldr	r3, [sp, #32]
 8005cfa:	42ab      	cmp	r3, r5
 8005cfc:	bfa8      	it	ge
 8005cfe:	462b      	movge	r3, r5
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	4698      	mov	r8, r3
 8005d04:	dd0b      	ble.n	8005d1e <_svfprintf_r+0xeee>
 8005d06:	9b07      	ldr	r3, [sp, #28]
 8005d08:	4446      	add	r6, r8
 8005d0a:	e9c4 3800 	strd	r3, r8, [r4]
 8005d0e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005d10:	9628      	str	r6, [sp, #160]	; 0xa0
 8005d12:	3301      	adds	r3, #1
 8005d14:	2b07      	cmp	r3, #7
 8005d16:	9327      	str	r3, [sp, #156]	; 0x9c
 8005d18:	f300 808f 	bgt.w	8005e3a <_svfprintf_r+0x100a>
 8005d1c:	3408      	adds	r4, #8
 8005d1e:	f1b8 0f00 	cmp.w	r8, #0
 8005d22:	bfb4      	ite	lt
 8005d24:	462e      	movlt	r6, r5
 8005d26:	eba5 0608 	subge.w	r6, r5, r8
 8005d2a:	2e00      	cmp	r6, #0
 8005d2c:	dd1c      	ble.n	8005d68 <_svfprintf_r+0xf38>
 8005d2e:	f8df 8280 	ldr.w	r8, [pc, #640]	; 8005fb0 <_svfprintf_r+0x1180>
 8005d32:	2e10      	cmp	r6, #16
 8005d34:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005d38:	f104 0108 	add.w	r1, r4, #8
 8005d3c:	f103 0301 	add.w	r3, r3, #1
 8005d40:	f8c4 8000 	str.w	r8, [r4]
 8005d44:	f300 8083 	bgt.w	8005e4e <_svfprintf_r+0x101e>
 8005d48:	6066      	str	r6, [r4, #4]
 8005d4a:	2b07      	cmp	r3, #7
 8005d4c:	4416      	add	r6, r2
 8005d4e:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8005d52:	f340 808f 	ble.w	8005e74 <_svfprintf_r+0x1044>
 8005d56:	4659      	mov	r1, fp
 8005d58:	4648      	mov	r0, r9
 8005d5a:	aa26      	add	r2, sp, #152	; 0x98
 8005d5c:	f004 fd20 	bl	800a7a0 <__ssprint_r>
 8005d60:	2800      	cmp	r0, #0
 8005d62:	f040 81dd 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005d66:	ac29      	add	r4, sp, #164	; 0xa4
 8005d68:	9b07      	ldr	r3, [sp, #28]
 8005d6a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 8005d6e:	441d      	add	r5, r3
 8005d70:	d00c      	beq.n	8005d8c <_svfprintf_r+0xf5c>
 8005d72:	4e8f      	ldr	r6, [pc, #572]	; (8005fb0 <_svfprintf_r+0x1180>)
 8005d74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d17e      	bne.n	8005e78 <_svfprintf_r+0x1048>
 8005d7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d17e      	bne.n	8005e7e <_svfprintf_r+0x104e>
 8005d80:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005d84:	4413      	add	r3, r2
 8005d86:	429d      	cmp	r5, r3
 8005d88:	bf28      	it	cs
 8005d8a:	461d      	movcs	r5, r3
 8005d8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005d8e:	9a08      	ldr	r2, [sp, #32]
 8005d90:	4293      	cmp	r3, r2
 8005d92:	db02      	blt.n	8005d9a <_svfprintf_r+0xf6a>
 8005d94:	f01a 0f01 	tst.w	sl, #1
 8005d98:	d00e      	beq.n	8005db8 <_svfprintf_r+0xf88>
 8005d9a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d9e:	6023      	str	r3, [r4, #0]
 8005da0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005da2:	6063      	str	r3, [r4, #4]
 8005da4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005da6:	4413      	add	r3, r2
 8005da8:	9328      	str	r3, [sp, #160]	; 0xa0
 8005daa:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005dac:	3301      	adds	r3, #1
 8005dae:	2b07      	cmp	r3, #7
 8005db0:	9327      	str	r3, [sp, #156]	; 0x9c
 8005db2:	f300 80e8 	bgt.w	8005f86 <_svfprintf_r+0x1156>
 8005db6:	3408      	adds	r4, #8
 8005db8:	9e20      	ldr	r6, [sp, #128]	; 0x80
 8005dba:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8005dbe:	440b      	add	r3, r1
 8005dc0:	1b8e      	subs	r6, r1, r6
 8005dc2:	1b5a      	subs	r2, r3, r5
 8005dc4:	4296      	cmp	r6, r2
 8005dc6:	bfa8      	it	ge
 8005dc8:	4616      	movge	r6, r2
 8005dca:	2e00      	cmp	r6, #0
 8005dcc:	dd0b      	ble.n	8005de6 <_svfprintf_r+0xfb6>
 8005dce:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005dd0:	e9c4 5600 	strd	r5, r6, [r4]
 8005dd4:	4433      	add	r3, r6
 8005dd6:	9328      	str	r3, [sp, #160]	; 0xa0
 8005dd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005dda:	3301      	adds	r3, #1
 8005ddc:	2b07      	cmp	r3, #7
 8005dde:	9327      	str	r3, [sp, #156]	; 0x9c
 8005de0:	f300 80db 	bgt.w	8005f9a <_svfprintf_r+0x116a>
 8005de4:	3408      	adds	r4, #8
 8005de6:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8005de8:	9b08      	ldr	r3, [sp, #32]
 8005dea:	2e00      	cmp	r6, #0
 8005dec:	eba3 0505 	sub.w	r5, r3, r5
 8005df0:	bfa8      	it	ge
 8005df2:	1bad      	subge	r5, r5, r6
 8005df4:	2d00      	cmp	r5, #0
 8005df6:	f77f abe2 	ble.w	80055be <_svfprintf_r+0x78e>
 8005dfa:	f04f 0810 	mov.w	r8, #16
 8005dfe:	4e6c      	ldr	r6, [pc, #432]	; (8005fb0 <_svfprintf_r+0x1180>)
 8005e00:	2d10      	cmp	r5, #16
 8005e02:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8005e06:	f104 0108 	add.w	r1, r4, #8
 8005e0a:	f103 0301 	add.w	r3, r3, #1
 8005e0e:	6026      	str	r6, [r4, #0]
 8005e10:	f77f aec1 	ble.w	8005b96 <_svfprintf_r+0xd66>
 8005e14:	3210      	adds	r2, #16
 8005e16:	2b07      	cmp	r3, #7
 8005e18:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005e1c:	f8c4 8004 	str.w	r8, [r4, #4]
 8005e20:	dd08      	ble.n	8005e34 <_svfprintf_r+0x1004>
 8005e22:	4659      	mov	r1, fp
 8005e24:	4648      	mov	r0, r9
 8005e26:	aa26      	add	r2, sp, #152	; 0x98
 8005e28:	f004 fcba 	bl	800a7a0 <__ssprint_r>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	f040 8177 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005e32:	a929      	add	r1, sp, #164	; 0xa4
 8005e34:	460c      	mov	r4, r1
 8005e36:	3d10      	subs	r5, #16
 8005e38:	e7e2      	b.n	8005e00 <_svfprintf_r+0xfd0>
 8005e3a:	4659      	mov	r1, fp
 8005e3c:	4648      	mov	r0, r9
 8005e3e:	aa26      	add	r2, sp, #152	; 0x98
 8005e40:	f004 fcae 	bl	800a7a0 <__ssprint_r>
 8005e44:	2800      	cmp	r0, #0
 8005e46:	f040 816b 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005e4a:	ac29      	add	r4, sp, #164	; 0xa4
 8005e4c:	e767      	b.n	8005d1e <_svfprintf_r+0xeee>
 8005e4e:	2010      	movs	r0, #16
 8005e50:	2b07      	cmp	r3, #7
 8005e52:	4402      	add	r2, r0
 8005e54:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8005e58:	6060      	str	r0, [r4, #4]
 8005e5a:	dd08      	ble.n	8005e6e <_svfprintf_r+0x103e>
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	4648      	mov	r0, r9
 8005e60:	aa26      	add	r2, sp, #152	; 0x98
 8005e62:	f004 fc9d 	bl	800a7a0 <__ssprint_r>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	f040 815a 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005e6c:	a929      	add	r1, sp, #164	; 0xa4
 8005e6e:	460c      	mov	r4, r1
 8005e70:	3e10      	subs	r6, #16
 8005e72:	e75e      	b.n	8005d32 <_svfprintf_r+0xf02>
 8005e74:	460c      	mov	r4, r1
 8005e76:	e777      	b.n	8005d68 <_svfprintf_r+0xf38>
 8005e78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d052      	beq.n	8005f24 <_svfprintf_r+0x10f4>
 8005e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e80:	3b01      	subs	r3, #1
 8005e82:	930c      	str	r3, [sp, #48]	; 0x30
 8005e84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005e86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005e88:	6023      	str	r3, [r4, #0]
 8005e8a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005e8c:	6063      	str	r3, [r4, #4]
 8005e8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005e90:	4413      	add	r3, r2
 8005e92:	9328      	str	r3, [sp, #160]	; 0xa0
 8005e94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005e96:	3301      	adds	r3, #1
 8005e98:	2b07      	cmp	r3, #7
 8005e9a:	9327      	str	r3, [sp, #156]	; 0x9c
 8005e9c:	dc49      	bgt.n	8005f32 <_svfprintf_r+0x1102>
 8005e9e:	3408      	adds	r4, #8
 8005ea0:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8005ea4:	eb03 0802 	add.w	r8, r3, r2
 8005ea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005eaa:	eba8 0805 	sub.w	r8, r8, r5
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	4598      	cmp	r8, r3
 8005eb2:	bfa8      	it	ge
 8005eb4:	4698      	movge	r8, r3
 8005eb6:	f1b8 0f00 	cmp.w	r8, #0
 8005eba:	dd0a      	ble.n	8005ed2 <_svfprintf_r+0x10a2>
 8005ebc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ebe:	e9c4 5800 	strd	r5, r8, [r4]
 8005ec2:	4443      	add	r3, r8
 8005ec4:	9328      	str	r3, [sp, #160]	; 0xa0
 8005ec6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005ec8:	3301      	adds	r3, #1
 8005eca:	2b07      	cmp	r3, #7
 8005ecc:	9327      	str	r3, [sp, #156]	; 0x9c
 8005ece:	dc3a      	bgt.n	8005f46 <_svfprintf_r+0x1116>
 8005ed0:	3408      	adds	r4, #8
 8005ed2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ed4:	f1b8 0f00 	cmp.w	r8, #0
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	bfb4      	ite	lt
 8005edc:	4698      	movlt	r8, r3
 8005ede:	eba3 0808 	subge.w	r8, r3, r8
 8005ee2:	f1b8 0f00 	cmp.w	r8, #0
 8005ee6:	dd19      	ble.n	8005f1c <_svfprintf_r+0x10ec>
 8005ee8:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8005eec:	f1b8 0f10 	cmp.w	r8, #16
 8005ef0:	f102 0201 	add.w	r2, r2, #1
 8005ef4:	f104 0108 	add.w	r1, r4, #8
 8005ef8:	6026      	str	r6, [r4, #0]
 8005efa:	dc2e      	bgt.n	8005f5a <_svfprintf_r+0x112a>
 8005efc:	4443      	add	r3, r8
 8005efe:	2a07      	cmp	r2, #7
 8005f00:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005f04:	f8c4 8004 	str.w	r8, [r4, #4]
 8005f08:	dd3b      	ble.n	8005f82 <_svfprintf_r+0x1152>
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	4648      	mov	r0, r9
 8005f0e:	aa26      	add	r2, sp, #152	; 0x98
 8005f10:	f004 fc46 	bl	800a7a0 <__ssprint_r>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	f040 8103 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005f1a:	ac29      	add	r4, sp, #164	; 0xa4
 8005f1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	441d      	add	r5, r3
 8005f22:	e727      	b.n	8005d74 <_svfprintf_r+0xf44>
 8005f24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f26:	3b01      	subs	r3, #1
 8005f28:	930e      	str	r3, [sp, #56]	; 0x38
 8005f2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	930d      	str	r3, [sp, #52]	; 0x34
 8005f30:	e7a8      	b.n	8005e84 <_svfprintf_r+0x1054>
 8005f32:	4659      	mov	r1, fp
 8005f34:	4648      	mov	r0, r9
 8005f36:	aa26      	add	r2, sp, #152	; 0x98
 8005f38:	f004 fc32 	bl	800a7a0 <__ssprint_r>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f040 80ef 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005f42:	ac29      	add	r4, sp, #164	; 0xa4
 8005f44:	e7ac      	b.n	8005ea0 <_svfprintf_r+0x1070>
 8005f46:	4659      	mov	r1, fp
 8005f48:	4648      	mov	r0, r9
 8005f4a:	aa26      	add	r2, sp, #152	; 0x98
 8005f4c:	f004 fc28 	bl	800a7a0 <__ssprint_r>
 8005f50:	2800      	cmp	r0, #0
 8005f52:	f040 80e5 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005f56:	ac29      	add	r4, sp, #164	; 0xa4
 8005f58:	e7bb      	b.n	8005ed2 <_svfprintf_r+0x10a2>
 8005f5a:	2010      	movs	r0, #16
 8005f5c:	2a07      	cmp	r2, #7
 8005f5e:	4403      	add	r3, r0
 8005f60:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8005f64:	6060      	str	r0, [r4, #4]
 8005f66:	dd08      	ble.n	8005f7a <_svfprintf_r+0x114a>
 8005f68:	4659      	mov	r1, fp
 8005f6a:	4648      	mov	r0, r9
 8005f6c:	aa26      	add	r2, sp, #152	; 0x98
 8005f6e:	f004 fc17 	bl	800a7a0 <__ssprint_r>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	f040 80d4 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005f78:	a929      	add	r1, sp, #164	; 0xa4
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	f1a8 0810 	sub.w	r8, r8, #16
 8005f80:	e7b2      	b.n	8005ee8 <_svfprintf_r+0x10b8>
 8005f82:	460c      	mov	r4, r1
 8005f84:	e7ca      	b.n	8005f1c <_svfprintf_r+0x10ec>
 8005f86:	4659      	mov	r1, fp
 8005f88:	4648      	mov	r0, r9
 8005f8a:	aa26      	add	r2, sp, #152	; 0x98
 8005f8c:	f004 fc08 	bl	800a7a0 <__ssprint_r>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	f040 80c5 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005f96:	ac29      	add	r4, sp, #164	; 0xa4
 8005f98:	e70e      	b.n	8005db8 <_svfprintf_r+0xf88>
 8005f9a:	4659      	mov	r1, fp
 8005f9c:	4648      	mov	r0, r9
 8005f9e:	aa26      	add	r2, sp, #152	; 0x98
 8005fa0:	f004 fbfe 	bl	800a7a0 <__ssprint_r>
 8005fa4:	2800      	cmp	r0, #0
 8005fa6:	f040 80bb 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005faa:	ac29      	add	r4, sp, #164	; 0xa4
 8005fac:	e71b      	b.n	8005de6 <_svfprintf_r+0xfb6>
 8005fae:	bf00      	nop
 8005fb0:	0800c810 	.word	0x0800c810
 8005fb4:	9a08      	ldr	r2, [sp, #32]
 8005fb6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8005fb8:	2a01      	cmp	r2, #1
 8005fba:	9a07      	ldr	r2, [sp, #28]
 8005fbc:	f106 0601 	add.w	r6, r6, #1
 8005fc0:	6022      	str	r2, [r4, #0]
 8005fc2:	f04f 0201 	mov.w	r2, #1
 8005fc6:	f103 0301 	add.w	r3, r3, #1
 8005fca:	e9cd 3627 	strd	r3, r6, [sp, #156]	; 0x9c
 8005fce:	f104 0508 	add.w	r5, r4, #8
 8005fd2:	6062      	str	r2, [r4, #4]
 8005fd4:	dc02      	bgt.n	8005fdc <_svfprintf_r+0x11ac>
 8005fd6:	f01a 0f01 	tst.w	sl, #1
 8005fda:	d07a      	beq.n	80060d2 <_svfprintf_r+0x12a2>
 8005fdc:	2b07      	cmp	r3, #7
 8005fde:	dd08      	ble.n	8005ff2 <_svfprintf_r+0x11c2>
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	4648      	mov	r0, r9
 8005fe4:	aa26      	add	r2, sp, #152	; 0x98
 8005fe6:	f004 fbdb 	bl	800a7a0 <__ssprint_r>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	f040 8098 	bne.w	8006120 <_svfprintf_r+0x12f0>
 8005ff0:	ad29      	add	r5, sp, #164	; 0xa4
 8005ff2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005ff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ff6:	602b      	str	r3, [r5, #0]
 8005ff8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ffa:	606b      	str	r3, [r5, #4]
 8005ffc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8005ffe:	4413      	add	r3, r2
 8006000:	9328      	str	r3, [sp, #160]	; 0xa0
 8006002:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006004:	3301      	adds	r3, #1
 8006006:	2b07      	cmp	r3, #7
 8006008:	9327      	str	r3, [sp, #156]	; 0x9c
 800600a:	dc32      	bgt.n	8006072 <_svfprintf_r+0x1242>
 800600c:	3508      	adds	r5, #8
 800600e:	9b08      	ldr	r3, [sp, #32]
 8006010:	2200      	movs	r2, #0
 8006012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006016:	1e5c      	subs	r4, r3, #1
 8006018:	2300      	movs	r3, #0
 800601a:	f7fa fcc5 	bl	80009a8 <__aeabi_dcmpeq>
 800601e:	2800      	cmp	r0, #0
 8006020:	d130      	bne.n	8006084 <_svfprintf_r+0x1254>
 8006022:	9927      	ldr	r1, [sp, #156]	; 0x9c
 8006024:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006026:	9807      	ldr	r0, [sp, #28]
 8006028:	9a08      	ldr	r2, [sp, #32]
 800602a:	3101      	adds	r1, #1
 800602c:	3b01      	subs	r3, #1
 800602e:	3001      	adds	r0, #1
 8006030:	4413      	add	r3, r2
 8006032:	2907      	cmp	r1, #7
 8006034:	e9c5 0400 	strd	r0, r4, [r5]
 8006038:	e9cd 1327 	strd	r1, r3, [sp, #156]	; 0x9c
 800603c:	dd4c      	ble.n	80060d8 <_svfprintf_r+0x12a8>
 800603e:	4659      	mov	r1, fp
 8006040:	4648      	mov	r0, r9
 8006042:	aa26      	add	r2, sp, #152	; 0x98
 8006044:	f004 fbac 	bl	800a7a0 <__ssprint_r>
 8006048:	2800      	cmp	r0, #0
 800604a:	d169      	bne.n	8006120 <_svfprintf_r+0x12f0>
 800604c:	ad29      	add	r5, sp, #164	; 0xa4
 800604e:	ab22      	add	r3, sp, #136	; 0x88
 8006050:	602b      	str	r3, [r5, #0]
 8006052:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8006054:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006056:	606b      	str	r3, [r5, #4]
 8006058:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800605a:	4413      	add	r3, r2
 800605c:	9328      	str	r3, [sp, #160]	; 0xa0
 800605e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006060:	3301      	adds	r3, #1
 8006062:	2b07      	cmp	r3, #7
 8006064:	9327      	str	r3, [sp, #156]	; 0x9c
 8006066:	f73f ad9d 	bgt.w	8005ba4 <_svfprintf_r+0xd74>
 800606a:	f105 0408 	add.w	r4, r5, #8
 800606e:	f7ff baa6 	b.w	80055be <_svfprintf_r+0x78e>
 8006072:	4659      	mov	r1, fp
 8006074:	4648      	mov	r0, r9
 8006076:	aa26      	add	r2, sp, #152	; 0x98
 8006078:	f004 fb92 	bl	800a7a0 <__ssprint_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	d14f      	bne.n	8006120 <_svfprintf_r+0x12f0>
 8006080:	ad29      	add	r5, sp, #164	; 0xa4
 8006082:	e7c4      	b.n	800600e <_svfprintf_r+0x11de>
 8006084:	2c00      	cmp	r4, #0
 8006086:	dde2      	ble.n	800604e <_svfprintf_r+0x121e>
 8006088:	f04f 0810 	mov.w	r8, #16
 800608c:	4e51      	ldr	r6, [pc, #324]	; (80061d4 <_svfprintf_r+0x13a4>)
 800608e:	2c10      	cmp	r4, #16
 8006090:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006094:	f105 0108 	add.w	r1, r5, #8
 8006098:	f103 0301 	add.w	r3, r3, #1
 800609c:	602e      	str	r6, [r5, #0]
 800609e:	dc07      	bgt.n	80060b0 <_svfprintf_r+0x1280>
 80060a0:	606c      	str	r4, [r5, #4]
 80060a2:	2b07      	cmp	r3, #7
 80060a4:	4414      	add	r4, r2
 80060a6:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 80060aa:	dcc8      	bgt.n	800603e <_svfprintf_r+0x120e>
 80060ac:	460d      	mov	r5, r1
 80060ae:	e7ce      	b.n	800604e <_svfprintf_r+0x121e>
 80060b0:	3210      	adds	r2, #16
 80060b2:	2b07      	cmp	r3, #7
 80060b4:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80060b8:	f8c5 8004 	str.w	r8, [r5, #4]
 80060bc:	dd06      	ble.n	80060cc <_svfprintf_r+0x129c>
 80060be:	4659      	mov	r1, fp
 80060c0:	4648      	mov	r0, r9
 80060c2:	aa26      	add	r2, sp, #152	; 0x98
 80060c4:	f004 fb6c 	bl	800a7a0 <__ssprint_r>
 80060c8:	bb50      	cbnz	r0, 8006120 <_svfprintf_r+0x12f0>
 80060ca:	a929      	add	r1, sp, #164	; 0xa4
 80060cc:	460d      	mov	r5, r1
 80060ce:	3c10      	subs	r4, #16
 80060d0:	e7dd      	b.n	800608e <_svfprintf_r+0x125e>
 80060d2:	2b07      	cmp	r3, #7
 80060d4:	ddbb      	ble.n	800604e <_svfprintf_r+0x121e>
 80060d6:	e7b2      	b.n	800603e <_svfprintf_r+0x120e>
 80060d8:	3508      	adds	r5, #8
 80060da:	e7b8      	b.n	800604e <_svfprintf_r+0x121e>
 80060dc:	460c      	mov	r4, r1
 80060de:	f7ff ba6e 	b.w	80055be <_svfprintf_r+0x78e>
 80060e2:	e9dd 3214 	ldrd	r3, r2, [sp, #80]	; 0x50
 80060e6:	1a9d      	subs	r5, r3, r2
 80060e8:	2d00      	cmp	r5, #0
 80060ea:	f77f aa6c 	ble.w	80055c6 <_svfprintf_r+0x796>
 80060ee:	f04f 0810 	mov.w	r8, #16
 80060f2:	4e39      	ldr	r6, [pc, #228]	; (80061d8 <_svfprintf_r+0x13a8>)
 80060f4:	2d10      	cmp	r5, #16
 80060f6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80060fa:	6026      	str	r6, [r4, #0]
 80060fc:	f103 0301 	add.w	r3, r3, #1
 8006100:	dc17      	bgt.n	8006132 <_svfprintf_r+0x1302>
 8006102:	6065      	str	r5, [r4, #4]
 8006104:	2b07      	cmp	r3, #7
 8006106:	4415      	add	r5, r2
 8006108:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800610c:	f77f aa5b 	ble.w	80055c6 <_svfprintf_r+0x796>
 8006110:	4659      	mov	r1, fp
 8006112:	4648      	mov	r0, r9
 8006114:	aa26      	add	r2, sp, #152	; 0x98
 8006116:	f004 fb43 	bl	800a7a0 <__ssprint_r>
 800611a:	2800      	cmp	r0, #0
 800611c:	f43f aa53 	beq.w	80055c6 <_svfprintf_r+0x796>
 8006120:	2f00      	cmp	r7, #0
 8006122:	f43f a87e 	beq.w	8005222 <_svfprintf_r+0x3f2>
 8006126:	4639      	mov	r1, r7
 8006128:	4648      	mov	r0, r9
 800612a:	f002 f89b 	bl	8008264 <_free_r>
 800612e:	f7ff b878 	b.w	8005222 <_svfprintf_r+0x3f2>
 8006132:	3210      	adds	r2, #16
 8006134:	2b07      	cmp	r3, #7
 8006136:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800613a:	f8c4 8004 	str.w	r8, [r4, #4]
 800613e:	dc02      	bgt.n	8006146 <_svfprintf_r+0x1316>
 8006140:	3408      	adds	r4, #8
 8006142:	3d10      	subs	r5, #16
 8006144:	e7d6      	b.n	80060f4 <_svfprintf_r+0x12c4>
 8006146:	4659      	mov	r1, fp
 8006148:	4648      	mov	r0, r9
 800614a:	aa26      	add	r2, sp, #152	; 0x98
 800614c:	f004 fb28 	bl	800a7a0 <__ssprint_r>
 8006150:	2800      	cmp	r0, #0
 8006152:	d1e5      	bne.n	8006120 <_svfprintf_r+0x12f0>
 8006154:	ac29      	add	r4, sp, #164	; 0xa4
 8006156:	e7f4      	b.n	8006142 <_svfprintf_r+0x1312>
 8006158:	4639      	mov	r1, r7
 800615a:	4648      	mov	r0, r9
 800615c:	f002 f882 	bl	8008264 <_free_r>
 8006160:	f7ff ba48 	b.w	80055f4 <_svfprintf_r+0x7c4>
 8006164:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006166:	2b00      	cmp	r3, #0
 8006168:	f43f a85b 	beq.w	8005222 <_svfprintf_r+0x3f2>
 800616c:	4659      	mov	r1, fp
 800616e:	4648      	mov	r0, r9
 8006170:	aa26      	add	r2, sp, #152	; 0x98
 8006172:	f004 fb15 	bl	800a7a0 <__ssprint_r>
 8006176:	f7ff b854 	b.w	8005222 <_svfprintf_r+0x3f2>
 800617a:	ea56 0207 	orrs.w	r2, r6, r7
 800617e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006182:	f43f ab54 	beq.w	800582e <_svfprintf_r+0x9fe>
 8006186:	2b01      	cmp	r3, #1
 8006188:	f43f abea 	beq.w	8005960 <_svfprintf_r+0xb30>
 800618c:	2b02      	cmp	r3, #2
 800618e:	ab52      	add	r3, sp, #328	; 0x148
 8006190:	9307      	str	r3, [sp, #28]
 8006192:	f43f ac3d 	beq.w	8005a10 <_svfprintf_r+0xbe0>
 8006196:	9907      	ldr	r1, [sp, #28]
 8006198:	f006 0307 	and.w	r3, r6, #7
 800619c:	460a      	mov	r2, r1
 800619e:	3330      	adds	r3, #48	; 0x30
 80061a0:	f802 3d01 	strb.w	r3, [r2, #-1]!
 80061a4:	9207      	str	r2, [sp, #28]
 80061a6:	08f2      	lsrs	r2, r6, #3
 80061a8:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80061ac:	08f8      	lsrs	r0, r7, #3
 80061ae:	4616      	mov	r6, r2
 80061b0:	4607      	mov	r7, r0
 80061b2:	ea56 0207 	orrs.w	r2, r6, r7
 80061b6:	d1ee      	bne.n	8006196 <_svfprintf_r+0x1366>
 80061b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061ba:	07d2      	lsls	r2, r2, #31
 80061bc:	f57f ac16 	bpl.w	80059ec <_svfprintf_r+0xbbc>
 80061c0:	2b30      	cmp	r3, #48	; 0x30
 80061c2:	f43f ac13 	beq.w	80059ec <_svfprintf_r+0xbbc>
 80061c6:	2330      	movs	r3, #48	; 0x30
 80061c8:	9a07      	ldr	r2, [sp, #28]
 80061ca:	f802 3c01 	strb.w	r3, [r2, #-1]
 80061ce:	1e8b      	subs	r3, r1, #2
 80061d0:	9307      	str	r3, [sp, #28]
 80061d2:	e40b      	b.n	80059ec <_svfprintf_r+0xbbc>
 80061d4:	0800c810 	.word	0x0800c810
 80061d8:	0800c800 	.word	0x0800c800

080061dc <__ssvfscanf_r>:
 80061dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061e0:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 80061e4:	461e      	mov	r6, r3
 80061e6:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 80061ea:	af02      	add	r7, sp, #8
 80061ec:	049d      	lsls	r5, r3, #18
 80061ee:	460c      	mov	r4, r1
 80061f0:	62b8      	str	r0, [r7, #40]	; 0x28
 80061f2:	613a      	str	r2, [r7, #16]
 80061f4:	d406      	bmi.n	8006204 <__ssvfscanf_r+0x28>
 80061f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80061fa:	818b      	strh	r3, [r1, #12]
 80061fc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80061fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006202:	664b      	str	r3, [r1, #100]	; 0x64
 8006204:	2300      	movs	r3, #0
 8006206:	e9c7 3306 	strd	r3, r3, [r7, #24]
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	637b      	str	r3, [r7, #52]	; 0x34
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006218:	613a      	str	r2, [r7, #16]
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80d4 	beq.w	80063ca <__ssvfscanf_r+0x1ee>
 8006222:	4a92      	ldr	r2, [pc, #584]	; (800646c <__ssvfscanf_r+0x290>)
 8006224:	f813 8002 	ldrb.w	r8, [r3, r2]
 8006228:	f018 0808 	ands.w	r8, r8, #8
 800622c:	d018      	beq.n	8006260 <__ssvfscanf_r+0x84>
 800622e:	6863      	ldr	r3, [r4, #4]
 8006230:	2b00      	cmp	r3, #0
 8006232:	dd0e      	ble.n	8006252 <__ssvfscanf_r+0x76>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	498d      	ldr	r1, [pc, #564]	; (800646c <__ssvfscanf_r+0x290>)
 8006238:	781a      	ldrb	r2, [r3, #0]
 800623a:	5c8a      	ldrb	r2, [r1, r2]
 800623c:	0710      	lsls	r0, r2, #28
 800623e:	d5e8      	bpl.n	8006212 <__ssvfscanf_r+0x36>
 8006240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006242:	3301      	adds	r3, #1
 8006244:	3201      	adds	r2, #1
 8006246:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006248:	6862      	ldr	r2, [r4, #4]
 800624a:	6023      	str	r3, [r4, #0]
 800624c:	3a01      	subs	r2, #1
 800624e:	6062      	str	r2, [r4, #4]
 8006250:	e7ed      	b.n	800622e <__ssvfscanf_r+0x52>
 8006252:	4621      	mov	r1, r4
 8006254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006256:	f004 fb5b 	bl	800a910 <__ssrefill_r>
 800625a:	2800      	cmp	r0, #0
 800625c:	d0ea      	beq.n	8006234 <__ssvfscanf_r+0x58>
 800625e:	e7d8      	b.n	8006212 <__ssvfscanf_r+0x36>
 8006260:	2b25      	cmp	r3, #37	; 0x25
 8006262:	d165      	bne.n	8006330 <__ssvfscanf_r+0x154>
 8006264:	46c1      	mov	r9, r8
 8006266:	220a      	movs	r2, #10
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 800626e:	6939      	ldr	r1, [r7, #16]
 8006270:	781d      	ldrb	r5, [r3, #0]
 8006272:	3101      	adds	r1, #1
 8006274:	6139      	str	r1, [r7, #16]
 8006276:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 800627a:	2955      	cmp	r1, #85	; 0x55
 800627c:	f200 80a5 	bhi.w	80063ca <__ssvfscanf_r+0x1ee>
 8006280:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006284:	00a30056 	.word	0x00a30056
 8006288:	00a300a3 	.word	0x00a300a3
 800628c:	007c00a3 	.word	0x007c00a3
 8006290:	00a300a3 	.word	0x00a300a3
 8006294:	00a300a3 	.word	0x00a300a3
 8006298:	00b900a3 	.word	0x00b900a3
 800629c:	00b900b9 	.word	0x00b900b9
 80062a0:	00b900b9 	.word	0x00b900b9
 80062a4:	00b900b9 	.word	0x00b900b9
 80062a8:	00b900b9 	.word	0x00b900b9
 80062ac:	00a300b9 	.word	0x00a300b9
 80062b0:	00a300a3 	.word	0x00a300a3
 80062b4:	00a300a3 	.word	0x00a300a3
 80062b8:	00a300a3 	.word	0x00a300a3
 80062bc:	00a300d9 	.word	0x00a300d9
 80062c0:	00c30104 	.word	0x00c30104
 80062c4:	00d900d9 	.word	0x00d900d9
 80062c8:	00a300d9 	.word	0x00a300d9
 80062cc:	00a300a3 	.word	0x00a300a3
 80062d0:	00a000a3 	.word	0x00a000a3
 80062d4:	00a300a3 	.word	0x00a300a3
 80062d8:	00a300c7 	.word	0x00a300c7
 80062dc:	00a300a3 	.word	0x00a300a3
 80062e0:	00a300ef 	.word	0x00a300ef
 80062e4:	00a300a3 	.word	0x00a300a3
 80062e8:	00d300a3 	.word	0x00d300a3
 80062ec:	00a300a3 	.word	0x00a300a3
 80062f0:	00a300fa 	.word	0x00a300fa
 80062f4:	00a300a3 	.word	0x00a300a3
 80062f8:	00a300a3 	.word	0x00a300a3
 80062fc:	00a300d9 	.word	0x00a300d9
 8006300:	00c50106 	.word	0x00c50106
 8006304:	00d900d9 	.word	0x00d900d9
 8006308:	009300d9 	.word	0x009300d9
 800630c:	00a00130 	.word	0x00a00130
 8006310:	008500a3 	.word	0x008500a3
 8006314:	010d00ac 	.word	0x010d00ac
 8006318:	010a00c9 	.word	0x010a00c9
 800631c:	00a300a3 	.word	0x00a300a3
 8006320:	00a800f1 	.word	0x00a800f1
 8006324:	00a300cf 	.word	0x00a300cf
 8006328:	00d300a3 	.word	0x00d300a3
 800632c:	00a800a3 	.word	0x00a800a3
 8006330:	6863      	ldr	r3, [r4, #4]
 8006332:	2b00      	cmp	r3, #0
 8006334:	dd0f      	ble.n	8006356 <__ssvfscanf_r+0x17a>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	7819      	ldrb	r1, [r3, #0]
 800633c:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8006340:	4291      	cmp	r1, r2
 8006342:	d142      	bne.n	80063ca <__ssvfscanf_r+0x1ee>
 8006344:	6862      	ldr	r2, [r4, #4]
 8006346:	3301      	adds	r3, #1
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	3a01      	subs	r2, #1
 800634e:	6062      	str	r2, [r4, #4]
 8006350:	3301      	adds	r3, #1
 8006352:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006354:	e75d      	b.n	8006212 <__ssvfscanf_r+0x36>
 8006356:	4621      	mov	r1, r4
 8006358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800635a:	f004 fad9 	bl	800a910 <__ssrefill_r>
 800635e:	2800      	cmp	r0, #0
 8006360:	d0e9      	beq.n	8006336 <__ssvfscanf_r+0x15a>
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	b113      	cbz	r3, 800636c <__ssvfscanf_r+0x190>
 8006366:	89a3      	ldrh	r3, [r4, #12]
 8006368:	065b      	lsls	r3, r3, #25
 800636a:	d52e      	bpl.n	80063ca <__ssvfscanf_r+0x1ee>
 800636c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800636e:	2b00      	cmp	r3, #0
 8006370:	f040 80f9 	bne.w	8006566 <__ssvfscanf_r+0x38a>
 8006374:	f04f 33ff 	mov.w	r3, #4294967295
 8006378:	623b      	str	r3, [r7, #32]
 800637a:	e104      	b.n	8006586 <__ssvfscanf_r+0x3aa>
 800637c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800637e:	ea53 0309 	orrs.w	r3, r3, r9
 8006382:	633b      	str	r3, [r7, #48]	; 0x30
 8006384:	d121      	bne.n	80063ca <__ssvfscanf_r+0x1ee>
 8006386:	f04f 0910 	mov.w	r9, #16
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	e76f      	b.n	800626e <__ssvfscanf_r+0x92>
 800638e:	f019 0f0f 	tst.w	r9, #15
 8006392:	d11a      	bne.n	80063ca <__ssvfscanf_r+0x1ee>
 8006394:	7859      	ldrb	r1, [r3, #1]
 8006396:	296c      	cmp	r1, #108	; 0x6c
 8006398:	d104      	bne.n	80063a4 <__ssvfscanf_r+0x1c8>
 800639a:	3302      	adds	r3, #2
 800639c:	613b      	str	r3, [r7, #16]
 800639e:	f049 0902 	orr.w	r9, r9, #2
 80063a2:	e7f2      	b.n	800638a <__ssvfscanf_r+0x1ae>
 80063a4:	f049 0901 	orr.w	r9, r9, #1
 80063a8:	e7ef      	b.n	800638a <__ssvfscanf_r+0x1ae>
 80063aa:	f019 0f0f 	tst.w	r9, #15
 80063ae:	d10c      	bne.n	80063ca <__ssvfscanf_r+0x1ee>
 80063b0:	7859      	ldrb	r1, [r3, #1]
 80063b2:	2968      	cmp	r1, #104	; 0x68
 80063b4:	bf03      	ittte	eq
 80063b6:	3302      	addeq	r3, #2
 80063b8:	613b      	streq	r3, [r7, #16]
 80063ba:	f049 0908 	orreq.w	r9, r9, #8
 80063be:	f049 0904 	orrne.w	r9, r9, #4
 80063c2:	e7e2      	b.n	800638a <__ssvfscanf_r+0x1ae>
 80063c4:	f019 0f0f 	tst.w	r9, #15
 80063c8:	d0e9      	beq.n	800639e <__ssvfscanf_r+0x1c2>
 80063ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 80da 	beq.w	8006586 <__ssvfscanf_r+0x3aa>
 80063d2:	e0d3      	b.n	800657c <__ssvfscanf_r+0x3a0>
 80063d4:	f019 0f0f 	tst.w	r9, #15
 80063d8:	d0d7      	beq.n	800638a <__ssvfscanf_r+0x1ae>
 80063da:	e7f6      	b.n	80063ca <__ssvfscanf_r+0x1ee>
 80063dc:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 80063e0:	d1f3      	bne.n	80063ca <__ssvfscanf_r+0x1ee>
 80063e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80063e4:	b921      	cbnz	r1, 80063f0 <__ssvfscanf_r+0x214>
 80063e6:	b082      	sub	sp, #8
 80063e8:	a902      	add	r1, sp, #8
 80063ea:	e9c1 3300 	strd	r3, r3, [r1]
 80063ee:	6379      	str	r1, [r7, #52]	; 0x34
 80063f0:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 80063f4:	e7c9      	b.n	800638a <__ssvfscanf_r+0x1ae>
 80063f6:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 80063fa:	d1e6      	bne.n	80063ca <__ssvfscanf_r+0x1ee>
 80063fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063fe:	fb02 5503 	mla	r5, r2, r3, r5
 8006402:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8006406:	633b      	str	r3, [r7, #48]	; 0x30
 8006408:	e7bf      	b.n	800638a <__ssvfscanf_r+0x1ae>
 800640a:	f049 0901 	orr.w	r9, r9, #1
 800640e:	4b18      	ldr	r3, [pc, #96]	; (8006470 <__ssvfscanf_r+0x294>)
 8006410:	e008      	b.n	8006424 <__ssvfscanf_r+0x248>
 8006412:	f049 0901 	orr.w	r9, r9, #1
 8006416:	4b17      	ldr	r3, [pc, #92]	; (8006474 <__ssvfscanf_r+0x298>)
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	2308      	movs	r3, #8
 800641c:	2503      	movs	r5, #3
 800641e:	61bb      	str	r3, [r7, #24]
 8006420:	e00a      	b.n	8006438 <__ssvfscanf_r+0x25c>
 8006422:	4b14      	ldr	r3, [pc, #80]	; (8006474 <__ssvfscanf_r+0x298>)
 8006424:	617b      	str	r3, [r7, #20]
 8006426:	230a      	movs	r3, #10
 8006428:	e7f8      	b.n	800641c <__ssvfscanf_r+0x240>
 800642a:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 800642e:	4b11      	ldr	r3, [pc, #68]	; (8006474 <__ssvfscanf_r+0x298>)
 8006430:	617b      	str	r3, [r7, #20]
 8006432:	2310      	movs	r3, #16
 8006434:	e7f2      	b.n	800641c <__ssvfscanf_r+0x240>
 8006436:	2504      	movs	r5, #4
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	dd56      	ble.n	80064ec <__ssvfscanf_r+0x310>
 800643e:	f019 0f40 	tst.w	r9, #64	; 0x40
 8006442:	d105      	bne.n	8006450 <__ssvfscanf_r+0x274>
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	4909      	ldr	r1, [pc, #36]	; (800646c <__ssvfscanf_r+0x290>)
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	5c52      	ldrb	r2, [r2, r1]
 800644c:	0711      	lsls	r1, r2, #28
 800644e:	d454      	bmi.n	80064fa <__ssvfscanf_r+0x31e>
 8006450:	3d01      	subs	r5, #1
 8006452:	2d03      	cmp	r5, #3
 8006454:	d863      	bhi.n	800651e <__ssvfscanf_r+0x342>
 8006456:	e8df f015 	tbh	[pc, r5, lsl #1]
 800645a:	01d1      	.short	0x01d1
 800645c:	05270387 	.word	0x05270387
 8006460:	0615      	.short	0x0615
 8006462:	f049 0901 	orr.w	r9, r9, #1
 8006466:	2502      	movs	r5, #2
 8006468:	e7e6      	b.n	8006438 <__ssvfscanf_r+0x25c>
 800646a:	bf00      	nop
 800646c:	0800c849 	.word	0x0800c849
 8006470:	0800a439 	.word	0x0800a439
 8006474:	0800a665 	.word	0x0800a665
 8006478:	6939      	ldr	r1, [r7, #16]
 800647a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800647e:	f003 f8e9 	bl	8009654 <__sccl>
 8006482:	2501      	movs	r5, #1
 8006484:	6138      	str	r0, [r7, #16]
 8006486:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 800648a:	e7d5      	b.n	8006438 <__ssvfscanf_r+0x25c>
 800648c:	f049 0901 	orr.w	r9, r9, #1
 8006490:	2500      	movs	r5, #0
 8006492:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8006496:	e7cf      	b.n	8006438 <__ssvfscanf_r+0x25c>
 8006498:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 800649c:	e7c7      	b.n	800642e <__ssvfscanf_r+0x252>
 800649e:	f019 0f10 	tst.w	r9, #16
 80064a2:	f47f aeb6 	bne.w	8006212 <__ssvfscanf_r+0x36>
 80064a6:	f019 0f08 	tst.w	r9, #8
 80064aa:	f856 1b04 	ldr.w	r1, [r6], #4
 80064ae:	d002      	beq.n	80064b6 <__ssvfscanf_r+0x2da>
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	700b      	strb	r3, [r1, #0]
 80064b4:	e6ad      	b.n	8006212 <__ssvfscanf_r+0x36>
 80064b6:	f019 0f04 	tst.w	r9, #4
 80064ba:	d002      	beq.n	80064c2 <__ssvfscanf_r+0x2e6>
 80064bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064be:	800b      	strh	r3, [r1, #0]
 80064c0:	e6a7      	b.n	8006212 <__ssvfscanf_r+0x36>
 80064c2:	f019 0f01 	tst.w	r9, #1
 80064c6:	d002      	beq.n	80064ce <__ssvfscanf_r+0x2f2>
 80064c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ca:	600b      	str	r3, [r1, #0]
 80064cc:	e6a1      	b.n	8006212 <__ssvfscanf_r+0x36>
 80064ce:	f019 0f02 	tst.w	r9, #2
 80064d2:	d0f9      	beq.n	80064c8 <__ssvfscanf_r+0x2ec>
 80064d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d6:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80064da:	461a      	mov	r2, r3
 80064dc:	464b      	mov	r3, r9
 80064de:	e9c1 2300 	strd	r2, r3, [r1]
 80064e2:	e696      	b.n	8006212 <__ssvfscanf_r+0x36>
 80064e4:	4b99      	ldr	r3, [pc, #612]	; (800674c <__ssvfscanf_r+0x570>)
 80064e6:	617b      	str	r3, [r7, #20]
 80064e8:	2300      	movs	r3, #0
 80064ea:	e797      	b.n	800641c <__ssvfscanf_r+0x240>
 80064ec:	4621      	mov	r1, r4
 80064ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064f0:	f004 fa0e 	bl	800a910 <__ssrefill_r>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	d0a2      	beq.n	800643e <__ssvfscanf_r+0x262>
 80064f8:	e733      	b.n	8006362 <__ssvfscanf_r+0x186>
 80064fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064fc:	3201      	adds	r2, #1
 80064fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006500:	6862      	ldr	r2, [r4, #4]
 8006502:	3a01      	subs	r2, #1
 8006504:	2a00      	cmp	r2, #0
 8006506:	6062      	str	r2, [r4, #4]
 8006508:	dd02      	ble.n	8006510 <__ssvfscanf_r+0x334>
 800650a:	3301      	adds	r3, #1
 800650c:	6023      	str	r3, [r4, #0]
 800650e:	e799      	b.n	8006444 <__ssvfscanf_r+0x268>
 8006510:	4621      	mov	r1, r4
 8006512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006514:	f004 f9fc 	bl	800a910 <__ssrefill_r>
 8006518:	2800      	cmp	r0, #0
 800651a:	d093      	beq.n	8006444 <__ssvfscanf_r+0x268>
 800651c:	e721      	b.n	8006362 <__ssvfscanf_r+0x186>
 800651e:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8006520:	f009 0b10 	and.w	fp, r9, #16
 8006524:	2d01      	cmp	r5, #1
 8006526:	bf38      	it	cc
 8006528:	2501      	movcc	r5, #1
 800652a:	f019 0801 	ands.w	r8, r9, #1
 800652e:	f000 80ee 	beq.w	800670e <__ssvfscanf_r+0x532>
 8006532:	f1bb 0f00 	cmp.w	fp, #0
 8006536:	f040 80b2 	bne.w	800669e <__ssvfscanf_r+0x4c2>
 800653a:	4633      	mov	r3, r6
 800653c:	f853 6b04 	ldr.w	r6, [r3], #4
 8006540:	f019 0f80 	tst.w	r9, #128	; 0x80
 8006544:	633b      	str	r3, [r7, #48]	; 0x30
 8006546:	f000 80b1 	beq.w	80066ac <__ssvfscanf_r+0x4d0>
 800654a:	b13e      	cbz	r6, 800655c <__ssvfscanf_r+0x380>
 800654c:	2080      	movs	r0, #128	; 0x80
 800654e:	f001 ff77 	bl	8008440 <malloc>
 8006552:	4680      	mov	r8, r0
 8006554:	b9e8      	cbnz	r0, 8006592 <__ssvfscanf_r+0x3b6>
 8006556:	f04f 33ff 	mov.w	r3, #4294967295
 800655a:	623b      	str	r3, [r7, #32]
 800655c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655e:	b193      	cbz	r3, 8006586 <__ssvfscanf_r+0x3aa>
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	3301      	adds	r3, #1
 8006564:	d10a      	bne.n	800657c <__ssvfscanf_r+0x3a0>
 8006566:	2400      	movs	r4, #0
 8006568:	4626      	mov	r6, r4
 800656a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656c:	681d      	ldr	r5, [r3, #0]
 800656e:	88db      	ldrh	r3, [r3, #6]
 8006570:	42a3      	cmp	r3, r4
 8006572:	f300 8782 	bgt.w	800747a <__ssvfscanf_r+0x129e>
 8006576:	f04f 33ff 	mov.w	r3, #4294967295
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	6818      	ldr	r0, [r3, #0]
 8006580:	b108      	cbz	r0, 8006586 <__ssvfscanf_r+0x3aa>
 8006582:	f001 ff65 	bl	8008450 <free>
 8006586:	6a38      	ldr	r0, [r7, #32]
 8006588:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 800658c:	46bd      	mov	sp, r7
 800658e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006594:	6030      	str	r0, [r6, #0]
 8006596:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800659a:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800659e:	45ca      	cmp	sl, r9
 80065a0:	d311      	bcc.n	80065c6 <__ssvfscanf_r+0x3ea>
 80065a2:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 80065a6:	4599      	cmp	r9, r3
 80065a8:	d8d5      	bhi.n	8006556 <__ssvfscanf_r+0x37a>
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	f109 0908 	add.w	r9, r9, #8
 80065b0:	6818      	ldr	r0, [r3, #0]
 80065b2:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80065b6:	f002 fe57 	bl	8009268 <realloc>
 80065ba:	2800      	cmp	r0, #0
 80065bc:	d0cb      	beq.n	8006556 <__ssvfscanf_r+0x37a>
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	6018      	str	r0, [r3, #0]
 80065c2:	f8a3 9004 	strh.w	r9, [r3, #4]
 80065c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c8:	f10a 0201 	add.w	r2, sl, #1
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f04f 0920 	mov.w	r9, #32
 80065d2:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 80065d6:	46b2      	mov	sl, r6
 80065d8:	4646      	mov	r6, r8
 80065da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065dc:	80ca      	strh	r2, [r1, #6]
 80065de:	2200      	movs	r2, #0
 80065e0:	627a      	str	r2, [r7, #36]	; 0x24
 80065e2:	f001 ff0d 	bl	8008400 <__locale_mb_cur_max>
 80065e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e8:	4290      	cmp	r0, r2
 80065ea:	f43f aeba 	beq.w	8006362 <__ssvfscanf_r+0x186>
 80065ee:	6821      	ldr	r1, [r4, #0]
 80065f0:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 80065f4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80065f8:	1c53      	adds	r3, r2, #1
 80065fa:	f80c 0002 	strb.w	r0, [ip, r2]
 80065fe:	6862      	ldr	r2, [r4, #4]
 8006600:	3a01      	subs	r2, #1
 8006602:	e9c4 1200 	strd	r1, r2, [r4]
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	2a03      	cmp	r2, #3
 800660a:	d102      	bne.n	8006612 <__ssvfscanf_r+0x436>
 800660c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800660e:	2a04      	cmp	r2, #4
 8006610:	d007      	beq.n	8006622 <__ssvfscanf_r+0x446>
 8006612:	2208      	movs	r2, #8
 8006614:	2100      	movs	r1, #0
 8006616:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800661a:	627b      	str	r3, [r7, #36]	; 0x24
 800661c:	f7fe fb70 	bl	8004d00 <memset>
 8006620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006622:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006626:	9200      	str	r2, [sp, #0]
 8006628:	4631      	mov	r1, r6
 800662a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800662e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
 8006632:	f002 f957 	bl	80088e4 <_mbrtowc_r>
 8006636:	1c42      	adds	r2, r0, #1
 8006638:	61f8      	str	r0, [r7, #28]
 800663a:	f43f ae92 	beq.w	8006362 <__ssvfscanf_r+0x186>
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	2800      	cmp	r0, #0
 8006642:	d137      	bne.n	80066b4 <__ssvfscanf_r+0x4d8>
 8006644:	f1bb 0f00 	cmp.w	fp, #0
 8006648:	d101      	bne.n	800664e <__ssvfscanf_r+0x472>
 800664a:	f8c6 b000 	str.w	fp, [r6]
 800664e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006650:	441a      	add	r2, r3
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006656:	2b03      	cmp	r3, #3
 8006658:	d102      	bne.n	8006660 <__ssvfscanf_r+0x484>
 800665a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800665c:	2b04      	cmp	r3, #4
 800665e:	d000      	beq.n	8006662 <__ssvfscanf_r+0x486>
 8006660:	3d01      	subs	r5, #1
 8006662:	f1bb 0f00 	cmp.w	fp, #0
 8006666:	d118      	bne.n	800669a <__ssvfscanf_r+0x4be>
 8006668:	f1ba 0f00 	cmp.w	sl, #0
 800666c:	d014      	beq.n	8006698 <__ssvfscanf_r+0x4bc>
 800666e:	eba6 0308 	sub.w	r3, r6, r8
 8006672:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8006676:	d80f      	bhi.n	8006698 <__ssvfscanf_r+0x4bc>
 8006678:	4640      	mov	r0, r8
 800667a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800667e:	627b      	str	r3, [r7, #36]	; 0x24
 8006680:	f002 fdf2 	bl	8009268 <realloc>
 8006684:	4680      	mov	r8, r0
 8006686:	2800      	cmp	r0, #0
 8006688:	f43f af65 	beq.w	8006556 <__ssvfscanf_r+0x37a>
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	f8ca 0000 	str.w	r0, [sl]
 8006692:	18c6      	adds	r6, r0, r3
 8006694:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8006698:	3604      	adds	r6, #4
 800669a:	2300      	movs	r3, #0
 800669c:	e00d      	b.n	80066ba <__ssvfscanf_r+0x4de>
 800669e:	f04f 0900 	mov.w	r9, #0
 80066a2:	633e      	str	r6, [r7, #48]	; 0x30
 80066a4:	46c8      	mov	r8, r9
 80066a6:	46ca      	mov	sl, r9
 80066a8:	464e      	mov	r6, r9
 80066aa:	e798      	b.n	80065de <__ssvfscanf_r+0x402>
 80066ac:	46d9      	mov	r9, fp
 80066ae:	46d8      	mov	r8, fp
 80066b0:	46da      	mov	sl, fp
 80066b2:	e794      	b.n	80065de <__ssvfscanf_r+0x402>
 80066b4:	69fa      	ldr	r2, [r7, #28]
 80066b6:	3202      	adds	r2, #2
 80066b8:	d1c9      	bne.n	800664e <__ssvfscanf_r+0x472>
 80066ba:	6862      	ldr	r2, [r4, #4]
 80066bc:	2a00      	cmp	r2, #0
 80066be:	dc14      	bgt.n	80066ea <__ssvfscanf_r+0x50e>
 80066c0:	4621      	mov	r1, r4
 80066c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066c4:	627b      	str	r3, [r7, #36]	; 0x24
 80066c6:	f004 f923 	bl	800a910 <__ssrefill_r>
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	b168      	cbz	r0, 80066ea <__ssvfscanf_r+0x50e>
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f47f ae47 	bne.w	8006362 <__ssvfscanf_r+0x186>
 80066d4:	f1ba 0f00 	cmp.w	sl, #0
 80066d8:	d10b      	bne.n	80066f2 <__ssvfscanf_r+0x516>
 80066da:	f1bb 0f00 	cmp.w	fp, #0
 80066de:	d102      	bne.n	80066e6 <__ssvfscanf_r+0x50a>
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	3301      	adds	r3, #1
 80066e4:	623b      	str	r3, [r7, #32]
 80066e6:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80066e8:	e593      	b.n	8006212 <__ssvfscanf_r+0x36>
 80066ea:	2d00      	cmp	r5, #0
 80066ec:	d0f2      	beq.n	80066d4 <__ssvfscanf_r+0x4f8>
 80066ee:	461a      	mov	r2, r3
 80066f0:	e776      	b.n	80065e0 <__ssvfscanf_r+0x404>
 80066f2:	eba6 0108 	sub.w	r1, r6, r8
 80066f6:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80066fa:	d9ee      	bls.n	80066da <__ssvfscanf_r+0x4fe>
 80066fc:	f8da 0000 	ldr.w	r0, [sl]
 8006700:	f002 fdb2 	bl	8009268 <realloc>
 8006704:	2800      	cmp	r0, #0
 8006706:	d0e8      	beq.n	80066da <__ssvfscanf_r+0x4fe>
 8006708:	f8ca 0000 	str.w	r0, [sl]
 800670c:	e7e5      	b.n	80066da <__ssvfscanf_r+0x4fe>
 800670e:	f1bb 0f00 	cmp.w	fp, #0
 8006712:	d01d      	beq.n	8006750 <__ssvfscanf_r+0x574>
 8006714:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006718:	429d      	cmp	r5, r3
 800671a:	dd10      	ble.n	800673e <__ssvfscanf_r+0x562>
 800671c:	4498      	add	r8, r3
 800671e:	1aed      	subs	r5, r5, r3
 8006720:	4413      	add	r3, r2
 8006722:	4621      	mov	r1, r4
 8006724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	f004 f8f2 	bl	800a910 <__ssrefill_r>
 800672c:	2800      	cmp	r0, #0
 800672e:	d0f1      	beq.n	8006714 <__ssvfscanf_r+0x538>
 8006730:	f1b8 0f00 	cmp.w	r8, #0
 8006734:	f43f ae15 	beq.w	8006362 <__ssvfscanf_r+0x186>
 8006738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673a:	4443      	add	r3, r8
 800673c:	e609      	b.n	8006352 <__ssvfscanf_r+0x176>
 800673e:	1b5b      	subs	r3, r3, r5
 8006740:	44a8      	add	r8, r5
 8006742:	4415      	add	r5, r2
 8006744:	6063      	str	r3, [r4, #4]
 8006746:	6025      	str	r5, [r4, #0]
 8006748:	e7f6      	b.n	8006738 <__ssvfscanf_r+0x55c>
 800674a:	bf00      	nop
 800674c:	0800a439 	.word	0x0800a439
 8006750:	46b0      	mov	r8, r6
 8006752:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8006756:	f858 6b04 	ldr.w	r6, [r8], #4
 800675a:	d02f      	beq.n	80067bc <__ssvfscanf_r+0x5e0>
 800675c:	2e00      	cmp	r6, #0
 800675e:	f43f ae34 	beq.w	80063ca <__ssvfscanf_r+0x1ee>
 8006762:	4628      	mov	r0, r5
 8006764:	f001 fe6c 	bl	8008440 <malloc>
 8006768:	4682      	mov	sl, r0
 800676a:	2800      	cmp	r0, #0
 800676c:	f43f adfe 	beq.w	800636c <__ssvfscanf_r+0x190>
 8006770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006772:	6030      	str	r0, [r6, #0]
 8006774:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8006778:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 800677c:	45cb      	cmp	fp, r9
 800677e:	d313      	bcc.n	80067a8 <__ssvfscanf_r+0x5cc>
 8006780:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8006784:	4599      	cmp	r9, r3
 8006786:	f63f aeee 	bhi.w	8006566 <__ssvfscanf_r+0x38a>
 800678a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800678c:	f109 0908 	add.w	r9, r9, #8
 8006790:	6818      	ldr	r0, [r3, #0]
 8006792:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8006796:	f002 fd67 	bl	8009268 <realloc>
 800679a:	2800      	cmp	r0, #0
 800679c:	f43f aee3 	beq.w	8006566 <__ssvfscanf_r+0x38a>
 80067a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067a2:	6018      	str	r0, [r3, #0]
 80067a4:	f8a3 9004 	strh.w	r9, [r3, #4]
 80067a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067aa:	46b1      	mov	r9, r6
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80067b0:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80067b4:	4656      	mov	r6, sl
 80067b6:	f10b 0201 	add.w	r2, fp, #1
 80067ba:	80ca      	strh	r2, [r1, #6]
 80067bc:	4631      	mov	r1, r6
 80067be:	462b      	mov	r3, r5
 80067c0:	2201      	movs	r2, #1
 80067c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c4:	9400      	str	r4, [sp, #0]
 80067c6:	f004 f8c0 	bl	800a94a <_sfread_r>
 80067ca:	4606      	mov	r6, r0
 80067cc:	2800      	cmp	r0, #0
 80067ce:	f43f adc8 	beq.w	8006362 <__ssvfscanf_r+0x186>
 80067d2:	f1b9 0f00 	cmp.w	r9, #0
 80067d6:	d009      	beq.n	80067ec <__ssvfscanf_r+0x610>
 80067d8:	4285      	cmp	r5, r0
 80067da:	d907      	bls.n	80067ec <__ssvfscanf_r+0x610>
 80067dc:	4601      	mov	r1, r0
 80067de:	f8d9 0000 	ldr.w	r0, [r9]
 80067e2:	f002 fd41 	bl	8009268 <realloc>
 80067e6:	b108      	cbz	r0, 80067ec <__ssvfscanf_r+0x610>
 80067e8:	f8c9 0000 	str.w	r0, [r9]
 80067ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ee:	4433      	add	r3, r6
 80067f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	4646      	mov	r6, r8
 80067f6:	3301      	adds	r3, #1
 80067f8:	623b      	str	r3, [r7, #32]
 80067fa:	e50a      	b.n	8006212 <__ssvfscanf_r+0x36>
 80067fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fe:	f009 0b10 	and.w	fp, r9, #16
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf08      	it	eq
 8006806:	f04f 33ff 	moveq.w	r3, #4294967295
 800680a:	f019 0501 	ands.w	r5, r9, #1
 800680e:	633b      	str	r3, [r7, #48]	; 0x30
 8006810:	f000 8101 	beq.w	8006a16 <__ssvfscanf_r+0x83a>
 8006814:	f1bb 0f00 	cmp.w	fp, #0
 8006818:	f040 80a3 	bne.w	8006962 <__ssvfscanf_r+0x786>
 800681c:	4633      	mov	r3, r6
 800681e:	f853 5b04 	ldr.w	r5, [r3], #4
 8006822:	f019 0f80 	tst.w	r9, #128	; 0x80
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	f000 80a4 	beq.w	8006974 <__ssvfscanf_r+0x798>
 800682c:	2d00      	cmp	r5, #0
 800682e:	f43f ae95 	beq.w	800655c <__ssvfscanf_r+0x380>
 8006832:	2080      	movs	r0, #128	; 0x80
 8006834:	f001 fe04 	bl	8008440 <malloc>
 8006838:	4680      	mov	r8, r0
 800683a:	2800      	cmp	r0, #0
 800683c:	f43f ae8b 	beq.w	8006556 <__ssvfscanf_r+0x37a>
 8006840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006842:	6028      	str	r0, [r5, #0]
 8006844:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8006848:	889e      	ldrh	r6, [r3, #4]
 800684a:	45b1      	cmp	r9, r6
 800684c:	d310      	bcc.n	8006870 <__ssvfscanf_r+0x694>
 800684e:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8006852:	429e      	cmp	r6, r3
 8006854:	f63f ae7f 	bhi.w	8006556 <__ssvfscanf_r+0x37a>
 8006858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685a:	3608      	adds	r6, #8
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	00b1      	lsls	r1, r6, #2
 8006860:	f002 fd02 	bl	8009268 <realloc>
 8006864:	2800      	cmp	r0, #0
 8006866:	f43f ae76 	beq.w	8006556 <__ssvfscanf_r+0x37a>
 800686a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800686c:	6018      	str	r0, [r3, #0]
 800686e:	809e      	strh	r6, [r3, #4]
 8006870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006872:	627d      	str	r5, [r7, #36]	; 0x24
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f04f 0a20 	mov.w	sl, #32
 800687a:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800687e:	4645      	mov	r5, r8
 8006880:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006882:	f109 0201 	add.w	r2, r9, #1
 8006886:	80ca      	strh	r2, [r1, #6]
 8006888:	2600      	movs	r6, #0
 800688a:	f001 fdb9 	bl	8008400 <__locale_mb_cur_max>
 800688e:	42b0      	cmp	r0, r6
 8006890:	f43f ad67 	beq.w	8006362 <__ssvfscanf_r+0x186>
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800689a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800689e:	f106 0901 	add.w	r9, r6, #1
 80068a2:	558a      	strb	r2, [r1, r6]
 80068a4:	6862      	ldr	r2, [r4, #4]
 80068a6:	3a01      	subs	r2, #1
 80068a8:	e9c4 3200 	strd	r3, r2, [r4]
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d102      	bne.n	80068b8 <__ssvfscanf_r+0x6dc>
 80068b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b4:	2b04      	cmp	r3, #4
 80068b6:	d005      	beq.n	80068c4 <__ssvfscanf_r+0x6e8>
 80068b8:	2208      	movs	r2, #8
 80068ba:	2100      	movs	r1, #0
 80068bc:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80068c0:	f7fe fa1e 	bl	8004d00 <memset>
 80068c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	4629      	mov	r1, r5
 80068cc:	464b      	mov	r3, r9
 80068ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068d0:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80068d4:	f002 f806 	bl	80088e4 <_mbrtowc_r>
 80068d8:	4603      	mov	r3, r0
 80068da:	61f8      	str	r0, [r7, #28]
 80068dc:	1c58      	adds	r0, r3, #1
 80068de:	f43f ad40 	beq.w	8006362 <__ssvfscanf_r+0x186>
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d14b      	bne.n	800697e <__ssvfscanf_r+0x7a2>
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	682e      	ldr	r6, [r5, #0]
 80068ea:	1c71      	adds	r1, r6, #1
 80068ec:	d057      	beq.n	800699e <__ssvfscanf_r+0x7c2>
 80068ee:	2208      	movs	r2, #8
 80068f0:	2100      	movs	r1, #0
 80068f2:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80068f6:	f7fe fa03 	bl	8004d00 <memset>
 80068fa:	4b9a      	ldr	r3, [pc, #616]	; (8006b64 <__ssvfscanf_r+0x988>)
 80068fc:	4632      	mov	r2, r6
 80068fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006904:	60bb      	str	r3, [r7, #8]
 8006906:	68be      	ldr	r6, [r7, #8]
 8006908:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800690c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8006910:	47b0      	blx	r6
 8006912:	2801      	cmp	r0, #1
 8006914:	d145      	bne.n	80069a2 <__ssvfscanf_r+0x7c6>
 8006916:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800691a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800691e:	5c9b      	ldrb	r3, [r3, r2]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d149      	bne.n	80069b8 <__ssvfscanf_r+0x7dc>
 8006924:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 8006928:	f1b9 0f00 	cmp.w	r9, #0
 800692c:	d13b      	bne.n	80069a6 <__ssvfscanf_r+0x7ca>
 800692e:	f1bb 0f00 	cmp.w	fp, #0
 8006932:	d114      	bne.n	800695e <__ssvfscanf_r+0x782>
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	f8c5 b000 	str.w	fp, [r5]
 800693a:	b16b      	cbz	r3, 8006958 <__ssvfscanf_r+0x77c>
 800693c:	eba5 0108 	sub.w	r1, r5, r8
 8006940:	108b      	asrs	r3, r1, #2
 8006942:	3301      	adds	r3, #1
 8006944:	459a      	cmp	sl, r3
 8006946:	d907      	bls.n	8006958 <__ssvfscanf_r+0x77c>
 8006948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694a:	3104      	adds	r1, #4
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	f002 fc8b 	bl	8009268 <realloc>
 8006952:	b108      	cbz	r0, 8006958 <__ssvfscanf_r+0x77c>
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	6018      	str	r0, [r3, #0]
 8006958:	6a3b      	ldr	r3, [r7, #32]
 800695a:	3301      	adds	r3, #1
 800695c:	623b      	str	r3, [r7, #32]
 800695e:	68fe      	ldr	r6, [r7, #12]
 8006960:	e457      	b.n	8006212 <__ssvfscanf_r+0x36>
 8006962:	f04f 0a00 	mov.w	sl, #0
 8006966:	60fe      	str	r6, [r7, #12]
 8006968:	46d0      	mov	r8, sl
 800696a:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 800696e:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8006972:	e789      	b.n	8006888 <__ssvfscanf_r+0x6ac>
 8006974:	46da      	mov	sl, fp
 8006976:	46d8      	mov	r8, fp
 8006978:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 800697c:	e784      	b.n	8006888 <__ssvfscanf_r+0x6ac>
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3302      	adds	r3, #2
 8006982:	d1b1      	bne.n	80068e8 <__ssvfscanf_r+0x70c>
 8006984:	6863      	ldr	r3, [r4, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	dc40      	bgt.n	8006a0c <__ssvfscanf_r+0x830>
 800698a:	4621      	mov	r1, r4
 800698c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800698e:	f003 ffbf 	bl	800a910 <__ssrefill_r>
 8006992:	2800      	cmp	r0, #0
 8006994:	d03a      	beq.n	8006a0c <__ssvfscanf_r+0x830>
 8006996:	f1b9 0f00 	cmp.w	r9, #0
 800699a:	d0c8      	beq.n	800692e <__ssvfscanf_r+0x752>
 800699c:	e4e1      	b.n	8006362 <__ssvfscanf_r+0x186>
 800699e:	4632      	mov	r2, r6
 80069a0:	e7bb      	b.n	800691a <__ssvfscanf_r+0x73e>
 80069a2:	2200      	movs	r2, #0
 80069a4:	e7b9      	b.n	800691a <__ssvfscanf_r+0x73e>
 80069a6:	f109 39ff 	add.w	r9, r9, #4294967295
 80069aa:	4622      	mov	r2, r4
 80069ac:	f816 1009 	ldrb.w	r1, [r6, r9]
 80069b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b2:	f003 ff70 	bl	800a896 <_sungetc_r>
 80069b6:	e7b7      	b.n	8006928 <__ssvfscanf_r+0x74c>
 80069b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ba:	444b      	add	r3, r9
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d102      	bne.n	80069ca <__ssvfscanf_r+0x7ee>
 80069c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c6:	2b04      	cmp	r3, #4
 80069c8:	d002      	beq.n	80069d0 <__ssvfscanf_r+0x7f4>
 80069ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069cc:	3b01      	subs	r3, #1
 80069ce:	633b      	str	r3, [r7, #48]	; 0x30
 80069d0:	f1bb 0f00 	cmp.w	fp, #0
 80069d4:	d117      	bne.n	8006a06 <__ssvfscanf_r+0x82a>
 80069d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d8:	3504      	adds	r5, #4
 80069da:	b1a3      	cbz	r3, 8006a06 <__ssvfscanf_r+0x82a>
 80069dc:	eba5 0608 	sub.w	r6, r5, r8
 80069e0:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 80069e4:	d80d      	bhi.n	8006a02 <__ssvfscanf_r+0x826>
 80069e6:	4640      	mov	r0, r8
 80069e8:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 80069ec:	f002 fc3c 	bl	8009268 <realloc>
 80069f0:	4680      	mov	r8, r0
 80069f2:	2800      	cmp	r0, #0
 80069f4:	f43f adaf 	beq.w	8006556 <__ssvfscanf_r+0x37a>
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	1985      	adds	r5, r0, r6
 80069fc:	6018      	str	r0, [r3, #0]
 80069fe:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8006a02:	46d9      	mov	r9, fp
 8006a04:	e7be      	b.n	8006984 <__ssvfscanf_r+0x7a8>
 8006a06:	f04f 0900 	mov.w	r9, #0
 8006a0a:	e7bb      	b.n	8006984 <__ssvfscanf_r+0x7a8>
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d08d      	beq.n	800692e <__ssvfscanf_r+0x752>
 8006a12:	464e      	mov	r6, r9
 8006a14:	e739      	b.n	800688a <__ssvfscanf_r+0x6ae>
 8006a16:	f1bb 0f00 	cmp.w	fp, #0
 8006a1a:	d01c      	beq.n	8006a56 <__ssvfscanf_r+0x87a>
 8006a1c:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	781a      	ldrb	r2, [r3, #0]
 8006a24:	f818 2002 	ldrb.w	r2, [r8, r2]
 8006a28:	b90a      	cbnz	r2, 8006a2e <__ssvfscanf_r+0x852>
 8006a2a:	b98d      	cbnz	r5, 8006a50 <__ssvfscanf_r+0x874>
 8006a2c:	e4cd      	b.n	80063ca <__ssvfscanf_r+0x1ee>
 8006a2e:	3301      	adds	r3, #1
 8006a30:	6862      	ldr	r2, [r4, #4]
 8006a32:	6023      	str	r3, [r4, #0]
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	3501      	adds	r5, #1
 8006a38:	3a01      	subs	r2, #1
 8006a3a:	42ab      	cmp	r3, r5
 8006a3c:	6062      	str	r2, [r4, #4]
 8006a3e:	d007      	beq.n	8006a50 <__ssvfscanf_r+0x874>
 8006a40:	2a00      	cmp	r2, #0
 8006a42:	dced      	bgt.n	8006a20 <__ssvfscanf_r+0x844>
 8006a44:	4621      	mov	r1, r4
 8006a46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a48:	f003 ff62 	bl	800a910 <__ssrefill_r>
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d0e7      	beq.n	8006a20 <__ssvfscanf_r+0x844>
 8006a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a52:	442b      	add	r3, r5
 8006a54:	e47d      	b.n	8006352 <__ssvfscanf_r+0x176>
 8006a56:	46b3      	mov	fp, r6
 8006a58:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8006a5c:	f85b 6b04 	ldr.w	r6, [fp], #4
 8006a60:	d07d      	beq.n	8006b5e <__ssvfscanf_r+0x982>
 8006a62:	2e00      	cmp	r6, #0
 8006a64:	f43f acb1 	beq.w	80063ca <__ssvfscanf_r+0x1ee>
 8006a68:	2020      	movs	r0, #32
 8006a6a:	f001 fce9 	bl	8008440 <malloc>
 8006a6e:	4680      	mov	r8, r0
 8006a70:	2800      	cmp	r0, #0
 8006a72:	f43f ac7b 	beq.w	800636c <__ssvfscanf_r+0x190>
 8006a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a78:	6030      	str	r0, [r6, #0]
 8006a7a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8006a7e:	889d      	ldrh	r5, [r3, #4]
 8006a80:	45a9      	cmp	r9, r5
 8006a82:	d310      	bcc.n	8006aa6 <__ssvfscanf_r+0x8ca>
 8006a84:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8006a88:	429d      	cmp	r5, r3
 8006a8a:	f63f ad6c 	bhi.w	8006566 <__ssvfscanf_r+0x38a>
 8006a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a90:	3508      	adds	r5, #8
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	00a9      	lsls	r1, r5, #2
 8006a96:	f002 fbe7 	bl	8009268 <realloc>
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	f43f ad63 	beq.w	8006566 <__ssvfscanf_r+0x38a>
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa2:	6018      	str	r0, [r3, #0]
 8006aa4:	809d      	strh	r5, [r3, #4]
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa8:	f109 0201 	add.w	r2, r9, #1
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	46b2      	mov	sl, r6
 8006ab0:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8006ab4:	4646      	mov	r6, r8
 8006ab6:	f04f 0920 	mov.w	r9, #32
 8006aba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006abc:	80ca      	strh	r2, [r1, #6]
 8006abe:	4635      	mov	r5, r6
 8006ac0:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	781a      	ldrb	r2, [r3, #0]
 8006ac8:	f818 2002 	ldrb.w	r2, [r8, r2]
 8006acc:	b362      	cbz	r2, 8006b28 <__ssvfscanf_r+0x94c>
 8006ace:	6862      	ldr	r2, [r4, #4]
 8006ad0:	3a01      	subs	r2, #1
 8006ad2:	6062      	str	r2, [r4, #4]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	6022      	str	r2, [r4, #0]
 8006ad8:	781b      	ldrb	r3, [r3, #0]
 8006ada:	f806 3b01 	strb.w	r3, [r6], #1
 8006ade:	f1ba 0f00 	cmp.w	sl, #0
 8006ae2:	d011      	beq.n	8006b08 <__ssvfscanf_r+0x92c>
 8006ae4:	1b73      	subs	r3, r6, r5
 8006ae6:	454b      	cmp	r3, r9
 8006ae8:	d30e      	bcc.n	8006b08 <__ssvfscanf_r+0x92c>
 8006aea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8006aee:	4628      	mov	r0, r5
 8006af0:	4649      	mov	r1, r9
 8006af2:	627b      	str	r3, [r7, #36]	; 0x24
 8006af4:	f002 fbb8 	bl	8009268 <realloc>
 8006af8:	4605      	mov	r5, r0
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f43f ac36 	beq.w	800636c <__ssvfscanf_r+0x190>
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	f8ca 0000 	str.w	r0, [sl]
 8006b06:	18c6      	adds	r6, r0, r3
 8006b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	633b      	str	r3, [r7, #48]	; 0x30
 8006b0e:	d00b      	beq.n	8006b28 <__ssvfscanf_r+0x94c>
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	dcd6      	bgt.n	8006ac4 <__ssvfscanf_r+0x8e8>
 8006b16:	4621      	mov	r1, r4
 8006b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b1a:	f003 fef9 	bl	800a910 <__ssrefill_r>
 8006b1e:	2800      	cmp	r0, #0
 8006b20:	d0d0      	beq.n	8006ac4 <__ssvfscanf_r+0x8e8>
 8006b22:	42ae      	cmp	r6, r5
 8006b24:	f43f ac1d 	beq.w	8006362 <__ssvfscanf_r+0x186>
 8006b28:	1b75      	subs	r5, r6, r5
 8006b2a:	f43f ac4e 	beq.w	80063ca <__ssvfscanf_r+0x1ee>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	7033      	strb	r3, [r6, #0]
 8006b32:	f1ba 0f00 	cmp.w	sl, #0
 8006b36:	d009      	beq.n	8006b4c <__ssvfscanf_r+0x970>
 8006b38:	1c69      	adds	r1, r5, #1
 8006b3a:	4589      	cmp	r9, r1
 8006b3c:	d906      	bls.n	8006b4c <__ssvfscanf_r+0x970>
 8006b3e:	f8da 0000 	ldr.w	r0, [sl]
 8006b42:	f002 fb91 	bl	8009268 <realloc>
 8006b46:	b108      	cbz	r0, 8006b4c <__ssvfscanf_r+0x970>
 8006b48:	f8ca 0000 	str.w	r0, [sl]
 8006b4c:	6a3b      	ldr	r3, [r7, #32]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	623b      	str	r3, [r7, #32]
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	442b      	add	r3, r5
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b58:	465e      	mov	r6, fp
 8006b5a:	f7ff bb5a 	b.w	8006212 <__ssvfscanf_r+0x36>
 8006b5e:	46ca      	mov	sl, r9
 8006b60:	e7ad      	b.n	8006abe <__ssvfscanf_r+0x8e2>
 8006b62:	bf00      	nop
 8006b64:	2000049c 	.word	0x2000049c
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	f009 0810 	and.w	r8, r9, #16
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bf08      	it	eq
 8006b72:	f04f 33ff 	moveq.w	r3, #4294967295
 8006b76:	f019 0501 	ands.w	r5, r9, #1
 8006b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b7c:	f000 80f8 	beq.w	8006d70 <__ssvfscanf_r+0xb94>
 8006b80:	f1b8 0f00 	cmp.w	r8, #0
 8006b84:	f040 809f 	bne.w	8006cc6 <__ssvfscanf_r+0xaea>
 8006b88:	4633      	mov	r3, r6
 8006b8a:	f853 6b04 	ldr.w	r6, [r3], #4
 8006b8e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8006b92:	627b      	str	r3, [r7, #36]	; 0x24
 8006b94:	f000 809f 	beq.w	8006cd6 <__ssvfscanf_r+0xafa>
 8006b98:	2e00      	cmp	r6, #0
 8006b9a:	f43f acdf 	beq.w	800655c <__ssvfscanf_r+0x380>
 8006b9e:	2080      	movs	r0, #128	; 0x80
 8006ba0:	f001 fc4e 	bl	8008440 <malloc>
 8006ba4:	4605      	mov	r5, r0
 8006ba6:	2800      	cmp	r0, #0
 8006ba8:	f43f acd5 	beq.w	8006556 <__ssvfscanf_r+0x37a>
 8006bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bae:	6030      	str	r0, [r6, #0]
 8006bb0:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8006bb4:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8006bb8:	45ca      	cmp	sl, r9
 8006bba:	d313      	bcc.n	8006be4 <__ssvfscanf_r+0xa08>
 8006bbc:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8006bc0:	4599      	cmp	r9, r3
 8006bc2:	f63f acc8 	bhi.w	8006556 <__ssvfscanf_r+0x37a>
 8006bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc8:	f109 0908 	add.w	r9, r9, #8
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8006bd2:	f002 fb49 	bl	8009268 <realloc>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	f43f acbd 	beq.w	8006556 <__ssvfscanf_r+0x37a>
 8006bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bde:	6018      	str	r0, [r3, #0]
 8006be0:	f8a3 9004 	strh.w	r9, [r3, #4]
 8006be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006be6:	f10a 0201 	add.w	r2, sl, #1
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f04f 0920 	mov.w	r9, #32
 8006bf0:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8006bf4:	46b2      	mov	sl, r6
 8006bf6:	462e      	mov	r6, r5
 8006bf8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006bfa:	80ca      	strh	r2, [r1, #6]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	49a7      	ldr	r1, [pc, #668]	; (8006ea4 <__ssvfscanf_r+0xcc8>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	5c5b      	ldrb	r3, [r3, r1]
 8006c0a:	0718      	lsls	r0, r3, #28
 8006c0c:	d440      	bmi.n	8006c90 <__ssvfscanf_r+0xab4>
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d03d      	beq.n	8006c90 <__ssvfscanf_r+0xab4>
 8006c14:	60fa      	str	r2, [r7, #12]
 8006c16:	f001 fbf3 	bl	8008400 <__locale_mb_cur_max>
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	4290      	cmp	r0, r2
 8006c1e:	f43f aba0 	beq.w	8006362 <__ssvfscanf_r+0x186>
 8006c22:	6821      	ldr	r1, [r4, #0]
 8006c24:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 8006c28:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006c2c:	1c53      	adds	r3, r2, #1
 8006c2e:	f80c 0002 	strb.w	r0, [ip, r2]
 8006c32:	6862      	ldr	r2, [r4, #4]
 8006c34:	3a01      	subs	r2, #1
 8006c36:	e9c4 1200 	strd	r1, r2, [r4]
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	2a03      	cmp	r2, #3
 8006c3e:	d103      	bne.n	8006c48 <__ssvfscanf_r+0xa6c>
 8006c40:	f8db 2000 	ldr.w	r2, [fp]
 8006c44:	2a04      	cmp	r2, #4
 8006c46:	d006      	beq.n	8006c56 <__ssvfscanf_r+0xa7a>
 8006c48:	2208      	movs	r2, #8
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	4658      	mov	r0, fp
 8006c4e:	61fb      	str	r3, [r7, #28]
 8006c50:	f7fe f856 	bl	8004d00 <memset>
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c5e:	f8cd b000 	str.w	fp, [sp]
 8006c62:	60fb      	str	r3, [r7, #12]
 8006c64:	f001 fe3e 	bl	80088e4 <_mbrtowc_r>
 8006c68:	1c42      	adds	r2, r0, #1
 8006c6a:	61f8      	str	r0, [r7, #28]
 8006c6c:	f43f ab79 	beq.w	8006362 <__ssvfscanf_r+0x186>
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d133      	bne.n	8006cde <__ssvfscanf_r+0xb02>
 8006c76:	6030      	str	r0, [r6, #0]
 8006c78:	6830      	ldr	r0, [r6, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	f001 fbb2 	bl	80083e4 <iswspace>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4602      	mov	r2, r0
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d047      	beq.n	8006d18 <__ssvfscanf_r+0xb3c>
 8006c88:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d139      	bne.n	8006d04 <__ssvfscanf_r+0xb28>
 8006c90:	f1b8 0f00 	cmp.w	r8, #0
 8006c94:	d114      	bne.n	8006cc0 <__ssvfscanf_r+0xae4>
 8006c96:	f8c6 8000 	str.w	r8, [r6]
 8006c9a:	f1ba 0f00 	cmp.w	sl, #0
 8006c9e:	d00c      	beq.n	8006cba <__ssvfscanf_r+0xade>
 8006ca0:	1b71      	subs	r1, r6, r5
 8006ca2:	108b      	asrs	r3, r1, #2
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	4599      	cmp	r9, r3
 8006ca8:	d907      	bls.n	8006cba <__ssvfscanf_r+0xade>
 8006caa:	f8da 0000 	ldr.w	r0, [sl]
 8006cae:	3104      	adds	r1, #4
 8006cb0:	f002 fada 	bl	8009268 <realloc>
 8006cb4:	b108      	cbz	r0, 8006cba <__ssvfscanf_r+0xade>
 8006cb6:	f8ca 0000 	str.w	r0, [sl]
 8006cba:	6a3b      	ldr	r3, [r7, #32]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	623b      	str	r3, [r7, #32]
 8006cc0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8006cc2:	f7ff baa6 	b.w	8006212 <__ssvfscanf_r+0x36>
 8006cc6:	f04f 0900 	mov.w	r9, #0
 8006cca:	627e      	str	r6, [r7, #36]	; 0x24
 8006ccc:	464d      	mov	r5, r9
 8006cce:	46ca      	mov	sl, r9
 8006cd0:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 8006cd4:	e792      	b.n	8006bfc <__ssvfscanf_r+0xa20>
 8006cd6:	46c1      	mov	r9, r8
 8006cd8:	4645      	mov	r5, r8
 8006cda:	46c2      	mov	sl, r8
 8006cdc:	e78e      	b.n	8006bfc <__ssvfscanf_r+0xa20>
 8006cde:	69fa      	ldr	r2, [r7, #28]
 8006ce0:	3202      	adds	r2, #2
 8006ce2:	d1c9      	bne.n	8006c78 <__ssvfscanf_r+0xa9c>
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	6863      	ldr	r3, [r4, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	dc8a      	bgt.n	8006c02 <__ssvfscanf_r+0xa26>
 8006cec:	4621      	mov	r1, r4
 8006cee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cf0:	60fa      	str	r2, [r7, #12]
 8006cf2:	f003 fe0d 	bl	800a910 <__ssrefill_r>
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	d082      	beq.n	8006c02 <__ssvfscanf_r+0xa26>
 8006cfc:	2a00      	cmp	r2, #0
 8006cfe:	f47f ab30 	bne.w	8006362 <__ssvfscanf_r+0x186>
 8006d02:	e7c5      	b.n	8006c90 <__ssvfscanf_r+0xab4>
 8006d04:	3b01      	subs	r3, #1
 8006d06:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8006d0a:	4622      	mov	r2, r4
 8006d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d10:	f003 fdc1 	bl	800a896 <_sungetc_r>
 8006d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d16:	e7b9      	b.n	8006c8c <__ssvfscanf_r+0xab0>
 8006d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d1a:	4419      	add	r1, r3
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006d20:	2b03      	cmp	r3, #3
 8006d22:	d103      	bne.n	8006d2c <__ssvfscanf_r+0xb50>
 8006d24:	f8db 3000 	ldr.w	r3, [fp]
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d002      	beq.n	8006d32 <__ssvfscanf_r+0xb56>
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	633b      	str	r3, [r7, #48]	; 0x30
 8006d32:	f1b8 0f00 	cmp.w	r8, #0
 8006d36:	d1d6      	bne.n	8006ce6 <__ssvfscanf_r+0xb0a>
 8006d38:	3604      	adds	r6, #4
 8006d3a:	f1ba 0f00 	cmp.w	sl, #0
 8006d3e:	d015      	beq.n	8006d6c <__ssvfscanf_r+0xb90>
 8006d40:	1b73      	subs	r3, r6, r5
 8006d42:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8006d46:	d80f      	bhi.n	8006d68 <__ssvfscanf_r+0xb8c>
 8006d48:	4628      	mov	r0, r5
 8006d4a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	f002 fa8a 	bl	8009268 <realloc>
 8006d54:	4605      	mov	r5, r0
 8006d56:	2800      	cmp	r0, #0
 8006d58:	f43f abfd 	beq.w	8006556 <__ssvfscanf_r+0x37a>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f8ca 0000 	str.w	r0, [sl]
 8006d62:	18c6      	adds	r6, r0, r3
 8006d64:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8006d68:	4642      	mov	r2, r8
 8006d6a:	e7bc      	b.n	8006ce6 <__ssvfscanf_r+0xb0a>
 8006d6c:	4652      	mov	r2, sl
 8006d6e:	e7ba      	b.n	8006ce6 <__ssvfscanf_r+0xb0a>
 8006d70:	f1b8 0f00 	cmp.w	r8, #0
 8006d74:	d019      	beq.n	8006daa <__ssvfscanf_r+0xbce>
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	494a      	ldr	r1, [pc, #296]	; (8006ea4 <__ssvfscanf_r+0xcc8>)
 8006d7a:	781a      	ldrb	r2, [r3, #0]
 8006d7c:	5c52      	ldrb	r2, [r2, r1]
 8006d7e:	0711      	lsls	r1, r2, #28
 8006d80:	f53f ae66 	bmi.w	8006a50 <__ssvfscanf_r+0x874>
 8006d84:	3301      	adds	r3, #1
 8006d86:	6862      	ldr	r2, [r4, #4]
 8006d88:	6023      	str	r3, [r4, #0]
 8006d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d8c:	3501      	adds	r5, #1
 8006d8e:	3a01      	subs	r2, #1
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	6062      	str	r2, [r4, #4]
 8006d94:	f43f ae5c 	beq.w	8006a50 <__ssvfscanf_r+0x874>
 8006d98:	2a00      	cmp	r2, #0
 8006d9a:	dcec      	bgt.n	8006d76 <__ssvfscanf_r+0xb9a>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006da0:	f003 fdb6 	bl	800a910 <__ssrefill_r>
 8006da4:	2800      	cmp	r0, #0
 8006da6:	d0e6      	beq.n	8006d76 <__ssvfscanf_r+0xb9a>
 8006da8:	e652      	b.n	8006a50 <__ssvfscanf_r+0x874>
 8006daa:	46b3      	mov	fp, r6
 8006dac:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 8006db0:	f85b 6b04 	ldr.w	r6, [fp], #4
 8006db4:	d074      	beq.n	8006ea0 <__ssvfscanf_r+0xcc4>
 8006db6:	2e00      	cmp	r6, #0
 8006db8:	f43f ab07 	beq.w	80063ca <__ssvfscanf_r+0x1ee>
 8006dbc:	2020      	movs	r0, #32
 8006dbe:	f001 fb3f 	bl	8008440 <malloc>
 8006dc2:	4680      	mov	r8, r0
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	f43f aad1 	beq.w	800636c <__ssvfscanf_r+0x190>
 8006dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dcc:	6030      	str	r0, [r6, #0]
 8006dce:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8006dd2:	889d      	ldrh	r5, [r3, #4]
 8006dd4:	45a9      	cmp	r9, r5
 8006dd6:	d310      	bcc.n	8006dfa <__ssvfscanf_r+0xc1e>
 8006dd8:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8006ddc:	429d      	cmp	r5, r3
 8006dde:	f63f abc2 	bhi.w	8006566 <__ssvfscanf_r+0x38a>
 8006de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006de4:	3508      	adds	r5, #8
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	00a9      	lsls	r1, r5, #2
 8006dea:	f002 fa3d 	bl	8009268 <realloc>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f43f abb9 	beq.w	8006566 <__ssvfscanf_r+0x38a>
 8006df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df6:	6018      	str	r0, [r3, #0]
 8006df8:	809d      	strh	r5, [r3, #4]
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfc:	f109 0201 	add.w	r2, r9, #1
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	2520      	movs	r5, #32
 8006e04:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8006e08:	46b1      	mov	r9, r6
 8006e0a:	4646      	mov	r6, r8
 8006e0c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e0e:	80ca      	strh	r2, [r1, #6]
 8006e10:	46b0      	mov	r8, r6
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	4923      	ldr	r1, [pc, #140]	; (8006ea4 <__ssvfscanf_r+0xcc8>)
 8006e16:	781a      	ldrb	r2, [r3, #0]
 8006e18:	5c52      	ldrb	r2, [r2, r1]
 8006e1a:	0712      	lsls	r2, r2, #28
 8006e1c:	d428      	bmi.n	8006e70 <__ssvfscanf_r+0xc94>
 8006e1e:	6862      	ldr	r2, [r4, #4]
 8006e20:	3a01      	subs	r2, #1
 8006e22:	6062      	str	r2, [r4, #4]
 8006e24:	1c5a      	adds	r2, r3, #1
 8006e26:	6022      	str	r2, [r4, #0]
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f806 3b01 	strb.w	r3, [r6], #1
 8006e2e:	f1b9 0f00 	cmp.w	r9, #0
 8006e32:	d010      	beq.n	8006e56 <__ssvfscanf_r+0xc7a>
 8006e34:	eba6 0a08 	sub.w	sl, r6, r8
 8006e38:	45aa      	cmp	sl, r5
 8006e3a:	d30c      	bcc.n	8006e56 <__ssvfscanf_r+0xc7a>
 8006e3c:	006d      	lsls	r5, r5, #1
 8006e3e:	4640      	mov	r0, r8
 8006e40:	4629      	mov	r1, r5
 8006e42:	f002 fa11 	bl	8009268 <realloc>
 8006e46:	4680      	mov	r8, r0
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	f43f aa8f 	beq.w	800636c <__ssvfscanf_r+0x190>
 8006e4e:	eb00 060a 	add.w	r6, r0, sl
 8006e52:	f8c9 0000 	str.w	r0, [r9]
 8006e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e58:	3b01      	subs	r3, #1
 8006e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8006e5c:	d008      	beq.n	8006e70 <__ssvfscanf_r+0xc94>
 8006e5e:	6863      	ldr	r3, [r4, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	dcd6      	bgt.n	8006e12 <__ssvfscanf_r+0xc36>
 8006e64:	4621      	mov	r1, r4
 8006e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e68:	f003 fd52 	bl	800a910 <__ssrefill_r>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d0d0      	beq.n	8006e12 <__ssvfscanf_r+0xc36>
 8006e70:	2300      	movs	r3, #0
 8006e72:	7033      	strb	r3, [r6, #0]
 8006e74:	eba6 0608 	sub.w	r6, r6, r8
 8006e78:	f1b9 0f00 	cmp.w	r9, #0
 8006e7c:	d009      	beq.n	8006e92 <__ssvfscanf_r+0xcb6>
 8006e7e:	1c71      	adds	r1, r6, #1
 8006e80:	428d      	cmp	r5, r1
 8006e82:	d906      	bls.n	8006e92 <__ssvfscanf_r+0xcb6>
 8006e84:	f8d9 0000 	ldr.w	r0, [r9]
 8006e88:	f002 f9ee 	bl	8009268 <realloc>
 8006e8c:	b108      	cbz	r0, 8006e92 <__ssvfscanf_r+0xcb6>
 8006e8e:	f8c9 0000 	str.w	r0, [r9]
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	4433      	add	r3, r6
 8006e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	623b      	str	r3, [r7, #32]
 8006e9e:	e65b      	b.n	8006b58 <__ssvfscanf_r+0x97c>
 8006ea0:	46a9      	mov	r9, r5
 8006ea2:	e7b5      	b.n	8006e10 <__ssvfscanf_r+0xc34>
 8006ea4:	0800c849 	.word	0x0800c849
 8006ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eaa:	f04f 0a00 	mov.w	sl, #0
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8006eb4:	bf85      	ittet	hi
 8006eb6:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8006eba:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8006ebc:	f04f 0b00 	movls.w	fp, #0
 8006ec0:	eb03 0b00 	addhi.w	fp, r3, r0
 8006ec4:	bf84      	itt	hi
 8006ec6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006eca:	633b      	strhi	r3, [r7, #48]	; 0x30
 8006ecc:	f449 6358 	orr.w	r3, r9, #3456	; 0xd80
 8006ed0:	f8df 946c 	ldr.w	r9, [pc, #1132]	; 8007340 <__ssvfscanf_r+0x1164>
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed6:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 8006eda:	6822      	ldr	r2, [r4, #0]
 8006edc:	7813      	ldrb	r3, [r2, #0]
 8006ede:	2b39      	cmp	r3, #57	; 0x39
 8006ee0:	d80f      	bhi.n	8006f02 <__ssvfscanf_r+0xd26>
 8006ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee4:	d91a      	bls.n	8006f1c <__ssvfscanf_r+0xd40>
 8006ee6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006eea:	290e      	cmp	r1, #14
 8006eec:	d816      	bhi.n	8006f1c <__ssvfscanf_r+0xd40>
 8006eee:	e8df f001 	tbb	[pc, r1]
 8006ef2:	157d      	.short	0x157d
 8006ef4:	4015157d 	.word	0x4015157d
 8006ef8:	6e6e6e6e 	.word	0x6e6e6e6e
 8006efc:	766e6e6e 	.word	0x766e6e6e
 8006f00:	76          	.byte	0x76
 8006f01:	00          	.byte	0x00
 8006f02:	2b66      	cmp	r3, #102	; 0x66
 8006f04:	d833      	bhi.n	8006f6e <__ssvfscanf_r+0xd92>
 8006f06:	2b60      	cmp	r3, #96	; 0x60
 8006f08:	d803      	bhi.n	8006f12 <__ssvfscanf_r+0xd36>
 8006f0a:	2b46      	cmp	r3, #70	; 0x46
 8006f0c:	d804      	bhi.n	8006f18 <__ssvfscanf_r+0xd3c>
 8006f0e:	2b40      	cmp	r3, #64	; 0x40
 8006f10:	d904      	bls.n	8006f1c <__ssvfscanf_r+0xd40>
 8006f12:	69b9      	ldr	r1, [r7, #24]
 8006f14:	290a      	cmp	r1, #10
 8006f16:	e067      	b.n	8006fe8 <__ssvfscanf_r+0xe0c>
 8006f18:	2b58      	cmp	r3, #88	; 0x58
 8006f1a:	d06d      	beq.n	8006ff8 <__ssvfscanf_r+0xe1c>
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1e:	05db      	lsls	r3, r3, #23
 8006f20:	d511      	bpl.n	8006f46 <__ssvfscanf_r+0xd6a>
 8006f22:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006f26:	4598      	cmp	r8, r3
 8006f28:	d908      	bls.n	8006f3c <__ssvfscanf_r+0xd60>
 8006f2a:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8006f2e:	4622      	mov	r2, r4
 8006f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f32:	f108 39ff 	add.w	r9, r8, #4294967295
 8006f36:	f003 fcae 	bl	800a896 <_sungetc_r>
 8006f3a:	46c8      	mov	r8, r9
 8006f3c:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006f40:	4598      	cmp	r8, r3
 8006f42:	f43f aa42 	beq.w	80063ca <__ssvfscanf_r+0x1ee>
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	f013 0210 	ands.w	r2, r3, #16
 8006f4c:	d173      	bne.n	8007036 <__ssvfscanf_r+0xe5a>
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	697d      	ldr	r5, [r7, #20]
 8006f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f54:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8006f58:	f888 2000 	strb.w	r2, [r8]
 8006f5c:	47a8      	blx	r5
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	f106 0904 	add.w	r9, r6, #4
 8006f64:	069d      	lsls	r5, r3, #26
 8006f66:	d55d      	bpl.n	8007024 <__ssvfscanf_r+0xe48>
 8006f68:	6833      	ldr	r3, [r6, #0]
 8006f6a:	6018      	str	r0, [r3, #0]
 8006f6c:	e05f      	b.n	800702e <__ssvfscanf_r+0xe52>
 8006f6e:	2b78      	cmp	r3, #120	; 0x78
 8006f70:	e7d3      	b.n	8006f1a <__ssvfscanf_r+0xd3e>
 8006f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f74:	0509      	lsls	r1, r1, #20
 8006f76:	d50d      	bpl.n	8006f94 <__ssvfscanf_r+0xdb8>
 8006f78:	69b9      	ldr	r1, [r7, #24]
 8006f7a:	b929      	cbnz	r1, 8006f88 <__ssvfscanf_r+0xdac>
 8006f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f7e:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006f82:	6279      	str	r1, [r7, #36]	; 0x24
 8006f84:	2108      	movs	r1, #8
 8006f86:	61b9      	str	r1, [r7, #24]
 8006f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f8a:	054d      	lsls	r5, r1, #21
 8006f8c:	d505      	bpl.n	8006f9a <__ssvfscanf_r+0xdbe>
 8006f8e:	f421 61b0 	bic.w	r1, r1, #1408	; 0x580
 8006f92:	6279      	str	r1, [r7, #36]	; 0x24
 8006f94:	f808 3b01 	strb.w	r3, [r8], #1
 8006f98:	e00d      	b.n	8006fb6 <__ssvfscanf_r+0xdda>
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8006fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa2:	f1bb 0f00 	cmp.w	fp, #0
 8006fa6:	d004      	beq.n	8006fb2 <__ssvfscanf_r+0xdd6>
 8006fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006faa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006fae:	3301      	adds	r3, #1
 8006fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8006fb2:	f10a 0a01 	add.w	sl, sl, #1
 8006fb6:	6863      	ldr	r3, [r4, #4]
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	6063      	str	r3, [r4, #4]
 8006fbe:	dd2a      	ble.n	8007016 <__ssvfscanf_r+0xe3a>
 8006fc0:	3201      	adds	r2, #1
 8006fc2:	6022      	str	r2, [r4, #0]
 8006fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8006fca:	d186      	bne.n	8006eda <__ssvfscanf_r+0xcfe>
 8006fcc:	e7a6      	b.n	8006f1c <__ssvfscanf_r+0xd40>
 8006fce:	69b9      	ldr	r1, [r7, #24]
 8006fd0:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8006fd4:	61b9      	str	r1, [r7, #24]
 8006fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fd8:	f421 6138 	bic.w	r1, r1, #2944	; 0xb80
 8006fdc:	e7d9      	b.n	8006f92 <__ssvfscanf_r+0xdb6>
 8006fde:	69b9      	ldr	r1, [r7, #24]
 8006fe0:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 8006fe4:	61b9      	str	r1, [r7, #24]
 8006fe6:	2908      	cmp	r1, #8
 8006fe8:	dcf5      	bgt.n	8006fd6 <__ssvfscanf_r+0xdfa>
 8006fea:	e797      	b.n	8006f1c <__ssvfscanf_r+0xd40>
 8006fec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fee:	0608      	lsls	r0, r1, #24
 8006ff0:	d594      	bpl.n	8006f1c <__ssvfscanf_r+0xd40>
 8006ff2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006ff6:	e7cc      	b.n	8006f92 <__ssvfscanf_r+0xdb6>
 8006ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ffa:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 8006ffe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007002:	d18b      	bne.n	8006f1c <__ssvfscanf_r+0xd40>
 8007004:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007006:	f421 7500 	bic.w	r5, r1, #512	; 0x200
 800700a:	f445 61a0 	orr.w	r1, r5, #1280	; 0x500
 800700e:	6279      	str	r1, [r7, #36]	; 0x24
 8007010:	2110      	movs	r1, #16
 8007012:	61b9      	str	r1, [r7, #24]
 8007014:	e7be      	b.n	8006f94 <__ssvfscanf_r+0xdb8>
 8007016:	4621      	mov	r1, r4
 8007018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800701a:	f003 fc79 	bl	800a910 <__ssrefill_r>
 800701e:	2800      	cmp	r0, #0
 8007020:	d0d0      	beq.n	8006fc4 <__ssvfscanf_r+0xde8>
 8007022:	e77b      	b.n	8006f1c <__ssvfscanf_r+0xd40>
 8007024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007026:	0719      	lsls	r1, r3, #28
 8007028:	d50e      	bpl.n	8007048 <__ssvfscanf_r+0xe6c>
 800702a:	6833      	ldr	r3, [r6, #0]
 800702c:	7018      	strb	r0, [r3, #0]
 800702e:	464e      	mov	r6, r9
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	3301      	adds	r3, #1
 8007034:	623b      	str	r3, [r7, #32]
 8007036:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800703a:	eba8 0803 	sub.w	r8, r8, r3
 800703e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007040:	44c2      	add	sl, r8
 8007042:	4453      	add	r3, sl
 8007044:	f7ff b985 	b.w	8006352 <__ssvfscanf_r+0x176>
 8007048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800704a:	075a      	lsls	r2, r3, #29
 800704c:	d502      	bpl.n	8007054 <__ssvfscanf_r+0xe78>
 800704e:	6833      	ldr	r3, [r6, #0]
 8007050:	8018      	strh	r0, [r3, #0]
 8007052:	e7ec      	b.n	800702e <__ssvfscanf_r+0xe52>
 8007054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007056:	f013 0201 	ands.w	r2, r3, #1
 800705a:	d185      	bne.n	8006f68 <__ssvfscanf_r+0xd8c>
 800705c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800705e:	079b      	lsls	r3, r3, #30
 8007060:	d582      	bpl.n	8006f68 <__ssvfscanf_r+0xd8c>
 8007062:	4bb6      	ldr	r3, [pc, #728]	; (800733c <__ssvfscanf_r+0x1160>)
 8007064:	6979      	ldr	r1, [r7, #20]
 8007066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007068:	4299      	cmp	r1, r3
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8007070:	d105      	bne.n	800707e <__ssvfscanf_r+0xea2>
 8007072:	f003 fb93 	bl	800a79c <_strtoull_r>
 8007076:	6833      	ldr	r3, [r6, #0]
 8007078:	e9c3 0100 	strd	r0, r1, [r3]
 800707c:	e7d7      	b.n	800702e <__ssvfscanf_r+0xe52>
 800707e:	f003 fa73 	bl	800a568 <_strtoll_r>
 8007082:	e7f8      	b.n	8007076 <__ssvfscanf_r+0xe9a>
 8007084:	f04f 0b00 	mov.w	fp, #0
 8007088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800708a:	f001 f9bf 	bl	800840c <_localeconv_r>
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	46da      	mov	sl, fp
 8007092:	3b01      	subs	r3, #1
 8007094:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8007098:	bf85      	ittet	hi
 800709a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800709e:	f240 115d 	movwhi	r1, #349	; 0x15d
 80070a2:	2300      	movls	r3, #0
 80070a4:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 80070a6:	e9c7 bb02 	strd	fp, fp, [r7, #8]
 80070aa:	6802      	ldr	r2, [r0, #0]
 80070ac:	bf84      	itt	hi
 80070ae:	195b      	addhi	r3, r3, r5
 80070b0:	6339      	strhi	r1, [r7, #48]	; 0x30
 80070b2:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 80070b6:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
 80070ba:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 80070be:	6821      	ldr	r1, [r4, #0]
 80070c0:	6079      	str	r1, [r7, #4]
 80070c2:	7809      	ldrb	r1, [r1, #0]
 80070c4:	294e      	cmp	r1, #78	; 0x4e
 80070c6:	d861      	bhi.n	800718c <__ssvfscanf_r+0xfb0>
 80070c8:	2940      	cmp	r1, #64	; 0x40
 80070ca:	d837      	bhi.n	800713c <__ssvfscanf_r+0xf60>
 80070cc:	f1a1 0c2b 	sub.w	ip, r1, #43	; 0x2b
 80070d0:	fa5f fe8c 	uxtb.w	lr, ip
 80070d4:	f1be 0f0e 	cmp.w	lr, #14
 80070d8:	d933      	bls.n	8007142 <__ssvfscanf_r+0xf66>
 80070da:	f892 c000 	ldrb.w	ip, [r2]
 80070de:	458c      	cmp	ip, r1
 80070e0:	f040 80b5 	bne.w	800724e <__ssvfscanf_r+0x1072>
 80070e4:	05a8      	lsls	r0, r5, #22
 80070e6:	f140 80b2 	bpl.w	800724e <__ssvfscanf_r+0x1072>
 80070ea:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 80070ee:	f8c7 a024 	str.w	sl, [r7, #36]	; 0x24
 80070f2:	e083      	b.n	80071fc <__ssvfscanf_r+0x1020>
 80070f4:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
 80070f8:	f1bc 0f0d 	cmp.w	ip, #13
 80070fc:	d8ed      	bhi.n	80070da <__ssvfscanf_r+0xefe>
 80070fe:	a001      	add	r0, pc, #4	; (adr r0, 8007104 <__ssvfscanf_r+0xf28>)
 8007100:	f850 f02c 	ldr.w	pc, [r0, ip, lsl #2]
 8007104:	08007249 	.word	0x08007249
 8007108:	080070db 	.word	0x080070db
 800710c:	080070db 	.word	0x080070db
 8007110:	080070db 	.word	0x080070db
 8007114:	080072bf 	.word	0x080072bf
 8007118:	080072a7 	.word	0x080072a7
 800711c:	080070db 	.word	0x080070db
 8007120:	080070db 	.word	0x080070db
 8007124:	0800727b 	.word	0x0800727b
 8007128:	080070db 	.word	0x080070db
 800712c:	080070db 	.word	0x080070db
 8007130:	080070db 	.word	0x080070db
 8007134:	080070db 	.word	0x080070db
 8007138:	0800720d 	.word	0x0800720d
 800713c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8007140:	e7da      	b.n	80070f8 <__ssvfscanf_r+0xf1c>
 8007142:	f1bc 0f0e 	cmp.w	ip, #14
 8007146:	d8c8      	bhi.n	80070da <__ssvfscanf_r+0xefe>
 8007148:	a001      	add	r0, pc, #4	; (adr r0, 8007150 <__ssvfscanf_r+0xf74>)
 800714a:	f850 f02c 	ldr.w	pc, [r0, ip, lsl #2]
 800714e:	bf00      	nop
 8007150:	08007203 	.word	0x08007203
 8007154:	080070db 	.word	0x080070db
 8007158:	08007203 	.word	0x08007203
 800715c:	080070db 	.word	0x080070db
 8007160:	080070db 	.word	0x080070db
 8007164:	080071b5 	.word	0x080071b5
 8007168:	080071f3 	.word	0x080071f3
 800716c:	080071f3 	.word	0x080071f3
 8007170:	080071f3 	.word	0x080071f3
 8007174:	080071f3 	.word	0x080071f3
 8007178:	080071f3 	.word	0x080071f3
 800717c:	080071f3 	.word	0x080071f3
 8007180:	080071f3 	.word	0x080071f3
 8007184:	080071f3 	.word	0x080071f3
 8007188:	080071f3 	.word	0x080071f3
 800718c:	296e      	cmp	r1, #110	; 0x6e
 800718e:	d80c      	bhi.n	80071aa <__ssvfscanf_r+0xfce>
 8007190:	2960      	cmp	r1, #96	; 0x60
 8007192:	d8af      	bhi.n	80070f4 <__ssvfscanf_r+0xf18>
 8007194:	2954      	cmp	r1, #84	; 0x54
 8007196:	f000 808c 	beq.w	80072b2 <__ssvfscanf_r+0x10d6>
 800719a:	2959      	cmp	r1, #89	; 0x59
 800719c:	d19d      	bne.n	80070da <__ssvfscanf_r+0xefe>
 800719e:	f1b8 0f07 	cmp.w	r8, #7
 80071a2:	d154      	bne.n	800724e <__ssvfscanf_r+0x1072>
 80071a4:	f04f 0808 	mov.w	r8, #8
 80071a8:	e028      	b.n	80071fc <__ssvfscanf_r+0x1020>
 80071aa:	2974      	cmp	r1, #116	; 0x74
 80071ac:	f000 8081 	beq.w	80072b2 <__ssvfscanf_r+0x10d6>
 80071b0:	2979      	cmp	r1, #121	; 0x79
 80071b2:	e7f3      	b.n	800719c <__ssvfscanf_r+0xfc0>
 80071b4:	05e8      	lsls	r0, r5, #23
 80071b6:	d51c      	bpl.n	80071f2 <__ssvfscanf_r+0x1016>
 80071b8:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80071bc:	f10a 0a01 	add.w	sl, sl, #1
 80071c0:	b11b      	cbz	r3, 80071ca <__ssvfscanf_r+0xfee>
 80071c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071c4:	3b01      	subs	r3, #1
 80071c6:	3101      	adds	r1, #1
 80071c8:	6339      	str	r1, [r7, #48]	; 0x30
 80071ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071cc:	3901      	subs	r1, #1
 80071ce:	6339      	str	r1, [r7, #48]	; 0x30
 80071d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80071d2:	3101      	adds	r1, #1
 80071d4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80071d6:	6861      	ldr	r1, [r4, #4]
 80071d8:	3901      	subs	r1, #1
 80071da:	2900      	cmp	r1, #0
 80071dc:	6061      	str	r1, [r4, #4]
 80071de:	f340 808d 	ble.w	80072fc <__ssvfscanf_r+0x1120>
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	3001      	adds	r0, #1
 80071e6:	6020      	str	r0, [r4, #0]
 80071e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ea:	2900      	cmp	r1, #0
 80071ec:	f47f af67 	bne.w	80070be <__ssvfscanf_r+0xee2>
 80071f0:	e02d      	b.n	800724e <__ssvfscanf_r+0x1072>
 80071f2:	eb1b 0f08 	cmn.w	fp, r8
 80071f6:	d12a      	bne.n	800724e <__ssvfscanf_r+0x1072>
 80071f8:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 80071fc:	f809 1b01 	strb.w	r1, [r9], #1
 8007200:	e7e3      	b.n	80071ca <__ssvfscanf_r+0xfee>
 8007202:	0628      	lsls	r0, r5, #24
 8007204:	d523      	bpl.n	800724e <__ssvfscanf_r+0x1072>
 8007206:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800720a:	e7f7      	b.n	80071fc <__ssvfscanf_r+0x1020>
 800720c:	f1bb 0f00 	cmp.w	fp, #0
 8007210:	d10c      	bne.n	800722c <__ssvfscanf_r+0x1050>
 8007212:	f1ba 0f00 	cmp.w	sl, #0
 8007216:	d10c      	bne.n	8007232 <__ssvfscanf_r+0x1056>
 8007218:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800721c:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8007220:	d107      	bne.n	8007232 <__ssvfscanf_r+0x1056>
 8007222:	f04f 0b01 	mov.w	fp, #1
 8007226:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 800722a:	e7e7      	b.n	80071fc <__ssvfscanf_r+0x1020>
 800722c:	f1bb 0f02 	cmp.w	fp, #2
 8007230:	d05e      	beq.n	80072f0 <__ssvfscanf_r+0x1114>
 8007232:	f1b8 0f01 	cmp.w	r8, #1
 8007236:	d002      	beq.n	800723e <__ssvfscanf_r+0x1062>
 8007238:	f1b8 0f04 	cmp.w	r8, #4
 800723c:	d107      	bne.n	800724e <__ssvfscanf_r+0x1072>
 800723e:	f108 0801 	add.w	r8, r8, #1
 8007242:	fa5f f888 	uxtb.w	r8, r8
 8007246:	e7d9      	b.n	80071fc <__ssvfscanf_r+0x1020>
 8007248:	f1bb 0f01 	cmp.w	fp, #1
 800724c:	d053      	beq.n	80072f6 <__ssvfscanf_r+0x111a>
 800724e:	f1ba 0f00 	cmp.w	sl, #0
 8007252:	d001      	beq.n	8007258 <__ssvfscanf_r+0x107c>
 8007254:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8007258:	f10b 3bff 	add.w	fp, fp, #4294967295
 800725c:	f1bb 0f01 	cmp.w	fp, #1
 8007260:	d858      	bhi.n	8007314 <__ssvfscanf_r+0x1138>
 8007262:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8007266:	45a9      	cmp	r9, r5
 8007268:	f67f a8af 	bls.w	80063ca <__ssvfscanf_r+0x1ee>
 800726c:	4622      	mov	r2, r4
 800726e:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8007272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007274:	f003 fb0f 	bl	800a896 <_sungetc_r>
 8007278:	e7f5      	b.n	8007266 <__ssvfscanf_r+0x108a>
 800727a:	f1b8 0f00 	cmp.w	r8, #0
 800727e:	d10c      	bne.n	800729a <__ssvfscanf_r+0x10be>
 8007280:	f1ba 0f00 	cmp.w	sl, #0
 8007284:	d1e6      	bne.n	8007254 <__ssvfscanf_r+0x1078>
 8007286:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800728a:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800728e:	d1e3      	bne.n	8007258 <__ssvfscanf_r+0x107c>
 8007290:	f04f 0801 	mov.w	r8, #1
 8007294:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8007298:	e7b0      	b.n	80071fc <__ssvfscanf_r+0x1020>
 800729a:	f1b8 0f03 	cmp.w	r8, #3
 800729e:	d0ce      	beq.n	800723e <__ssvfscanf_r+0x1062>
 80072a0:	f1b8 0f05 	cmp.w	r8, #5
 80072a4:	e7ca      	b.n	800723c <__ssvfscanf_r+0x1060>
 80072a6:	f1b8 0f02 	cmp.w	r8, #2
 80072aa:	d1d0      	bne.n	800724e <__ssvfscanf_r+0x1072>
 80072ac:	f04f 0803 	mov.w	r8, #3
 80072b0:	e7a4      	b.n	80071fc <__ssvfscanf_r+0x1020>
 80072b2:	f1b8 0f06 	cmp.w	r8, #6
 80072b6:	d1ca      	bne.n	800724e <__ssvfscanf_r+0x1072>
 80072b8:	f04f 0807 	mov.w	r8, #7
 80072bc:	e79e      	b.n	80071fc <__ssvfscanf_r+0x1020>
 80072be:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 80072c2:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80072c6:	d004      	beq.n	80072d2 <__ssvfscanf_r+0x10f6>
 80072c8:	0568      	lsls	r0, r5, #21
 80072ca:	d5c0      	bpl.n	800724e <__ssvfscanf_r+0x1072>
 80072cc:	f1ba 0f00 	cmp.w	sl, #0
 80072d0:	d0c2      	beq.n	8007258 <__ssvfscanf_r+0x107c>
 80072d2:	05a8      	lsls	r0, r5, #22
 80072d4:	bf58      	it	pl
 80072d6:	6a78      	ldrpl	r0, [r7, #36]	; 0x24
 80072d8:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 80072dc:	bf5c      	itt	pl
 80072de:	ebaa 0000 	subpl.w	r0, sl, r0
 80072e2:	e9c7 9002 	strdpl	r9, r0, [r7, #8]
 80072e6:	f04f 0a00 	mov.w	sl, #0
 80072ea:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 80072ee:	e785      	b.n	80071fc <__ssvfscanf_r+0x1020>
 80072f0:	f04f 0b03 	mov.w	fp, #3
 80072f4:	e782      	b.n	80071fc <__ssvfscanf_r+0x1020>
 80072f6:	f04f 0b02 	mov.w	fp, #2
 80072fa:	e77f      	b.n	80071fc <__ssvfscanf_r+0x1020>
 80072fc:	4621      	mov	r1, r4
 80072fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007300:	e9c7 2300 	strd	r2, r3, [r7]
 8007304:	f003 fb04 	bl	800a910 <__ssrefill_r>
 8007308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800730c:	2800      	cmp	r0, #0
 800730e:	f43f af6b 	beq.w	80071e8 <__ssvfscanf_r+0x100c>
 8007312:	e79c      	b.n	800724e <__ssvfscanf_r+0x1072>
 8007314:	f108 33ff 	add.w	r3, r8, #4294967295
 8007318:	2b06      	cmp	r3, #6
 800731a:	d82c      	bhi.n	8007376 <__ssvfscanf_r+0x119a>
 800731c:	f1b8 0f02 	cmp.w	r8, #2
 8007320:	d839      	bhi.n	8007396 <__ssvfscanf_r+0x11ba>
 8007322:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8007326:	45a9      	cmp	r9, r5
 8007328:	f67f a84f 	bls.w	80063ca <__ssvfscanf_r+0x1ee>
 800732c:	4622      	mov	r2, r4
 800732e:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8007332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007334:	f003 faaf 	bl	800a896 <_sungetc_r>
 8007338:	e7f5      	b.n	8007326 <__ssvfscanf_r+0x114a>
 800733a:	bf00      	nop
 800733c:	0800a665 	.word	0x0800a665
 8007340:	0800c826 	.word	0x0800c826
 8007344:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8007348:	4622      	mov	r2, r4
 800734a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800734c:	633b      	str	r3, [r7, #48]	; 0x30
 800734e:	f003 faa2 	bl	800a896 <_sungetc_r>
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007358:	fa5f fb8b 	uxtb.w	fp, fp
 800735c:	f1bb 0f02 	cmp.w	fp, #2
 8007360:	d1f0      	bne.n	8007344 <__ssvfscanf_r+0x1168>
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	f1a8 0803 	sub.w	r8, r8, #3
 8007368:	fa5f f888 	uxtb.w	r8, r8
 800736c:	eba3 0308 	sub.w	r3, r3, r8
 8007370:	eba9 0908 	sub.w	r9, r9, r8
 8007374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007376:	05e9      	lsls	r1, r5, #23
 8007378:	d52d      	bpl.n	80073d6 <__ssvfscanf_r+0x11fa>
 800737a:	056a      	lsls	r2, r5, #21
 800737c:	d50e      	bpl.n	800739c <__ssvfscanf_r+0x11c0>
 800737e:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8007382:	45a9      	cmp	r9, r5
 8007384:	f67f a821 	bls.w	80063ca <__ssvfscanf_r+0x1ee>
 8007388:	4622      	mov	r2, r4
 800738a:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 800738e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007390:	f003 fa81 	bl	800a896 <_sungetc_r>
 8007394:	e7f5      	b.n	8007382 <__ssvfscanf_r+0x11a6>
 8007396:	46c3      	mov	fp, r8
 8007398:	464b      	mov	r3, r9
 800739a:	e7db      	b.n	8007354 <__ssvfscanf_r+0x1178>
 800739c:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	2965      	cmp	r1, #101	; 0x65
 80073a4:	f109 38ff 	add.w	r8, r9, #4294967295
 80073a8:	f103 3bff 	add.w	fp, r3, #4294967295
 80073ac:	d00c      	beq.n	80073c8 <__ssvfscanf_r+0x11ec>
 80073ae:	2945      	cmp	r1, #69	; 0x45
 80073b0:	d00a      	beq.n	80073c8 <__ssvfscanf_r+0x11ec>
 80073b2:	4622      	mov	r2, r4
 80073b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073b6:	f003 fa6e 	bl	800a896 <_sungetc_r>
 80073ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073bc:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 80073c0:	f1a9 0802 	sub.w	r8, r9, #2
 80073c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80073c8:	46c1      	mov	r9, r8
 80073ca:	4622      	mov	r2, r4
 80073cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073ce:	f003 fa62 	bl	800a896 <_sungetc_r>
 80073d2:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 80073d6:	f015 0210 	ands.w	r2, r5, #16
 80073da:	f47e af1a 	bne.w	8006212 <__ssvfscanf_r+0x36>
 80073de:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 80073e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e6:	f889 2000 	strb.w	r2, [r9]
 80073ea:	d119      	bne.n	8007420 <__ssvfscanf_r+0x1244>
 80073ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ee:	4553      	cmp	r3, sl
 80073f0:	eba3 020a 	sub.w	r2, r3, sl
 80073f4:	d121      	bne.n	800743a <__ssvfscanf_r+0x125e>
 80073f6:	2200      	movs	r2, #0
 80073f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80073fa:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80073fe:	f002 ff8f 	bl	800a320 <_strtod_r>
 8007402:	07eb      	lsls	r3, r5, #31
 8007404:	4680      	mov	r8, r0
 8007406:	4689      	mov	r9, r1
 8007408:	f106 0a04 	add.w	sl, r6, #4
 800740c:	d520      	bpl.n	8007450 <__ssvfscanf_r+0x1274>
 800740e:	6833      	ldr	r3, [r6, #0]
 8007410:	e9c3 8900 	strd	r8, r9, [r3]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	4656      	mov	r6, sl
 8007418:	3301      	adds	r3, #1
 800741a:	623b      	str	r3, [r7, #32]
 800741c:	f7fe bef9 	b.w	8006212 <__ssvfscanf_r+0x36>
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0e7      	beq.n	80073f6 <__ssvfscanf_r+0x121a>
 8007426:	68b9      	ldr	r1, [r7, #8]
 8007428:	230a      	movs	r3, #10
 800742a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800742c:	3101      	adds	r1, #1
 800742e:	f003 f803 	bl	800a438 <_strtol_r>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8007438:	1ac2      	subs	r2, r0, r3
 800743a:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 800743e:	4599      	cmp	r9, r3
 8007440:	bf28      	it	cs
 8007442:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 8007446:	4648      	mov	r0, r9
 8007448:	4911      	ldr	r1, [pc, #68]	; (8007490 <__ssvfscanf_r+0x12b4>)
 800744a:	f7fd fc61 	bl	8004d10 <sprintf>
 800744e:	e7d2      	b.n	80073f6 <__ssvfscanf_r+0x121a>
 8007450:	07aa      	lsls	r2, r5, #30
 8007452:	6836      	ldr	r6, [r6, #0]
 8007454:	d502      	bpl.n	800745c <__ssvfscanf_r+0x1280>
 8007456:	e9c6 8900 	strd	r8, r9, [r6]
 800745a:	e7db      	b.n	8007414 <__ssvfscanf_r+0x1238>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	f7f9 fad4 	bl	8000a0c <__aeabi_dcmpun>
 8007464:	b120      	cbz	r0, 8007470 <__ssvfscanf_r+0x1294>
 8007466:	480b      	ldr	r0, [pc, #44]	; (8007494 <__ssvfscanf_r+0x12b8>)
 8007468:	f002 f92e 	bl	80096c8 <nanf>
 800746c:	6030      	str	r0, [r6, #0]
 800746e:	e7d1      	b.n	8007414 <__ssvfscanf_r+0x1238>
 8007470:	4640      	mov	r0, r8
 8007472:	4649      	mov	r1, r9
 8007474:	f7f9 fb28 	bl	8000ac8 <__aeabi_d2f>
 8007478:	e7f8      	b.n	800746c <__ssvfscanf_r+0x1290>
 800747a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	f000 ffe6 	bl	8008450 <free>
 8007484:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8007488:	3401      	adds	r4, #1
 800748a:	601e      	str	r6, [r3, #0]
 800748c:	f7ff b86d 	b.w	800656a <__ssvfscanf_r+0x38e>
 8007490:	0800c820 	.word	0x0800c820
 8007494:	0800cbbb 	.word	0x0800cbbb

08007498 <_write_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4604      	mov	r4, r0
 800749c:	4608      	mov	r0, r1
 800749e:	4611      	mov	r1, r2
 80074a0:	2200      	movs	r2, #0
 80074a2:	4d05      	ldr	r5, [pc, #20]	; (80074b8 <_write_r+0x20>)
 80074a4:	602a      	str	r2, [r5, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	f7fa fa5c 	bl	8001964 <_write>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_write_r+0x1e>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_write_r+0x1e>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	20001c54 	.word	0x20001c54

080074bc <register_fini>:
 80074bc:	4b02      	ldr	r3, [pc, #8]	; (80074c8 <register_fini+0xc>)
 80074be:	b113      	cbz	r3, 80074c6 <register_fini+0xa>
 80074c0:	4802      	ldr	r0, [pc, #8]	; (80074cc <register_fini+0x10>)
 80074c2:	f000 b805 	b.w	80074d0 <atexit>
 80074c6:	4770      	bx	lr
 80074c8:	00000000 	.word	0x00000000
 80074cc:	08008195 	.word	0x08008195

080074d0 <atexit>:
 80074d0:	2300      	movs	r3, #0
 80074d2:	4601      	mov	r1, r0
 80074d4:	461a      	mov	r2, r3
 80074d6:	4618      	mov	r0, r3
 80074d8:	f003 bac2 	b.w	800aa60 <__register_exitproc>

080074dc <_close_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	2300      	movs	r3, #0
 80074e0:	4d05      	ldr	r5, [pc, #20]	; (80074f8 <_close_r+0x1c>)
 80074e2:	4604      	mov	r4, r0
 80074e4:	4608      	mov	r0, r1
 80074e6:	602b      	str	r3, [r5, #0]
 80074e8:	f7fa fa58 	bl	800199c <_close>
 80074ec:	1c43      	adds	r3, r0, #1
 80074ee:	d102      	bne.n	80074f6 <_close_r+0x1a>
 80074f0:	682b      	ldr	r3, [r5, #0]
 80074f2:	b103      	cbz	r3, 80074f6 <_close_r+0x1a>
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	bd38      	pop	{r3, r4, r5, pc}
 80074f8:	20001c54 	.word	0x20001c54

080074fc <quorem>:
 80074fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007500:	6903      	ldr	r3, [r0, #16]
 8007502:	690c      	ldr	r4, [r1, #16]
 8007504:	4607      	mov	r7, r0
 8007506:	42a3      	cmp	r3, r4
 8007508:	f2c0 8083 	blt.w	8007612 <quorem+0x116>
 800750c:	3c01      	subs	r4, #1
 800750e:	f100 0514 	add.w	r5, r0, #20
 8007512:	f101 0814 	add.w	r8, r1, #20
 8007516:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800751a:	9301      	str	r3, [sp, #4]
 800751c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007520:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007524:	3301      	adds	r3, #1
 8007526:	429a      	cmp	r2, r3
 8007528:	fbb2 f6f3 	udiv	r6, r2, r3
 800752c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007530:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007534:	d332      	bcc.n	800759c <quorem+0xa0>
 8007536:	f04f 0e00 	mov.w	lr, #0
 800753a:	4640      	mov	r0, r8
 800753c:	46ac      	mov	ip, r5
 800753e:	46f2      	mov	sl, lr
 8007540:	f850 2b04 	ldr.w	r2, [r0], #4
 8007544:	b293      	uxth	r3, r2
 8007546:	fb06 e303 	mla	r3, r6, r3, lr
 800754a:	0c12      	lsrs	r2, r2, #16
 800754c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007550:	fb06 e202 	mla	r2, r6, r2, lr
 8007554:	b29b      	uxth	r3, r3
 8007556:	ebaa 0303 	sub.w	r3, sl, r3
 800755a:	f8dc a000 	ldr.w	sl, [ip]
 800755e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007562:	fa1f fa8a 	uxth.w	sl, sl
 8007566:	4453      	add	r3, sl
 8007568:	fa1f fa82 	uxth.w	sl, r2
 800756c:	f8dc 2000 	ldr.w	r2, [ip]
 8007570:	4581      	cmp	r9, r0
 8007572:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007576:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800757a:	b29b      	uxth	r3, r3
 800757c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007580:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007584:	f84c 3b04 	str.w	r3, [ip], #4
 8007588:	d2da      	bcs.n	8007540 <quorem+0x44>
 800758a:	f855 300b 	ldr.w	r3, [r5, fp]
 800758e:	b92b      	cbnz	r3, 800759c <quorem+0xa0>
 8007590:	9b01      	ldr	r3, [sp, #4]
 8007592:	3b04      	subs	r3, #4
 8007594:	429d      	cmp	r5, r3
 8007596:	461a      	mov	r2, r3
 8007598:	d32f      	bcc.n	80075fa <quorem+0xfe>
 800759a:	613c      	str	r4, [r7, #16]
 800759c:	4638      	mov	r0, r7
 800759e:	f001 fc5d 	bl	8008e5c <__mcmp>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	db25      	blt.n	80075f2 <quorem+0xf6>
 80075a6:	4628      	mov	r0, r5
 80075a8:	f04f 0c00 	mov.w	ip, #0
 80075ac:	3601      	adds	r6, #1
 80075ae:	f858 1b04 	ldr.w	r1, [r8], #4
 80075b2:	f8d0 e000 	ldr.w	lr, [r0]
 80075b6:	b28b      	uxth	r3, r1
 80075b8:	ebac 0303 	sub.w	r3, ip, r3
 80075bc:	fa1f f28e 	uxth.w	r2, lr
 80075c0:	4413      	add	r3, r2
 80075c2:	0c0a      	lsrs	r2, r1, #16
 80075c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075d2:	45c1      	cmp	r9, r8
 80075d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075d8:	f840 3b04 	str.w	r3, [r0], #4
 80075dc:	d2e7      	bcs.n	80075ae <quorem+0xb2>
 80075de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075e6:	b922      	cbnz	r2, 80075f2 <quorem+0xf6>
 80075e8:	3b04      	subs	r3, #4
 80075ea:	429d      	cmp	r5, r3
 80075ec:	461a      	mov	r2, r3
 80075ee:	d30a      	bcc.n	8007606 <quorem+0x10a>
 80075f0:	613c      	str	r4, [r7, #16]
 80075f2:	4630      	mov	r0, r6
 80075f4:	b003      	add	sp, #12
 80075f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	3b04      	subs	r3, #4
 80075fe:	2a00      	cmp	r2, #0
 8007600:	d1cb      	bne.n	800759a <quorem+0x9e>
 8007602:	3c01      	subs	r4, #1
 8007604:	e7c6      	b.n	8007594 <quorem+0x98>
 8007606:	6812      	ldr	r2, [r2, #0]
 8007608:	3b04      	subs	r3, #4
 800760a:	2a00      	cmp	r2, #0
 800760c:	d1f0      	bne.n	80075f0 <quorem+0xf4>
 800760e:	3c01      	subs	r4, #1
 8007610:	e7eb      	b.n	80075ea <quorem+0xee>
 8007612:	2000      	movs	r0, #0
 8007614:	e7ee      	b.n	80075f4 <quorem+0xf8>
	...

08007618 <_dtoa_r>:
 8007618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800761e:	b097      	sub	sp, #92	; 0x5c
 8007620:	4681      	mov	r9, r0
 8007622:	4614      	mov	r4, r2
 8007624:	461d      	mov	r5, r3
 8007626:	4692      	mov	sl, r2
 8007628:	469b      	mov	fp, r3
 800762a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 800762c:	b149      	cbz	r1, 8007642 <_dtoa_r+0x2a>
 800762e:	2301      	movs	r3, #1
 8007630:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007632:	4093      	lsls	r3, r2
 8007634:	608b      	str	r3, [r1, #8]
 8007636:	604a      	str	r2, [r1, #4]
 8007638:	f001 f9bf 	bl	80089ba <_Bfree>
 800763c:	2300      	movs	r3, #0
 800763e:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8007642:	1e2b      	subs	r3, r5, #0
 8007644:	bfad      	iteet	ge
 8007646:	2300      	movge	r3, #0
 8007648:	2201      	movlt	r2, #1
 800764a:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800764e:	6033      	strge	r3, [r6, #0]
 8007650:	4ba3      	ldr	r3, [pc, #652]	; (80078e0 <_dtoa_r+0x2c8>)
 8007652:	bfb8      	it	lt
 8007654:	6032      	strlt	r2, [r6, #0]
 8007656:	ea33 030b 	bics.w	r3, r3, fp
 800765a:	f8cd b00c 	str.w	fp, [sp, #12]
 800765e:	d119      	bne.n	8007694 <_dtoa_r+0x7c>
 8007660:	f242 730f 	movw	r3, #9999	; 0x270f
 8007664:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800766c:	4323      	orrs	r3, r4
 800766e:	f000 857b 	beq.w	8008168 <_dtoa_r+0xb50>
 8007672:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007674:	b90b      	cbnz	r3, 800767a <_dtoa_r+0x62>
 8007676:	4b9b      	ldr	r3, [pc, #620]	; (80078e4 <_dtoa_r+0x2cc>)
 8007678:	e020      	b.n	80076bc <_dtoa_r+0xa4>
 800767a:	4b9a      	ldr	r3, [pc, #616]	; (80078e4 <_dtoa_r+0x2cc>)
 800767c:	9306      	str	r3, [sp, #24]
 800767e:	3303      	adds	r3, #3
 8007680:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007682:	6013      	str	r3, [r2, #0]
 8007684:	9806      	ldr	r0, [sp, #24]
 8007686:	b017      	add	sp, #92	; 0x5c
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	4b96      	ldr	r3, [pc, #600]	; (80078e8 <_dtoa_r+0x2d0>)
 800768e:	9306      	str	r3, [sp, #24]
 8007690:	3308      	adds	r3, #8
 8007692:	e7f5      	b.n	8007680 <_dtoa_r+0x68>
 8007694:	2200      	movs	r2, #0
 8007696:	2300      	movs	r3, #0
 8007698:	4650      	mov	r0, sl
 800769a:	4659      	mov	r1, fp
 800769c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 80076a0:	f7f9 f982 	bl	80009a8 <__aeabi_dcmpeq>
 80076a4:	4607      	mov	r7, r0
 80076a6:	b158      	cbz	r0, 80076c0 <_dtoa_r+0xa8>
 80076a8:	2301      	movs	r3, #1
 80076aa:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80076ac:	6013      	str	r3, [r2, #0]
 80076ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f000 8556 	beq.w	8008162 <_dtoa_r+0xb4a>
 80076b6:	488d      	ldr	r0, [pc, #564]	; (80078ec <_dtoa_r+0x2d4>)
 80076b8:	6018      	str	r0, [r3, #0]
 80076ba:	1e43      	subs	r3, r0, #1
 80076bc:	9306      	str	r3, [sp, #24]
 80076be:	e7e1      	b.n	8007684 <_dtoa_r+0x6c>
 80076c0:	ab14      	add	r3, sp, #80	; 0x50
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	ab15      	add	r3, sp, #84	; 0x54
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	4648      	mov	r0, r9
 80076ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80076ce:	f001 fceb 	bl	80090a8 <__d2b>
 80076d2:	9b03      	ldr	r3, [sp, #12]
 80076d4:	4680      	mov	r8, r0
 80076d6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80076da:	2e00      	cmp	r6, #0
 80076dc:	d07f      	beq.n	80077de <_dtoa_r+0x1c6>
 80076de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80076e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80076e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076ec:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80076f0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80076f4:	9713      	str	r7, [sp, #76]	; 0x4c
 80076f6:	2200      	movs	r2, #0
 80076f8:	4b7d      	ldr	r3, [pc, #500]	; (80078f0 <_dtoa_r+0x2d8>)
 80076fa:	f7f8 fd35 	bl	8000168 <__aeabi_dsub>
 80076fe:	a372      	add	r3, pc, #456	; (adr r3, 80078c8 <_dtoa_r+0x2b0>)
 8007700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007704:	f7f8 fee8 	bl	80004d8 <__aeabi_dmul>
 8007708:	a371      	add	r3, pc, #452	; (adr r3, 80078d0 <_dtoa_r+0x2b8>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 fd2d 	bl	800016c <__adddf3>
 8007712:	4604      	mov	r4, r0
 8007714:	4630      	mov	r0, r6
 8007716:	460d      	mov	r5, r1
 8007718:	f7f8 fe74 	bl	8000404 <__aeabi_i2d>
 800771c:	a36e      	add	r3, pc, #440	; (adr r3, 80078d8 <_dtoa_r+0x2c0>)
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f7f8 fed9 	bl	80004d8 <__aeabi_dmul>
 8007726:	4602      	mov	r2, r0
 8007728:	460b      	mov	r3, r1
 800772a:	4620      	mov	r0, r4
 800772c:	4629      	mov	r1, r5
 800772e:	f7f8 fd1d 	bl	800016c <__adddf3>
 8007732:	4604      	mov	r4, r0
 8007734:	460d      	mov	r5, r1
 8007736:	f7f9 f97f 	bl	8000a38 <__aeabi_d2iz>
 800773a:	2200      	movs	r2, #0
 800773c:	9003      	str	r0, [sp, #12]
 800773e:	2300      	movs	r3, #0
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	f7f9 f93a 	bl	80009bc <__aeabi_dcmplt>
 8007748:	b150      	cbz	r0, 8007760 <_dtoa_r+0x148>
 800774a:	9803      	ldr	r0, [sp, #12]
 800774c:	f7f8 fe5a 	bl	8000404 <__aeabi_i2d>
 8007750:	4622      	mov	r2, r4
 8007752:	462b      	mov	r3, r5
 8007754:	f7f9 f928 	bl	80009a8 <__aeabi_dcmpeq>
 8007758:	b910      	cbnz	r0, 8007760 <_dtoa_r+0x148>
 800775a:	9b03      	ldr	r3, [sp, #12]
 800775c:	3b01      	subs	r3, #1
 800775e:	9303      	str	r3, [sp, #12]
 8007760:	9b03      	ldr	r3, [sp, #12]
 8007762:	2b16      	cmp	r3, #22
 8007764:	d858      	bhi.n	8007818 <_dtoa_r+0x200>
 8007766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800776a:	9a03      	ldr	r2, [sp, #12]
 800776c:	4b61      	ldr	r3, [pc, #388]	; (80078f4 <_dtoa_r+0x2dc>)
 800776e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007776:	f7f9 f921 	bl	80009bc <__aeabi_dcmplt>
 800777a:	2800      	cmp	r0, #0
 800777c:	d04e      	beq.n	800781c <_dtoa_r+0x204>
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	3b01      	subs	r3, #1
 8007782:	9303      	str	r3, [sp, #12]
 8007784:	2300      	movs	r3, #0
 8007786:	930f      	str	r3, [sp, #60]	; 0x3c
 8007788:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800778a:	1b9e      	subs	r6, r3, r6
 800778c:	1e73      	subs	r3, r6, #1
 800778e:	9309      	str	r3, [sp, #36]	; 0x24
 8007790:	bf49      	itett	mi
 8007792:	f1c6 0301 	rsbmi	r3, r6, #1
 8007796:	2300      	movpl	r3, #0
 8007798:	9308      	strmi	r3, [sp, #32]
 800779a:	2300      	movmi	r3, #0
 800779c:	bf54      	ite	pl
 800779e:	9308      	strpl	r3, [sp, #32]
 80077a0:	9309      	strmi	r3, [sp, #36]	; 0x24
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	db3b      	blt.n	8007820 <_dtoa_r+0x208>
 80077a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077aa:	9a03      	ldr	r2, [sp, #12]
 80077ac:	4413      	add	r3, r2
 80077ae:	9309      	str	r3, [sp, #36]	; 0x24
 80077b0:	2300      	movs	r3, #0
 80077b2:	920e      	str	r2, [sp, #56]	; 0x38
 80077b4:	930a      	str	r3, [sp, #40]	; 0x28
 80077b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077b8:	2b09      	cmp	r3, #9
 80077ba:	d86b      	bhi.n	8007894 <_dtoa_r+0x27c>
 80077bc:	2b05      	cmp	r3, #5
 80077be:	bfc4      	itt	gt
 80077c0:	3b04      	subgt	r3, #4
 80077c2:	9320      	strgt	r3, [sp, #128]	; 0x80
 80077c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80077c6:	bfc8      	it	gt
 80077c8:	2400      	movgt	r4, #0
 80077ca:	f1a3 0302 	sub.w	r3, r3, #2
 80077ce:	bfd8      	it	le
 80077d0:	2401      	movle	r4, #1
 80077d2:	2b03      	cmp	r3, #3
 80077d4:	d869      	bhi.n	80078aa <_dtoa_r+0x292>
 80077d6:	e8df f003 	tbb	[pc, r3]
 80077da:	392c      	.short	0x392c
 80077dc:	5b37      	.short	0x5b37
 80077de:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	; 0x50
 80077e2:	441e      	add	r6, r3
 80077e4:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	dd10      	ble.n	800780e <_dtoa_r+0x1f6>
 80077ec:	9a03      	ldr	r2, [sp, #12]
 80077ee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80077f2:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80077f6:	409a      	lsls	r2, r3
 80077f8:	fa24 f000 	lsr.w	r0, r4, r0
 80077fc:	4310      	orrs	r0, r2
 80077fe:	f7f8 fdf1 	bl	80003e4 <__aeabi_ui2d>
 8007802:	2301      	movs	r3, #1
 8007804:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007808:	3e01      	subs	r6, #1
 800780a:	9313      	str	r3, [sp, #76]	; 0x4c
 800780c:	e773      	b.n	80076f6 <_dtoa_r+0xde>
 800780e:	f1c3 0320 	rsb	r3, r3, #32
 8007812:	fa04 f003 	lsl.w	r0, r4, r3
 8007816:	e7f2      	b.n	80077fe <_dtoa_r+0x1e6>
 8007818:	2301      	movs	r3, #1
 800781a:	e7b4      	b.n	8007786 <_dtoa_r+0x16e>
 800781c:	900f      	str	r0, [sp, #60]	; 0x3c
 800781e:	e7b3      	b.n	8007788 <_dtoa_r+0x170>
 8007820:	9b08      	ldr	r3, [sp, #32]
 8007822:	9a03      	ldr	r2, [sp, #12]
 8007824:	1a9b      	subs	r3, r3, r2
 8007826:	9308      	str	r3, [sp, #32]
 8007828:	4253      	negs	r3, r2
 800782a:	930a      	str	r3, [sp, #40]	; 0x28
 800782c:	2300      	movs	r3, #0
 800782e:	930e      	str	r3, [sp, #56]	; 0x38
 8007830:	e7c1      	b.n	80077b6 <_dtoa_r+0x19e>
 8007832:	2300      	movs	r3, #0
 8007834:	930b      	str	r3, [sp, #44]	; 0x2c
 8007836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007838:	2b00      	cmp	r3, #0
 800783a:	dc39      	bgt.n	80078b0 <_dtoa_r+0x298>
 800783c:	2301      	movs	r3, #1
 800783e:	461a      	mov	r2, r3
 8007840:	9304      	str	r3, [sp, #16]
 8007842:	9307      	str	r3, [sp, #28]
 8007844:	9221      	str	r2, [sp, #132]	; 0x84
 8007846:	e00c      	b.n	8007862 <_dtoa_r+0x24a>
 8007848:	2301      	movs	r3, #1
 800784a:	e7f3      	b.n	8007834 <_dtoa_r+0x21c>
 800784c:	2300      	movs	r3, #0
 800784e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007850:	930b      	str	r3, [sp, #44]	; 0x2c
 8007852:	9b03      	ldr	r3, [sp, #12]
 8007854:	4413      	add	r3, r2
 8007856:	9304      	str	r3, [sp, #16]
 8007858:	3301      	adds	r3, #1
 800785a:	2b01      	cmp	r3, #1
 800785c:	9307      	str	r3, [sp, #28]
 800785e:	bfb8      	it	lt
 8007860:	2301      	movlt	r3, #1
 8007862:	2200      	movs	r2, #0
 8007864:	f8c9 2044 	str.w	r2, [r9, #68]	; 0x44
 8007868:	2204      	movs	r2, #4
 800786a:	f102 0014 	add.w	r0, r2, #20
 800786e:	4298      	cmp	r0, r3
 8007870:	f8d9 1044 	ldr.w	r1, [r9, #68]	; 0x44
 8007874:	d920      	bls.n	80078b8 <_dtoa_r+0x2a0>
 8007876:	4648      	mov	r0, r9
 8007878:	f001 f87a 	bl	8008970 <_Balloc>
 800787c:	9006      	str	r0, [sp, #24]
 800787e:	2800      	cmp	r0, #0
 8007880:	d13e      	bne.n	8007900 <_dtoa_r+0x2e8>
 8007882:	4602      	mov	r2, r0
 8007884:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007888:	4b1b      	ldr	r3, [pc, #108]	; (80078f8 <_dtoa_r+0x2e0>)
 800788a:	481c      	ldr	r0, [pc, #112]	; (80078fc <_dtoa_r+0x2e4>)
 800788c:	f003 f928 	bl	800aae0 <__assert_func>
 8007890:	2301      	movs	r3, #1
 8007892:	e7dc      	b.n	800784e <_dtoa_r+0x236>
 8007894:	2401      	movs	r4, #1
 8007896:	2300      	movs	r3, #0
 8007898:	940b      	str	r4, [sp, #44]	; 0x2c
 800789a:	9320      	str	r3, [sp, #128]	; 0x80
 800789c:	f04f 33ff 	mov.w	r3, #4294967295
 80078a0:	2200      	movs	r2, #0
 80078a2:	9304      	str	r3, [sp, #16]
 80078a4:	9307      	str	r3, [sp, #28]
 80078a6:	2312      	movs	r3, #18
 80078a8:	e7cc      	b.n	8007844 <_dtoa_r+0x22c>
 80078aa:	2301      	movs	r3, #1
 80078ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80078ae:	e7f5      	b.n	800789c <_dtoa_r+0x284>
 80078b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	9307      	str	r3, [sp, #28]
 80078b6:	e7d4      	b.n	8007862 <_dtoa_r+0x24a>
 80078b8:	3101      	adds	r1, #1
 80078ba:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 80078be:	0052      	lsls	r2, r2, #1
 80078c0:	e7d3      	b.n	800786a <_dtoa_r+0x252>
 80078c2:	bf00      	nop
 80078c4:	f3af 8000 	nop.w
 80078c8:	636f4361 	.word	0x636f4361
 80078cc:	3fd287a7 	.word	0x3fd287a7
 80078d0:	8b60c8b3 	.word	0x8b60c8b3
 80078d4:	3fc68a28 	.word	0x3fc68a28
 80078d8:	509f79fb 	.word	0x509f79fb
 80078dc:	3fd34413 	.word	0x3fd34413
 80078e0:	7ff00000 	.word	0x7ff00000
 80078e4:	0800c949 	.word	0x0800c949
 80078e8:	0800c94d 	.word	0x0800c94d
 80078ec:	0800c7ff 	.word	0x0800c7ff
 80078f0:	3ff80000 	.word	0x3ff80000
 80078f4:	0800ca58 	.word	0x0800ca58
 80078f8:	0800c956 	.word	0x0800c956
 80078fc:	0800c967 	.word	0x0800c967
 8007900:	9b06      	ldr	r3, [sp, #24]
 8007902:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8007906:	9b07      	ldr	r3, [sp, #28]
 8007908:	2b0e      	cmp	r3, #14
 800790a:	f200 80a1 	bhi.w	8007a50 <_dtoa_r+0x438>
 800790e:	2c00      	cmp	r4, #0
 8007910:	f000 809e 	beq.w	8007a50 <_dtoa_r+0x438>
 8007914:	9b03      	ldr	r3, [sp, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	dd34      	ble.n	8007984 <_dtoa_r+0x36c>
 800791a:	4a96      	ldr	r2, [pc, #600]	; (8007b74 <_dtoa_r+0x55c>)
 800791c:	f003 030f 	and.w	r3, r3, #15
 8007920:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007924:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007928:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	05d8      	lsls	r0, r3, #23
 8007930:	ea4f 1523 	mov.w	r5, r3, asr #4
 8007934:	d516      	bpl.n	8007964 <_dtoa_r+0x34c>
 8007936:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800793a:	4b8f      	ldr	r3, [pc, #572]	; (8007b78 <_dtoa_r+0x560>)
 800793c:	2603      	movs	r6, #3
 800793e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007942:	f7f8 fef3 	bl	800072c <__aeabi_ddiv>
 8007946:	4682      	mov	sl, r0
 8007948:	468b      	mov	fp, r1
 800794a:	f005 050f 	and.w	r5, r5, #15
 800794e:	4c8a      	ldr	r4, [pc, #552]	; (8007b78 <_dtoa_r+0x560>)
 8007950:	b955      	cbnz	r5, 8007968 <_dtoa_r+0x350>
 8007952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007956:	4650      	mov	r0, sl
 8007958:	4659      	mov	r1, fp
 800795a:	f7f8 fee7 	bl	800072c <__aeabi_ddiv>
 800795e:	4682      	mov	sl, r0
 8007960:	468b      	mov	fp, r1
 8007962:	e028      	b.n	80079b6 <_dtoa_r+0x39e>
 8007964:	2602      	movs	r6, #2
 8007966:	e7f2      	b.n	800794e <_dtoa_r+0x336>
 8007968:	07e9      	lsls	r1, r5, #31
 800796a:	d508      	bpl.n	800797e <_dtoa_r+0x366>
 800796c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007970:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007974:	f7f8 fdb0 	bl	80004d8 <__aeabi_dmul>
 8007978:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800797c:	3601      	adds	r6, #1
 800797e:	106d      	asrs	r5, r5, #1
 8007980:	3408      	adds	r4, #8
 8007982:	e7e5      	b.n	8007950 <_dtoa_r+0x338>
 8007984:	f000 809f 	beq.w	8007ac6 <_dtoa_r+0x4ae>
 8007988:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800798c:	9b03      	ldr	r3, [sp, #12]
 800798e:	2602      	movs	r6, #2
 8007990:	425c      	negs	r4, r3
 8007992:	4b78      	ldr	r3, [pc, #480]	; (8007b74 <_dtoa_r+0x55c>)
 8007994:	f004 020f 	and.w	r2, r4, #15
 8007998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	f7f8 fd9a 	bl	80004d8 <__aeabi_dmul>
 80079a4:	2300      	movs	r3, #0
 80079a6:	4682      	mov	sl, r0
 80079a8:	468b      	mov	fp, r1
 80079aa:	4d73      	ldr	r5, [pc, #460]	; (8007b78 <_dtoa_r+0x560>)
 80079ac:	1124      	asrs	r4, r4, #4
 80079ae:	2c00      	cmp	r4, #0
 80079b0:	d17e      	bne.n	8007ab0 <_dtoa_r+0x498>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d1d3      	bne.n	800795e <_dtoa_r+0x346>
 80079b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 8086 	beq.w	8007aca <_dtoa_r+0x4b2>
 80079be:	2200      	movs	r2, #0
 80079c0:	4650      	mov	r0, sl
 80079c2:	4659      	mov	r1, fp
 80079c4:	4b6d      	ldr	r3, [pc, #436]	; (8007b7c <_dtoa_r+0x564>)
 80079c6:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 80079ca:	f7f8 fff7 	bl	80009bc <__aeabi_dcmplt>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d07b      	beq.n	8007aca <_dtoa_r+0x4b2>
 80079d2:	9b07      	ldr	r3, [sp, #28]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d078      	beq.n	8007aca <_dtoa_r+0x4b2>
 80079d8:	9b04      	ldr	r3, [sp, #16]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	dd36      	ble.n	8007a4c <_dtoa_r+0x434>
 80079de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80079e2:	9b03      	ldr	r3, [sp, #12]
 80079e4:	2200      	movs	r2, #0
 80079e6:	1e5d      	subs	r5, r3, #1
 80079e8:	4b65      	ldr	r3, [pc, #404]	; (8007b80 <_dtoa_r+0x568>)
 80079ea:	f7f8 fd75 	bl	80004d8 <__aeabi_dmul>
 80079ee:	4682      	mov	sl, r0
 80079f0:	468b      	mov	fp, r1
 80079f2:	9c04      	ldr	r4, [sp, #16]
 80079f4:	3601      	adds	r6, #1
 80079f6:	4630      	mov	r0, r6
 80079f8:	f7f8 fd04 	bl	8000404 <__aeabi_i2d>
 80079fc:	4652      	mov	r2, sl
 80079fe:	465b      	mov	r3, fp
 8007a00:	f7f8 fd6a 	bl	80004d8 <__aeabi_dmul>
 8007a04:	2200      	movs	r2, #0
 8007a06:	4b5f      	ldr	r3, [pc, #380]	; (8007b84 <_dtoa_r+0x56c>)
 8007a08:	f7f8 fbb0 	bl	800016c <__adddf3>
 8007a0c:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a10:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a14:	9611      	str	r6, [sp, #68]	; 0x44
 8007a16:	2c00      	cmp	r4, #0
 8007a18:	d15a      	bne.n	8007ad0 <_dtoa_r+0x4b8>
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	4650      	mov	r0, sl
 8007a1e:	4659      	mov	r1, fp
 8007a20:	4b59      	ldr	r3, [pc, #356]	; (8007b88 <_dtoa_r+0x570>)
 8007a22:	f7f8 fba1 	bl	8000168 <__aeabi_dsub>
 8007a26:	4633      	mov	r3, r6
 8007a28:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a2a:	4682      	mov	sl, r0
 8007a2c:	468b      	mov	fp, r1
 8007a2e:	f7f8 ffe3 	bl	80009f8 <__aeabi_dcmpgt>
 8007a32:	2800      	cmp	r0, #0
 8007a34:	f040 828b 	bne.w	8007f4e <_dtoa_r+0x936>
 8007a38:	4650      	mov	r0, sl
 8007a3a:	4659      	mov	r1, fp
 8007a3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007a3e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007a42:	f7f8 ffbb 	bl	80009bc <__aeabi_dcmplt>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f040 827f 	bne.w	8007f4a <_dtoa_r+0x932>
 8007a4c:	e9dd ab0c 	ldrd	sl, fp, [sp, #48]	; 0x30
 8007a50:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f2c0 814d 	blt.w	8007cf2 <_dtoa_r+0x6da>
 8007a58:	9a03      	ldr	r2, [sp, #12]
 8007a5a:	2a0e      	cmp	r2, #14
 8007a5c:	f300 8149 	bgt.w	8007cf2 <_dtoa_r+0x6da>
 8007a60:	4b44      	ldr	r3, [pc, #272]	; (8007b74 <_dtoa_r+0x55c>)
 8007a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a66:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a6a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f280 80d6 	bge.w	8007c22 <_dtoa_r+0x60a>
 8007a76:	9b07      	ldr	r3, [sp, #28]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	f300 80d2 	bgt.w	8007c22 <_dtoa_r+0x60a>
 8007a7e:	f040 8263 	bne.w	8007f48 <_dtoa_r+0x930>
 8007a82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a86:	2200      	movs	r2, #0
 8007a88:	4b3f      	ldr	r3, [pc, #252]	; (8007b88 <_dtoa_r+0x570>)
 8007a8a:	f7f8 fd25 	bl	80004d8 <__aeabi_dmul>
 8007a8e:	4652      	mov	r2, sl
 8007a90:	465b      	mov	r3, fp
 8007a92:	f7f8 ffa7 	bl	80009e4 <__aeabi_dcmpge>
 8007a96:	9c07      	ldr	r4, [sp, #28]
 8007a98:	4625      	mov	r5, r4
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	f040 823c 	bne.w	8007f18 <_dtoa_r+0x900>
 8007aa0:	2331      	movs	r3, #49	; 0x31
 8007aa2:	9e06      	ldr	r6, [sp, #24]
 8007aa4:	f806 3b01 	strb.w	r3, [r6], #1
 8007aa8:	9b03      	ldr	r3, [sp, #12]
 8007aaa:	3301      	adds	r3, #1
 8007aac:	9303      	str	r3, [sp, #12]
 8007aae:	e237      	b.n	8007f20 <_dtoa_r+0x908>
 8007ab0:	07e2      	lsls	r2, r4, #31
 8007ab2:	d505      	bpl.n	8007ac0 <_dtoa_r+0x4a8>
 8007ab4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007ab8:	f7f8 fd0e 	bl	80004d8 <__aeabi_dmul>
 8007abc:	2301      	movs	r3, #1
 8007abe:	3601      	adds	r6, #1
 8007ac0:	1064      	asrs	r4, r4, #1
 8007ac2:	3508      	adds	r5, #8
 8007ac4:	e773      	b.n	80079ae <_dtoa_r+0x396>
 8007ac6:	2602      	movs	r6, #2
 8007ac8:	e775      	b.n	80079b6 <_dtoa_r+0x39e>
 8007aca:	9d03      	ldr	r5, [sp, #12]
 8007acc:	9c07      	ldr	r4, [sp, #28]
 8007ace:	e792      	b.n	80079f6 <_dtoa_r+0x3de>
 8007ad0:	9906      	ldr	r1, [sp, #24]
 8007ad2:	4b28      	ldr	r3, [pc, #160]	; (8007b74 <_dtoa_r+0x55c>)
 8007ad4:	4421      	add	r1, r4
 8007ad6:	9112      	str	r1, [sp, #72]	; 0x48
 8007ad8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ade:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007ae2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	d052      	beq.n	8007b90 <_dtoa_r+0x578>
 8007aea:	2000      	movs	r0, #0
 8007aec:	4927      	ldr	r1, [pc, #156]	; (8007b8c <_dtoa_r+0x574>)
 8007aee:	f7f8 fe1d 	bl	800072c <__aeabi_ddiv>
 8007af2:	4632      	mov	r2, r6
 8007af4:	463b      	mov	r3, r7
 8007af6:	f7f8 fb37 	bl	8000168 <__aeabi_dsub>
 8007afa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007afe:	9e06      	ldr	r6, [sp, #24]
 8007b00:	4659      	mov	r1, fp
 8007b02:	4650      	mov	r0, sl
 8007b04:	f7f8 ff98 	bl	8000a38 <__aeabi_d2iz>
 8007b08:	4604      	mov	r4, r0
 8007b0a:	f7f8 fc7b 	bl	8000404 <__aeabi_i2d>
 8007b0e:	4602      	mov	r2, r0
 8007b10:	460b      	mov	r3, r1
 8007b12:	4650      	mov	r0, sl
 8007b14:	4659      	mov	r1, fp
 8007b16:	f7f8 fb27 	bl	8000168 <__aeabi_dsub>
 8007b1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b1e:	3430      	adds	r4, #48	; 0x30
 8007b20:	f806 4b01 	strb.w	r4, [r6], #1
 8007b24:	4682      	mov	sl, r0
 8007b26:	468b      	mov	fp, r1
 8007b28:	f7f8 ff48 	bl	80009bc <__aeabi_dcmplt>
 8007b2c:	2800      	cmp	r0, #0
 8007b2e:	d170      	bne.n	8007c12 <_dtoa_r+0x5fa>
 8007b30:	4652      	mov	r2, sl
 8007b32:	465b      	mov	r3, fp
 8007b34:	2000      	movs	r0, #0
 8007b36:	4911      	ldr	r1, [pc, #68]	; (8007b7c <_dtoa_r+0x564>)
 8007b38:	f7f8 fb16 	bl	8000168 <__aeabi_dsub>
 8007b3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007b40:	f7f8 ff3c 	bl	80009bc <__aeabi_dcmplt>
 8007b44:	2800      	cmp	r0, #0
 8007b46:	f040 80b6 	bne.w	8007cb6 <_dtoa_r+0x69e>
 8007b4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007b4c:	429e      	cmp	r6, r3
 8007b4e:	f43f af7d 	beq.w	8007a4c <_dtoa_r+0x434>
 8007b52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007b56:	2200      	movs	r2, #0
 8007b58:	4b09      	ldr	r3, [pc, #36]	; (8007b80 <_dtoa_r+0x568>)
 8007b5a:	f7f8 fcbd 	bl	80004d8 <__aeabi_dmul>
 8007b5e:	2200      	movs	r2, #0
 8007b60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <_dtoa_r+0x568>)
 8007b66:	4650      	mov	r0, sl
 8007b68:	4659      	mov	r1, fp
 8007b6a:	f7f8 fcb5 	bl	80004d8 <__aeabi_dmul>
 8007b6e:	4682      	mov	sl, r0
 8007b70:	468b      	mov	fp, r1
 8007b72:	e7c5      	b.n	8007b00 <_dtoa_r+0x4e8>
 8007b74:	0800ca58 	.word	0x0800ca58
 8007b78:	0800ca30 	.word	0x0800ca30
 8007b7c:	3ff00000 	.word	0x3ff00000
 8007b80:	40240000 	.word	0x40240000
 8007b84:	401c0000 	.word	0x401c0000
 8007b88:	40140000 	.word	0x40140000
 8007b8c:	3fe00000 	.word	0x3fe00000
 8007b90:	4630      	mov	r0, r6
 8007b92:	4639      	mov	r1, r7
 8007b94:	f7f8 fca0 	bl	80004d8 <__aeabi_dmul>
 8007b98:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007b9c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8007b9e:	9e06      	ldr	r6, [sp, #24]
 8007ba0:	4659      	mov	r1, fp
 8007ba2:	4650      	mov	r0, sl
 8007ba4:	f7f8 ff48 	bl	8000a38 <__aeabi_d2iz>
 8007ba8:	4604      	mov	r4, r0
 8007baa:	f7f8 fc2b 	bl	8000404 <__aeabi_i2d>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4650      	mov	r0, sl
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	f7f8 fad7 	bl	8000168 <__aeabi_dsub>
 8007bba:	3430      	adds	r4, #48	; 0x30
 8007bbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007bbe:	f806 4b01 	strb.w	r4, [r6], #1
 8007bc2:	429e      	cmp	r6, r3
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	468b      	mov	fp, r1
 8007bc8:	f04f 0200 	mov.w	r2, #0
 8007bcc:	d123      	bne.n	8007c16 <_dtoa_r+0x5fe>
 8007bce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007bd2:	4bb2      	ldr	r3, [pc, #712]	; (8007e9c <_dtoa_r+0x884>)
 8007bd4:	f7f8 faca 	bl	800016c <__adddf3>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	460b      	mov	r3, r1
 8007bdc:	4650      	mov	r0, sl
 8007bde:	4659      	mov	r1, fp
 8007be0:	f7f8 ff0a 	bl	80009f8 <__aeabi_dcmpgt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d166      	bne.n	8007cb6 <_dtoa_r+0x69e>
 8007be8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007bec:	2000      	movs	r0, #0
 8007bee:	49ab      	ldr	r1, [pc, #684]	; (8007e9c <_dtoa_r+0x884>)
 8007bf0:	f7f8 faba 	bl	8000168 <__aeabi_dsub>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	4650      	mov	r0, sl
 8007bfa:	4659      	mov	r1, fp
 8007bfc:	f7f8 fede 	bl	80009bc <__aeabi_dcmplt>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	f43f af23 	beq.w	8007a4c <_dtoa_r+0x434>
 8007c06:	463e      	mov	r6, r7
 8007c08:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c0c:	3f01      	subs	r7, #1
 8007c0e:	2b30      	cmp	r3, #48	; 0x30
 8007c10:	d0f9      	beq.n	8007c06 <_dtoa_r+0x5ee>
 8007c12:	9503      	str	r5, [sp, #12]
 8007c14:	e03e      	b.n	8007c94 <_dtoa_r+0x67c>
 8007c16:	4ba2      	ldr	r3, [pc, #648]	; (8007ea0 <_dtoa_r+0x888>)
 8007c18:	f7f8 fc5e 	bl	80004d8 <__aeabi_dmul>
 8007c1c:	4682      	mov	sl, r0
 8007c1e:	468b      	mov	fp, r1
 8007c20:	e7be      	b.n	8007ba0 <_dtoa_r+0x588>
 8007c22:	4654      	mov	r4, sl
 8007c24:	f04f 0a00 	mov.w	sl, #0
 8007c28:	465d      	mov	r5, fp
 8007c2a:	9e06      	ldr	r6, [sp, #24]
 8007c2c:	f8df b270 	ldr.w	fp, [pc, #624]	; 8007ea0 <_dtoa_r+0x888>
 8007c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c34:	4620      	mov	r0, r4
 8007c36:	4629      	mov	r1, r5
 8007c38:	f7f8 fd78 	bl	800072c <__aeabi_ddiv>
 8007c3c:	f7f8 fefc 	bl	8000a38 <__aeabi_d2iz>
 8007c40:	4607      	mov	r7, r0
 8007c42:	f7f8 fbdf 	bl	8000404 <__aeabi_i2d>
 8007c46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c4a:	f7f8 fc45 	bl	80004d8 <__aeabi_dmul>
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	4620      	mov	r0, r4
 8007c54:	4629      	mov	r1, r5
 8007c56:	f7f8 fa87 	bl	8000168 <__aeabi_dsub>
 8007c5a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8007c5e:	f806 4b01 	strb.w	r4, [r6], #1
 8007c62:	9c06      	ldr	r4, [sp, #24]
 8007c64:	9d07      	ldr	r5, [sp, #28]
 8007c66:	1b34      	subs	r4, r6, r4
 8007c68:	42a5      	cmp	r5, r4
 8007c6a:	4602      	mov	r2, r0
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	d133      	bne.n	8007cd8 <_dtoa_r+0x6c0>
 8007c70:	f7f8 fa7c 	bl	800016c <__adddf3>
 8007c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c78:	4604      	mov	r4, r0
 8007c7a:	460d      	mov	r5, r1
 8007c7c:	f7f8 febc 	bl	80009f8 <__aeabi_dcmpgt>
 8007c80:	b9c0      	cbnz	r0, 8007cb4 <_dtoa_r+0x69c>
 8007c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c86:	4620      	mov	r0, r4
 8007c88:	4629      	mov	r1, r5
 8007c8a:	f7f8 fe8d 	bl	80009a8 <__aeabi_dcmpeq>
 8007c8e:	b108      	cbz	r0, 8007c94 <_dtoa_r+0x67c>
 8007c90:	07fb      	lsls	r3, r7, #31
 8007c92:	d40f      	bmi.n	8007cb4 <_dtoa_r+0x69c>
 8007c94:	4648      	mov	r0, r9
 8007c96:	4641      	mov	r1, r8
 8007c98:	f000 fe8f 	bl	80089ba <_Bfree>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	9803      	ldr	r0, [sp, #12]
 8007ca0:	7033      	strb	r3, [r6, #0]
 8007ca2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	6018      	str	r0, [r3, #0]
 8007ca8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f43f acea 	beq.w	8007684 <_dtoa_r+0x6c>
 8007cb0:	601e      	str	r6, [r3, #0]
 8007cb2:	e4e7      	b.n	8007684 <_dtoa_r+0x6c>
 8007cb4:	9d03      	ldr	r5, [sp, #12]
 8007cb6:	4633      	mov	r3, r6
 8007cb8:	461e      	mov	r6, r3
 8007cba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cbe:	2a39      	cmp	r2, #57	; 0x39
 8007cc0:	d106      	bne.n	8007cd0 <_dtoa_r+0x6b8>
 8007cc2:	9a06      	ldr	r2, [sp, #24]
 8007cc4:	429a      	cmp	r2, r3
 8007cc6:	d1f7      	bne.n	8007cb8 <_dtoa_r+0x6a0>
 8007cc8:	2230      	movs	r2, #48	; 0x30
 8007cca:	9906      	ldr	r1, [sp, #24]
 8007ccc:	3501      	adds	r5, #1
 8007cce:	700a      	strb	r2, [r1, #0]
 8007cd0:	781a      	ldrb	r2, [r3, #0]
 8007cd2:	3201      	adds	r2, #1
 8007cd4:	701a      	strb	r2, [r3, #0]
 8007cd6:	e79c      	b.n	8007c12 <_dtoa_r+0x5fa>
 8007cd8:	4652      	mov	r2, sl
 8007cda:	465b      	mov	r3, fp
 8007cdc:	f7f8 fbfc 	bl	80004d8 <__aeabi_dmul>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	4604      	mov	r4, r0
 8007ce6:	460d      	mov	r5, r1
 8007ce8:	f7f8 fe5e 	bl	80009a8 <__aeabi_dcmpeq>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d09f      	beq.n	8007c30 <_dtoa_r+0x618>
 8007cf0:	e7d0      	b.n	8007c94 <_dtoa_r+0x67c>
 8007cf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007cf4:	2a00      	cmp	r2, #0
 8007cf6:	f000 80cb 	beq.w	8007e90 <_dtoa_r+0x878>
 8007cfa:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007cfc:	2a01      	cmp	r2, #1
 8007cfe:	f300 80ae 	bgt.w	8007e5e <_dtoa_r+0x846>
 8007d02:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007d04:	2a00      	cmp	r2, #0
 8007d06:	f000 80a6 	beq.w	8007e56 <_dtoa_r+0x83e>
 8007d0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007d10:	9e08      	ldr	r6, [sp, #32]
 8007d12:	9a08      	ldr	r2, [sp, #32]
 8007d14:	2101      	movs	r1, #1
 8007d16:	441a      	add	r2, r3
 8007d18:	9208      	str	r2, [sp, #32]
 8007d1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d1c:	4648      	mov	r0, r9
 8007d1e:	441a      	add	r2, r3
 8007d20:	9209      	str	r2, [sp, #36]	; 0x24
 8007d22:	f000 ff35 	bl	8008b90 <__i2b>
 8007d26:	4605      	mov	r5, r0
 8007d28:	2e00      	cmp	r6, #0
 8007d2a:	dd0c      	ble.n	8007d46 <_dtoa_r+0x72e>
 8007d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	dd09      	ble.n	8007d46 <_dtoa_r+0x72e>
 8007d32:	42b3      	cmp	r3, r6
 8007d34:	bfa8      	it	ge
 8007d36:	4633      	movge	r3, r6
 8007d38:	9a08      	ldr	r2, [sp, #32]
 8007d3a:	1af6      	subs	r6, r6, r3
 8007d3c:	1ad2      	subs	r2, r2, r3
 8007d3e:	9208      	str	r2, [sp, #32]
 8007d40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	9309      	str	r3, [sp, #36]	; 0x24
 8007d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d48:	b1f3      	cbz	r3, 8007d88 <_dtoa_r+0x770>
 8007d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 80a3 	beq.w	8007e98 <_dtoa_r+0x880>
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	dd10      	ble.n	8007d78 <_dtoa_r+0x760>
 8007d56:	4629      	mov	r1, r5
 8007d58:	4622      	mov	r2, r4
 8007d5a:	4648      	mov	r0, r9
 8007d5c:	f000 ffd2 	bl	8008d04 <__pow5mult>
 8007d60:	4642      	mov	r2, r8
 8007d62:	4601      	mov	r1, r0
 8007d64:	4605      	mov	r5, r0
 8007d66:	4648      	mov	r0, r9
 8007d68:	f000 ff28 	bl	8008bbc <__multiply>
 8007d6c:	4607      	mov	r7, r0
 8007d6e:	4641      	mov	r1, r8
 8007d70:	4648      	mov	r0, r9
 8007d72:	f000 fe22 	bl	80089ba <_Bfree>
 8007d76:	46b8      	mov	r8, r7
 8007d78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d7a:	1b1a      	subs	r2, r3, r4
 8007d7c:	d004      	beq.n	8007d88 <_dtoa_r+0x770>
 8007d7e:	4641      	mov	r1, r8
 8007d80:	4648      	mov	r0, r9
 8007d82:	f000 ffbf 	bl	8008d04 <__pow5mult>
 8007d86:	4680      	mov	r8, r0
 8007d88:	2101      	movs	r1, #1
 8007d8a:	4648      	mov	r0, r9
 8007d8c:	f000 ff00 	bl	8008b90 <__i2b>
 8007d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d92:	4604      	mov	r4, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f340 8085 	ble.w	8007ea4 <_dtoa_r+0x88c>
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	4601      	mov	r1, r0
 8007d9e:	4648      	mov	r0, r9
 8007da0:	f000 ffb0 	bl	8008d04 <__pow5mult>
 8007da4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007da6:	4604      	mov	r4, r0
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	dd7e      	ble.n	8007eaa <_dtoa_r+0x892>
 8007dac:	2700      	movs	r7, #0
 8007dae:	6923      	ldr	r3, [r4, #16]
 8007db0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007db4:	6918      	ldr	r0, [r3, #16]
 8007db6:	f000 fe9d 	bl	8008af4 <__hi0bits>
 8007dba:	f1c0 0020 	rsb	r0, r0, #32
 8007dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dc0:	4418      	add	r0, r3
 8007dc2:	f010 001f 	ands.w	r0, r0, #31
 8007dc6:	f000 808e 	beq.w	8007ee6 <_dtoa_r+0x8ce>
 8007dca:	f1c0 0320 	rsb	r3, r0, #32
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	f340 8087 	ble.w	8007ee2 <_dtoa_r+0x8ca>
 8007dd4:	f1c0 001c 	rsb	r0, r0, #28
 8007dd8:	9b08      	ldr	r3, [sp, #32]
 8007dda:	4406      	add	r6, r0
 8007ddc:	4403      	add	r3, r0
 8007dde:	9308      	str	r3, [sp, #32]
 8007de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de2:	4403      	add	r3, r0
 8007de4:	9309      	str	r3, [sp, #36]	; 0x24
 8007de6:	9b08      	ldr	r3, [sp, #32]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	dd05      	ble.n	8007df8 <_dtoa_r+0x7e0>
 8007dec:	4641      	mov	r1, r8
 8007dee:	461a      	mov	r2, r3
 8007df0:	4648      	mov	r0, r9
 8007df2:	f000 ffc7 	bl	8008d84 <__lshift>
 8007df6:	4680      	mov	r8, r0
 8007df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	dd05      	ble.n	8007e0a <_dtoa_r+0x7f2>
 8007dfe:	4621      	mov	r1, r4
 8007e00:	461a      	mov	r2, r3
 8007e02:	4648      	mov	r0, r9
 8007e04:	f000 ffbe 	bl	8008d84 <__lshift>
 8007e08:	4604      	mov	r4, r0
 8007e0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d06c      	beq.n	8007eea <_dtoa_r+0x8d2>
 8007e10:	4621      	mov	r1, r4
 8007e12:	4640      	mov	r0, r8
 8007e14:	f001 f822 	bl	8008e5c <__mcmp>
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	da66      	bge.n	8007eea <_dtoa_r+0x8d2>
 8007e1c:	9b03      	ldr	r3, [sp, #12]
 8007e1e:	4641      	mov	r1, r8
 8007e20:	3b01      	subs	r3, #1
 8007e22:	9303      	str	r3, [sp, #12]
 8007e24:	220a      	movs	r2, #10
 8007e26:	2300      	movs	r3, #0
 8007e28:	4648      	mov	r0, r9
 8007e2a:	f000 fdcf 	bl	80089cc <__multadd>
 8007e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e30:	4680      	mov	r8, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	f000 819f 	beq.w	8008176 <_dtoa_r+0xb5e>
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	220a      	movs	r2, #10
 8007e3e:	4648      	mov	r0, r9
 8007e40:	f000 fdc4 	bl	80089cc <__multadd>
 8007e44:	9b04      	ldr	r3, [sp, #16]
 8007e46:	4605      	mov	r5, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f300 8089 	bgt.w	8007f60 <_dtoa_r+0x948>
 8007e4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	dc52      	bgt.n	8007efa <_dtoa_r+0x8e2>
 8007e54:	e084      	b.n	8007f60 <_dtoa_r+0x948>
 8007e56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e5c:	e757      	b.n	8007d0e <_dtoa_r+0x6f6>
 8007e5e:	9b07      	ldr	r3, [sp, #28]
 8007e60:	1e5c      	subs	r4, r3, #1
 8007e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e64:	42a3      	cmp	r3, r4
 8007e66:	bfb7      	itett	lt
 8007e68:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007e6a:	1b1c      	subge	r4, r3, r4
 8007e6c:	1ae2      	sublt	r2, r4, r3
 8007e6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007e70:	bfbe      	ittt	lt
 8007e72:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007e74:	189b      	addlt	r3, r3, r2
 8007e76:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007e78:	9b07      	ldr	r3, [sp, #28]
 8007e7a:	bfb8      	it	lt
 8007e7c:	2400      	movlt	r4, #0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfb7      	itett	lt
 8007e82:	e9dd 2307 	ldrdlt	r2, r3, [sp, #28]
 8007e86:	e9dd 3607 	ldrdge	r3, r6, [sp, #28]
 8007e8a:	1a9e      	sublt	r6, r3, r2
 8007e8c:	2300      	movlt	r3, #0
 8007e8e:	e740      	b.n	8007d12 <_dtoa_r+0x6fa>
 8007e90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007e92:	9e08      	ldr	r6, [sp, #32]
 8007e94:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8007e96:	e747      	b.n	8007d28 <_dtoa_r+0x710>
 8007e98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e9a:	e770      	b.n	8007d7e <_dtoa_r+0x766>
 8007e9c:	3fe00000 	.word	0x3fe00000
 8007ea0:	40240000 	.word	0x40240000
 8007ea4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	dc17      	bgt.n	8007eda <_dtoa_r+0x8c2>
 8007eaa:	f1ba 0f00 	cmp.w	sl, #0
 8007eae:	d114      	bne.n	8007eda <_dtoa_r+0x8c2>
 8007eb0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007eb4:	b99b      	cbnz	r3, 8007ede <_dtoa_r+0x8c6>
 8007eb6:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 8007eba:	0d3f      	lsrs	r7, r7, #20
 8007ebc:	053f      	lsls	r7, r7, #20
 8007ebe:	b137      	cbz	r7, 8007ece <_dtoa_r+0x8b6>
 8007ec0:	2701      	movs	r7, #1
 8007ec2:	9b08      	ldr	r3, [sp, #32]
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	9308      	str	r3, [sp, #32]
 8007ec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eca:	3301      	adds	r3, #1
 8007ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8007ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f47f af6c 	bne.w	8007dae <_dtoa_r+0x796>
 8007ed6:	2001      	movs	r0, #1
 8007ed8:	e771      	b.n	8007dbe <_dtoa_r+0x7a6>
 8007eda:	2700      	movs	r7, #0
 8007edc:	e7f7      	b.n	8007ece <_dtoa_r+0x8b6>
 8007ede:	4657      	mov	r7, sl
 8007ee0:	e7f5      	b.n	8007ece <_dtoa_r+0x8b6>
 8007ee2:	d080      	beq.n	8007de6 <_dtoa_r+0x7ce>
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	301c      	adds	r0, #28
 8007ee8:	e776      	b.n	8007dd8 <_dtoa_r+0x7c0>
 8007eea:	9b07      	ldr	r3, [sp, #28]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	dc31      	bgt.n	8007f54 <_dtoa_r+0x93c>
 8007ef0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	dd2e      	ble.n	8007f54 <_dtoa_r+0x93c>
 8007ef6:	9b07      	ldr	r3, [sp, #28]
 8007ef8:	9304      	str	r3, [sp, #16]
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	b963      	cbnz	r3, 8007f18 <_dtoa_r+0x900>
 8007efe:	4621      	mov	r1, r4
 8007f00:	2205      	movs	r2, #5
 8007f02:	4648      	mov	r0, r9
 8007f04:	f000 fd62 	bl	80089cc <__multadd>
 8007f08:	4601      	mov	r1, r0
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4640      	mov	r0, r8
 8007f0e:	f000 ffa5 	bl	8008e5c <__mcmp>
 8007f12:	2800      	cmp	r0, #0
 8007f14:	f73f adc4 	bgt.w	8007aa0 <_dtoa_r+0x488>
 8007f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007f1a:	9e06      	ldr	r6, [sp, #24]
 8007f1c:	43db      	mvns	r3, r3
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	2700      	movs	r7, #0
 8007f22:	4621      	mov	r1, r4
 8007f24:	4648      	mov	r0, r9
 8007f26:	f000 fd48 	bl	80089ba <_Bfree>
 8007f2a:	2d00      	cmp	r5, #0
 8007f2c:	f43f aeb2 	beq.w	8007c94 <_dtoa_r+0x67c>
 8007f30:	b12f      	cbz	r7, 8007f3e <_dtoa_r+0x926>
 8007f32:	42af      	cmp	r7, r5
 8007f34:	d003      	beq.n	8007f3e <_dtoa_r+0x926>
 8007f36:	4639      	mov	r1, r7
 8007f38:	4648      	mov	r0, r9
 8007f3a:	f000 fd3e 	bl	80089ba <_Bfree>
 8007f3e:	4629      	mov	r1, r5
 8007f40:	4648      	mov	r0, r9
 8007f42:	f000 fd3a 	bl	80089ba <_Bfree>
 8007f46:	e6a5      	b.n	8007c94 <_dtoa_r+0x67c>
 8007f48:	2400      	movs	r4, #0
 8007f4a:	4625      	mov	r5, r4
 8007f4c:	e7e4      	b.n	8007f18 <_dtoa_r+0x900>
 8007f4e:	9503      	str	r5, [sp, #12]
 8007f50:	4625      	mov	r5, r4
 8007f52:	e5a5      	b.n	8007aa0 <_dtoa_r+0x488>
 8007f54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	f000 80c4 	beq.w	80080e4 <_dtoa_r+0xacc>
 8007f5c:	9b07      	ldr	r3, [sp, #28]
 8007f5e:	9304      	str	r3, [sp, #16]
 8007f60:	2e00      	cmp	r6, #0
 8007f62:	dd05      	ble.n	8007f70 <_dtoa_r+0x958>
 8007f64:	4629      	mov	r1, r5
 8007f66:	4632      	mov	r2, r6
 8007f68:	4648      	mov	r0, r9
 8007f6a:	f000 ff0b 	bl	8008d84 <__lshift>
 8007f6e:	4605      	mov	r5, r0
 8007f70:	2f00      	cmp	r7, #0
 8007f72:	d058      	beq.n	8008026 <_dtoa_r+0xa0e>
 8007f74:	4648      	mov	r0, r9
 8007f76:	6869      	ldr	r1, [r5, #4]
 8007f78:	f000 fcfa 	bl	8008970 <_Balloc>
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	b920      	cbnz	r0, 8007f8a <_dtoa_r+0x972>
 8007f80:	4602      	mov	r2, r0
 8007f82:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007f86:	4b80      	ldr	r3, [pc, #512]	; (8008188 <_dtoa_r+0xb70>)
 8007f88:	e47f      	b.n	800788a <_dtoa_r+0x272>
 8007f8a:	692a      	ldr	r2, [r5, #16]
 8007f8c:	f105 010c 	add.w	r1, r5, #12
 8007f90:	3202      	adds	r2, #2
 8007f92:	0092      	lsls	r2, r2, #2
 8007f94:	300c      	adds	r0, #12
 8007f96:	f7fc fea5 	bl	8004ce4 <memcpy>
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	4631      	mov	r1, r6
 8007f9e:	4648      	mov	r0, r9
 8007fa0:	f000 fef0 	bl	8008d84 <__lshift>
 8007fa4:	462f      	mov	r7, r5
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	9b06      	ldr	r3, [sp, #24]
 8007faa:	9a06      	ldr	r2, [sp, #24]
 8007fac:	3301      	adds	r3, #1
 8007fae:	9307      	str	r3, [sp, #28]
 8007fb0:	9b04      	ldr	r3, [sp, #16]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb6:	f00a 0301 	and.w	r3, sl, #1
 8007fba:	9309      	str	r3, [sp, #36]	; 0x24
 8007fbc:	9b07      	ldr	r3, [sp, #28]
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	f103 3bff 	add.w	fp, r3, #4294967295
 8007fc6:	f7ff fa99 	bl	80074fc <quorem>
 8007fca:	4639      	mov	r1, r7
 8007fcc:	9004      	str	r0, [sp, #16]
 8007fce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	f000 ff42 	bl	8008e5c <__mcmp>
 8007fd8:	462a      	mov	r2, r5
 8007fda:	9008      	str	r0, [sp, #32]
 8007fdc:	4621      	mov	r1, r4
 8007fde:	4648      	mov	r0, r9
 8007fe0:	f000 ff58 	bl	8008e94 <__mdiff>
 8007fe4:	68c2      	ldr	r2, [r0, #12]
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	b9fa      	cbnz	r2, 800802a <_dtoa_r+0xa12>
 8007fea:	4601      	mov	r1, r0
 8007fec:	4640      	mov	r0, r8
 8007fee:	f000 ff35 	bl	8008e5c <__mcmp>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	4631      	mov	r1, r6
 8007ff6:	4648      	mov	r0, r9
 8007ff8:	920b      	str	r2, [sp, #44]	; 0x2c
 8007ffa:	f000 fcde 	bl	80089ba <_Bfree>
 8007ffe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008000:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008002:	9e07      	ldr	r6, [sp, #28]
 8008004:	ea43 0102 	orr.w	r1, r3, r2
 8008008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800800a:	430b      	orrs	r3, r1
 800800c:	d10f      	bne.n	800802e <_dtoa_r+0xa16>
 800800e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008012:	d028      	beq.n	8008066 <_dtoa_r+0xa4e>
 8008014:	9b08      	ldr	r3, [sp, #32]
 8008016:	2b00      	cmp	r3, #0
 8008018:	dd02      	ble.n	8008020 <_dtoa_r+0xa08>
 800801a:	9b04      	ldr	r3, [sp, #16]
 800801c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008020:	f88b a000 	strb.w	sl, [fp]
 8008024:	e77d      	b.n	8007f22 <_dtoa_r+0x90a>
 8008026:	4628      	mov	r0, r5
 8008028:	e7bc      	b.n	8007fa4 <_dtoa_r+0x98c>
 800802a:	2201      	movs	r2, #1
 800802c:	e7e2      	b.n	8007ff4 <_dtoa_r+0x9dc>
 800802e:	9b08      	ldr	r3, [sp, #32]
 8008030:	2b00      	cmp	r3, #0
 8008032:	db04      	blt.n	800803e <_dtoa_r+0xa26>
 8008034:	9920      	ldr	r1, [sp, #128]	; 0x80
 8008036:	430b      	orrs	r3, r1
 8008038:	9909      	ldr	r1, [sp, #36]	; 0x24
 800803a:	430b      	orrs	r3, r1
 800803c:	d120      	bne.n	8008080 <_dtoa_r+0xa68>
 800803e:	2a00      	cmp	r2, #0
 8008040:	ddee      	ble.n	8008020 <_dtoa_r+0xa08>
 8008042:	4641      	mov	r1, r8
 8008044:	2201      	movs	r2, #1
 8008046:	4648      	mov	r0, r9
 8008048:	f000 fe9c 	bl	8008d84 <__lshift>
 800804c:	4621      	mov	r1, r4
 800804e:	4680      	mov	r8, r0
 8008050:	f000 ff04 	bl	8008e5c <__mcmp>
 8008054:	2800      	cmp	r0, #0
 8008056:	dc03      	bgt.n	8008060 <_dtoa_r+0xa48>
 8008058:	d1e2      	bne.n	8008020 <_dtoa_r+0xa08>
 800805a:	f01a 0f01 	tst.w	sl, #1
 800805e:	d0df      	beq.n	8008020 <_dtoa_r+0xa08>
 8008060:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008064:	d1d9      	bne.n	800801a <_dtoa_r+0xa02>
 8008066:	2339      	movs	r3, #57	; 0x39
 8008068:	f88b 3000 	strb.w	r3, [fp]
 800806c:	4633      	mov	r3, r6
 800806e:	461e      	mov	r6, r3
 8008070:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008074:	3b01      	subs	r3, #1
 8008076:	2a39      	cmp	r2, #57	; 0x39
 8008078:	d06a      	beq.n	8008150 <_dtoa_r+0xb38>
 800807a:	3201      	adds	r2, #1
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	e750      	b.n	8007f22 <_dtoa_r+0x90a>
 8008080:	2a00      	cmp	r2, #0
 8008082:	dd07      	ble.n	8008094 <_dtoa_r+0xa7c>
 8008084:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008088:	d0ed      	beq.n	8008066 <_dtoa_r+0xa4e>
 800808a:	f10a 0301 	add.w	r3, sl, #1
 800808e:	f88b 3000 	strb.w	r3, [fp]
 8008092:	e746      	b.n	8007f22 <_dtoa_r+0x90a>
 8008094:	9b07      	ldr	r3, [sp, #28]
 8008096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008098:	f803 ac01 	strb.w	sl, [r3, #-1]
 800809c:	4293      	cmp	r3, r2
 800809e:	d041      	beq.n	8008124 <_dtoa_r+0xb0c>
 80080a0:	4641      	mov	r1, r8
 80080a2:	2300      	movs	r3, #0
 80080a4:	220a      	movs	r2, #10
 80080a6:	4648      	mov	r0, r9
 80080a8:	f000 fc90 	bl	80089cc <__multadd>
 80080ac:	42af      	cmp	r7, r5
 80080ae:	4680      	mov	r8, r0
 80080b0:	f04f 0300 	mov.w	r3, #0
 80080b4:	f04f 020a 	mov.w	r2, #10
 80080b8:	4639      	mov	r1, r7
 80080ba:	4648      	mov	r0, r9
 80080bc:	d107      	bne.n	80080ce <_dtoa_r+0xab6>
 80080be:	f000 fc85 	bl	80089cc <__multadd>
 80080c2:	4607      	mov	r7, r0
 80080c4:	4605      	mov	r5, r0
 80080c6:	9b07      	ldr	r3, [sp, #28]
 80080c8:	3301      	adds	r3, #1
 80080ca:	9307      	str	r3, [sp, #28]
 80080cc:	e776      	b.n	8007fbc <_dtoa_r+0x9a4>
 80080ce:	f000 fc7d 	bl	80089cc <__multadd>
 80080d2:	4629      	mov	r1, r5
 80080d4:	4607      	mov	r7, r0
 80080d6:	2300      	movs	r3, #0
 80080d8:	220a      	movs	r2, #10
 80080da:	4648      	mov	r0, r9
 80080dc:	f000 fc76 	bl	80089cc <__multadd>
 80080e0:	4605      	mov	r5, r0
 80080e2:	e7f0      	b.n	80080c6 <_dtoa_r+0xaae>
 80080e4:	9b07      	ldr	r3, [sp, #28]
 80080e6:	9304      	str	r3, [sp, #16]
 80080e8:	9e06      	ldr	r6, [sp, #24]
 80080ea:	4621      	mov	r1, r4
 80080ec:	4640      	mov	r0, r8
 80080ee:	f7ff fa05 	bl	80074fc <quorem>
 80080f2:	9b06      	ldr	r3, [sp, #24]
 80080f4:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080f8:	f806 ab01 	strb.w	sl, [r6], #1
 80080fc:	1af2      	subs	r2, r6, r3
 80080fe:	9b04      	ldr	r3, [sp, #16]
 8008100:	4293      	cmp	r3, r2
 8008102:	dd07      	ble.n	8008114 <_dtoa_r+0xafc>
 8008104:	4641      	mov	r1, r8
 8008106:	2300      	movs	r3, #0
 8008108:	220a      	movs	r2, #10
 800810a:	4648      	mov	r0, r9
 800810c:	f000 fc5e 	bl	80089cc <__multadd>
 8008110:	4680      	mov	r8, r0
 8008112:	e7ea      	b.n	80080ea <_dtoa_r+0xad2>
 8008114:	9b04      	ldr	r3, [sp, #16]
 8008116:	2700      	movs	r7, #0
 8008118:	2b00      	cmp	r3, #0
 800811a:	bfcc      	ite	gt
 800811c:	461e      	movgt	r6, r3
 800811e:	2601      	movle	r6, #1
 8008120:	9b06      	ldr	r3, [sp, #24]
 8008122:	441e      	add	r6, r3
 8008124:	4641      	mov	r1, r8
 8008126:	2201      	movs	r2, #1
 8008128:	4648      	mov	r0, r9
 800812a:	f000 fe2b 	bl	8008d84 <__lshift>
 800812e:	4621      	mov	r1, r4
 8008130:	4680      	mov	r8, r0
 8008132:	f000 fe93 	bl	8008e5c <__mcmp>
 8008136:	2800      	cmp	r0, #0
 8008138:	dc98      	bgt.n	800806c <_dtoa_r+0xa54>
 800813a:	d102      	bne.n	8008142 <_dtoa_r+0xb2a>
 800813c:	f01a 0f01 	tst.w	sl, #1
 8008140:	d194      	bne.n	800806c <_dtoa_r+0xa54>
 8008142:	4633      	mov	r3, r6
 8008144:	461e      	mov	r6, r3
 8008146:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800814a:	2a30      	cmp	r2, #48	; 0x30
 800814c:	d0fa      	beq.n	8008144 <_dtoa_r+0xb2c>
 800814e:	e6e8      	b.n	8007f22 <_dtoa_r+0x90a>
 8008150:	9a06      	ldr	r2, [sp, #24]
 8008152:	429a      	cmp	r2, r3
 8008154:	d18b      	bne.n	800806e <_dtoa_r+0xa56>
 8008156:	9b03      	ldr	r3, [sp, #12]
 8008158:	3301      	adds	r3, #1
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	2331      	movs	r3, #49	; 0x31
 800815e:	7013      	strb	r3, [r2, #0]
 8008160:	e6df      	b.n	8007f22 <_dtoa_r+0x90a>
 8008162:	4b0a      	ldr	r3, [pc, #40]	; (800818c <_dtoa_r+0xb74>)
 8008164:	f7ff baaa 	b.w	80076bc <_dtoa_r+0xa4>
 8008168:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800816a:	2b00      	cmp	r3, #0
 800816c:	f47f aa8e 	bne.w	800768c <_dtoa_r+0x74>
 8008170:	4b07      	ldr	r3, [pc, #28]	; (8008190 <_dtoa_r+0xb78>)
 8008172:	f7ff baa3 	b.w	80076bc <_dtoa_r+0xa4>
 8008176:	9b04      	ldr	r3, [sp, #16]
 8008178:	2b00      	cmp	r3, #0
 800817a:	dcb5      	bgt.n	80080e8 <_dtoa_r+0xad0>
 800817c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800817e:	2b02      	cmp	r3, #2
 8008180:	f73f aebb 	bgt.w	8007efa <_dtoa_r+0x8e2>
 8008184:	e7b0      	b.n	80080e8 <_dtoa_r+0xad0>
 8008186:	bf00      	nop
 8008188:	0800c956 	.word	0x0800c956
 800818c:	0800c7fe 	.word	0x0800c7fe
 8008190:	0800c94d 	.word	0x0800c94d

08008194 <__libc_fini_array>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d07      	ldr	r5, [pc, #28]	; (80081b4 <__libc_fini_array+0x20>)
 8008198:	4c07      	ldr	r4, [pc, #28]	; (80081b8 <__libc_fini_array+0x24>)
 800819a:	1b64      	subs	r4, r4, r5
 800819c:	10a4      	asrs	r4, r4, #2
 800819e:	b91c      	cbnz	r4, 80081a8 <__libc_fini_array+0x14>
 80081a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081a4:	f004 ba6a 	b.w	800c67c <_fini>
 80081a8:	3c01      	subs	r4, #1
 80081aa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80081ae:	4798      	blx	r3
 80081b0:	e7f5      	b.n	800819e <__libc_fini_array+0xa>
 80081b2:	bf00      	nop
 80081b4:	0800cc60 	.word	0x0800cc60
 80081b8:	0800cc64 	.word	0x0800cc64

080081bc <_malloc_trim_r>:
 80081bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081c0:	4606      	mov	r6, r0
 80081c2:	2008      	movs	r0, #8
 80081c4:	460c      	mov	r4, r1
 80081c6:	f002 fbf8 	bl	800a9ba <sysconf>
 80081ca:	4680      	mov	r8, r0
 80081cc:	4f22      	ldr	r7, [pc, #136]	; (8008258 <_malloc_trim_r+0x9c>)
 80081ce:	4630      	mov	r0, r6
 80081d0:	f000 fbc2 	bl	8008958 <__malloc_lock>
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	685d      	ldr	r5, [r3, #4]
 80081d8:	f025 0503 	bic.w	r5, r5, #3
 80081dc:	1b2c      	subs	r4, r5, r4
 80081de:	3c11      	subs	r4, #17
 80081e0:	4444      	add	r4, r8
 80081e2:	fbb4 f4f8 	udiv	r4, r4, r8
 80081e6:	3c01      	subs	r4, #1
 80081e8:	fb08 f404 	mul.w	r4, r8, r4
 80081ec:	45a0      	cmp	r8, r4
 80081ee:	dd05      	ble.n	80081fc <_malloc_trim_r+0x40>
 80081f0:	4630      	mov	r0, r6
 80081f2:	f000 fbb7 	bl	8008964 <__malloc_unlock>
 80081f6:	2000      	movs	r0, #0
 80081f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081fc:	2100      	movs	r1, #0
 80081fe:	4630      	mov	r0, r6
 8008200:	f001 fa18 	bl	8009634 <_sbrk_r>
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	442b      	add	r3, r5
 8008208:	4298      	cmp	r0, r3
 800820a:	d1f1      	bne.n	80081f0 <_malloc_trim_r+0x34>
 800820c:	4630      	mov	r0, r6
 800820e:	4261      	negs	r1, r4
 8008210:	f001 fa10 	bl	8009634 <_sbrk_r>
 8008214:	3001      	adds	r0, #1
 8008216:	d110      	bne.n	800823a <_malloc_trim_r+0x7e>
 8008218:	2100      	movs	r1, #0
 800821a:	4630      	mov	r0, r6
 800821c:	f001 fa0a 	bl	8009634 <_sbrk_r>
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	1a83      	subs	r3, r0, r2
 8008224:	2b0f      	cmp	r3, #15
 8008226:	dde3      	ble.n	80081f0 <_malloc_trim_r+0x34>
 8008228:	490c      	ldr	r1, [pc, #48]	; (800825c <_malloc_trim_r+0xa0>)
 800822a:	f043 0301 	orr.w	r3, r3, #1
 800822e:	6809      	ldr	r1, [r1, #0]
 8008230:	6053      	str	r3, [r2, #4]
 8008232:	1a40      	subs	r0, r0, r1
 8008234:	490a      	ldr	r1, [pc, #40]	; (8008260 <_malloc_trim_r+0xa4>)
 8008236:	6008      	str	r0, [r1, #0]
 8008238:	e7da      	b.n	80081f0 <_malloc_trim_r+0x34>
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	4a08      	ldr	r2, [pc, #32]	; (8008260 <_malloc_trim_r+0xa4>)
 800823e:	1b2d      	subs	r5, r5, r4
 8008240:	f045 0501 	orr.w	r5, r5, #1
 8008244:	605d      	str	r5, [r3, #4]
 8008246:	6813      	ldr	r3, [r2, #0]
 8008248:	4630      	mov	r0, r6
 800824a:	1b1c      	subs	r4, r3, r4
 800824c:	6014      	str	r4, [r2, #0]
 800824e:	f000 fb89 	bl	8008964 <__malloc_unlock>
 8008252:	2001      	movs	r0, #1
 8008254:	e7d0      	b.n	80081f8 <_malloc_trim_r+0x3c>
 8008256:	bf00      	nop
 8008258:	20000608 	.word	0x20000608
 800825c:	20000a10 	.word	0x20000a10
 8008260:	20001a34 	.word	0x20001a34

08008264 <_free_r>:
 8008264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008266:	4605      	mov	r5, r0
 8008268:	460f      	mov	r7, r1
 800826a:	2900      	cmp	r1, #0
 800826c:	f000 80b1 	beq.w	80083d2 <_free_r+0x16e>
 8008270:	f000 fb72 	bl	8008958 <__malloc_lock>
 8008274:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008278:	4856      	ldr	r0, [pc, #344]	; (80083d4 <_free_r+0x170>)
 800827a:	f022 0401 	bic.w	r4, r2, #1
 800827e:	f1a7 0308 	sub.w	r3, r7, #8
 8008282:	eb03 0c04 	add.w	ip, r3, r4
 8008286:	6881      	ldr	r1, [r0, #8]
 8008288:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800828c:	4561      	cmp	r1, ip
 800828e:	f026 0603 	bic.w	r6, r6, #3
 8008292:	f002 0201 	and.w	r2, r2, #1
 8008296:	d11b      	bne.n	80082d0 <_free_r+0x6c>
 8008298:	4434      	add	r4, r6
 800829a:	b93a      	cbnz	r2, 80082ac <_free_r+0x48>
 800829c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80082a0:	1a9b      	subs	r3, r3, r2
 80082a2:	4414      	add	r4, r2
 80082a4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 80082a8:	60ca      	str	r2, [r1, #12]
 80082aa:	6091      	str	r1, [r2, #8]
 80082ac:	f044 0201 	orr.w	r2, r4, #1
 80082b0:	605a      	str	r2, [r3, #4]
 80082b2:	6083      	str	r3, [r0, #8]
 80082b4:	4b48      	ldr	r3, [pc, #288]	; (80083d8 <_free_r+0x174>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	42a3      	cmp	r3, r4
 80082ba:	d804      	bhi.n	80082c6 <_free_r+0x62>
 80082bc:	4b47      	ldr	r3, [pc, #284]	; (80083dc <_free_r+0x178>)
 80082be:	4628      	mov	r0, r5
 80082c0:	6819      	ldr	r1, [r3, #0]
 80082c2:	f7ff ff7b 	bl	80081bc <_malloc_trim_r>
 80082c6:	4628      	mov	r0, r5
 80082c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082cc:	f000 bb4a 	b.w	8008964 <__malloc_unlock>
 80082d0:	f8cc 6004 	str.w	r6, [ip, #4]
 80082d4:	2a00      	cmp	r2, #0
 80082d6:	d138      	bne.n	800834a <_free_r+0xe6>
 80082d8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 80082dc:	f100 0708 	add.w	r7, r0, #8
 80082e0:	1a5b      	subs	r3, r3, r1
 80082e2:	440c      	add	r4, r1
 80082e4:	6899      	ldr	r1, [r3, #8]
 80082e6:	42b9      	cmp	r1, r7
 80082e8:	d031      	beq.n	800834e <_free_r+0xea>
 80082ea:	68df      	ldr	r7, [r3, #12]
 80082ec:	60cf      	str	r7, [r1, #12]
 80082ee:	60b9      	str	r1, [r7, #8]
 80082f0:	eb0c 0106 	add.w	r1, ip, r6
 80082f4:	6849      	ldr	r1, [r1, #4]
 80082f6:	07c9      	lsls	r1, r1, #31
 80082f8:	d40b      	bmi.n	8008312 <_free_r+0xae>
 80082fa:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80082fe:	4434      	add	r4, r6
 8008300:	bb3a      	cbnz	r2, 8008352 <_free_r+0xee>
 8008302:	4e37      	ldr	r6, [pc, #220]	; (80083e0 <_free_r+0x17c>)
 8008304:	42b1      	cmp	r1, r6
 8008306:	d124      	bne.n	8008352 <_free_r+0xee>
 8008308:	2201      	movs	r2, #1
 800830a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800830e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008312:	f044 0101 	orr.w	r1, r4, #1
 8008316:	6059      	str	r1, [r3, #4]
 8008318:	511c      	str	r4, [r3, r4]
 800831a:	2a00      	cmp	r2, #0
 800831c:	d1d3      	bne.n	80082c6 <_free_r+0x62>
 800831e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8008322:	d21b      	bcs.n	800835c <_free_r+0xf8>
 8008324:	0961      	lsrs	r1, r4, #5
 8008326:	08e2      	lsrs	r2, r4, #3
 8008328:	2401      	movs	r4, #1
 800832a:	408c      	lsls	r4, r1
 800832c:	6841      	ldr	r1, [r0, #4]
 800832e:	3201      	adds	r2, #1
 8008330:	430c      	orrs	r4, r1
 8008332:	6044      	str	r4, [r0, #4]
 8008334:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8008338:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800833c:	3908      	subs	r1, #8
 800833e:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8008342:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8008346:	60e3      	str	r3, [r4, #12]
 8008348:	e7bd      	b.n	80082c6 <_free_r+0x62>
 800834a:	2200      	movs	r2, #0
 800834c:	e7d0      	b.n	80082f0 <_free_r+0x8c>
 800834e:	2201      	movs	r2, #1
 8008350:	e7ce      	b.n	80082f0 <_free_r+0x8c>
 8008352:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8008356:	60ce      	str	r6, [r1, #12]
 8008358:	60b1      	str	r1, [r6, #8]
 800835a:	e7da      	b.n	8008312 <_free_r+0xae>
 800835c:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8008360:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8008364:	d214      	bcs.n	8008390 <_free_r+0x12c>
 8008366:	09a2      	lsrs	r2, r4, #6
 8008368:	3238      	adds	r2, #56	; 0x38
 800836a:	1c51      	adds	r1, r2, #1
 800836c:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8008370:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8008374:	428e      	cmp	r6, r1
 8008376:	d125      	bne.n	80083c4 <_free_r+0x160>
 8008378:	2401      	movs	r4, #1
 800837a:	1092      	asrs	r2, r2, #2
 800837c:	fa04 f202 	lsl.w	r2, r4, r2
 8008380:	6844      	ldr	r4, [r0, #4]
 8008382:	4322      	orrs	r2, r4
 8008384:	6042      	str	r2, [r0, #4]
 8008386:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800838a:	60b3      	str	r3, [r6, #8]
 800838c:	60cb      	str	r3, [r1, #12]
 800838e:	e79a      	b.n	80082c6 <_free_r+0x62>
 8008390:	2a14      	cmp	r2, #20
 8008392:	d801      	bhi.n	8008398 <_free_r+0x134>
 8008394:	325b      	adds	r2, #91	; 0x5b
 8008396:	e7e8      	b.n	800836a <_free_r+0x106>
 8008398:	2a54      	cmp	r2, #84	; 0x54
 800839a:	d802      	bhi.n	80083a2 <_free_r+0x13e>
 800839c:	0b22      	lsrs	r2, r4, #12
 800839e:	326e      	adds	r2, #110	; 0x6e
 80083a0:	e7e3      	b.n	800836a <_free_r+0x106>
 80083a2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80083a6:	d802      	bhi.n	80083ae <_free_r+0x14a>
 80083a8:	0be2      	lsrs	r2, r4, #15
 80083aa:	3277      	adds	r2, #119	; 0x77
 80083ac:	e7dd      	b.n	800836a <_free_r+0x106>
 80083ae:	f240 5154 	movw	r1, #1364	; 0x554
 80083b2:	428a      	cmp	r2, r1
 80083b4:	bf96      	itet	ls
 80083b6:	0ca2      	lsrls	r2, r4, #18
 80083b8:	227e      	movhi	r2, #126	; 0x7e
 80083ba:	327c      	addls	r2, #124	; 0x7c
 80083bc:	e7d5      	b.n	800836a <_free_r+0x106>
 80083be:	6889      	ldr	r1, [r1, #8]
 80083c0:	428e      	cmp	r6, r1
 80083c2:	d004      	beq.n	80083ce <_free_r+0x16a>
 80083c4:	684a      	ldr	r2, [r1, #4]
 80083c6:	f022 0203 	bic.w	r2, r2, #3
 80083ca:	42a2      	cmp	r2, r4
 80083cc:	d8f7      	bhi.n	80083be <_free_r+0x15a>
 80083ce:	68ce      	ldr	r6, [r1, #12]
 80083d0:	e7d9      	b.n	8008386 <_free_r+0x122>
 80083d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083d4:	20000608 	.word	0x20000608
 80083d8:	20000a14 	.word	0x20000a14
 80083dc:	20001a64 	.word	0x20001a64
 80083e0:	20000610 	.word	0x20000610

080083e4 <iswspace>:
 80083e4:	2100      	movs	r1, #0
 80083e6:	f000 b801 	b.w	80083ec <iswspace_l>
	...

080083ec <iswspace_l>:
 80083ec:	28ff      	cmp	r0, #255	; 0xff
 80083ee:	bf9d      	ittte	ls
 80083f0:	4b02      	ldrls	r3, [pc, #8]	; (80083fc <iswspace_l+0x10>)
 80083f2:	5cc0      	ldrbls	r0, [r0, r3]
 80083f4:	f000 0008 	andls.w	r0, r0, #8
 80083f8:	2000      	movhi	r0, #0
 80083fa:	4770      	bx	lr
 80083fc:	0800c849 	.word	0x0800c849

08008400 <__locale_mb_cur_max>:
 8008400:	4b01      	ldr	r3, [pc, #4]	; (8008408 <__locale_mb_cur_max+0x8>)
 8008402:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8008406:	4770      	bx	lr
 8008408:	2000049c 	.word	0x2000049c

0800840c <_localeconv_r>:
 800840c:	4800      	ldr	r0, [pc, #0]	; (8008410 <_localeconv_r+0x4>)
 800840e:	4770      	bx	lr
 8008410:	2000058c 	.word	0x2000058c

08008414 <__retarget_lock_init_recursive>:
 8008414:	4770      	bx	lr

08008416 <__retarget_lock_close_recursive>:
 8008416:	4770      	bx	lr

08008418 <__retarget_lock_acquire_recursive>:
 8008418:	4770      	bx	lr

0800841a <__retarget_lock_release_recursive>:
 800841a:	4770      	bx	lr

0800841c <_lseek_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4604      	mov	r4, r0
 8008420:	4608      	mov	r0, r1
 8008422:	4611      	mov	r1, r2
 8008424:	2200      	movs	r2, #0
 8008426:	4d05      	ldr	r5, [pc, #20]	; (800843c <_lseek_r+0x20>)
 8008428:	602a      	str	r2, [r5, #0]
 800842a:	461a      	mov	r2, r3
 800842c:	f7f9 fada 	bl	80019e4 <_lseek>
 8008430:	1c43      	adds	r3, r0, #1
 8008432:	d102      	bne.n	800843a <_lseek_r+0x1e>
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	b103      	cbz	r3, 800843a <_lseek_r+0x1e>
 8008438:	6023      	str	r3, [r4, #0]
 800843a:	bd38      	pop	{r3, r4, r5, pc}
 800843c:	20001c54 	.word	0x20001c54

08008440 <malloc>:
 8008440:	4b02      	ldr	r3, [pc, #8]	; (800844c <malloc+0xc>)
 8008442:	4601      	mov	r1, r0
 8008444:	6818      	ldr	r0, [r3, #0]
 8008446:	f000 b80b 	b.w	8008460 <_malloc_r>
 800844a:	bf00      	nop
 800844c:	20000068 	.word	0x20000068

08008450 <free>:
 8008450:	4b02      	ldr	r3, [pc, #8]	; (800845c <free+0xc>)
 8008452:	4601      	mov	r1, r0
 8008454:	6818      	ldr	r0, [r3, #0]
 8008456:	f7ff bf05 	b.w	8008264 <_free_r>
 800845a:	bf00      	nop
 800845c:	20000068 	.word	0x20000068

08008460 <_malloc_r>:
 8008460:	f101 030b 	add.w	r3, r1, #11
 8008464:	2b16      	cmp	r3, #22
 8008466:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800846a:	4605      	mov	r5, r0
 800846c:	d906      	bls.n	800847c <_malloc_r+0x1c>
 800846e:	f033 0707 	bics.w	r7, r3, #7
 8008472:	d504      	bpl.n	800847e <_malloc_r+0x1e>
 8008474:	230c      	movs	r3, #12
 8008476:	602b      	str	r3, [r5, #0]
 8008478:	2400      	movs	r4, #0
 800847a:	e1ae      	b.n	80087da <_malloc_r+0x37a>
 800847c:	2710      	movs	r7, #16
 800847e:	42b9      	cmp	r1, r7
 8008480:	d8f8      	bhi.n	8008474 <_malloc_r+0x14>
 8008482:	4628      	mov	r0, r5
 8008484:	f000 fa68 	bl	8008958 <__malloc_lock>
 8008488:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 800848c:	4ec3      	ldr	r6, [pc, #780]	; (800879c <_malloc_r+0x33c>)
 800848e:	d238      	bcs.n	8008502 <_malloc_r+0xa2>
 8008490:	f107 0208 	add.w	r2, r7, #8
 8008494:	4432      	add	r2, r6
 8008496:	6854      	ldr	r4, [r2, #4]
 8008498:	f1a2 0108 	sub.w	r1, r2, #8
 800849c:	428c      	cmp	r4, r1
 800849e:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80084a2:	d102      	bne.n	80084aa <_malloc_r+0x4a>
 80084a4:	68d4      	ldr	r4, [r2, #12]
 80084a6:	42a2      	cmp	r2, r4
 80084a8:	d010      	beq.n	80084cc <_malloc_r+0x6c>
 80084aa:	6863      	ldr	r3, [r4, #4]
 80084ac:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80084b0:	f023 0303 	bic.w	r3, r3, #3
 80084b4:	60ca      	str	r2, [r1, #12]
 80084b6:	4423      	add	r3, r4
 80084b8:	6091      	str	r1, [r2, #8]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	f042 0201 	orr.w	r2, r2, #1
 80084c0:	605a      	str	r2, [r3, #4]
 80084c2:	4628      	mov	r0, r5
 80084c4:	f000 fa4e 	bl	8008964 <__malloc_unlock>
 80084c8:	3408      	adds	r4, #8
 80084ca:	e186      	b.n	80087da <_malloc_r+0x37a>
 80084cc:	3302      	adds	r3, #2
 80084ce:	4ab4      	ldr	r2, [pc, #720]	; (80087a0 <_malloc_r+0x340>)
 80084d0:	6934      	ldr	r4, [r6, #16]
 80084d2:	4611      	mov	r1, r2
 80084d4:	4294      	cmp	r4, r2
 80084d6:	d077      	beq.n	80085c8 <_malloc_r+0x168>
 80084d8:	6860      	ldr	r0, [r4, #4]
 80084da:	f020 0c03 	bic.w	ip, r0, #3
 80084de:	ebac 0007 	sub.w	r0, ip, r7
 80084e2:	280f      	cmp	r0, #15
 80084e4:	dd48      	ble.n	8008578 <_malloc_r+0x118>
 80084e6:	19e1      	adds	r1, r4, r7
 80084e8:	f040 0301 	orr.w	r3, r0, #1
 80084ec:	f047 0701 	orr.w	r7, r7, #1
 80084f0:	6067      	str	r7, [r4, #4]
 80084f2:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80084f6:	e9c1 2202 	strd	r2, r2, [r1, #8]
 80084fa:	604b      	str	r3, [r1, #4]
 80084fc:	f844 000c 	str.w	r0, [r4, ip]
 8008500:	e7df      	b.n	80084c2 <_malloc_r+0x62>
 8008502:	0a7b      	lsrs	r3, r7, #9
 8008504:	d02a      	beq.n	800855c <_malloc_r+0xfc>
 8008506:	2b04      	cmp	r3, #4
 8008508:	d812      	bhi.n	8008530 <_malloc_r+0xd0>
 800850a:	09bb      	lsrs	r3, r7, #6
 800850c:	3338      	adds	r3, #56	; 0x38
 800850e:	1c5a      	adds	r2, r3, #1
 8008510:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8008514:	6854      	ldr	r4, [r2, #4]
 8008516:	f1a2 0c08 	sub.w	ip, r2, #8
 800851a:	4564      	cmp	r4, ip
 800851c:	d006      	beq.n	800852c <_malloc_r+0xcc>
 800851e:	6862      	ldr	r2, [r4, #4]
 8008520:	f022 0203 	bic.w	r2, r2, #3
 8008524:	1bd0      	subs	r0, r2, r7
 8008526:	280f      	cmp	r0, #15
 8008528:	dd1c      	ble.n	8008564 <_malloc_r+0x104>
 800852a:	3b01      	subs	r3, #1
 800852c:	3301      	adds	r3, #1
 800852e:	e7ce      	b.n	80084ce <_malloc_r+0x6e>
 8008530:	2b14      	cmp	r3, #20
 8008532:	d801      	bhi.n	8008538 <_malloc_r+0xd8>
 8008534:	335b      	adds	r3, #91	; 0x5b
 8008536:	e7ea      	b.n	800850e <_malloc_r+0xae>
 8008538:	2b54      	cmp	r3, #84	; 0x54
 800853a:	d802      	bhi.n	8008542 <_malloc_r+0xe2>
 800853c:	0b3b      	lsrs	r3, r7, #12
 800853e:	336e      	adds	r3, #110	; 0x6e
 8008540:	e7e5      	b.n	800850e <_malloc_r+0xae>
 8008542:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008546:	d802      	bhi.n	800854e <_malloc_r+0xee>
 8008548:	0bfb      	lsrs	r3, r7, #15
 800854a:	3377      	adds	r3, #119	; 0x77
 800854c:	e7df      	b.n	800850e <_malloc_r+0xae>
 800854e:	f240 5254 	movw	r2, #1364	; 0x554
 8008552:	4293      	cmp	r3, r2
 8008554:	d804      	bhi.n	8008560 <_malloc_r+0x100>
 8008556:	0cbb      	lsrs	r3, r7, #18
 8008558:	337c      	adds	r3, #124	; 0x7c
 800855a:	e7d8      	b.n	800850e <_malloc_r+0xae>
 800855c:	233f      	movs	r3, #63	; 0x3f
 800855e:	e7d6      	b.n	800850e <_malloc_r+0xae>
 8008560:	237e      	movs	r3, #126	; 0x7e
 8008562:	e7d4      	b.n	800850e <_malloc_r+0xae>
 8008564:	2800      	cmp	r0, #0
 8008566:	68e1      	ldr	r1, [r4, #12]
 8008568:	db04      	blt.n	8008574 <_malloc_r+0x114>
 800856a:	68a3      	ldr	r3, [r4, #8]
 800856c:	60d9      	str	r1, [r3, #12]
 800856e:	608b      	str	r3, [r1, #8]
 8008570:	18a3      	adds	r3, r4, r2
 8008572:	e7a2      	b.n	80084ba <_malloc_r+0x5a>
 8008574:	460c      	mov	r4, r1
 8008576:	e7d0      	b.n	800851a <_malloc_r+0xba>
 8008578:	2800      	cmp	r0, #0
 800857a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800857e:	db07      	blt.n	8008590 <_malloc_r+0x130>
 8008580:	44a4      	add	ip, r4
 8008582:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8008586:	f043 0301 	orr.w	r3, r3, #1
 800858a:	f8cc 3004 	str.w	r3, [ip, #4]
 800858e:	e798      	b.n	80084c2 <_malloc_r+0x62>
 8008590:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8008594:	6870      	ldr	r0, [r6, #4]
 8008596:	f080 809e 	bcs.w	80086d6 <_malloc_r+0x276>
 800859a:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 800859e:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80085a2:	f04f 0c01 	mov.w	ip, #1
 80085a6:	fa0c fc0e 	lsl.w	ip, ip, lr
 80085aa:	ea4c 0000 	orr.w	r0, ip, r0
 80085ae:	3201      	adds	r2, #1
 80085b0:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80085b4:	6070      	str	r0, [r6, #4]
 80085b6:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80085ba:	3808      	subs	r0, #8
 80085bc:	e9c4 c002 	strd	ip, r0, [r4, #8]
 80085c0:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 80085c4:	f8cc 400c 	str.w	r4, [ip, #12]
 80085c8:	2001      	movs	r0, #1
 80085ca:	109a      	asrs	r2, r3, #2
 80085cc:	fa00 f202 	lsl.w	r2, r0, r2
 80085d0:	6870      	ldr	r0, [r6, #4]
 80085d2:	4290      	cmp	r0, r2
 80085d4:	d326      	bcc.n	8008624 <_malloc_r+0x1c4>
 80085d6:	4210      	tst	r0, r2
 80085d8:	d106      	bne.n	80085e8 <_malloc_r+0x188>
 80085da:	f023 0303 	bic.w	r3, r3, #3
 80085de:	0052      	lsls	r2, r2, #1
 80085e0:	4210      	tst	r0, r2
 80085e2:	f103 0304 	add.w	r3, r3, #4
 80085e6:	d0fa      	beq.n	80085de <_malloc_r+0x17e>
 80085e8:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80085ec:	46c1      	mov	r9, r8
 80085ee:	469e      	mov	lr, r3
 80085f0:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80085f4:	454c      	cmp	r4, r9
 80085f6:	f040 80b3 	bne.w	8008760 <_malloc_r+0x300>
 80085fa:	f10e 0e01 	add.w	lr, lr, #1
 80085fe:	f01e 0f03 	tst.w	lr, #3
 8008602:	f109 0908 	add.w	r9, r9, #8
 8008606:	d1f3      	bne.n	80085f0 <_malloc_r+0x190>
 8008608:	0798      	lsls	r0, r3, #30
 800860a:	f040 80ec 	bne.w	80087e6 <_malloc_r+0x386>
 800860e:	6873      	ldr	r3, [r6, #4]
 8008610:	ea23 0302 	bic.w	r3, r3, r2
 8008614:	6073      	str	r3, [r6, #4]
 8008616:	6870      	ldr	r0, [r6, #4]
 8008618:	0052      	lsls	r2, r2, #1
 800861a:	4290      	cmp	r0, r2
 800861c:	d302      	bcc.n	8008624 <_malloc_r+0x1c4>
 800861e:	2a00      	cmp	r2, #0
 8008620:	f040 80ed 	bne.w	80087fe <_malloc_r+0x39e>
 8008624:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008628:	f8db 1004 	ldr.w	r1, [fp, #4]
 800862c:	f021 0903 	bic.w	r9, r1, #3
 8008630:	45b9      	cmp	r9, r7
 8008632:	d304      	bcc.n	800863e <_malloc_r+0x1de>
 8008634:	eba9 0207 	sub.w	r2, r9, r7
 8008638:	2a0f      	cmp	r2, #15
 800863a:	f300 8148 	bgt.w	80088ce <_malloc_r+0x46e>
 800863e:	4a59      	ldr	r2, [pc, #356]	; (80087a4 <_malloc_r+0x344>)
 8008640:	eb0b 0309 	add.w	r3, fp, r9
 8008644:	6811      	ldr	r1, [r2, #0]
 8008646:	2008      	movs	r0, #8
 8008648:	3110      	adds	r1, #16
 800864a:	4439      	add	r1, r7
 800864c:	9301      	str	r3, [sp, #4]
 800864e:	9100      	str	r1, [sp, #0]
 8008650:	f002 f9b3 	bl	800a9ba <sysconf>
 8008654:	e9dd 1300 	ldrd	r1, r3, [sp]
 8008658:	4680      	mov	r8, r0
 800865a:	4a53      	ldr	r2, [pc, #332]	; (80087a8 <_malloc_r+0x348>)
 800865c:	6810      	ldr	r0, [r2, #0]
 800865e:	3001      	adds	r0, #1
 8008660:	bf1f      	itttt	ne
 8008662:	f101 31ff 	addne.w	r1, r1, #4294967295
 8008666:	4441      	addne	r1, r8
 8008668:	f1c8 0000 	rsbne	r0, r8, #0
 800866c:	4001      	andne	r1, r0
 800866e:	4628      	mov	r0, r5
 8008670:	e9cd 1300 	strd	r1, r3, [sp]
 8008674:	f000 ffde 	bl	8009634 <_sbrk_r>
 8008678:	1c42      	adds	r2, r0, #1
 800867a:	4604      	mov	r4, r0
 800867c:	f000 80fb 	beq.w	8008876 <_malloc_r+0x416>
 8008680:	9b01      	ldr	r3, [sp, #4]
 8008682:	9900      	ldr	r1, [sp, #0]
 8008684:	4283      	cmp	r3, r0
 8008686:	4a48      	ldr	r2, [pc, #288]	; (80087a8 <_malloc_r+0x348>)
 8008688:	d902      	bls.n	8008690 <_malloc_r+0x230>
 800868a:	45b3      	cmp	fp, r6
 800868c:	f040 80f3 	bne.w	8008876 <_malloc_r+0x416>
 8008690:	f8df a120 	ldr.w	sl, [pc, #288]	; 80087b4 <_malloc_r+0x354>
 8008694:	42a3      	cmp	r3, r4
 8008696:	f8da 0000 	ldr.w	r0, [sl]
 800869a:	f108 3cff 	add.w	ip, r8, #4294967295
 800869e:	eb00 0e01 	add.w	lr, r0, r1
 80086a2:	f8ca e000 	str.w	lr, [sl]
 80086a6:	f040 80ac 	bne.w	8008802 <_malloc_r+0x3a2>
 80086aa:	ea13 0f0c 	tst.w	r3, ip
 80086ae:	f040 80a8 	bne.w	8008802 <_malloc_r+0x3a2>
 80086b2:	68b3      	ldr	r3, [r6, #8]
 80086b4:	4449      	add	r1, r9
 80086b6:	f041 0101 	orr.w	r1, r1, #1
 80086ba:	6059      	str	r1, [r3, #4]
 80086bc:	4a3b      	ldr	r2, [pc, #236]	; (80087ac <_malloc_r+0x34c>)
 80086be:	f8da 3000 	ldr.w	r3, [sl]
 80086c2:	6811      	ldr	r1, [r2, #0]
 80086c4:	428b      	cmp	r3, r1
 80086c6:	bf88      	it	hi
 80086c8:	6013      	strhi	r3, [r2, #0]
 80086ca:	4a39      	ldr	r2, [pc, #228]	; (80087b0 <_malloc_r+0x350>)
 80086cc:	6811      	ldr	r1, [r2, #0]
 80086ce:	428b      	cmp	r3, r1
 80086d0:	bf88      	it	hi
 80086d2:	6013      	strhi	r3, [r2, #0]
 80086d4:	e0cf      	b.n	8008876 <_malloc_r+0x416>
 80086d6:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80086da:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80086de:	d218      	bcs.n	8008712 <_malloc_r+0x2b2>
 80086e0:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80086e4:	3238      	adds	r2, #56	; 0x38
 80086e6:	f102 0e01 	add.w	lr, r2, #1
 80086ea:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80086ee:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80086f2:	45f0      	cmp	r8, lr
 80086f4:	d12b      	bne.n	800874e <_malloc_r+0x2ee>
 80086f6:	f04f 0c01 	mov.w	ip, #1
 80086fa:	1092      	asrs	r2, r2, #2
 80086fc:	fa0c f202 	lsl.w	r2, ip, r2
 8008700:	4310      	orrs	r0, r2
 8008702:	6070      	str	r0, [r6, #4]
 8008704:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8008708:	f8c8 4008 	str.w	r4, [r8, #8]
 800870c:	f8ce 400c 	str.w	r4, [lr, #12]
 8008710:	e75a      	b.n	80085c8 <_malloc_r+0x168>
 8008712:	2a14      	cmp	r2, #20
 8008714:	d801      	bhi.n	800871a <_malloc_r+0x2ba>
 8008716:	325b      	adds	r2, #91	; 0x5b
 8008718:	e7e5      	b.n	80086e6 <_malloc_r+0x286>
 800871a:	2a54      	cmp	r2, #84	; 0x54
 800871c:	d803      	bhi.n	8008726 <_malloc_r+0x2c6>
 800871e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8008722:	326e      	adds	r2, #110	; 0x6e
 8008724:	e7df      	b.n	80086e6 <_malloc_r+0x286>
 8008726:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800872a:	d803      	bhi.n	8008734 <_malloc_r+0x2d4>
 800872c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8008730:	3277      	adds	r2, #119	; 0x77
 8008732:	e7d8      	b.n	80086e6 <_malloc_r+0x286>
 8008734:	f240 5e54 	movw	lr, #1364	; 0x554
 8008738:	4572      	cmp	r2, lr
 800873a:	bf96      	itet	ls
 800873c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8008740:	227e      	movhi	r2, #126	; 0x7e
 8008742:	327c      	addls	r2, #124	; 0x7c
 8008744:	e7cf      	b.n	80086e6 <_malloc_r+0x286>
 8008746:	f8de e008 	ldr.w	lr, [lr, #8]
 800874a:	45f0      	cmp	r8, lr
 800874c:	d005      	beq.n	800875a <_malloc_r+0x2fa>
 800874e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008752:	f022 0203 	bic.w	r2, r2, #3
 8008756:	4562      	cmp	r2, ip
 8008758:	d8f5      	bhi.n	8008746 <_malloc_r+0x2e6>
 800875a:	f8de 800c 	ldr.w	r8, [lr, #12]
 800875e:	e7d1      	b.n	8008704 <_malloc_r+0x2a4>
 8008760:	6860      	ldr	r0, [r4, #4]
 8008762:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8008766:	f020 0003 	bic.w	r0, r0, #3
 800876a:	eba0 0a07 	sub.w	sl, r0, r7
 800876e:	f1ba 0f0f 	cmp.w	sl, #15
 8008772:	dd21      	ble.n	80087b8 <_malloc_r+0x358>
 8008774:	68a3      	ldr	r3, [r4, #8]
 8008776:	19e2      	adds	r2, r4, r7
 8008778:	f047 0701 	orr.w	r7, r7, #1
 800877c:	6067      	str	r7, [r4, #4]
 800877e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008782:	f8cc 3008 	str.w	r3, [ip, #8]
 8008786:	f04a 0301 	orr.w	r3, sl, #1
 800878a:	e9c6 2204 	strd	r2, r2, [r6, #16]
 800878e:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8008792:	6053      	str	r3, [r2, #4]
 8008794:	f844 a000 	str.w	sl, [r4, r0]
 8008798:	e693      	b.n	80084c2 <_malloc_r+0x62>
 800879a:	bf00      	nop
 800879c:	20000608 	.word	0x20000608
 80087a0:	20000610 	.word	0x20000610
 80087a4:	20001a64 	.word	0x20001a64
 80087a8:	20000a10 	.word	0x20000a10
 80087ac:	20001a5c 	.word	0x20001a5c
 80087b0:	20001a60 	.word	0x20001a60
 80087b4:	20001a34 	.word	0x20001a34
 80087b8:	f1ba 0f00 	cmp.w	sl, #0
 80087bc:	db11      	blt.n	80087e2 <_malloc_r+0x382>
 80087be:	4420      	add	r0, r4
 80087c0:	6843      	ldr	r3, [r0, #4]
 80087c2:	f043 0301 	orr.w	r3, r3, #1
 80087c6:	6043      	str	r3, [r0, #4]
 80087c8:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80087cc:	4628      	mov	r0, r5
 80087ce:	f8c3 c00c 	str.w	ip, [r3, #12]
 80087d2:	f8cc 3008 	str.w	r3, [ip, #8]
 80087d6:	f000 f8c5 	bl	8008964 <__malloc_unlock>
 80087da:	4620      	mov	r0, r4
 80087dc:	b003      	add	sp, #12
 80087de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e2:	4664      	mov	r4, ip
 80087e4:	e706      	b.n	80085f4 <_malloc_r+0x194>
 80087e6:	f858 0908 	ldr.w	r0, [r8], #-8
 80087ea:	3b01      	subs	r3, #1
 80087ec:	4540      	cmp	r0, r8
 80087ee:	f43f af0b 	beq.w	8008608 <_malloc_r+0x1a8>
 80087f2:	e710      	b.n	8008616 <_malloc_r+0x1b6>
 80087f4:	3304      	adds	r3, #4
 80087f6:	0052      	lsls	r2, r2, #1
 80087f8:	4210      	tst	r0, r2
 80087fa:	d0fb      	beq.n	80087f4 <_malloc_r+0x394>
 80087fc:	e6f4      	b.n	80085e8 <_malloc_r+0x188>
 80087fe:	4673      	mov	r3, lr
 8008800:	e7fa      	b.n	80087f8 <_malloc_r+0x398>
 8008802:	6810      	ldr	r0, [r2, #0]
 8008804:	3001      	adds	r0, #1
 8008806:	bf1b      	ittet	ne
 8008808:	1ae3      	subne	r3, r4, r3
 800880a:	4473      	addne	r3, lr
 800880c:	6014      	streq	r4, [r2, #0]
 800880e:	f8ca 3000 	strne.w	r3, [sl]
 8008812:	f014 0307 	ands.w	r3, r4, #7
 8008816:	bf0e      	itee	eq
 8008818:	4618      	moveq	r0, r3
 800881a:	f1c3 0008 	rsbne	r0, r3, #8
 800881e:	1824      	addne	r4, r4, r0
 8008820:	1862      	adds	r2, r4, r1
 8008822:	ea02 010c 	and.w	r1, r2, ip
 8008826:	4480      	add	r8, r0
 8008828:	eba8 0801 	sub.w	r8, r8, r1
 800882c:	ea08 080c 	and.w	r8, r8, ip
 8008830:	4641      	mov	r1, r8
 8008832:	4628      	mov	r0, r5
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	9200      	str	r2, [sp, #0]
 8008838:	f000 fefc 	bl	8009634 <_sbrk_r>
 800883c:	1c43      	adds	r3, r0, #1
 800883e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008842:	d105      	bne.n	8008850 <_malloc_r+0x3f0>
 8008844:	b32b      	cbz	r3, 8008892 <_malloc_r+0x432>
 8008846:	f04f 0800 	mov.w	r8, #0
 800884a:	f1a3 0008 	sub.w	r0, r3, #8
 800884e:	4410      	add	r0, r2
 8008850:	f8da 2000 	ldr.w	r2, [sl]
 8008854:	1b00      	subs	r0, r0, r4
 8008856:	4440      	add	r0, r8
 8008858:	4442      	add	r2, r8
 800885a:	f040 0001 	orr.w	r0, r0, #1
 800885e:	45b3      	cmp	fp, r6
 8008860:	60b4      	str	r4, [r6, #8]
 8008862:	f8ca 2000 	str.w	r2, [sl]
 8008866:	6060      	str	r0, [r4, #4]
 8008868:	f43f af28 	beq.w	80086bc <_malloc_r+0x25c>
 800886c:	f1b9 0f0f 	cmp.w	r9, #15
 8008870:	d812      	bhi.n	8008898 <_malloc_r+0x438>
 8008872:	2301      	movs	r3, #1
 8008874:	6063      	str	r3, [r4, #4]
 8008876:	68b3      	ldr	r3, [r6, #8]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f023 0303 	bic.w	r3, r3, #3
 800887e:	42bb      	cmp	r3, r7
 8008880:	eba3 0207 	sub.w	r2, r3, r7
 8008884:	d301      	bcc.n	800888a <_malloc_r+0x42a>
 8008886:	2a0f      	cmp	r2, #15
 8008888:	dc21      	bgt.n	80088ce <_malloc_r+0x46e>
 800888a:	4628      	mov	r0, r5
 800888c:	f000 f86a 	bl	8008964 <__malloc_unlock>
 8008890:	e5f2      	b.n	8008478 <_malloc_r+0x18>
 8008892:	4610      	mov	r0, r2
 8008894:	4698      	mov	r8, r3
 8008896:	e7db      	b.n	8008850 <_malloc_r+0x3f0>
 8008898:	2205      	movs	r2, #5
 800889a:	f8db 3004 	ldr.w	r3, [fp, #4]
 800889e:	f1a9 090c 	sub.w	r9, r9, #12
 80088a2:	f029 0907 	bic.w	r9, r9, #7
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	ea43 0309 	orr.w	r3, r3, r9
 80088ae:	f8cb 3004 	str.w	r3, [fp, #4]
 80088b2:	f1b9 0f0f 	cmp.w	r9, #15
 80088b6:	eb0b 0309 	add.w	r3, fp, r9
 80088ba:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80088be:	f67f aefd 	bls.w	80086bc <_malloc_r+0x25c>
 80088c2:	4628      	mov	r0, r5
 80088c4:	f10b 0108 	add.w	r1, fp, #8
 80088c8:	f7ff fccc 	bl	8008264 <_free_r>
 80088cc:	e6f6      	b.n	80086bc <_malloc_r+0x25c>
 80088ce:	68b4      	ldr	r4, [r6, #8]
 80088d0:	f047 0301 	orr.w	r3, r7, #1
 80088d4:	f042 0201 	orr.w	r2, r2, #1
 80088d8:	4427      	add	r7, r4
 80088da:	6063      	str	r3, [r4, #4]
 80088dc:	60b7      	str	r7, [r6, #8]
 80088de:	607a      	str	r2, [r7, #4]
 80088e0:	e5ef      	b.n	80084c2 <_malloc_r+0x62>
 80088e2:	bf00      	nop

080088e4 <_mbrtowc_r>:
 80088e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088e6:	9e08      	ldr	r6, [sp, #32]
 80088e8:	4c09      	ldr	r4, [pc, #36]	; (8008910 <_mbrtowc_r+0x2c>)
 80088ea:	4605      	mov	r5, r0
 80088ec:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 80088f0:	4614      	mov	r4, r2
 80088f2:	9600      	str	r6, [sp, #0]
 80088f4:	b912      	cbnz	r2, 80088fc <_mbrtowc_r+0x18>
 80088f6:	2301      	movs	r3, #1
 80088f8:	4621      	mov	r1, r4
 80088fa:	4a06      	ldr	r2, [pc, #24]	; (8008914 <_mbrtowc_r+0x30>)
 80088fc:	47b8      	blx	r7
 80088fe:	1c43      	adds	r3, r0, #1
 8008900:	bf01      	itttt	eq
 8008902:	2300      	moveq	r3, #0
 8008904:	6033      	streq	r3, [r6, #0]
 8008906:	238a      	moveq	r3, #138	; 0x8a
 8008908:	602b      	streq	r3, [r5, #0]
 800890a:	b003      	add	sp, #12
 800890c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800890e:	bf00      	nop
 8008910:	2000049c 	.word	0x2000049c
 8008914:	0800cbbb 	.word	0x0800cbbb

08008918 <__ascii_mbtowc>:
 8008918:	b082      	sub	sp, #8
 800891a:	b901      	cbnz	r1, 800891e <__ascii_mbtowc+0x6>
 800891c:	a901      	add	r1, sp, #4
 800891e:	b142      	cbz	r2, 8008932 <__ascii_mbtowc+0x1a>
 8008920:	b14b      	cbz	r3, 8008936 <__ascii_mbtowc+0x1e>
 8008922:	7813      	ldrb	r3, [r2, #0]
 8008924:	600b      	str	r3, [r1, #0]
 8008926:	7812      	ldrb	r2, [r2, #0]
 8008928:	1e10      	subs	r0, r2, #0
 800892a:	bf18      	it	ne
 800892c:	2001      	movne	r0, #1
 800892e:	b002      	add	sp, #8
 8008930:	4770      	bx	lr
 8008932:	4610      	mov	r0, r2
 8008934:	e7fb      	b.n	800892e <__ascii_mbtowc+0x16>
 8008936:	f06f 0001 	mvn.w	r0, #1
 800893a:	e7f8      	b.n	800892e <__ascii_mbtowc+0x16>

0800893c <memchr>:
 800893c:	4603      	mov	r3, r0
 800893e:	b510      	push	{r4, lr}
 8008940:	b2c9      	uxtb	r1, r1
 8008942:	4402      	add	r2, r0
 8008944:	4293      	cmp	r3, r2
 8008946:	4618      	mov	r0, r3
 8008948:	d101      	bne.n	800894e <memchr+0x12>
 800894a:	2000      	movs	r0, #0
 800894c:	e003      	b.n	8008956 <memchr+0x1a>
 800894e:	7804      	ldrb	r4, [r0, #0]
 8008950:	3301      	adds	r3, #1
 8008952:	428c      	cmp	r4, r1
 8008954:	d1f6      	bne.n	8008944 <memchr+0x8>
 8008956:	bd10      	pop	{r4, pc}

08008958 <__malloc_lock>:
 8008958:	4801      	ldr	r0, [pc, #4]	; (8008960 <__malloc_lock+0x8>)
 800895a:	f7ff bd5d 	b.w	8008418 <__retarget_lock_acquire_recursive>
 800895e:	bf00      	nop
 8008960:	20001c4f 	.word	0x20001c4f

08008964 <__malloc_unlock>:
 8008964:	4801      	ldr	r0, [pc, #4]	; (800896c <__malloc_unlock+0x8>)
 8008966:	f7ff bd58 	b.w	800841a <__retarget_lock_release_recursive>
 800896a:	bf00      	nop
 800896c:	20001c4f 	.word	0x20001c4f

08008970 <_Balloc>:
 8008970:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008972:	b570      	push	{r4, r5, r6, lr}
 8008974:	4605      	mov	r5, r0
 8008976:	460c      	mov	r4, r1
 8008978:	b17b      	cbz	r3, 800899a <_Balloc+0x2a>
 800897a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800897c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008980:	b9a0      	cbnz	r0, 80089ac <_Balloc+0x3c>
 8008982:	2101      	movs	r1, #1
 8008984:	fa01 f604 	lsl.w	r6, r1, r4
 8008988:	1d72      	adds	r2, r6, #5
 800898a:	4628      	mov	r0, r5
 800898c:	0092      	lsls	r2, r2, #2
 800898e:	f002 f8c5 	bl	800ab1c <_calloc_r>
 8008992:	b148      	cbz	r0, 80089a8 <_Balloc+0x38>
 8008994:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8008998:	e00b      	b.n	80089b2 <_Balloc+0x42>
 800899a:	2221      	movs	r2, #33	; 0x21
 800899c:	2104      	movs	r1, #4
 800899e:	f002 f8bd 	bl	800ab1c <_calloc_r>
 80089a2:	64e8      	str	r0, [r5, #76]	; 0x4c
 80089a4:	2800      	cmp	r0, #0
 80089a6:	d1e8      	bne.n	800897a <_Balloc+0xa>
 80089a8:	2000      	movs	r0, #0
 80089aa:	bd70      	pop	{r4, r5, r6, pc}
 80089ac:	6802      	ldr	r2, [r0, #0]
 80089ae:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80089b2:	2300      	movs	r3, #0
 80089b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089b8:	e7f7      	b.n	80089aa <_Balloc+0x3a>

080089ba <_Bfree>:
 80089ba:	b131      	cbz	r1, 80089ca <_Bfree+0x10>
 80089bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80089be:	684a      	ldr	r2, [r1, #4]
 80089c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80089c4:	6008      	str	r0, [r1, #0]
 80089c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80089ca:	4770      	bx	lr

080089cc <__multadd>:
 80089cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d0:	4698      	mov	r8, r3
 80089d2:	460c      	mov	r4, r1
 80089d4:	2300      	movs	r3, #0
 80089d6:	690e      	ldr	r6, [r1, #16]
 80089d8:	4607      	mov	r7, r0
 80089da:	f101 0014 	add.w	r0, r1, #20
 80089de:	6805      	ldr	r5, [r0, #0]
 80089e0:	3301      	adds	r3, #1
 80089e2:	b2a9      	uxth	r1, r5
 80089e4:	fb02 8101 	mla	r1, r2, r1, r8
 80089e8:	0c2d      	lsrs	r5, r5, #16
 80089ea:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80089ee:	fb02 c505 	mla	r5, r2, r5, ip
 80089f2:	b289      	uxth	r1, r1
 80089f4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80089f8:	429e      	cmp	r6, r3
 80089fa:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80089fe:	f840 1b04 	str.w	r1, [r0], #4
 8008a02:	dcec      	bgt.n	80089de <__multadd+0x12>
 8008a04:	f1b8 0f00 	cmp.w	r8, #0
 8008a08:	d022      	beq.n	8008a50 <__multadd+0x84>
 8008a0a:	68a3      	ldr	r3, [r4, #8]
 8008a0c:	42b3      	cmp	r3, r6
 8008a0e:	dc19      	bgt.n	8008a44 <__multadd+0x78>
 8008a10:	6861      	ldr	r1, [r4, #4]
 8008a12:	4638      	mov	r0, r7
 8008a14:	3101      	adds	r1, #1
 8008a16:	f7ff ffab 	bl	8008970 <_Balloc>
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	b928      	cbnz	r0, 8008a2a <__multadd+0x5e>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	21b5      	movs	r1, #181	; 0xb5
 8008a22:	4b0d      	ldr	r3, [pc, #52]	; (8008a58 <__multadd+0x8c>)
 8008a24:	480d      	ldr	r0, [pc, #52]	; (8008a5c <__multadd+0x90>)
 8008a26:	f002 f85b 	bl	800aae0 <__assert_func>
 8008a2a:	6922      	ldr	r2, [r4, #16]
 8008a2c:	f104 010c 	add.w	r1, r4, #12
 8008a30:	3202      	adds	r2, #2
 8008a32:	0092      	lsls	r2, r2, #2
 8008a34:	300c      	adds	r0, #12
 8008a36:	f7fc f955 	bl	8004ce4 <memcpy>
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4638      	mov	r0, r7
 8008a3e:	f7ff ffbc 	bl	80089ba <_Bfree>
 8008a42:	462c      	mov	r4, r5
 8008a44:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008a48:	3601      	adds	r6, #1
 8008a4a:	f8c3 8014 	str.w	r8, [r3, #20]
 8008a4e:	6126      	str	r6, [r4, #16]
 8008a50:	4620      	mov	r0, r4
 8008a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a56:	bf00      	nop
 8008a58:	0800c956 	.word	0x0800c956
 8008a5c:	0800c9d0 	.word	0x0800c9d0

08008a60 <__s2b>:
 8008a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a64:	4615      	mov	r5, r2
 8008a66:	2209      	movs	r2, #9
 8008a68:	461f      	mov	r7, r3
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	460c      	mov	r4, r1
 8008a6e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008a72:	4606      	mov	r6, r0
 8008a74:	2201      	movs	r2, #1
 8008a76:	2100      	movs	r1, #0
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	db09      	blt.n	8008a90 <__s2b+0x30>
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7ff ff77 	bl	8008970 <_Balloc>
 8008a82:	b940      	cbnz	r0, 8008a96 <__s2b+0x36>
 8008a84:	4602      	mov	r2, r0
 8008a86:	21ce      	movs	r1, #206	; 0xce
 8008a88:	4b18      	ldr	r3, [pc, #96]	; (8008aec <__s2b+0x8c>)
 8008a8a:	4819      	ldr	r0, [pc, #100]	; (8008af0 <__s2b+0x90>)
 8008a8c:	f002 f828 	bl	800aae0 <__assert_func>
 8008a90:	0052      	lsls	r2, r2, #1
 8008a92:	3101      	adds	r1, #1
 8008a94:	e7f0      	b.n	8008a78 <__s2b+0x18>
 8008a96:	9b08      	ldr	r3, [sp, #32]
 8008a98:	2d09      	cmp	r5, #9
 8008a9a:	6143      	str	r3, [r0, #20]
 8008a9c:	f04f 0301 	mov.w	r3, #1
 8008aa0:	6103      	str	r3, [r0, #16]
 8008aa2:	dd16      	ble.n	8008ad2 <__s2b+0x72>
 8008aa4:	f104 0909 	add.w	r9, r4, #9
 8008aa8:	46c8      	mov	r8, r9
 8008aaa:	442c      	add	r4, r5
 8008aac:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ab0:	4601      	mov	r1, r0
 8008ab2:	220a      	movs	r2, #10
 8008ab4:	4630      	mov	r0, r6
 8008ab6:	3b30      	subs	r3, #48	; 0x30
 8008ab8:	f7ff ff88 	bl	80089cc <__multadd>
 8008abc:	45a0      	cmp	r8, r4
 8008abe:	d1f5      	bne.n	8008aac <__s2b+0x4c>
 8008ac0:	f1a5 0408 	sub.w	r4, r5, #8
 8008ac4:	444c      	add	r4, r9
 8008ac6:	1b2d      	subs	r5, r5, r4
 8008ac8:	1963      	adds	r3, r4, r5
 8008aca:	42bb      	cmp	r3, r7
 8008acc:	db04      	blt.n	8008ad8 <__s2b+0x78>
 8008ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad2:	2509      	movs	r5, #9
 8008ad4:	340a      	adds	r4, #10
 8008ad6:	e7f6      	b.n	8008ac6 <__s2b+0x66>
 8008ad8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008adc:	4601      	mov	r1, r0
 8008ade:	220a      	movs	r2, #10
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	3b30      	subs	r3, #48	; 0x30
 8008ae4:	f7ff ff72 	bl	80089cc <__multadd>
 8008ae8:	e7ee      	b.n	8008ac8 <__s2b+0x68>
 8008aea:	bf00      	nop
 8008aec:	0800c956 	.word	0x0800c956
 8008af0:	0800c9d0 	.word	0x0800c9d0

08008af4 <__hi0bits>:
 8008af4:	0c02      	lsrs	r2, r0, #16
 8008af6:	0412      	lsls	r2, r2, #16
 8008af8:	4603      	mov	r3, r0
 8008afa:	b9ca      	cbnz	r2, 8008b30 <__hi0bits+0x3c>
 8008afc:	0403      	lsls	r3, r0, #16
 8008afe:	2010      	movs	r0, #16
 8008b00:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008b04:	bf04      	itt	eq
 8008b06:	021b      	lsleq	r3, r3, #8
 8008b08:	3008      	addeq	r0, #8
 8008b0a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008b0e:	bf04      	itt	eq
 8008b10:	011b      	lsleq	r3, r3, #4
 8008b12:	3004      	addeq	r0, #4
 8008b14:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008b18:	bf04      	itt	eq
 8008b1a:	009b      	lsleq	r3, r3, #2
 8008b1c:	3002      	addeq	r0, #2
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	db05      	blt.n	8008b2e <__hi0bits+0x3a>
 8008b22:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008b26:	f100 0001 	add.w	r0, r0, #1
 8008b2a:	bf08      	it	eq
 8008b2c:	2020      	moveq	r0, #32
 8008b2e:	4770      	bx	lr
 8008b30:	2000      	movs	r0, #0
 8008b32:	e7e5      	b.n	8008b00 <__hi0bits+0xc>

08008b34 <__lo0bits>:
 8008b34:	6803      	ldr	r3, [r0, #0]
 8008b36:	4602      	mov	r2, r0
 8008b38:	f013 0007 	ands.w	r0, r3, #7
 8008b3c:	d00b      	beq.n	8008b56 <__lo0bits+0x22>
 8008b3e:	07d9      	lsls	r1, r3, #31
 8008b40:	d422      	bmi.n	8008b88 <__lo0bits+0x54>
 8008b42:	0798      	lsls	r0, r3, #30
 8008b44:	bf49      	itett	mi
 8008b46:	085b      	lsrmi	r3, r3, #1
 8008b48:	089b      	lsrpl	r3, r3, #2
 8008b4a:	2001      	movmi	r0, #1
 8008b4c:	6013      	strmi	r3, [r2, #0]
 8008b4e:	bf5c      	itt	pl
 8008b50:	2002      	movpl	r0, #2
 8008b52:	6013      	strpl	r3, [r2, #0]
 8008b54:	4770      	bx	lr
 8008b56:	b299      	uxth	r1, r3
 8008b58:	b909      	cbnz	r1, 8008b5e <__lo0bits+0x2a>
 8008b5a:	2010      	movs	r0, #16
 8008b5c:	0c1b      	lsrs	r3, r3, #16
 8008b5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008b62:	bf04      	itt	eq
 8008b64:	0a1b      	lsreq	r3, r3, #8
 8008b66:	3008      	addeq	r0, #8
 8008b68:	0719      	lsls	r1, r3, #28
 8008b6a:	bf04      	itt	eq
 8008b6c:	091b      	lsreq	r3, r3, #4
 8008b6e:	3004      	addeq	r0, #4
 8008b70:	0799      	lsls	r1, r3, #30
 8008b72:	bf04      	itt	eq
 8008b74:	089b      	lsreq	r3, r3, #2
 8008b76:	3002      	addeq	r0, #2
 8008b78:	07d9      	lsls	r1, r3, #31
 8008b7a:	d403      	bmi.n	8008b84 <__lo0bits+0x50>
 8008b7c:	085b      	lsrs	r3, r3, #1
 8008b7e:	f100 0001 	add.w	r0, r0, #1
 8008b82:	d003      	beq.n	8008b8c <__lo0bits+0x58>
 8008b84:	6013      	str	r3, [r2, #0]
 8008b86:	4770      	bx	lr
 8008b88:	2000      	movs	r0, #0
 8008b8a:	4770      	bx	lr
 8008b8c:	2020      	movs	r0, #32
 8008b8e:	4770      	bx	lr

08008b90 <__i2b>:
 8008b90:	b510      	push	{r4, lr}
 8008b92:	460c      	mov	r4, r1
 8008b94:	2101      	movs	r1, #1
 8008b96:	f7ff feeb 	bl	8008970 <_Balloc>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	b928      	cbnz	r0, 8008baa <__i2b+0x1a>
 8008b9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ba2:	4b04      	ldr	r3, [pc, #16]	; (8008bb4 <__i2b+0x24>)
 8008ba4:	4804      	ldr	r0, [pc, #16]	; (8008bb8 <__i2b+0x28>)
 8008ba6:	f001 ff9b 	bl	800aae0 <__assert_func>
 8008baa:	2301      	movs	r3, #1
 8008bac:	6144      	str	r4, [r0, #20]
 8008bae:	6103      	str	r3, [r0, #16]
 8008bb0:	bd10      	pop	{r4, pc}
 8008bb2:	bf00      	nop
 8008bb4:	0800c956 	.word	0x0800c956
 8008bb8:	0800c9d0 	.word	0x0800c9d0

08008bbc <__multiply>:
 8008bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	690a      	ldr	r2, [r1, #16]
 8008bc4:	6923      	ldr	r3, [r4, #16]
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	bfbe      	ittt	lt
 8008bcc:	460b      	movlt	r3, r1
 8008bce:	4625      	movlt	r5, r4
 8008bd0:	461c      	movlt	r4, r3
 8008bd2:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008bd6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008bda:	68ab      	ldr	r3, [r5, #8]
 8008bdc:	6869      	ldr	r1, [r5, #4]
 8008bde:	eb0a 0709 	add.w	r7, sl, r9
 8008be2:	42bb      	cmp	r3, r7
 8008be4:	b085      	sub	sp, #20
 8008be6:	bfb8      	it	lt
 8008be8:	3101      	addlt	r1, #1
 8008bea:	f7ff fec1 	bl	8008970 <_Balloc>
 8008bee:	b930      	cbnz	r0, 8008bfe <__multiply+0x42>
 8008bf0:	4602      	mov	r2, r0
 8008bf2:	f240 115d 	movw	r1, #349	; 0x15d
 8008bf6:	4b41      	ldr	r3, [pc, #260]	; (8008cfc <__multiply+0x140>)
 8008bf8:	4841      	ldr	r0, [pc, #260]	; (8008d00 <__multiply+0x144>)
 8008bfa:	f001 ff71 	bl	800aae0 <__assert_func>
 8008bfe:	f100 0614 	add.w	r6, r0, #20
 8008c02:	4633      	mov	r3, r6
 8008c04:	2200      	movs	r2, #0
 8008c06:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008c0a:	4543      	cmp	r3, r8
 8008c0c:	d31e      	bcc.n	8008c4c <__multiply+0x90>
 8008c0e:	f105 0c14 	add.w	ip, r5, #20
 8008c12:	f104 0314 	add.w	r3, r4, #20
 8008c16:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8008c1a:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8008c1e:	9202      	str	r2, [sp, #8]
 8008c20:	ebac 0205 	sub.w	r2, ip, r5
 8008c24:	3a15      	subs	r2, #21
 8008c26:	f022 0203 	bic.w	r2, r2, #3
 8008c2a:	3204      	adds	r2, #4
 8008c2c:	f105 0115 	add.w	r1, r5, #21
 8008c30:	458c      	cmp	ip, r1
 8008c32:	bf38      	it	cc
 8008c34:	2204      	movcc	r2, #4
 8008c36:	9201      	str	r2, [sp, #4]
 8008c38:	9a02      	ldr	r2, [sp, #8]
 8008c3a:	9303      	str	r3, [sp, #12]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d808      	bhi.n	8008c52 <__multiply+0x96>
 8008c40:	2f00      	cmp	r7, #0
 8008c42:	dc55      	bgt.n	8008cf0 <__multiply+0x134>
 8008c44:	6107      	str	r7, [r0, #16]
 8008c46:	b005      	add	sp, #20
 8008c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4c:	f843 2b04 	str.w	r2, [r3], #4
 8008c50:	e7db      	b.n	8008c0a <__multiply+0x4e>
 8008c52:	f8b3 a000 	ldrh.w	sl, [r3]
 8008c56:	f1ba 0f00 	cmp.w	sl, #0
 8008c5a:	d020      	beq.n	8008c9e <__multiply+0xe2>
 8008c5c:	46b1      	mov	r9, r6
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f105 0e14 	add.w	lr, r5, #20
 8008c64:	f85e 4b04 	ldr.w	r4, [lr], #4
 8008c68:	f8d9 b000 	ldr.w	fp, [r9]
 8008c6c:	b2a1      	uxth	r1, r4
 8008c6e:	fa1f fb8b 	uxth.w	fp, fp
 8008c72:	fb0a b101 	mla	r1, sl, r1, fp
 8008c76:	4411      	add	r1, r2
 8008c78:	f8d9 2000 	ldr.w	r2, [r9]
 8008c7c:	0c24      	lsrs	r4, r4, #16
 8008c7e:	0c12      	lsrs	r2, r2, #16
 8008c80:	fb0a 2404 	mla	r4, sl, r4, r2
 8008c84:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008c88:	b289      	uxth	r1, r1
 8008c8a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008c8e:	45f4      	cmp	ip, lr
 8008c90:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008c94:	f849 1b04 	str.w	r1, [r9], #4
 8008c98:	d8e4      	bhi.n	8008c64 <__multiply+0xa8>
 8008c9a:	9901      	ldr	r1, [sp, #4]
 8008c9c:	5072      	str	r2, [r6, r1]
 8008c9e:	9a03      	ldr	r2, [sp, #12]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008ca6:	f1b9 0f00 	cmp.w	r9, #0
 8008caa:	d01f      	beq.n	8008cec <__multiply+0x130>
 8008cac:	46b6      	mov	lr, r6
 8008cae:	f04f 0a00 	mov.w	sl, #0
 8008cb2:	6834      	ldr	r4, [r6, #0]
 8008cb4:	f105 0114 	add.w	r1, r5, #20
 8008cb8:	880a      	ldrh	r2, [r1, #0]
 8008cba:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008cbe:	b2a4      	uxth	r4, r4
 8008cc0:	fb09 b202 	mla	r2, r9, r2, fp
 8008cc4:	4492      	add	sl, r2
 8008cc6:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008cca:	f84e 4b04 	str.w	r4, [lr], #4
 8008cce:	f851 4b04 	ldr.w	r4, [r1], #4
 8008cd2:	f8be 2000 	ldrh.w	r2, [lr]
 8008cd6:	0c24      	lsrs	r4, r4, #16
 8008cd8:	fb09 2404 	mla	r4, r9, r4, r2
 8008cdc:	458c      	cmp	ip, r1
 8008cde:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008ce2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008ce6:	d8e7      	bhi.n	8008cb8 <__multiply+0xfc>
 8008ce8:	9a01      	ldr	r2, [sp, #4]
 8008cea:	50b4      	str	r4, [r6, r2]
 8008cec:	3604      	adds	r6, #4
 8008cee:	e7a3      	b.n	8008c38 <__multiply+0x7c>
 8008cf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1a5      	bne.n	8008c44 <__multiply+0x88>
 8008cf8:	3f01      	subs	r7, #1
 8008cfa:	e7a1      	b.n	8008c40 <__multiply+0x84>
 8008cfc:	0800c956 	.word	0x0800c956
 8008d00:	0800c9d0 	.word	0x0800c9d0

08008d04 <__pow5mult>:
 8008d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d08:	4615      	mov	r5, r2
 8008d0a:	f012 0203 	ands.w	r2, r2, #3
 8008d0e:	4606      	mov	r6, r0
 8008d10:	460f      	mov	r7, r1
 8008d12:	d007      	beq.n	8008d24 <__pow5mult+0x20>
 8008d14:	4c1a      	ldr	r4, [pc, #104]	; (8008d80 <__pow5mult+0x7c>)
 8008d16:	3a01      	subs	r2, #1
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008d1e:	f7ff fe55 	bl	80089cc <__multadd>
 8008d22:	4607      	mov	r7, r0
 8008d24:	10ad      	asrs	r5, r5, #2
 8008d26:	d027      	beq.n	8008d78 <__pow5mult+0x74>
 8008d28:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8008d2a:	b944      	cbnz	r4, 8008d3e <__pow5mult+0x3a>
 8008d2c:	f240 2171 	movw	r1, #625	; 0x271
 8008d30:	4630      	mov	r0, r6
 8008d32:	f7ff ff2d 	bl	8008b90 <__i2b>
 8008d36:	2300      	movs	r3, #0
 8008d38:	4604      	mov	r4, r0
 8008d3a:	64b0      	str	r0, [r6, #72]	; 0x48
 8008d3c:	6003      	str	r3, [r0, #0]
 8008d3e:	f04f 0900 	mov.w	r9, #0
 8008d42:	07eb      	lsls	r3, r5, #31
 8008d44:	d50a      	bpl.n	8008d5c <__pow5mult+0x58>
 8008d46:	4639      	mov	r1, r7
 8008d48:	4622      	mov	r2, r4
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7ff ff36 	bl	8008bbc <__multiply>
 8008d50:	4680      	mov	r8, r0
 8008d52:	4639      	mov	r1, r7
 8008d54:	4630      	mov	r0, r6
 8008d56:	f7ff fe30 	bl	80089ba <_Bfree>
 8008d5a:	4647      	mov	r7, r8
 8008d5c:	106d      	asrs	r5, r5, #1
 8008d5e:	d00b      	beq.n	8008d78 <__pow5mult+0x74>
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	b938      	cbnz	r0, 8008d74 <__pow5mult+0x70>
 8008d64:	4622      	mov	r2, r4
 8008d66:	4621      	mov	r1, r4
 8008d68:	4630      	mov	r0, r6
 8008d6a:	f7ff ff27 	bl	8008bbc <__multiply>
 8008d6e:	6020      	str	r0, [r4, #0]
 8008d70:	f8c0 9000 	str.w	r9, [r0]
 8008d74:	4604      	mov	r4, r0
 8008d76:	e7e4      	b.n	8008d42 <__pow5mult+0x3e>
 8008d78:	4638      	mov	r0, r7
 8008d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d7e:	bf00      	nop
 8008d80:	0800cb20 	.word	0x0800cb20

08008d84 <__lshift>:
 8008d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d88:	460c      	mov	r4, r1
 8008d8a:	4607      	mov	r7, r0
 8008d8c:	4691      	mov	r9, r2
 8008d8e:	6923      	ldr	r3, [r4, #16]
 8008d90:	6849      	ldr	r1, [r1, #4]
 8008d92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d96:	68a3      	ldr	r3, [r4, #8]
 8008d98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d9c:	f108 0601 	add.w	r6, r8, #1
 8008da0:	42b3      	cmp	r3, r6
 8008da2:	db0b      	blt.n	8008dbc <__lshift+0x38>
 8008da4:	4638      	mov	r0, r7
 8008da6:	f7ff fde3 	bl	8008970 <_Balloc>
 8008daa:	4605      	mov	r5, r0
 8008dac:	b948      	cbnz	r0, 8008dc2 <__lshift+0x3e>
 8008dae:	4602      	mov	r2, r0
 8008db0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008db4:	4b27      	ldr	r3, [pc, #156]	; (8008e54 <__lshift+0xd0>)
 8008db6:	4828      	ldr	r0, [pc, #160]	; (8008e58 <__lshift+0xd4>)
 8008db8:	f001 fe92 	bl	800aae0 <__assert_func>
 8008dbc:	3101      	adds	r1, #1
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	e7ee      	b.n	8008da0 <__lshift+0x1c>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f100 0114 	add.w	r1, r0, #20
 8008dc8:	f100 0210 	add.w	r2, r0, #16
 8008dcc:	4618      	mov	r0, r3
 8008dce:	4553      	cmp	r3, sl
 8008dd0:	db33      	blt.n	8008e3a <__lshift+0xb6>
 8008dd2:	6920      	ldr	r0, [r4, #16]
 8008dd4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dd8:	f104 0314 	add.w	r3, r4, #20
 8008ddc:	f019 091f 	ands.w	r9, r9, #31
 8008de0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008de4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008de8:	d02b      	beq.n	8008e42 <__lshift+0xbe>
 8008dea:	468a      	mov	sl, r1
 8008dec:	2200      	movs	r2, #0
 8008dee:	f1c9 0e20 	rsb	lr, r9, #32
 8008df2:	6818      	ldr	r0, [r3, #0]
 8008df4:	fa00 f009 	lsl.w	r0, r0, r9
 8008df8:	4302      	orrs	r2, r0
 8008dfa:	f84a 2b04 	str.w	r2, [sl], #4
 8008dfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e02:	459c      	cmp	ip, r3
 8008e04:	fa22 f20e 	lsr.w	r2, r2, lr
 8008e08:	d8f3      	bhi.n	8008df2 <__lshift+0x6e>
 8008e0a:	ebac 0304 	sub.w	r3, ip, r4
 8008e0e:	3b15      	subs	r3, #21
 8008e10:	f023 0303 	bic.w	r3, r3, #3
 8008e14:	3304      	adds	r3, #4
 8008e16:	f104 0015 	add.w	r0, r4, #21
 8008e1a:	4584      	cmp	ip, r0
 8008e1c:	bf38      	it	cc
 8008e1e:	2304      	movcc	r3, #4
 8008e20:	50ca      	str	r2, [r1, r3]
 8008e22:	b10a      	cbz	r2, 8008e28 <__lshift+0xa4>
 8008e24:	f108 0602 	add.w	r6, r8, #2
 8008e28:	3e01      	subs	r6, #1
 8008e2a:	4638      	mov	r0, r7
 8008e2c:	4621      	mov	r1, r4
 8008e2e:	612e      	str	r6, [r5, #16]
 8008e30:	f7ff fdc3 	bl	80089ba <_Bfree>
 8008e34:	4628      	mov	r0, r5
 8008e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e3a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e3e:	3301      	adds	r3, #1
 8008e40:	e7c5      	b.n	8008dce <__lshift+0x4a>
 8008e42:	3904      	subs	r1, #4
 8008e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e48:	459c      	cmp	ip, r3
 8008e4a:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e4e:	d8f9      	bhi.n	8008e44 <__lshift+0xc0>
 8008e50:	e7ea      	b.n	8008e28 <__lshift+0xa4>
 8008e52:	bf00      	nop
 8008e54:	0800c956 	.word	0x0800c956
 8008e58:	0800c9d0 	.word	0x0800c9d0

08008e5c <__mcmp>:
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	690a      	ldr	r2, [r1, #16]
 8008e60:	6900      	ldr	r0, [r0, #16]
 8008e62:	b530      	push	{r4, r5, lr}
 8008e64:	1a80      	subs	r0, r0, r2
 8008e66:	d10d      	bne.n	8008e84 <__mcmp+0x28>
 8008e68:	3314      	adds	r3, #20
 8008e6a:	3114      	adds	r1, #20
 8008e6c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008e70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008e74:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008e78:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008e7c:	4295      	cmp	r5, r2
 8008e7e:	d002      	beq.n	8008e86 <__mcmp+0x2a>
 8008e80:	d304      	bcc.n	8008e8c <__mcmp+0x30>
 8008e82:	2001      	movs	r0, #1
 8008e84:	bd30      	pop	{r4, r5, pc}
 8008e86:	42a3      	cmp	r3, r4
 8008e88:	d3f4      	bcc.n	8008e74 <__mcmp+0x18>
 8008e8a:	e7fb      	b.n	8008e84 <__mcmp+0x28>
 8008e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e90:	e7f8      	b.n	8008e84 <__mcmp+0x28>
	...

08008e94 <__mdiff>:
 8008e94:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	460c      	mov	r4, r1
 8008e9a:	4606      	mov	r6, r0
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4692      	mov	sl, r2
 8008ea2:	f7ff ffdb 	bl	8008e5c <__mcmp>
 8008ea6:	1e05      	subs	r5, r0, #0
 8008ea8:	d111      	bne.n	8008ece <__mdiff+0x3a>
 8008eaa:	4629      	mov	r1, r5
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7ff fd5f 	bl	8008970 <_Balloc>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	b928      	cbnz	r0, 8008ec2 <__mdiff+0x2e>
 8008eb6:	f240 2132 	movw	r1, #562	; 0x232
 8008eba:	4b3c      	ldr	r3, [pc, #240]	; (8008fac <__mdiff+0x118>)
 8008ebc:	483c      	ldr	r0, [pc, #240]	; (8008fb0 <__mdiff+0x11c>)
 8008ebe:	f001 fe0f 	bl	800aae0 <__assert_func>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ec8:	4610      	mov	r0, r2
 8008eca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ece:	bfa4      	itt	ge
 8008ed0:	4653      	movge	r3, sl
 8008ed2:	46a2      	movge	sl, r4
 8008ed4:	4630      	mov	r0, r6
 8008ed6:	f8da 1004 	ldr.w	r1, [sl, #4]
 8008eda:	bfa6      	itte	ge
 8008edc:	461c      	movge	r4, r3
 8008ede:	2500      	movge	r5, #0
 8008ee0:	2501      	movlt	r5, #1
 8008ee2:	f7ff fd45 	bl	8008970 <_Balloc>
 8008ee6:	4602      	mov	r2, r0
 8008ee8:	b918      	cbnz	r0, 8008ef2 <__mdiff+0x5e>
 8008eea:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008eee:	4b2f      	ldr	r3, [pc, #188]	; (8008fac <__mdiff+0x118>)
 8008ef0:	e7e4      	b.n	8008ebc <__mdiff+0x28>
 8008ef2:	f100 0814 	add.w	r8, r0, #20
 8008ef6:	f8da 7010 	ldr.w	r7, [sl, #16]
 8008efa:	60c5      	str	r5, [r0, #12]
 8008efc:	f04f 0c00 	mov.w	ip, #0
 8008f00:	f10a 0514 	add.w	r5, sl, #20
 8008f04:	f10a 0010 	add.w	r0, sl, #16
 8008f08:	46c2      	mov	sl, r8
 8008f0a:	6926      	ldr	r6, [r4, #16]
 8008f0c:	f104 0914 	add.w	r9, r4, #20
 8008f10:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8008f14:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008f18:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8008f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008f20:	fa1f f18b 	uxth.w	r1, fp
 8008f24:	4461      	add	r1, ip
 8008f26:	fa1f fc83 	uxth.w	ip, r3
 8008f2a:	0c1b      	lsrs	r3, r3, #16
 8008f2c:	eba1 010c 	sub.w	r1, r1, ip
 8008f30:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f34:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008f38:	b289      	uxth	r1, r1
 8008f3a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8008f3e:	454e      	cmp	r6, r9
 8008f40:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008f44:	f84a 3b04 	str.w	r3, [sl], #4
 8008f48:	d8e6      	bhi.n	8008f18 <__mdiff+0x84>
 8008f4a:	1b33      	subs	r3, r6, r4
 8008f4c:	3b15      	subs	r3, #21
 8008f4e:	f023 0303 	bic.w	r3, r3, #3
 8008f52:	3415      	adds	r4, #21
 8008f54:	3304      	adds	r3, #4
 8008f56:	42a6      	cmp	r6, r4
 8008f58:	bf38      	it	cc
 8008f5a:	2304      	movcc	r3, #4
 8008f5c:	441d      	add	r5, r3
 8008f5e:	4443      	add	r3, r8
 8008f60:	461e      	mov	r6, r3
 8008f62:	462c      	mov	r4, r5
 8008f64:	4574      	cmp	r4, lr
 8008f66:	d30e      	bcc.n	8008f86 <__mdiff+0xf2>
 8008f68:	f10e 0103 	add.w	r1, lr, #3
 8008f6c:	1b49      	subs	r1, r1, r5
 8008f6e:	f021 0103 	bic.w	r1, r1, #3
 8008f72:	3d03      	subs	r5, #3
 8008f74:	45ae      	cmp	lr, r5
 8008f76:	bf38      	it	cc
 8008f78:	2100      	movcc	r1, #0
 8008f7a:	4419      	add	r1, r3
 8008f7c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8008f80:	b18b      	cbz	r3, 8008fa6 <__mdiff+0x112>
 8008f82:	6117      	str	r7, [r2, #16]
 8008f84:	e7a0      	b.n	8008ec8 <__mdiff+0x34>
 8008f86:	f854 8b04 	ldr.w	r8, [r4], #4
 8008f8a:	fa1f f188 	uxth.w	r1, r8
 8008f8e:	4461      	add	r1, ip
 8008f90:	1408      	asrs	r0, r1, #16
 8008f92:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8008f96:	b289      	uxth	r1, r1
 8008f98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008fa0:	f846 1b04 	str.w	r1, [r6], #4
 8008fa4:	e7de      	b.n	8008f64 <__mdiff+0xd0>
 8008fa6:	3f01      	subs	r7, #1
 8008fa8:	e7e8      	b.n	8008f7c <__mdiff+0xe8>
 8008faa:	bf00      	nop
 8008fac:	0800c956 	.word	0x0800c956
 8008fb0:	0800c9d0 	.word	0x0800c9d0

08008fb4 <__ulp>:
 8008fb4:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <__ulp+0x48>)
 8008fb6:	400b      	ands	r3, r1
 8008fb8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	dd02      	ble.n	8008fc6 <__ulp+0x12>
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	4770      	bx	lr
 8008fc6:	425b      	negs	r3, r3
 8008fc8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8008fcc:	f04f 0000 	mov.w	r0, #0
 8008fd0:	f04f 0100 	mov.w	r1, #0
 8008fd4:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008fd8:	da04      	bge.n	8008fe4 <__ulp+0x30>
 8008fda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008fde:	fa43 f102 	asr.w	r1, r3, r2
 8008fe2:	4770      	bx	lr
 8008fe4:	f1a2 0314 	sub.w	r3, r2, #20
 8008fe8:	2b1e      	cmp	r3, #30
 8008fea:	bfd6      	itet	le
 8008fec:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8008ff0:	2301      	movgt	r3, #1
 8008ff2:	fa22 f303 	lsrle.w	r3, r2, r3
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	7ff00000 	.word	0x7ff00000

08009000 <__b2d>:
 8009000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009004:	6907      	ldr	r7, [r0, #16]
 8009006:	f100 0914 	add.w	r9, r0, #20
 800900a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800900e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8009012:	f1a7 0804 	sub.w	r8, r7, #4
 8009016:	4630      	mov	r0, r6
 8009018:	f7ff fd6c 	bl	8008af4 <__hi0bits>
 800901c:	f1c0 0320 	rsb	r3, r0, #32
 8009020:	280a      	cmp	r0, #10
 8009022:	600b      	str	r3, [r1, #0]
 8009024:	491f      	ldr	r1, [pc, #124]	; (80090a4 <__b2d+0xa4>)
 8009026:	dc17      	bgt.n	8009058 <__b2d+0x58>
 8009028:	45c1      	cmp	r9, r8
 800902a:	bf28      	it	cs
 800902c:	2200      	movcs	r2, #0
 800902e:	f1c0 0c0b 	rsb	ip, r0, #11
 8009032:	fa26 f30c 	lsr.w	r3, r6, ip
 8009036:	bf38      	it	cc
 8009038:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800903c:	ea43 0501 	orr.w	r5, r3, r1
 8009040:	f100 0315 	add.w	r3, r0, #21
 8009044:	fa06 f303 	lsl.w	r3, r6, r3
 8009048:	fa22 f20c 	lsr.w	r2, r2, ip
 800904c:	ea43 0402 	orr.w	r4, r3, r2
 8009050:	4620      	mov	r0, r4
 8009052:	4629      	mov	r1, r5
 8009054:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009058:	45c1      	cmp	r9, r8
 800905a:	bf2e      	itee	cs
 800905c:	2200      	movcs	r2, #0
 800905e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8009062:	f1a7 0808 	subcc.w	r8, r7, #8
 8009066:	f1b0 030b 	subs.w	r3, r0, #11
 800906a:	d016      	beq.n	800909a <__b2d+0x9a>
 800906c:	f1c3 0720 	rsb	r7, r3, #32
 8009070:	fa22 f107 	lsr.w	r1, r2, r7
 8009074:	45c8      	cmp	r8, r9
 8009076:	fa06 f603 	lsl.w	r6, r6, r3
 800907a:	ea46 0601 	orr.w	r6, r6, r1
 800907e:	bf94      	ite	ls
 8009080:	2100      	movls	r1, #0
 8009082:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8009086:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800908a:	fa02 f003 	lsl.w	r0, r2, r3
 800908e:	40f9      	lsrs	r1, r7
 8009090:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009094:	ea40 0401 	orr.w	r4, r0, r1
 8009098:	e7da      	b.n	8009050 <__b2d+0x50>
 800909a:	4614      	mov	r4, r2
 800909c:	ea46 0501 	orr.w	r5, r6, r1
 80090a0:	e7d6      	b.n	8009050 <__b2d+0x50>
 80090a2:	bf00      	nop
 80090a4:	3ff00000 	.word	0x3ff00000

080090a8 <__d2b>:
 80090a8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80090ac:	2101      	movs	r1, #1
 80090ae:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80090b2:	4690      	mov	r8, r2
 80090b4:	461d      	mov	r5, r3
 80090b6:	f7ff fc5b 	bl	8008970 <_Balloc>
 80090ba:	4604      	mov	r4, r0
 80090bc:	b930      	cbnz	r0, 80090cc <__d2b+0x24>
 80090be:	4602      	mov	r2, r0
 80090c0:	f240 310a 	movw	r1, #778	; 0x30a
 80090c4:	4b24      	ldr	r3, [pc, #144]	; (8009158 <__d2b+0xb0>)
 80090c6:	4825      	ldr	r0, [pc, #148]	; (800915c <__d2b+0xb4>)
 80090c8:	f001 fd0a 	bl	800aae0 <__assert_func>
 80090cc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80090d0:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80090d4:	bb2d      	cbnz	r5, 8009122 <__d2b+0x7a>
 80090d6:	9301      	str	r3, [sp, #4]
 80090d8:	f1b8 0300 	subs.w	r3, r8, #0
 80090dc:	d026      	beq.n	800912c <__d2b+0x84>
 80090de:	4668      	mov	r0, sp
 80090e0:	9300      	str	r3, [sp, #0]
 80090e2:	f7ff fd27 	bl	8008b34 <__lo0bits>
 80090e6:	9900      	ldr	r1, [sp, #0]
 80090e8:	b1f0      	cbz	r0, 8009128 <__d2b+0x80>
 80090ea:	9a01      	ldr	r2, [sp, #4]
 80090ec:	f1c0 0320 	rsb	r3, r0, #32
 80090f0:	fa02 f303 	lsl.w	r3, r2, r3
 80090f4:	430b      	orrs	r3, r1
 80090f6:	40c2      	lsrs	r2, r0
 80090f8:	6163      	str	r3, [r4, #20]
 80090fa:	9201      	str	r2, [sp, #4]
 80090fc:	9b01      	ldr	r3, [sp, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	bf14      	ite	ne
 8009102:	2102      	movne	r1, #2
 8009104:	2101      	moveq	r1, #1
 8009106:	61a3      	str	r3, [r4, #24]
 8009108:	6121      	str	r1, [r4, #16]
 800910a:	b1c5      	cbz	r5, 800913e <__d2b+0x96>
 800910c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009110:	4405      	add	r5, r0
 8009112:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009116:	603d      	str	r5, [r7, #0]
 8009118:	6030      	str	r0, [r6, #0]
 800911a:	4620      	mov	r0, r4
 800911c:	b002      	add	sp, #8
 800911e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009126:	e7d6      	b.n	80090d6 <__d2b+0x2e>
 8009128:	6161      	str	r1, [r4, #20]
 800912a:	e7e7      	b.n	80090fc <__d2b+0x54>
 800912c:	a801      	add	r0, sp, #4
 800912e:	f7ff fd01 	bl	8008b34 <__lo0bits>
 8009132:	2101      	movs	r1, #1
 8009134:	9b01      	ldr	r3, [sp, #4]
 8009136:	6121      	str	r1, [r4, #16]
 8009138:	6163      	str	r3, [r4, #20]
 800913a:	3020      	adds	r0, #32
 800913c:	e7e5      	b.n	800910a <__d2b+0x62>
 800913e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8009142:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009146:	6038      	str	r0, [r7, #0]
 8009148:	6918      	ldr	r0, [r3, #16]
 800914a:	f7ff fcd3 	bl	8008af4 <__hi0bits>
 800914e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8009152:	6031      	str	r1, [r6, #0]
 8009154:	e7e1      	b.n	800911a <__d2b+0x72>
 8009156:	bf00      	nop
 8009158:	0800c956 	.word	0x0800c956
 800915c:	0800c9d0 	.word	0x0800c9d0

08009160 <__ratio>:
 8009160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	4688      	mov	r8, r1
 8009166:	4669      	mov	r1, sp
 8009168:	4681      	mov	r9, r0
 800916a:	f7ff ff49 	bl	8009000 <__b2d>
 800916e:	460f      	mov	r7, r1
 8009170:	4604      	mov	r4, r0
 8009172:	460d      	mov	r5, r1
 8009174:	4640      	mov	r0, r8
 8009176:	a901      	add	r1, sp, #4
 8009178:	f7ff ff42 	bl	8009000 <__b2d>
 800917c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009180:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009184:	468b      	mov	fp, r1
 8009186:	eba3 0c02 	sub.w	ip, r3, r2
 800918a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800918e:	1a9b      	subs	r3, r3, r2
 8009190:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009194:	2b00      	cmp	r3, #0
 8009196:	bfd5      	itete	le
 8009198:	460a      	movle	r2, r1
 800919a:	462a      	movgt	r2, r5
 800919c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80091a0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80091a4:	bfd8      	it	le
 80091a6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80091aa:	465b      	mov	r3, fp
 80091ac:	4602      	mov	r2, r0
 80091ae:	4639      	mov	r1, r7
 80091b0:	4620      	mov	r0, r4
 80091b2:	f7f7 fabb 	bl	800072c <__aeabi_ddiv>
 80091b6:	b003      	add	sp, #12
 80091b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091bc <__copybits>:
 80091bc:	3901      	subs	r1, #1
 80091be:	b570      	push	{r4, r5, r6, lr}
 80091c0:	1149      	asrs	r1, r1, #5
 80091c2:	6914      	ldr	r4, [r2, #16]
 80091c4:	3101      	adds	r1, #1
 80091c6:	f102 0314 	add.w	r3, r2, #20
 80091ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80091ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80091d2:	1f05      	subs	r5, r0, #4
 80091d4:	42a3      	cmp	r3, r4
 80091d6:	d30c      	bcc.n	80091f2 <__copybits+0x36>
 80091d8:	1aa3      	subs	r3, r4, r2
 80091da:	3b11      	subs	r3, #17
 80091dc:	f023 0303 	bic.w	r3, r3, #3
 80091e0:	3211      	adds	r2, #17
 80091e2:	42a2      	cmp	r2, r4
 80091e4:	bf88      	it	hi
 80091e6:	2300      	movhi	r3, #0
 80091e8:	4418      	add	r0, r3
 80091ea:	2300      	movs	r3, #0
 80091ec:	4288      	cmp	r0, r1
 80091ee:	d305      	bcc.n	80091fc <__copybits+0x40>
 80091f0:	bd70      	pop	{r4, r5, r6, pc}
 80091f2:	f853 6b04 	ldr.w	r6, [r3], #4
 80091f6:	f845 6f04 	str.w	r6, [r5, #4]!
 80091fa:	e7eb      	b.n	80091d4 <__copybits+0x18>
 80091fc:	f840 3b04 	str.w	r3, [r0], #4
 8009200:	e7f4      	b.n	80091ec <__copybits+0x30>

08009202 <__any_on>:
 8009202:	f100 0214 	add.w	r2, r0, #20
 8009206:	6900      	ldr	r0, [r0, #16]
 8009208:	114b      	asrs	r3, r1, #5
 800920a:	4298      	cmp	r0, r3
 800920c:	b510      	push	{r4, lr}
 800920e:	db11      	blt.n	8009234 <__any_on+0x32>
 8009210:	dd0a      	ble.n	8009228 <__any_on+0x26>
 8009212:	f011 011f 	ands.w	r1, r1, #31
 8009216:	d007      	beq.n	8009228 <__any_on+0x26>
 8009218:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800921c:	fa24 f001 	lsr.w	r0, r4, r1
 8009220:	fa00 f101 	lsl.w	r1, r0, r1
 8009224:	428c      	cmp	r4, r1
 8009226:	d10b      	bne.n	8009240 <__any_on+0x3e>
 8009228:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800922c:	4293      	cmp	r3, r2
 800922e:	d803      	bhi.n	8009238 <__any_on+0x36>
 8009230:	2000      	movs	r0, #0
 8009232:	bd10      	pop	{r4, pc}
 8009234:	4603      	mov	r3, r0
 8009236:	e7f7      	b.n	8009228 <__any_on+0x26>
 8009238:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800923c:	2900      	cmp	r1, #0
 800923e:	d0f5      	beq.n	800922c <__any_on+0x2a>
 8009240:	2001      	movs	r0, #1
 8009242:	e7f6      	b.n	8009232 <__any_on+0x30>

08009244 <_read_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	2200      	movs	r2, #0
 800924e:	4d05      	ldr	r5, [pc, #20]	; (8009264 <_read_r+0x20>)
 8009250:	602a      	str	r2, [r5, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f7f8 fb69 	bl	800192a <_read>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_read_r+0x1e>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_read_r+0x1e>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	20001c54 	.word	0x20001c54

08009268 <realloc>:
 8009268:	4b02      	ldr	r3, [pc, #8]	; (8009274 <realloc+0xc>)
 800926a:	460a      	mov	r2, r1
 800926c:	4601      	mov	r1, r0
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	f000 b802 	b.w	8009278 <_realloc_r>
 8009274:	20000068 	.word	0x20000068

08009278 <_realloc_r>:
 8009278:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927c:	460c      	mov	r4, r1
 800927e:	4681      	mov	r9, r0
 8009280:	4611      	mov	r1, r2
 8009282:	b924      	cbnz	r4, 800928e <_realloc_r+0x16>
 8009284:	b003      	add	sp, #12
 8009286:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800928a:	f7ff b8e9 	b.w	8008460 <_malloc_r>
 800928e:	9201      	str	r2, [sp, #4]
 8009290:	f7ff fb62 	bl	8008958 <__malloc_lock>
 8009294:	9901      	ldr	r1, [sp, #4]
 8009296:	f101 080b 	add.w	r8, r1, #11
 800929a:	f1b8 0f16 	cmp.w	r8, #22
 800929e:	d90b      	bls.n	80092b8 <_realloc_r+0x40>
 80092a0:	f038 0807 	bics.w	r8, r8, #7
 80092a4:	d50a      	bpl.n	80092bc <_realloc_r+0x44>
 80092a6:	230c      	movs	r3, #12
 80092a8:	f04f 0b00 	mov.w	fp, #0
 80092ac:	f8c9 3000 	str.w	r3, [r9]
 80092b0:	4658      	mov	r0, fp
 80092b2:	b003      	add	sp, #12
 80092b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b8:	f04f 0810 	mov.w	r8, #16
 80092bc:	4588      	cmp	r8, r1
 80092be:	d3f2      	bcc.n	80092a6 <_realloc_r+0x2e>
 80092c0:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80092c4:	f1a4 0a08 	sub.w	sl, r4, #8
 80092c8:	f025 0603 	bic.w	r6, r5, #3
 80092cc:	45b0      	cmp	r8, r6
 80092ce:	f340 8173 	ble.w	80095b8 <_realloc_r+0x340>
 80092d2:	48aa      	ldr	r0, [pc, #680]	; (800957c <_realloc_r+0x304>)
 80092d4:	eb0a 0306 	add.w	r3, sl, r6
 80092d8:	f8d0 c008 	ldr.w	ip, [r0, #8]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	459c      	cmp	ip, r3
 80092e0:	9001      	str	r0, [sp, #4]
 80092e2:	d005      	beq.n	80092f0 <_realloc_r+0x78>
 80092e4:	f022 0001 	bic.w	r0, r2, #1
 80092e8:	4418      	add	r0, r3
 80092ea:	6840      	ldr	r0, [r0, #4]
 80092ec:	07c7      	lsls	r7, r0, #31
 80092ee:	d427      	bmi.n	8009340 <_realloc_r+0xc8>
 80092f0:	f022 0203 	bic.w	r2, r2, #3
 80092f4:	459c      	cmp	ip, r3
 80092f6:	eb06 0702 	add.w	r7, r6, r2
 80092fa:	d119      	bne.n	8009330 <_realloc_r+0xb8>
 80092fc:	f108 0010 	add.w	r0, r8, #16
 8009300:	42b8      	cmp	r0, r7
 8009302:	dc1f      	bgt.n	8009344 <_realloc_r+0xcc>
 8009304:	9a01      	ldr	r2, [sp, #4]
 8009306:	eba7 0708 	sub.w	r7, r7, r8
 800930a:	eb0a 0308 	add.w	r3, sl, r8
 800930e:	f047 0701 	orr.w	r7, r7, #1
 8009312:	6093      	str	r3, [r2, #8]
 8009314:	605f      	str	r7, [r3, #4]
 8009316:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800931a:	4648      	mov	r0, r9
 800931c:	f003 0301 	and.w	r3, r3, #1
 8009320:	ea43 0308 	orr.w	r3, r3, r8
 8009324:	f844 3c04 	str.w	r3, [r4, #-4]
 8009328:	f7ff fb1c 	bl	8008964 <__malloc_unlock>
 800932c:	46a3      	mov	fp, r4
 800932e:	e7bf      	b.n	80092b0 <_realloc_r+0x38>
 8009330:	45b8      	cmp	r8, r7
 8009332:	dc07      	bgt.n	8009344 <_realloc_r+0xcc>
 8009334:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009338:	60da      	str	r2, [r3, #12]
 800933a:	6093      	str	r3, [r2, #8]
 800933c:	4655      	mov	r5, sl
 800933e:	e080      	b.n	8009442 <_realloc_r+0x1ca>
 8009340:	2200      	movs	r2, #0
 8009342:	4613      	mov	r3, r2
 8009344:	07e8      	lsls	r0, r5, #31
 8009346:	f100 80e8 	bmi.w	800951a <_realloc_r+0x2a2>
 800934a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800934e:	ebaa 0505 	sub.w	r5, sl, r5
 8009352:	6868      	ldr	r0, [r5, #4]
 8009354:	f020 0003 	bic.w	r0, r0, #3
 8009358:	eb00 0b06 	add.w	fp, r0, r6
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 80a7 	beq.w	80094b0 <_realloc_r+0x238>
 8009362:	459c      	cmp	ip, r3
 8009364:	eb02 070b 	add.w	r7, r2, fp
 8009368:	d14b      	bne.n	8009402 <_realloc_r+0x18a>
 800936a:	f108 0310 	add.w	r3, r8, #16
 800936e:	42bb      	cmp	r3, r7
 8009370:	f300 809e 	bgt.w	80094b0 <_realloc_r+0x238>
 8009374:	46ab      	mov	fp, r5
 8009376:	68eb      	ldr	r3, [r5, #12]
 8009378:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800937c:	60d3      	str	r3, [r2, #12]
 800937e:	609a      	str	r2, [r3, #8]
 8009380:	1f32      	subs	r2, r6, #4
 8009382:	2a24      	cmp	r2, #36	; 0x24
 8009384:	d838      	bhi.n	80093f8 <_realloc_r+0x180>
 8009386:	2a13      	cmp	r2, #19
 8009388:	d934      	bls.n	80093f4 <_realloc_r+0x17c>
 800938a:	6823      	ldr	r3, [r4, #0]
 800938c:	2a1b      	cmp	r2, #27
 800938e:	60ab      	str	r3, [r5, #8]
 8009390:	6863      	ldr	r3, [r4, #4]
 8009392:	60eb      	str	r3, [r5, #12]
 8009394:	d81b      	bhi.n	80093ce <_realloc_r+0x156>
 8009396:	3408      	adds	r4, #8
 8009398:	f105 0310 	add.w	r3, r5, #16
 800939c:	6822      	ldr	r2, [r4, #0]
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	6862      	ldr	r2, [r4, #4]
 80093a2:	605a      	str	r2, [r3, #4]
 80093a4:	68a2      	ldr	r2, [r4, #8]
 80093a6:	609a      	str	r2, [r3, #8]
 80093a8:	9a01      	ldr	r2, [sp, #4]
 80093aa:	eba7 0708 	sub.w	r7, r7, r8
 80093ae:	eb05 0308 	add.w	r3, r5, r8
 80093b2:	f047 0701 	orr.w	r7, r7, #1
 80093b6:	6093      	str	r3, [r2, #8]
 80093b8:	605f      	str	r7, [r3, #4]
 80093ba:	686b      	ldr	r3, [r5, #4]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	ea43 0308 	orr.w	r3, r3, r8
 80093c4:	606b      	str	r3, [r5, #4]
 80093c6:	4648      	mov	r0, r9
 80093c8:	f7ff facc 	bl	8008964 <__malloc_unlock>
 80093cc:	e770      	b.n	80092b0 <_realloc_r+0x38>
 80093ce:	68a3      	ldr	r3, [r4, #8]
 80093d0:	2a24      	cmp	r2, #36	; 0x24
 80093d2:	612b      	str	r3, [r5, #16]
 80093d4:	68e3      	ldr	r3, [r4, #12]
 80093d6:	bf18      	it	ne
 80093d8:	3410      	addne	r4, #16
 80093da:	616b      	str	r3, [r5, #20]
 80093dc:	bf09      	itett	eq
 80093de:	6923      	ldreq	r3, [r4, #16]
 80093e0:	f105 0318 	addne.w	r3, r5, #24
 80093e4:	61ab      	streq	r3, [r5, #24]
 80093e6:	6962      	ldreq	r2, [r4, #20]
 80093e8:	bf02      	ittt	eq
 80093ea:	f105 0320 	addeq.w	r3, r5, #32
 80093ee:	61ea      	streq	r2, [r5, #28]
 80093f0:	3418      	addeq	r4, #24
 80093f2:	e7d3      	b.n	800939c <_realloc_r+0x124>
 80093f4:	465b      	mov	r3, fp
 80093f6:	e7d1      	b.n	800939c <_realloc_r+0x124>
 80093f8:	4621      	mov	r1, r4
 80093fa:	4658      	mov	r0, fp
 80093fc:	f002 f876 	bl	800b4ec <memmove>
 8009400:	e7d2      	b.n	80093a8 <_realloc_r+0x130>
 8009402:	45b8      	cmp	r8, r7
 8009404:	dc54      	bgt.n	80094b0 <_realloc_r+0x238>
 8009406:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800940a:	4628      	mov	r0, r5
 800940c:	60da      	str	r2, [r3, #12]
 800940e:	6093      	str	r3, [r2, #8]
 8009410:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009414:	68eb      	ldr	r3, [r5, #12]
 8009416:	60d3      	str	r3, [r2, #12]
 8009418:	609a      	str	r2, [r3, #8]
 800941a:	1f32      	subs	r2, r6, #4
 800941c:	2a24      	cmp	r2, #36	; 0x24
 800941e:	d843      	bhi.n	80094a8 <_realloc_r+0x230>
 8009420:	2a13      	cmp	r2, #19
 8009422:	d908      	bls.n	8009436 <_realloc_r+0x1be>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	2a1b      	cmp	r2, #27
 8009428:	60ab      	str	r3, [r5, #8]
 800942a:	6863      	ldr	r3, [r4, #4]
 800942c:	60eb      	str	r3, [r5, #12]
 800942e:	d828      	bhi.n	8009482 <_realloc_r+0x20a>
 8009430:	3408      	adds	r4, #8
 8009432:	f105 0010 	add.w	r0, r5, #16
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	6003      	str	r3, [r0, #0]
 800943a:	6863      	ldr	r3, [r4, #4]
 800943c:	6043      	str	r3, [r0, #4]
 800943e:	68a3      	ldr	r3, [r4, #8]
 8009440:	6083      	str	r3, [r0, #8]
 8009442:	686a      	ldr	r2, [r5, #4]
 8009444:	eba7 0008 	sub.w	r0, r7, r8
 8009448:	280f      	cmp	r0, #15
 800944a:	f002 0201 	and.w	r2, r2, #1
 800944e:	eb05 0307 	add.w	r3, r5, r7
 8009452:	f240 80b3 	bls.w	80095bc <_realloc_r+0x344>
 8009456:	eb05 0108 	add.w	r1, r5, r8
 800945a:	ea48 0202 	orr.w	r2, r8, r2
 800945e:	f040 0001 	orr.w	r0, r0, #1
 8009462:	606a      	str	r2, [r5, #4]
 8009464:	6048      	str	r0, [r1, #4]
 8009466:	685a      	ldr	r2, [r3, #4]
 8009468:	4648      	mov	r0, r9
 800946a:	f042 0201 	orr.w	r2, r2, #1
 800946e:	605a      	str	r2, [r3, #4]
 8009470:	3108      	adds	r1, #8
 8009472:	f7fe fef7 	bl	8008264 <_free_r>
 8009476:	4648      	mov	r0, r9
 8009478:	f7ff fa74 	bl	8008964 <__malloc_unlock>
 800947c:	f105 0b08 	add.w	fp, r5, #8
 8009480:	e716      	b.n	80092b0 <_realloc_r+0x38>
 8009482:	68a3      	ldr	r3, [r4, #8]
 8009484:	2a24      	cmp	r2, #36	; 0x24
 8009486:	612b      	str	r3, [r5, #16]
 8009488:	68e3      	ldr	r3, [r4, #12]
 800948a:	bf18      	it	ne
 800948c:	f105 0018 	addne.w	r0, r5, #24
 8009490:	616b      	str	r3, [r5, #20]
 8009492:	bf09      	itett	eq
 8009494:	6923      	ldreq	r3, [r4, #16]
 8009496:	3410      	addne	r4, #16
 8009498:	61ab      	streq	r3, [r5, #24]
 800949a:	6963      	ldreq	r3, [r4, #20]
 800949c:	bf02      	ittt	eq
 800949e:	f105 0020 	addeq.w	r0, r5, #32
 80094a2:	61eb      	streq	r3, [r5, #28]
 80094a4:	3418      	addeq	r4, #24
 80094a6:	e7c6      	b.n	8009436 <_realloc_r+0x1be>
 80094a8:	4621      	mov	r1, r4
 80094aa:	f002 f81f 	bl	800b4ec <memmove>
 80094ae:	e7c8      	b.n	8009442 <_realloc_r+0x1ca>
 80094b0:	45d8      	cmp	r8, fp
 80094b2:	dc32      	bgt.n	800951a <_realloc_r+0x2a2>
 80094b4:	4628      	mov	r0, r5
 80094b6:	68eb      	ldr	r3, [r5, #12]
 80094b8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80094bc:	60d3      	str	r3, [r2, #12]
 80094be:	609a      	str	r2, [r3, #8]
 80094c0:	1f32      	subs	r2, r6, #4
 80094c2:	2a24      	cmp	r2, #36	; 0x24
 80094c4:	d825      	bhi.n	8009512 <_realloc_r+0x29a>
 80094c6:	2a13      	cmp	r2, #19
 80094c8:	d908      	bls.n	80094dc <_realloc_r+0x264>
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	2a1b      	cmp	r2, #27
 80094ce:	60ab      	str	r3, [r5, #8]
 80094d0:	6863      	ldr	r3, [r4, #4]
 80094d2:	60eb      	str	r3, [r5, #12]
 80094d4:	d80a      	bhi.n	80094ec <_realloc_r+0x274>
 80094d6:	3408      	adds	r4, #8
 80094d8:	f105 0010 	add.w	r0, r5, #16
 80094dc:	6823      	ldr	r3, [r4, #0]
 80094de:	6003      	str	r3, [r0, #0]
 80094e0:	6863      	ldr	r3, [r4, #4]
 80094e2:	6043      	str	r3, [r0, #4]
 80094e4:	68a3      	ldr	r3, [r4, #8]
 80094e6:	6083      	str	r3, [r0, #8]
 80094e8:	465f      	mov	r7, fp
 80094ea:	e7aa      	b.n	8009442 <_realloc_r+0x1ca>
 80094ec:	68a3      	ldr	r3, [r4, #8]
 80094ee:	2a24      	cmp	r2, #36	; 0x24
 80094f0:	612b      	str	r3, [r5, #16]
 80094f2:	68e3      	ldr	r3, [r4, #12]
 80094f4:	bf18      	it	ne
 80094f6:	f105 0018 	addne.w	r0, r5, #24
 80094fa:	616b      	str	r3, [r5, #20]
 80094fc:	bf09      	itett	eq
 80094fe:	6923      	ldreq	r3, [r4, #16]
 8009500:	3410      	addne	r4, #16
 8009502:	61ab      	streq	r3, [r5, #24]
 8009504:	6963      	ldreq	r3, [r4, #20]
 8009506:	bf02      	ittt	eq
 8009508:	f105 0020 	addeq.w	r0, r5, #32
 800950c:	61eb      	streq	r3, [r5, #28]
 800950e:	3418      	addeq	r4, #24
 8009510:	e7e4      	b.n	80094dc <_realloc_r+0x264>
 8009512:	4621      	mov	r1, r4
 8009514:	f001 ffea 	bl	800b4ec <memmove>
 8009518:	e7e6      	b.n	80094e8 <_realloc_r+0x270>
 800951a:	4648      	mov	r0, r9
 800951c:	f7fe ffa0 	bl	8008460 <_malloc_r>
 8009520:	4683      	mov	fp, r0
 8009522:	2800      	cmp	r0, #0
 8009524:	f43f af4f 	beq.w	80093c6 <_realloc_r+0x14e>
 8009528:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800952c:	f1a0 0208 	sub.w	r2, r0, #8
 8009530:	f023 0301 	bic.w	r3, r3, #1
 8009534:	4453      	add	r3, sl
 8009536:	4293      	cmp	r3, r2
 8009538:	d105      	bne.n	8009546 <_realloc_r+0x2ce>
 800953a:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800953e:	f027 0703 	bic.w	r7, r7, #3
 8009542:	4437      	add	r7, r6
 8009544:	e6fa      	b.n	800933c <_realloc_r+0xc4>
 8009546:	1f32      	subs	r2, r6, #4
 8009548:	2a24      	cmp	r2, #36	; 0x24
 800954a:	d831      	bhi.n	80095b0 <_realloc_r+0x338>
 800954c:	2a13      	cmp	r2, #19
 800954e:	d92c      	bls.n	80095aa <_realloc_r+0x332>
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	2a1b      	cmp	r2, #27
 8009554:	6003      	str	r3, [r0, #0]
 8009556:	6863      	ldr	r3, [r4, #4]
 8009558:	6043      	str	r3, [r0, #4]
 800955a:	d811      	bhi.n	8009580 <_realloc_r+0x308>
 800955c:	f104 0208 	add.w	r2, r4, #8
 8009560:	f100 0308 	add.w	r3, r0, #8
 8009564:	6811      	ldr	r1, [r2, #0]
 8009566:	6019      	str	r1, [r3, #0]
 8009568:	6851      	ldr	r1, [r2, #4]
 800956a:	6059      	str	r1, [r3, #4]
 800956c:	6892      	ldr	r2, [r2, #8]
 800956e:	609a      	str	r2, [r3, #8]
 8009570:	4621      	mov	r1, r4
 8009572:	4648      	mov	r0, r9
 8009574:	f7fe fe76 	bl	8008264 <_free_r>
 8009578:	e725      	b.n	80093c6 <_realloc_r+0x14e>
 800957a:	bf00      	nop
 800957c:	20000608 	.word	0x20000608
 8009580:	68a3      	ldr	r3, [r4, #8]
 8009582:	2a24      	cmp	r2, #36	; 0x24
 8009584:	6083      	str	r3, [r0, #8]
 8009586:	68e3      	ldr	r3, [r4, #12]
 8009588:	bf18      	it	ne
 800958a:	f104 0210 	addne.w	r2, r4, #16
 800958e:	60c3      	str	r3, [r0, #12]
 8009590:	bf09      	itett	eq
 8009592:	6923      	ldreq	r3, [r4, #16]
 8009594:	f100 0310 	addne.w	r3, r0, #16
 8009598:	6103      	streq	r3, [r0, #16]
 800959a:	6961      	ldreq	r1, [r4, #20]
 800959c:	bf02      	ittt	eq
 800959e:	f104 0218 	addeq.w	r2, r4, #24
 80095a2:	f100 0318 	addeq.w	r3, r0, #24
 80095a6:	6141      	streq	r1, [r0, #20]
 80095a8:	e7dc      	b.n	8009564 <_realloc_r+0x2ec>
 80095aa:	4603      	mov	r3, r0
 80095ac:	4622      	mov	r2, r4
 80095ae:	e7d9      	b.n	8009564 <_realloc_r+0x2ec>
 80095b0:	4621      	mov	r1, r4
 80095b2:	f001 ff9b 	bl	800b4ec <memmove>
 80095b6:	e7db      	b.n	8009570 <_realloc_r+0x2f8>
 80095b8:	4637      	mov	r7, r6
 80095ba:	e6bf      	b.n	800933c <_realloc_r+0xc4>
 80095bc:	4317      	orrs	r7, r2
 80095be:	606f      	str	r7, [r5, #4]
 80095c0:	685a      	ldr	r2, [r3, #4]
 80095c2:	f042 0201 	orr.w	r2, r2, #1
 80095c6:	605a      	str	r2, [r3, #4]
 80095c8:	e755      	b.n	8009476 <_realloc_r+0x1fe>
 80095ca:	bf00      	nop

080095cc <frexp>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	4617      	mov	r7, r2
 80095d0:	2200      	movs	r2, #0
 80095d2:	603a      	str	r2, [r7, #0]
 80095d4:	4a14      	ldr	r2, [pc, #80]	; (8009628 <frexp+0x5c>)
 80095d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80095da:	4296      	cmp	r6, r2
 80095dc:	4604      	mov	r4, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	460b      	mov	r3, r1
 80095e2:	dc1e      	bgt.n	8009622 <frexp+0x56>
 80095e4:	4602      	mov	r2, r0
 80095e6:	4332      	orrs	r2, r6
 80095e8:	d01b      	beq.n	8009622 <frexp+0x56>
 80095ea:	4a10      	ldr	r2, [pc, #64]	; (800962c <frexp+0x60>)
 80095ec:	400a      	ands	r2, r1
 80095ee:	b952      	cbnz	r2, 8009606 <frexp+0x3a>
 80095f0:	2200      	movs	r2, #0
 80095f2:	4b0f      	ldr	r3, [pc, #60]	; (8009630 <frexp+0x64>)
 80095f4:	f7f6 ff70 	bl	80004d8 <__aeabi_dmul>
 80095f8:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80095fc:	4604      	mov	r4, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009604:	603a      	str	r2, [r7, #0]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	1536      	asrs	r6, r6, #20
 800960a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800960e:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
 8009612:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009616:	4416      	add	r6, r2
 8009618:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800961c:	603e      	str	r6, [r7, #0]
 800961e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8009622:	4620      	mov	r0, r4
 8009624:	4629      	mov	r1, r5
 8009626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009628:	7fefffff 	.word	0x7fefffff
 800962c:	7ff00000 	.word	0x7ff00000
 8009630:	43500000 	.word	0x43500000

08009634 <_sbrk_r>:
 8009634:	b538      	push	{r3, r4, r5, lr}
 8009636:	2300      	movs	r3, #0
 8009638:	4d05      	ldr	r5, [pc, #20]	; (8009650 <_sbrk_r+0x1c>)
 800963a:	4604      	mov	r4, r0
 800963c:	4608      	mov	r0, r1
 800963e:	602b      	str	r3, [r5, #0]
 8009640:	f7f8 f9dc 	bl	80019fc <_sbrk>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_sbrk_r+0x1a>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_sbrk_r+0x1a>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	20001c54 	.word	0x20001c54

08009654 <__sccl>:
 8009654:	b570      	push	{r4, r5, r6, lr}
 8009656:	780b      	ldrb	r3, [r1, #0]
 8009658:	4604      	mov	r4, r0
 800965a:	2b5e      	cmp	r3, #94	; 0x5e
 800965c:	bf13      	iteet	ne
 800965e:	2200      	movne	r2, #0
 8009660:	2201      	moveq	r2, #1
 8009662:	784b      	ldrbeq	r3, [r1, #1]
 8009664:	1c48      	addne	r0, r1, #1
 8009666:	bf08      	it	eq
 8009668:	1c88      	addeq	r0, r1, #2
 800966a:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800966e:	1e61      	subs	r1, r4, #1
 8009670:	f801 2f01 	strb.w	r2, [r1, #1]!
 8009674:	42a9      	cmp	r1, r5
 8009676:	d1fb      	bne.n	8009670 <__sccl+0x1c>
 8009678:	b90b      	cbnz	r3, 800967e <__sccl+0x2a>
 800967a:	3801      	subs	r0, #1
 800967c:	bd70      	pop	{r4, r5, r6, pc}
 800967e:	f082 0101 	eor.w	r1, r2, #1
 8009682:	54e1      	strb	r1, [r4, r3]
 8009684:	1c42      	adds	r2, r0, #1
 8009686:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800968a:	4610      	mov	r0, r2
 800968c:	2d2d      	cmp	r5, #45	; 0x2d
 800968e:	f102 36ff 	add.w	r6, r2, #4294967295
 8009692:	d006      	beq.n	80096a2 <__sccl+0x4e>
 8009694:	2d5d      	cmp	r5, #93	; 0x5d
 8009696:	d0f1      	beq.n	800967c <__sccl+0x28>
 8009698:	b90d      	cbnz	r5, 800969e <__sccl+0x4a>
 800969a:	4630      	mov	r0, r6
 800969c:	e7ee      	b.n	800967c <__sccl+0x28>
 800969e:	462b      	mov	r3, r5
 80096a0:	e7ef      	b.n	8009682 <__sccl+0x2e>
 80096a2:	7816      	ldrb	r6, [r2, #0]
 80096a4:	2e5d      	cmp	r6, #93	; 0x5d
 80096a6:	d0fa      	beq.n	800969e <__sccl+0x4a>
 80096a8:	42b3      	cmp	r3, r6
 80096aa:	dcf8      	bgt.n	800969e <__sccl+0x4a>
 80096ac:	4618      	mov	r0, r3
 80096ae:	3001      	adds	r0, #1
 80096b0:	4286      	cmp	r6, r0
 80096b2:	5421      	strb	r1, [r4, r0]
 80096b4:	dcfb      	bgt.n	80096ae <__sccl+0x5a>
 80096b6:	43d8      	mvns	r0, r3
 80096b8:	4430      	add	r0, r6
 80096ba:	42b3      	cmp	r3, r6
 80096bc:	bfa8      	it	ge
 80096be:	2000      	movge	r0, #0
 80096c0:	1c5d      	adds	r5, r3, #1
 80096c2:	182b      	adds	r3, r5, r0
 80096c4:	3202      	adds	r2, #2
 80096c6:	e7de      	b.n	8009686 <__sccl+0x32>

080096c8 <nanf>:
 80096c8:	4800      	ldr	r0, [pc, #0]	; (80096cc <nanf+0x4>)
 80096ca:	4770      	bx	lr
 80096cc:	7fc00000 	.word	0x7fc00000

080096d0 <strncpy>:
 80096d0:	4603      	mov	r3, r0
 80096d2:	b510      	push	{r4, lr}
 80096d4:	3901      	subs	r1, #1
 80096d6:	b132      	cbz	r2, 80096e6 <strncpy+0x16>
 80096d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80096dc:	3a01      	subs	r2, #1
 80096de:	f803 4b01 	strb.w	r4, [r3], #1
 80096e2:	2c00      	cmp	r4, #0
 80096e4:	d1f7      	bne.n	80096d6 <strncpy+0x6>
 80096e6:	2100      	movs	r1, #0
 80096e8:	441a      	add	r2, r3
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d100      	bne.n	80096f0 <strncpy+0x20>
 80096ee:	bd10      	pop	{r4, pc}
 80096f0:	f803 1b01 	strb.w	r1, [r3], #1
 80096f4:	e7f9      	b.n	80096ea <strncpy+0x1a>

080096f6 <sulp>:
 80096f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096fa:	460f      	mov	r7, r1
 80096fc:	4690      	mov	r8, r2
 80096fe:	f7ff fc59 	bl	8008fb4 <__ulp>
 8009702:	4604      	mov	r4, r0
 8009704:	460d      	mov	r5, r1
 8009706:	f1b8 0f00 	cmp.w	r8, #0
 800970a:	d011      	beq.n	8009730 <sulp+0x3a>
 800970c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009710:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009714:	2b00      	cmp	r3, #0
 8009716:	dd0b      	ble.n	8009730 <sulp+0x3a>
 8009718:	2400      	movs	r4, #0
 800971a:	051b      	lsls	r3, r3, #20
 800971c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009720:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009724:	4622      	mov	r2, r4
 8009726:	462b      	mov	r3, r5
 8009728:	f7f6 fed6 	bl	80004d8 <__aeabi_dmul>
 800972c:	4604      	mov	r4, r0
 800972e:	460d      	mov	r5, r1
 8009730:	4620      	mov	r0, r4
 8009732:	4629      	mov	r1, r5
 8009734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009738 <_strtod_l>:
 8009738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800973c:	469b      	mov	fp, r3
 800973e:	2300      	movs	r3, #0
 8009740:	b0a1      	sub	sp, #132	; 0x84
 8009742:	931c      	str	r3, [sp, #112]	; 0x70
 8009744:	4ba1      	ldr	r3, [pc, #644]	; (80099cc <_strtod_l+0x294>)
 8009746:	4682      	mov	sl, r0
 8009748:	681f      	ldr	r7, [r3, #0]
 800974a:	460e      	mov	r6, r1
 800974c:	4638      	mov	r0, r7
 800974e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009750:	f7f6 fcfe 	bl	8000150 <strlen>
 8009754:	f04f 0800 	mov.w	r8, #0
 8009758:	4604      	mov	r4, r0
 800975a:	f04f 0900 	mov.w	r9, #0
 800975e:	961b      	str	r6, [sp, #108]	; 0x6c
 8009760:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009762:	781a      	ldrb	r2, [r3, #0]
 8009764:	2a2b      	cmp	r2, #43	; 0x2b
 8009766:	d04c      	beq.n	8009802 <_strtod_l+0xca>
 8009768:	d83a      	bhi.n	80097e0 <_strtod_l+0xa8>
 800976a:	2a0d      	cmp	r2, #13
 800976c:	d833      	bhi.n	80097d6 <_strtod_l+0x9e>
 800976e:	2a08      	cmp	r2, #8
 8009770:	d833      	bhi.n	80097da <_strtod_l+0xa2>
 8009772:	2a00      	cmp	r2, #0
 8009774:	d03d      	beq.n	80097f2 <_strtod_l+0xba>
 8009776:	2300      	movs	r3, #0
 8009778:	930c      	str	r3, [sp, #48]	; 0x30
 800977a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800977c:	782b      	ldrb	r3, [r5, #0]
 800977e:	2b30      	cmp	r3, #48	; 0x30
 8009780:	f040 80af 	bne.w	80098e2 <_strtod_l+0x1aa>
 8009784:	786b      	ldrb	r3, [r5, #1]
 8009786:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800978a:	2b58      	cmp	r3, #88	; 0x58
 800978c:	d16c      	bne.n	8009868 <_strtod_l+0x130>
 800978e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009790:	4650      	mov	r0, sl
 8009792:	9301      	str	r3, [sp, #4]
 8009794:	ab1c      	add	r3, sp, #112	; 0x70
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	4a8d      	ldr	r2, [pc, #564]	; (80099d0 <_strtod_l+0x298>)
 800979a:	f8cd b008 	str.w	fp, [sp, #8]
 800979e:	ab1d      	add	r3, sp, #116	; 0x74
 80097a0:	a91b      	add	r1, sp, #108	; 0x6c
 80097a2:	f001 fba5 	bl	800aef0 <__gethex>
 80097a6:	f010 0607 	ands.w	r6, r0, #7
 80097aa:	4604      	mov	r4, r0
 80097ac:	d005      	beq.n	80097ba <_strtod_l+0x82>
 80097ae:	2e06      	cmp	r6, #6
 80097b0:	d129      	bne.n	8009806 <_strtod_l+0xce>
 80097b2:	2300      	movs	r3, #0
 80097b4:	3501      	adds	r5, #1
 80097b6:	951b      	str	r5, [sp, #108]	; 0x6c
 80097b8:	930c      	str	r3, [sp, #48]	; 0x30
 80097ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 8596 	bne.w	800a2ee <_strtod_l+0xbb6>
 80097c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097c4:	b1d3      	cbz	r3, 80097fc <_strtod_l+0xc4>
 80097c6:	4642      	mov	r2, r8
 80097c8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80097cc:	4610      	mov	r0, r2
 80097ce:	4619      	mov	r1, r3
 80097d0:	b021      	add	sp, #132	; 0x84
 80097d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d6:	2a20      	cmp	r2, #32
 80097d8:	d1cd      	bne.n	8009776 <_strtod_l+0x3e>
 80097da:	3301      	adds	r3, #1
 80097dc:	931b      	str	r3, [sp, #108]	; 0x6c
 80097de:	e7bf      	b.n	8009760 <_strtod_l+0x28>
 80097e0:	2a2d      	cmp	r2, #45	; 0x2d
 80097e2:	d1c8      	bne.n	8009776 <_strtod_l+0x3e>
 80097e4:	2201      	movs	r2, #1
 80097e6:	920c      	str	r2, [sp, #48]	; 0x30
 80097e8:	1c5a      	adds	r2, r3, #1
 80097ea:	921b      	str	r2, [sp, #108]	; 0x6c
 80097ec:	785b      	ldrb	r3, [r3, #1]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d1c3      	bne.n	800977a <_strtod_l+0x42>
 80097f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097f4:	961b      	str	r6, [sp, #108]	; 0x6c
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f040 8577 	bne.w	800a2ea <_strtod_l+0xbb2>
 80097fc:	4642      	mov	r2, r8
 80097fe:	464b      	mov	r3, r9
 8009800:	e7e4      	b.n	80097cc <_strtod_l+0x94>
 8009802:	2200      	movs	r2, #0
 8009804:	e7ef      	b.n	80097e6 <_strtod_l+0xae>
 8009806:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009808:	b13a      	cbz	r2, 800981a <_strtod_l+0xe2>
 800980a:	2135      	movs	r1, #53	; 0x35
 800980c:	a81e      	add	r0, sp, #120	; 0x78
 800980e:	f7ff fcd5 	bl	80091bc <__copybits>
 8009812:	4650      	mov	r0, sl
 8009814:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009816:	f7ff f8d0 	bl	80089ba <_Bfree>
 800981a:	3e01      	subs	r6, #1
 800981c:	2e05      	cmp	r6, #5
 800981e:	d807      	bhi.n	8009830 <_strtod_l+0xf8>
 8009820:	e8df f006 	tbb	[pc, r6]
 8009824:	1d180b0e 	.word	0x1d180b0e
 8009828:	030e      	.short	0x030e
 800982a:	f04f 0900 	mov.w	r9, #0
 800982e:	46c8      	mov	r8, r9
 8009830:	0721      	lsls	r1, r4, #28
 8009832:	d5c2      	bpl.n	80097ba <_strtod_l+0x82>
 8009834:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8009838:	e7bf      	b.n	80097ba <_strtod_l+0x82>
 800983a:	e9dd 891e 	ldrd	r8, r9, [sp, #120]	; 0x78
 800983e:	e7f7      	b.n	8009830 <_strtod_l+0xf8>
 8009840:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009842:	e9dd 831e 	ldrd	r8, r3, [sp, #120]	; 0x78
 8009846:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800984a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800984e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009852:	e7ed      	b.n	8009830 <_strtod_l+0xf8>
 8009854:	f04f 0800 	mov.w	r8, #0
 8009858:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80099d4 <_strtod_l+0x29c>
 800985c:	e7e8      	b.n	8009830 <_strtod_l+0xf8>
 800985e:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009862:	f04f 38ff 	mov.w	r8, #4294967295
 8009866:	e7e3      	b.n	8009830 <_strtod_l+0xf8>
 8009868:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	921b      	str	r2, [sp, #108]	; 0x6c
 800986e:	785b      	ldrb	r3, [r3, #1]
 8009870:	2b30      	cmp	r3, #48	; 0x30
 8009872:	d0f9      	beq.n	8009868 <_strtod_l+0x130>
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0a0      	beq.n	80097ba <_strtod_l+0x82>
 8009878:	2301      	movs	r3, #1
 800987a:	9307      	str	r3, [sp, #28]
 800987c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800987e:	220a      	movs	r2, #10
 8009880:	9308      	str	r3, [sp, #32]
 8009882:	2300      	movs	r3, #0
 8009884:	469b      	mov	fp, r3
 8009886:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800988a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800988c:	7805      	ldrb	r5, [r0, #0]
 800988e:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8009892:	b2d9      	uxtb	r1, r3
 8009894:	2909      	cmp	r1, #9
 8009896:	d926      	bls.n	80098e6 <_strtod_l+0x1ae>
 8009898:	4622      	mov	r2, r4
 800989a:	4639      	mov	r1, r7
 800989c:	f001 fe46 	bl	800b52c <strncmp>
 80098a0:	2800      	cmp	r0, #0
 80098a2:	d032      	beq.n	800990a <_strtod_l+0x1d2>
 80098a4:	2000      	movs	r0, #0
 80098a6:	462b      	mov	r3, r5
 80098a8:	465c      	mov	r4, fp
 80098aa:	4602      	mov	r2, r0
 80098ac:	9004      	str	r0, [sp, #16]
 80098ae:	2b65      	cmp	r3, #101	; 0x65
 80098b0:	d001      	beq.n	80098b6 <_strtod_l+0x17e>
 80098b2:	2b45      	cmp	r3, #69	; 0x45
 80098b4:	d113      	bne.n	80098de <_strtod_l+0x1a6>
 80098b6:	b91c      	cbnz	r4, 80098c0 <_strtod_l+0x188>
 80098b8:	9b07      	ldr	r3, [sp, #28]
 80098ba:	4303      	orrs	r3, r0
 80098bc:	d099      	beq.n	80097f2 <_strtod_l+0xba>
 80098be:	2400      	movs	r4, #0
 80098c0:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80098c2:	1c73      	adds	r3, r6, #1
 80098c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80098c6:	7873      	ldrb	r3, [r6, #1]
 80098c8:	2b2b      	cmp	r3, #43	; 0x2b
 80098ca:	d078      	beq.n	80099be <_strtod_l+0x286>
 80098cc:	2b2d      	cmp	r3, #45	; 0x2d
 80098ce:	d07b      	beq.n	80099c8 <_strtod_l+0x290>
 80098d0:	2700      	movs	r7, #0
 80098d2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80098d6:	2909      	cmp	r1, #9
 80098d8:	f240 8082 	bls.w	80099e0 <_strtod_l+0x2a8>
 80098dc:	961b      	str	r6, [sp, #108]	; 0x6c
 80098de:	2500      	movs	r5, #0
 80098e0:	e09e      	b.n	8009a20 <_strtod_l+0x2e8>
 80098e2:	2300      	movs	r3, #0
 80098e4:	e7c9      	b.n	800987a <_strtod_l+0x142>
 80098e6:	f1bb 0f08 	cmp.w	fp, #8
 80098ea:	bfd5      	itete	le
 80098ec:	9906      	ldrle	r1, [sp, #24]
 80098ee:	9905      	ldrgt	r1, [sp, #20]
 80098f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80098f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80098f8:	f100 0001 	add.w	r0, r0, #1
 80098fc:	bfd4      	ite	le
 80098fe:	9306      	strle	r3, [sp, #24]
 8009900:	9305      	strgt	r3, [sp, #20]
 8009902:	f10b 0b01 	add.w	fp, fp, #1
 8009906:	901b      	str	r0, [sp, #108]	; 0x6c
 8009908:	e7bf      	b.n	800988a <_strtod_l+0x152>
 800990a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800990c:	191a      	adds	r2, r3, r4
 800990e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009910:	5d1b      	ldrb	r3, [r3, r4]
 8009912:	f1bb 0f00 	cmp.w	fp, #0
 8009916:	d036      	beq.n	8009986 <_strtod_l+0x24e>
 8009918:	465c      	mov	r4, fp
 800991a:	9004      	str	r0, [sp, #16]
 800991c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8009920:	2a09      	cmp	r2, #9
 8009922:	d912      	bls.n	800994a <_strtod_l+0x212>
 8009924:	2201      	movs	r2, #1
 8009926:	e7c2      	b.n	80098ae <_strtod_l+0x176>
 8009928:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800992a:	3001      	adds	r0, #1
 800992c:	1c5a      	adds	r2, r3, #1
 800992e:	921b      	str	r2, [sp, #108]	; 0x6c
 8009930:	785b      	ldrb	r3, [r3, #1]
 8009932:	2b30      	cmp	r3, #48	; 0x30
 8009934:	d0f8      	beq.n	8009928 <_strtod_l+0x1f0>
 8009936:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800993a:	2a08      	cmp	r2, #8
 800993c:	f200 84dc 	bhi.w	800a2f8 <_strtod_l+0xbc0>
 8009940:	9004      	str	r0, [sp, #16]
 8009942:	2000      	movs	r0, #0
 8009944:	4604      	mov	r4, r0
 8009946:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009948:	9208      	str	r2, [sp, #32]
 800994a:	3b30      	subs	r3, #48	; 0x30
 800994c:	f100 0201 	add.w	r2, r0, #1
 8009950:	d013      	beq.n	800997a <_strtod_l+0x242>
 8009952:	9904      	ldr	r1, [sp, #16]
 8009954:	1905      	adds	r5, r0, r4
 8009956:	4411      	add	r1, r2
 8009958:	9104      	str	r1, [sp, #16]
 800995a:	4622      	mov	r2, r4
 800995c:	210a      	movs	r1, #10
 800995e:	42aa      	cmp	r2, r5
 8009960:	d113      	bne.n	800998a <_strtod_l+0x252>
 8009962:	1822      	adds	r2, r4, r0
 8009964:	2a08      	cmp	r2, #8
 8009966:	f104 0401 	add.w	r4, r4, #1
 800996a:	4404      	add	r4, r0
 800996c:	dc1b      	bgt.n	80099a6 <_strtod_l+0x26e>
 800996e:	220a      	movs	r2, #10
 8009970:	9906      	ldr	r1, [sp, #24]
 8009972:	fb02 3301 	mla	r3, r2, r1, r3
 8009976:	9306      	str	r3, [sp, #24]
 8009978:	2200      	movs	r2, #0
 800997a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800997c:	4610      	mov	r0, r2
 800997e:	1c59      	adds	r1, r3, #1
 8009980:	911b      	str	r1, [sp, #108]	; 0x6c
 8009982:	785b      	ldrb	r3, [r3, #1]
 8009984:	e7ca      	b.n	800991c <_strtod_l+0x1e4>
 8009986:	4658      	mov	r0, fp
 8009988:	e7d3      	b.n	8009932 <_strtod_l+0x1fa>
 800998a:	2a08      	cmp	r2, #8
 800998c:	dc04      	bgt.n	8009998 <_strtod_l+0x260>
 800998e:	9f06      	ldr	r7, [sp, #24]
 8009990:	434f      	muls	r7, r1
 8009992:	9706      	str	r7, [sp, #24]
 8009994:	3201      	adds	r2, #1
 8009996:	e7e2      	b.n	800995e <_strtod_l+0x226>
 8009998:	1c57      	adds	r7, r2, #1
 800999a:	2f10      	cmp	r7, #16
 800999c:	bfde      	ittt	le
 800999e:	9f05      	ldrle	r7, [sp, #20]
 80099a0:	434f      	mulle	r7, r1
 80099a2:	9705      	strle	r7, [sp, #20]
 80099a4:	e7f6      	b.n	8009994 <_strtod_l+0x25c>
 80099a6:	2c10      	cmp	r4, #16
 80099a8:	bfdf      	itttt	le
 80099aa:	220a      	movle	r2, #10
 80099ac:	9905      	ldrle	r1, [sp, #20]
 80099ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80099b2:	9305      	strle	r3, [sp, #20]
 80099b4:	e7e0      	b.n	8009978 <_strtod_l+0x240>
 80099b6:	2300      	movs	r3, #0
 80099b8:	2201      	movs	r2, #1
 80099ba:	9304      	str	r3, [sp, #16]
 80099bc:	e77c      	b.n	80098b8 <_strtod_l+0x180>
 80099be:	2700      	movs	r7, #0
 80099c0:	1cb3      	adds	r3, r6, #2
 80099c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80099c4:	78b3      	ldrb	r3, [r6, #2]
 80099c6:	e784      	b.n	80098d2 <_strtod_l+0x19a>
 80099c8:	2701      	movs	r7, #1
 80099ca:	e7f9      	b.n	80099c0 <_strtod_l+0x288>
 80099cc:	0800cc24 	.word	0x0800cc24
 80099d0:	0800cb2c 	.word	0x0800cb2c
 80099d4:	7ff00000 	.word	0x7ff00000
 80099d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099da:	1c59      	adds	r1, r3, #1
 80099dc:	911b      	str	r1, [sp, #108]	; 0x6c
 80099de:	785b      	ldrb	r3, [r3, #1]
 80099e0:	2b30      	cmp	r3, #48	; 0x30
 80099e2:	d0f9      	beq.n	80099d8 <_strtod_l+0x2a0>
 80099e4:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80099e8:	2908      	cmp	r1, #8
 80099ea:	f63f af78 	bhi.w	80098de <_strtod_l+0x1a6>
 80099ee:	f04f 0e0a 	mov.w	lr, #10
 80099f2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 80099f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099f8:	9309      	str	r3, [sp, #36]	; 0x24
 80099fa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80099fc:	1c59      	adds	r1, r3, #1
 80099fe:	911b      	str	r1, [sp, #108]	; 0x6c
 8009a00:	785b      	ldrb	r3, [r3, #1]
 8009a02:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
 8009a06:	2d09      	cmp	r5, #9
 8009a08:	d935      	bls.n	8009a76 <_strtod_l+0x33e>
 8009a0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009a0c:	1b49      	subs	r1, r1, r5
 8009a0e:	2908      	cmp	r1, #8
 8009a10:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009a14:	dc02      	bgt.n	8009a1c <_strtod_l+0x2e4>
 8009a16:	4565      	cmp	r5, ip
 8009a18:	bfa8      	it	ge
 8009a1a:	4665      	movge	r5, ip
 8009a1c:	b107      	cbz	r7, 8009a20 <_strtod_l+0x2e8>
 8009a1e:	426d      	negs	r5, r5
 8009a20:	2c00      	cmp	r4, #0
 8009a22:	d14c      	bne.n	8009abe <_strtod_l+0x386>
 8009a24:	9907      	ldr	r1, [sp, #28]
 8009a26:	4301      	orrs	r1, r0
 8009a28:	f47f aec7 	bne.w	80097ba <_strtod_l+0x82>
 8009a2c:	2a00      	cmp	r2, #0
 8009a2e:	f47f aee0 	bne.w	80097f2 <_strtod_l+0xba>
 8009a32:	2b69      	cmp	r3, #105	; 0x69
 8009a34:	d026      	beq.n	8009a84 <_strtod_l+0x34c>
 8009a36:	dc23      	bgt.n	8009a80 <_strtod_l+0x348>
 8009a38:	2b49      	cmp	r3, #73	; 0x49
 8009a3a:	d023      	beq.n	8009a84 <_strtod_l+0x34c>
 8009a3c:	2b4e      	cmp	r3, #78	; 0x4e
 8009a3e:	f47f aed8 	bne.w	80097f2 <_strtod_l+0xba>
 8009a42:	499c      	ldr	r1, [pc, #624]	; (8009cb4 <_strtod_l+0x57c>)
 8009a44:	a81b      	add	r0, sp, #108	; 0x6c
 8009a46:	f001 fca1 	bl	800b38c <__match>
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	f43f aed1 	beq.w	80097f2 <_strtod_l+0xba>
 8009a50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	2b28      	cmp	r3, #40	; 0x28
 8009a56:	d12c      	bne.n	8009ab2 <_strtod_l+0x37a>
 8009a58:	4997      	ldr	r1, [pc, #604]	; (8009cb8 <_strtod_l+0x580>)
 8009a5a:	aa1e      	add	r2, sp, #120	; 0x78
 8009a5c:	a81b      	add	r0, sp, #108	; 0x6c
 8009a5e:	f001 fca9 	bl	800b3b4 <__hexnan>
 8009a62:	2805      	cmp	r0, #5
 8009a64:	d125      	bne.n	8009ab2 <_strtod_l+0x37a>
 8009a66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009a68:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8009a6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009a70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009a74:	e6a1      	b.n	80097ba <_strtod_l+0x82>
 8009a76:	fb0e 3c0c 	mla	ip, lr, ip, r3
 8009a7a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8009a7e:	e7bc      	b.n	80099fa <_strtod_l+0x2c2>
 8009a80:	2b6e      	cmp	r3, #110	; 0x6e
 8009a82:	e7dc      	b.n	8009a3e <_strtod_l+0x306>
 8009a84:	498d      	ldr	r1, [pc, #564]	; (8009cbc <_strtod_l+0x584>)
 8009a86:	a81b      	add	r0, sp, #108	; 0x6c
 8009a88:	f001 fc80 	bl	800b38c <__match>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	f43f aeb0 	beq.w	80097f2 <_strtod_l+0xba>
 8009a92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009a94:	498a      	ldr	r1, [pc, #552]	; (8009cc0 <_strtod_l+0x588>)
 8009a96:	3b01      	subs	r3, #1
 8009a98:	a81b      	add	r0, sp, #108	; 0x6c
 8009a9a:	931b      	str	r3, [sp, #108]	; 0x6c
 8009a9c:	f001 fc76 	bl	800b38c <__match>
 8009aa0:	b910      	cbnz	r0, 8009aa8 <_strtod_l+0x370>
 8009aa2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	931b      	str	r3, [sp, #108]	; 0x6c
 8009aa8:	f04f 0800 	mov.w	r8, #0
 8009aac:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8009cd0 <_strtod_l+0x598>
 8009ab0:	e683      	b.n	80097ba <_strtod_l+0x82>
 8009ab2:	4884      	ldr	r0, [pc, #528]	; (8009cc4 <_strtod_l+0x58c>)
 8009ab4:	f001 fd34 	bl	800b520 <nan>
 8009ab8:	4680      	mov	r8, r0
 8009aba:	4689      	mov	r9, r1
 8009abc:	e67d      	b.n	80097ba <_strtod_l+0x82>
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	f1bb 0f00 	cmp.w	fp, #0
 8009ac4:	bf08      	it	eq
 8009ac6:	46a3      	moveq	fp, r4
 8009ac8:	1aeb      	subs	r3, r5, r3
 8009aca:	2c10      	cmp	r4, #16
 8009acc:	9806      	ldr	r0, [sp, #24]
 8009ace:	4626      	mov	r6, r4
 8009ad0:	9307      	str	r3, [sp, #28]
 8009ad2:	bfa8      	it	ge
 8009ad4:	2610      	movge	r6, #16
 8009ad6:	f7f6 fc85 	bl	80003e4 <__aeabi_ui2d>
 8009ada:	2c09      	cmp	r4, #9
 8009adc:	4680      	mov	r8, r0
 8009ade:	4689      	mov	r9, r1
 8009ae0:	dd13      	ble.n	8009b0a <_strtod_l+0x3d2>
 8009ae2:	4b79      	ldr	r3, [pc, #484]	; (8009cc8 <_strtod_l+0x590>)
 8009ae4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009ae8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009aec:	f7f6 fcf4 	bl	80004d8 <__aeabi_dmul>
 8009af0:	4680      	mov	r8, r0
 8009af2:	9805      	ldr	r0, [sp, #20]
 8009af4:	4689      	mov	r9, r1
 8009af6:	f7f6 fc75 	bl	80003e4 <__aeabi_ui2d>
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4640      	mov	r0, r8
 8009b00:	4649      	mov	r1, r9
 8009b02:	f7f6 fb33 	bl	800016c <__adddf3>
 8009b06:	4680      	mov	r8, r0
 8009b08:	4689      	mov	r9, r1
 8009b0a:	2c0f      	cmp	r4, #15
 8009b0c:	dc36      	bgt.n	8009b7c <_strtod_l+0x444>
 8009b0e:	9b07      	ldr	r3, [sp, #28]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f43f ae52 	beq.w	80097ba <_strtod_l+0x82>
 8009b16:	dd22      	ble.n	8009b5e <_strtod_l+0x426>
 8009b18:	2b16      	cmp	r3, #22
 8009b1a:	dc09      	bgt.n	8009b30 <_strtod_l+0x3f8>
 8009b1c:	4c6a      	ldr	r4, [pc, #424]	; (8009cc8 <_strtod_l+0x590>)
 8009b1e:	4642      	mov	r2, r8
 8009b20:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8009b24:	464b      	mov	r3, r9
 8009b26:	e9d4 0100 	ldrd	r0, r1, [r4]
 8009b2a:	f7f6 fcd5 	bl	80004d8 <__aeabi_dmul>
 8009b2e:	e7c3      	b.n	8009ab8 <_strtod_l+0x380>
 8009b30:	9a07      	ldr	r2, [sp, #28]
 8009b32:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8009b36:	4293      	cmp	r3, r2
 8009b38:	db20      	blt.n	8009b7c <_strtod_l+0x444>
 8009b3a:	4d63      	ldr	r5, [pc, #396]	; (8009cc8 <_strtod_l+0x590>)
 8009b3c:	f1c4 040f 	rsb	r4, r4, #15
 8009b40:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8009b44:	4642      	mov	r2, r8
 8009b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b4a:	464b      	mov	r3, r9
 8009b4c:	f7f6 fcc4 	bl	80004d8 <__aeabi_dmul>
 8009b50:	9b07      	ldr	r3, [sp, #28]
 8009b52:	1b1c      	subs	r4, r3, r4
 8009b54:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8009b58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b5c:	e7e5      	b.n	8009b2a <_strtod_l+0x3f2>
 8009b5e:	9b07      	ldr	r3, [sp, #28]
 8009b60:	3316      	adds	r3, #22
 8009b62:	db0b      	blt.n	8009b7c <_strtod_l+0x444>
 8009b64:	9b04      	ldr	r3, [sp, #16]
 8009b66:	4a58      	ldr	r2, [pc, #352]	; (8009cc8 <_strtod_l+0x590>)
 8009b68:	1b5d      	subs	r5, r3, r5
 8009b6a:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8009b6e:	4640      	mov	r0, r8
 8009b70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b74:	4649      	mov	r1, r9
 8009b76:	f7f6 fdd9 	bl	800072c <__aeabi_ddiv>
 8009b7a:	e79d      	b.n	8009ab8 <_strtod_l+0x380>
 8009b7c:	9b07      	ldr	r3, [sp, #28]
 8009b7e:	1ba6      	subs	r6, r4, r6
 8009b80:	441e      	add	r6, r3
 8009b82:	2e00      	cmp	r6, #0
 8009b84:	dd71      	ble.n	8009c6a <_strtod_l+0x532>
 8009b86:	f016 030f 	ands.w	r3, r6, #15
 8009b8a:	d00a      	beq.n	8009ba2 <_strtod_l+0x46a>
 8009b8c:	494e      	ldr	r1, [pc, #312]	; (8009cc8 <_strtod_l+0x590>)
 8009b8e:	4642      	mov	r2, r8
 8009b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b98:	464b      	mov	r3, r9
 8009b9a:	f7f6 fc9d 	bl	80004d8 <__aeabi_dmul>
 8009b9e:	4680      	mov	r8, r0
 8009ba0:	4689      	mov	r9, r1
 8009ba2:	f036 060f 	bics.w	r6, r6, #15
 8009ba6:	d050      	beq.n	8009c4a <_strtod_l+0x512>
 8009ba8:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8009bac:	dd27      	ble.n	8009bfe <_strtod_l+0x4c6>
 8009bae:	f04f 0b00 	mov.w	fp, #0
 8009bb2:	f8cd b010 	str.w	fp, [sp, #16]
 8009bb6:	f8cd b020 	str.w	fp, [sp, #32]
 8009bba:	f8cd b018 	str.w	fp, [sp, #24]
 8009bbe:	2322      	movs	r3, #34	; 0x22
 8009bc0:	f04f 0800 	mov.w	r8, #0
 8009bc4:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009cd0 <_strtod_l+0x598>
 8009bc8:	f8ca 3000 	str.w	r3, [sl]
 8009bcc:	9b08      	ldr	r3, [sp, #32]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f43f adf3 	beq.w	80097ba <_strtod_l+0x82>
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009bd8:	f7fe feef 	bl	80089ba <_Bfree>
 8009bdc:	4650      	mov	r0, sl
 8009bde:	9906      	ldr	r1, [sp, #24]
 8009be0:	f7fe feeb 	bl	80089ba <_Bfree>
 8009be4:	4650      	mov	r0, sl
 8009be6:	9904      	ldr	r1, [sp, #16]
 8009be8:	f7fe fee7 	bl	80089ba <_Bfree>
 8009bec:	4650      	mov	r0, sl
 8009bee:	9908      	ldr	r1, [sp, #32]
 8009bf0:	f7fe fee3 	bl	80089ba <_Bfree>
 8009bf4:	4659      	mov	r1, fp
 8009bf6:	4650      	mov	r0, sl
 8009bf8:	f7fe fedf 	bl	80089ba <_Bfree>
 8009bfc:	e5dd      	b.n	80097ba <_strtod_l+0x82>
 8009bfe:	2300      	movs	r3, #0
 8009c00:	4640      	mov	r0, r8
 8009c02:	4649      	mov	r1, r9
 8009c04:	461f      	mov	r7, r3
 8009c06:	1136      	asrs	r6, r6, #4
 8009c08:	2e01      	cmp	r6, #1
 8009c0a:	dc21      	bgt.n	8009c50 <_strtod_l+0x518>
 8009c0c:	b10b      	cbz	r3, 8009c12 <_strtod_l+0x4da>
 8009c0e:	4680      	mov	r8, r0
 8009c10:	4689      	mov	r9, r1
 8009c12:	4b2e      	ldr	r3, [pc, #184]	; (8009ccc <_strtod_l+0x594>)
 8009c14:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009c18:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009c1c:	4642      	mov	r2, r8
 8009c1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009c22:	464b      	mov	r3, r9
 8009c24:	f7f6 fc58 	bl	80004d8 <__aeabi_dmul>
 8009c28:	4b29      	ldr	r3, [pc, #164]	; (8009cd0 <_strtod_l+0x598>)
 8009c2a:	460a      	mov	r2, r1
 8009c2c:	400b      	ands	r3, r1
 8009c2e:	4929      	ldr	r1, [pc, #164]	; (8009cd4 <_strtod_l+0x59c>)
 8009c30:	4680      	mov	r8, r0
 8009c32:	428b      	cmp	r3, r1
 8009c34:	d8bb      	bhi.n	8009bae <_strtod_l+0x476>
 8009c36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c3a:	428b      	cmp	r3, r1
 8009c3c:	bf86      	itte	hi
 8009c3e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009c42:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8009cd8 <_strtod_l+0x5a0>
 8009c46:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9305      	str	r3, [sp, #20]
 8009c4e:	e07e      	b.n	8009d4e <_strtod_l+0x616>
 8009c50:	07f2      	lsls	r2, r6, #31
 8009c52:	d507      	bpl.n	8009c64 <_strtod_l+0x52c>
 8009c54:	4b1d      	ldr	r3, [pc, #116]	; (8009ccc <_strtod_l+0x594>)
 8009c56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5e:	f7f6 fc3b 	bl	80004d8 <__aeabi_dmul>
 8009c62:	2301      	movs	r3, #1
 8009c64:	3701      	adds	r7, #1
 8009c66:	1076      	asrs	r6, r6, #1
 8009c68:	e7ce      	b.n	8009c08 <_strtod_l+0x4d0>
 8009c6a:	d0ee      	beq.n	8009c4a <_strtod_l+0x512>
 8009c6c:	4276      	negs	r6, r6
 8009c6e:	f016 020f 	ands.w	r2, r6, #15
 8009c72:	d00a      	beq.n	8009c8a <_strtod_l+0x552>
 8009c74:	4b14      	ldr	r3, [pc, #80]	; (8009cc8 <_strtod_l+0x590>)
 8009c76:	4640      	mov	r0, r8
 8009c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c7c:	4649      	mov	r1, r9
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	f7f6 fd53 	bl	800072c <__aeabi_ddiv>
 8009c86:	4680      	mov	r8, r0
 8009c88:	4689      	mov	r9, r1
 8009c8a:	1136      	asrs	r6, r6, #4
 8009c8c:	d0dd      	beq.n	8009c4a <_strtod_l+0x512>
 8009c8e:	2e1f      	cmp	r6, #31
 8009c90:	dd24      	ble.n	8009cdc <_strtod_l+0x5a4>
 8009c92:	f04f 0b00 	mov.w	fp, #0
 8009c96:	f8cd b010 	str.w	fp, [sp, #16]
 8009c9a:	f8cd b020 	str.w	fp, [sp, #32]
 8009c9e:	f8cd b018 	str.w	fp, [sp, #24]
 8009ca2:	2322      	movs	r3, #34	; 0x22
 8009ca4:	f04f 0800 	mov.w	r8, #0
 8009ca8:	f04f 0900 	mov.w	r9, #0
 8009cac:	f8ca 3000 	str.w	r3, [sl]
 8009cb0:	e78c      	b.n	8009bcc <_strtod_l+0x494>
 8009cb2:	bf00      	nop
 8009cb4:	0800c7d9 	.word	0x0800c7d9
 8009cb8:	0800cb40 	.word	0x0800cb40
 8009cbc:	0800c7d1 	.word	0x0800c7d1
 8009cc0:	0800c950 	.word	0x0800c950
 8009cc4:	0800cbbb 	.word	0x0800cbbb
 8009cc8:	0800ca58 	.word	0x0800ca58
 8009ccc:	0800ca30 	.word	0x0800ca30
 8009cd0:	7ff00000 	.word	0x7ff00000
 8009cd4:	7ca00000 	.word	0x7ca00000
 8009cd8:	7fefffff 	.word	0x7fefffff
 8009cdc:	f016 0310 	ands.w	r3, r6, #16
 8009ce0:	bf18      	it	ne
 8009ce2:	236a      	movne	r3, #106	; 0x6a
 8009ce4:	4640      	mov	r0, r8
 8009ce6:	9305      	str	r3, [sp, #20]
 8009ce8:	4649      	mov	r1, r9
 8009cea:	2300      	movs	r3, #0
 8009cec:	4fb2      	ldr	r7, [pc, #712]	; (8009fb8 <_strtod_l+0x880>)
 8009cee:	07f2      	lsls	r2, r6, #31
 8009cf0:	d504      	bpl.n	8009cfc <_strtod_l+0x5c4>
 8009cf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cf6:	f7f6 fbef 	bl	80004d8 <__aeabi_dmul>
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	1076      	asrs	r6, r6, #1
 8009cfe:	f107 0708 	add.w	r7, r7, #8
 8009d02:	d1f4      	bne.n	8009cee <_strtod_l+0x5b6>
 8009d04:	b10b      	cbz	r3, 8009d0a <_strtod_l+0x5d2>
 8009d06:	4680      	mov	r8, r0
 8009d08:	4689      	mov	r9, r1
 8009d0a:	9b05      	ldr	r3, [sp, #20]
 8009d0c:	b1bb      	cbz	r3, 8009d3e <_strtod_l+0x606>
 8009d0e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 8009d12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	4649      	mov	r1, r9
 8009d1a:	dd10      	ble.n	8009d3e <_strtod_l+0x606>
 8009d1c:	2b1f      	cmp	r3, #31
 8009d1e:	f340 812b 	ble.w	8009f78 <_strtod_l+0x840>
 8009d22:	2b34      	cmp	r3, #52	; 0x34
 8009d24:	bfd8      	it	le
 8009d26:	f04f 32ff 	movle.w	r2, #4294967295
 8009d2a:	f04f 0800 	mov.w	r8, #0
 8009d2e:	bfcf      	iteee	gt
 8009d30:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009d34:	3b20      	suble	r3, #32
 8009d36:	fa02 f303 	lslle.w	r3, r2, r3
 8009d3a:	ea03 0901 	andle.w	r9, r3, r1
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2300      	movs	r3, #0
 8009d42:	4640      	mov	r0, r8
 8009d44:	4649      	mov	r1, r9
 8009d46:	f7f6 fe2f 	bl	80009a8 <__aeabi_dcmpeq>
 8009d4a:	2800      	cmp	r0, #0
 8009d4c:	d1a1      	bne.n	8009c92 <_strtod_l+0x55a>
 8009d4e:	9b06      	ldr	r3, [sp, #24]
 8009d50:	465a      	mov	r2, fp
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	4650      	mov	r0, sl
 8009d56:	4623      	mov	r3, r4
 8009d58:	9908      	ldr	r1, [sp, #32]
 8009d5a:	f7fe fe81 	bl	8008a60 <__s2b>
 8009d5e:	9008      	str	r0, [sp, #32]
 8009d60:	2800      	cmp	r0, #0
 8009d62:	f43f af24 	beq.w	8009bae <_strtod_l+0x476>
 8009d66:	9b04      	ldr	r3, [sp, #16]
 8009d68:	f04f 0b00 	mov.w	fp, #0
 8009d6c:	1b5d      	subs	r5, r3, r5
 8009d6e:	9b07      	ldr	r3, [sp, #28]
 8009d70:	f8cd b010 	str.w	fp, [sp, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	bfb4      	ite	lt
 8009d78:	462b      	movlt	r3, r5
 8009d7a:	2300      	movge	r3, #0
 8009d7c:	930e      	str	r3, [sp, #56]	; 0x38
 8009d7e:	9b07      	ldr	r3, [sp, #28]
 8009d80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009d84:	9316      	str	r3, [sp, #88]	; 0x58
 8009d86:	9b08      	ldr	r3, [sp, #32]
 8009d88:	4650      	mov	r0, sl
 8009d8a:	6859      	ldr	r1, [r3, #4]
 8009d8c:	f7fe fdf0 	bl	8008970 <_Balloc>
 8009d90:	9006      	str	r0, [sp, #24]
 8009d92:	2800      	cmp	r0, #0
 8009d94:	f43f af13 	beq.w	8009bbe <_strtod_l+0x486>
 8009d98:	9b08      	ldr	r3, [sp, #32]
 8009d9a:	300c      	adds	r0, #12
 8009d9c:	691a      	ldr	r2, [r3, #16]
 8009d9e:	f103 010c 	add.w	r1, r3, #12
 8009da2:	3202      	adds	r2, #2
 8009da4:	0092      	lsls	r2, r2, #2
 8009da6:	f7fa ff9d 	bl	8004ce4 <memcpy>
 8009daa:	ab1e      	add	r3, sp, #120	; 0x78
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	ab1d      	add	r3, sp, #116	; 0x74
 8009db0:	9300      	str	r3, [sp, #0]
 8009db2:	4642      	mov	r2, r8
 8009db4:	464b      	mov	r3, r9
 8009db6:	4650      	mov	r0, sl
 8009db8:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8009dbc:	f7ff f974 	bl	80090a8 <__d2b>
 8009dc0:	901c      	str	r0, [sp, #112]	; 0x70
 8009dc2:	2800      	cmp	r0, #0
 8009dc4:	f43f aefb 	beq.w	8009bbe <_strtod_l+0x486>
 8009dc8:	2101      	movs	r1, #1
 8009dca:	4650      	mov	r0, sl
 8009dcc:	f7fe fee0 	bl	8008b90 <__i2b>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	9004      	str	r0, [sp, #16]
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	f43f aef2 	beq.w	8009bbe <_strtod_l+0x486>
 8009dda:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8009ddc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	bfab      	itete	ge
 8009de2:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8009de4:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8009de6:	18ee      	addge	r6, r5, r3
 8009de8:	1b5c      	sublt	r4, r3, r5
 8009dea:	9b05      	ldr	r3, [sp, #20]
 8009dec:	bfa8      	it	ge
 8009dee:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 8009df0:	eba5 0503 	sub.w	r5, r5, r3
 8009df4:	4415      	add	r5, r2
 8009df6:	4b71      	ldr	r3, [pc, #452]	; (8009fbc <_strtod_l+0x884>)
 8009df8:	f105 35ff 	add.w	r5, r5, #4294967295
 8009dfc:	bfb8      	it	lt
 8009dfe:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 8009e00:	429d      	cmp	r5, r3
 8009e02:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e06:	f280 80c9 	bge.w	8009f9c <_strtod_l+0x864>
 8009e0a:	1b5b      	subs	r3, r3, r5
 8009e0c:	2b1f      	cmp	r3, #31
 8009e0e:	f04f 0701 	mov.w	r7, #1
 8009e12:	eba2 0203 	sub.w	r2, r2, r3
 8009e16:	f300 80b6 	bgt.w	8009f86 <_strtod_l+0x84e>
 8009e1a:	2500      	movs	r5, #0
 8009e1c:	fa07 f303 	lsl.w	r3, r7, r3
 8009e20:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e22:	18b7      	adds	r7, r6, r2
 8009e24:	9b05      	ldr	r3, [sp, #20]
 8009e26:	42be      	cmp	r6, r7
 8009e28:	4414      	add	r4, r2
 8009e2a:	441c      	add	r4, r3
 8009e2c:	4633      	mov	r3, r6
 8009e2e:	bfa8      	it	ge
 8009e30:	463b      	movge	r3, r7
 8009e32:	42a3      	cmp	r3, r4
 8009e34:	bfa8      	it	ge
 8009e36:	4623      	movge	r3, r4
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	bfc2      	ittt	gt
 8009e3c:	1aff      	subgt	r7, r7, r3
 8009e3e:	1ae4      	subgt	r4, r4, r3
 8009e40:	1af6      	subgt	r6, r6, r3
 8009e42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	dd17      	ble.n	8009e78 <_strtod_l+0x740>
 8009e48:	461a      	mov	r2, r3
 8009e4a:	4650      	mov	r0, sl
 8009e4c:	9904      	ldr	r1, [sp, #16]
 8009e4e:	f7fe ff59 	bl	8008d04 <__pow5mult>
 8009e52:	9004      	str	r0, [sp, #16]
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f43f aeb2 	beq.w	8009bbe <_strtod_l+0x486>
 8009e5a:	4601      	mov	r1, r0
 8009e5c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009e5e:	4650      	mov	r0, sl
 8009e60:	f7fe feac 	bl	8008bbc <__multiply>
 8009e64:	9009      	str	r0, [sp, #36]	; 0x24
 8009e66:	2800      	cmp	r0, #0
 8009e68:	f43f aea9 	beq.w	8009bbe <_strtod_l+0x486>
 8009e6c:	4650      	mov	r0, sl
 8009e6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009e70:	f7fe fda3 	bl	80089ba <_Bfree>
 8009e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e76:	931c      	str	r3, [sp, #112]	; 0x70
 8009e78:	2f00      	cmp	r7, #0
 8009e7a:	f300 8093 	bgt.w	8009fa4 <_strtod_l+0x86c>
 8009e7e:	9b07      	ldr	r3, [sp, #28]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	dd08      	ble.n	8009e96 <_strtod_l+0x75e>
 8009e84:	4650      	mov	r0, sl
 8009e86:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e88:	9906      	ldr	r1, [sp, #24]
 8009e8a:	f7fe ff3b 	bl	8008d04 <__pow5mult>
 8009e8e:	9006      	str	r0, [sp, #24]
 8009e90:	2800      	cmp	r0, #0
 8009e92:	f43f ae94 	beq.w	8009bbe <_strtod_l+0x486>
 8009e96:	2c00      	cmp	r4, #0
 8009e98:	dd08      	ble.n	8009eac <_strtod_l+0x774>
 8009e9a:	4622      	mov	r2, r4
 8009e9c:	4650      	mov	r0, sl
 8009e9e:	9906      	ldr	r1, [sp, #24]
 8009ea0:	f7fe ff70 	bl	8008d84 <__lshift>
 8009ea4:	9006      	str	r0, [sp, #24]
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f43f ae89 	beq.w	8009bbe <_strtod_l+0x486>
 8009eac:	2e00      	cmp	r6, #0
 8009eae:	dd08      	ble.n	8009ec2 <_strtod_l+0x78a>
 8009eb0:	4632      	mov	r2, r6
 8009eb2:	4650      	mov	r0, sl
 8009eb4:	9904      	ldr	r1, [sp, #16]
 8009eb6:	f7fe ff65 	bl	8008d84 <__lshift>
 8009eba:	9004      	str	r0, [sp, #16]
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	f43f ae7e 	beq.w	8009bbe <_strtod_l+0x486>
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	9a06      	ldr	r2, [sp, #24]
 8009ec6:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009ec8:	f7fe ffe4 	bl	8008e94 <__mdiff>
 8009ecc:	4683      	mov	fp, r0
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f43f ae75 	beq.w	8009bbe <_strtod_l+0x486>
 8009ed4:	2400      	movs	r4, #0
 8009ed6:	68c3      	ldr	r3, [r0, #12]
 8009ed8:	9904      	ldr	r1, [sp, #16]
 8009eda:	60c4      	str	r4, [r0, #12]
 8009edc:	930d      	str	r3, [sp, #52]	; 0x34
 8009ede:	f7fe ffbd 	bl	8008e5c <__mcmp>
 8009ee2:	42a0      	cmp	r0, r4
 8009ee4:	da70      	bge.n	8009fc8 <_strtod_l+0x890>
 8009ee6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ee8:	ea53 0308 	orrs.w	r3, r3, r8
 8009eec:	f040 8096 	bne.w	800a01c <_strtod_l+0x8e4>
 8009ef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f040 8091 	bne.w	800a01c <_strtod_l+0x8e4>
 8009efa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009efe:	0d1b      	lsrs	r3, r3, #20
 8009f00:	051b      	lsls	r3, r3, #20
 8009f02:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f06:	f240 8089 	bls.w	800a01c <_strtod_l+0x8e4>
 8009f0a:	f8db 3014 	ldr.w	r3, [fp, #20]
 8009f0e:	b923      	cbnz	r3, 8009f1a <_strtod_l+0x7e2>
 8009f10:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009f14:	2b01      	cmp	r3, #1
 8009f16:	f340 8081 	ble.w	800a01c <_strtod_l+0x8e4>
 8009f1a:	4659      	mov	r1, fp
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	4650      	mov	r0, sl
 8009f20:	f7fe ff30 	bl	8008d84 <__lshift>
 8009f24:	9904      	ldr	r1, [sp, #16]
 8009f26:	4683      	mov	fp, r0
 8009f28:	f7fe ff98 	bl	8008e5c <__mcmp>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	dd75      	ble.n	800a01c <_strtod_l+0x8e4>
 8009f30:	9905      	ldr	r1, [sp, #20]
 8009f32:	464b      	mov	r3, r9
 8009f34:	4a22      	ldr	r2, [pc, #136]	; (8009fc0 <_strtod_l+0x888>)
 8009f36:	2900      	cmp	r1, #0
 8009f38:	f000 8091 	beq.w	800a05e <_strtod_l+0x926>
 8009f3c:	ea02 0109 	and.w	r1, r2, r9
 8009f40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f44:	f300 808b 	bgt.w	800a05e <_strtod_l+0x926>
 8009f48:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f4c:	f77f aea9 	ble.w	8009ca2 <_strtod_l+0x56a>
 8009f50:	2300      	movs	r3, #0
 8009f52:	4a1c      	ldr	r2, [pc, #112]	; (8009fc4 <_strtod_l+0x88c>)
 8009f54:	4640      	mov	r0, r8
 8009f56:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8009f5a:	4649      	mov	r1, r9
 8009f5c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009f60:	f7f6 faba 	bl	80004d8 <__aeabi_dmul>
 8009f64:	460b      	mov	r3, r1
 8009f66:	4303      	orrs	r3, r0
 8009f68:	bf08      	it	eq
 8009f6a:	2322      	moveq	r3, #34	; 0x22
 8009f6c:	4680      	mov	r8, r0
 8009f6e:	4689      	mov	r9, r1
 8009f70:	bf08      	it	eq
 8009f72:	f8ca 3000 	streq.w	r3, [sl]
 8009f76:	e62d      	b.n	8009bd4 <_strtod_l+0x49c>
 8009f78:	f04f 32ff 	mov.w	r2, #4294967295
 8009f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f80:	ea03 0808 	and.w	r8, r3, r8
 8009f84:	e6db      	b.n	8009d3e <_strtod_l+0x606>
 8009f86:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8009f8a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8009f8e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8009f92:	35e2      	adds	r5, #226	; 0xe2
 8009f94:	fa07 f505 	lsl.w	r5, r7, r5
 8009f98:	970f      	str	r7, [sp, #60]	; 0x3c
 8009f9a:	e742      	b.n	8009e22 <_strtod_l+0x6ea>
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	2500      	movs	r5, #0
 8009fa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fa2:	e73e      	b.n	8009e22 <_strtod_l+0x6ea>
 8009fa4:	463a      	mov	r2, r7
 8009fa6:	4650      	mov	r0, sl
 8009fa8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8009faa:	f7fe feeb 	bl	8008d84 <__lshift>
 8009fae:	901c      	str	r0, [sp, #112]	; 0x70
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	f47f af64 	bne.w	8009e7e <_strtod_l+0x746>
 8009fb6:	e602      	b.n	8009bbe <_strtod_l+0x486>
 8009fb8:	0800cb58 	.word	0x0800cb58
 8009fbc:	fffffc02 	.word	0xfffffc02
 8009fc0:	7ff00000 	.word	0x7ff00000
 8009fc4:	39500000 	.word	0x39500000
 8009fc8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009fcc:	d166      	bne.n	800a09c <_strtod_l+0x964>
 8009fce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009fd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fd4:	b35a      	cbz	r2, 800a02e <_strtod_l+0x8f6>
 8009fd6:	4a9c      	ldr	r2, [pc, #624]	; (800a248 <_strtod_l+0xb10>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d12c      	bne.n	800a036 <_strtod_l+0x8fe>
 8009fdc:	9b05      	ldr	r3, [sp, #20]
 8009fde:	4640      	mov	r0, r8
 8009fe0:	b303      	cbz	r3, 800a024 <_strtod_l+0x8ec>
 8009fe2:	464b      	mov	r3, r9
 8009fe4:	4a99      	ldr	r2, [pc, #612]	; (800a24c <_strtod_l+0xb14>)
 8009fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8009fea:	401a      	ands	r2, r3
 8009fec:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009ff0:	d81b      	bhi.n	800a02a <_strtod_l+0x8f2>
 8009ff2:	0d12      	lsrs	r2, r2, #20
 8009ff4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ffc:	4298      	cmp	r0, r3
 8009ffe:	d11a      	bne.n	800a036 <_strtod_l+0x8fe>
 800a000:	4b93      	ldr	r3, [pc, #588]	; (800a250 <_strtod_l+0xb18>)
 800a002:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a004:	429a      	cmp	r2, r3
 800a006:	d102      	bne.n	800a00e <_strtod_l+0x8d6>
 800a008:	3001      	adds	r0, #1
 800a00a:	f43f add8 	beq.w	8009bbe <_strtod_l+0x486>
 800a00e:	f04f 0800 	mov.w	r8, #0
 800a012:	4b8e      	ldr	r3, [pc, #568]	; (800a24c <_strtod_l+0xb14>)
 800a014:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a016:	401a      	ands	r2, r3
 800a018:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800a01c:	9b05      	ldr	r3, [sp, #20]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d196      	bne.n	8009f50 <_strtod_l+0x818>
 800a022:	e5d7      	b.n	8009bd4 <_strtod_l+0x49c>
 800a024:	f04f 33ff 	mov.w	r3, #4294967295
 800a028:	e7e8      	b.n	8009ffc <_strtod_l+0x8c4>
 800a02a:	460b      	mov	r3, r1
 800a02c:	e7e6      	b.n	8009ffc <_strtod_l+0x8c4>
 800a02e:	ea53 0308 	orrs.w	r3, r3, r8
 800a032:	f43f af7d 	beq.w	8009f30 <_strtod_l+0x7f8>
 800a036:	b1e5      	cbz	r5, 800a072 <_strtod_l+0x93a>
 800a038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a03a:	421d      	tst	r5, r3
 800a03c:	d0ee      	beq.n	800a01c <_strtod_l+0x8e4>
 800a03e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a040:	4640      	mov	r0, r8
 800a042:	4649      	mov	r1, r9
 800a044:	9a05      	ldr	r2, [sp, #20]
 800a046:	b1c3      	cbz	r3, 800a07a <_strtod_l+0x942>
 800a048:	f7ff fb55 	bl	80096f6 <sulp>
 800a04c:	4602      	mov	r2, r0
 800a04e:	460b      	mov	r3, r1
 800a050:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a054:	f7f6 f88a 	bl	800016c <__adddf3>
 800a058:	4680      	mov	r8, r0
 800a05a:	4689      	mov	r9, r1
 800a05c:	e7de      	b.n	800a01c <_strtod_l+0x8e4>
 800a05e:	4013      	ands	r3, r2
 800a060:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a064:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a068:	f04f 38ff 	mov.w	r8, #4294967295
 800a06c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a070:	e7d4      	b.n	800a01c <_strtod_l+0x8e4>
 800a072:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a074:	ea13 0f08 	tst.w	r3, r8
 800a078:	e7e0      	b.n	800a03c <_strtod_l+0x904>
 800a07a:	f7ff fb3c 	bl	80096f6 <sulp>
 800a07e:	4602      	mov	r2, r0
 800a080:	460b      	mov	r3, r1
 800a082:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a086:	f7f6 f86f 	bl	8000168 <__aeabi_dsub>
 800a08a:	2200      	movs	r2, #0
 800a08c:	2300      	movs	r3, #0
 800a08e:	4680      	mov	r8, r0
 800a090:	4689      	mov	r9, r1
 800a092:	f7f6 fc89 	bl	80009a8 <__aeabi_dcmpeq>
 800a096:	2800      	cmp	r0, #0
 800a098:	d0c0      	beq.n	800a01c <_strtod_l+0x8e4>
 800a09a:	e602      	b.n	8009ca2 <_strtod_l+0x56a>
 800a09c:	4658      	mov	r0, fp
 800a09e:	9904      	ldr	r1, [sp, #16]
 800a0a0:	f7ff f85e 	bl	8009160 <__ratio>
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	f7f6 fc8f 	bl	80009d0 <__aeabi_dcmple>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d075      	beq.n	800a1a2 <_strtod_l+0xa6a>
 800a0b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d047      	beq.n	800a14c <_strtod_l+0xa14>
 800a0bc:	2600      	movs	r6, #0
 800a0be:	4f65      	ldr	r7, [pc, #404]	; (800a254 <_strtod_l+0xb1c>)
 800a0c0:	4d64      	ldr	r5, [pc, #400]	; (800a254 <_strtod_l+0xb1c>)
 800a0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0c8:	0d1b      	lsrs	r3, r3, #20
 800a0ca:	051b      	lsls	r3, r3, #20
 800a0cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0d0:	4b61      	ldr	r3, [pc, #388]	; (800a258 <_strtod_l+0xb20>)
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	f040 80c8 	bne.w	800a268 <_strtod_l+0xb30>
 800a0d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a0dc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e2:	4640      	mov	r0, r8
 800a0e4:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800a0e8:	4649      	mov	r1, r9
 800a0ea:	f7fe ff63 	bl	8008fb4 <__ulp>
 800a0ee:	4602      	mov	r2, r0
 800a0f0:	460b      	mov	r3, r1
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	4639      	mov	r1, r7
 800a0f6:	f7f6 f9ef 	bl	80004d8 <__aeabi_dmul>
 800a0fa:	4642      	mov	r2, r8
 800a0fc:	464b      	mov	r3, r9
 800a0fe:	f7f6 f835 	bl	800016c <__adddf3>
 800a102:	460b      	mov	r3, r1
 800a104:	4951      	ldr	r1, [pc, #324]	; (800a24c <_strtod_l+0xb14>)
 800a106:	4a55      	ldr	r2, [pc, #340]	; (800a25c <_strtod_l+0xb24>)
 800a108:	4019      	ands	r1, r3
 800a10a:	4291      	cmp	r1, r2
 800a10c:	4680      	mov	r8, r0
 800a10e:	d95e      	bls.n	800a1ce <_strtod_l+0xa96>
 800a110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a112:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a116:	4293      	cmp	r3, r2
 800a118:	d103      	bne.n	800a122 <_strtod_l+0x9ea>
 800a11a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a11c:	3301      	adds	r3, #1
 800a11e:	f43f ad4e 	beq.w	8009bbe <_strtod_l+0x486>
 800a122:	f04f 38ff 	mov.w	r8, #4294967295
 800a126:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800a250 <_strtod_l+0xb18>
 800a12a:	4650      	mov	r0, sl
 800a12c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a12e:	f7fe fc44 	bl	80089ba <_Bfree>
 800a132:	4650      	mov	r0, sl
 800a134:	9906      	ldr	r1, [sp, #24]
 800a136:	f7fe fc40 	bl	80089ba <_Bfree>
 800a13a:	4650      	mov	r0, sl
 800a13c:	9904      	ldr	r1, [sp, #16]
 800a13e:	f7fe fc3c 	bl	80089ba <_Bfree>
 800a142:	4659      	mov	r1, fp
 800a144:	4650      	mov	r0, sl
 800a146:	f7fe fc38 	bl	80089ba <_Bfree>
 800a14a:	e61c      	b.n	8009d86 <_strtod_l+0x64e>
 800a14c:	f1b8 0f00 	cmp.w	r8, #0
 800a150:	d119      	bne.n	800a186 <_strtod_l+0xa4e>
 800a152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a154:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a158:	b9e3      	cbnz	r3, 800a194 <_strtod_l+0xa5c>
 800a15a:	2200      	movs	r2, #0
 800a15c:	4630      	mov	r0, r6
 800a15e:	4639      	mov	r1, r7
 800a160:	4b3c      	ldr	r3, [pc, #240]	; (800a254 <_strtod_l+0xb1c>)
 800a162:	f7f6 fc2b 	bl	80009bc <__aeabi_dcmplt>
 800a166:	b9c8      	cbnz	r0, 800a19c <_strtod_l+0xa64>
 800a168:	2200      	movs	r2, #0
 800a16a:	4630      	mov	r0, r6
 800a16c:	4639      	mov	r1, r7
 800a16e:	4b3c      	ldr	r3, [pc, #240]	; (800a260 <_strtod_l+0xb28>)
 800a170:	f7f6 f9b2 	bl	80004d8 <__aeabi_dmul>
 800a174:	4604      	mov	r4, r0
 800a176:	460d      	mov	r5, r1
 800a178:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800a17c:	9418      	str	r4, [sp, #96]	; 0x60
 800a17e:	9319      	str	r3, [sp, #100]	; 0x64
 800a180:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800a184:	e79d      	b.n	800a0c2 <_strtod_l+0x98a>
 800a186:	f1b8 0f01 	cmp.w	r8, #1
 800a18a:	d103      	bne.n	800a194 <_strtod_l+0xa5c>
 800a18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18e:	2b00      	cmp	r3, #0
 800a190:	f43f ad87 	beq.w	8009ca2 <_strtod_l+0x56a>
 800a194:	2600      	movs	r6, #0
 800a196:	2400      	movs	r4, #0
 800a198:	4f32      	ldr	r7, [pc, #200]	; (800a264 <_strtod_l+0xb2c>)
 800a19a:	e791      	b.n	800a0c0 <_strtod_l+0x988>
 800a19c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800a19e:	4d30      	ldr	r5, [pc, #192]	; (800a260 <_strtod_l+0xb28>)
 800a1a0:	e7ea      	b.n	800a178 <_strtod_l+0xa40>
 800a1a2:	4b2f      	ldr	r3, [pc, #188]	; (800a260 <_strtod_l+0xb28>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	f7f6 f995 	bl	80004d8 <__aeabi_dmul>
 800a1ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	460d      	mov	r5, r1
 800a1b4:	b933      	cbnz	r3, 800a1c4 <_strtod_l+0xa8c>
 800a1b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a1ba:	9010      	str	r0, [sp, #64]	; 0x40
 800a1bc:	9311      	str	r3, [sp, #68]	; 0x44
 800a1be:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a1c2:	e77e      	b.n	800a0c2 <_strtod_l+0x98a>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800a1cc:	e7f7      	b.n	800a1be <_strtod_l+0xa86>
 800a1ce:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a1d2:	9b05      	ldr	r3, [sp, #20]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d1a8      	bne.n	800a12a <_strtod_l+0x9f2>
 800a1d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1de:	0d1b      	lsrs	r3, r3, #20
 800a1e0:	051b      	lsls	r3, r3, #20
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d1a1      	bne.n	800a12a <_strtod_l+0x9f2>
 800a1e6:	4620      	mov	r0, r4
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	f7f6 fde3 	bl	8000db4 <__aeabi_d2lz>
 800a1ee:	f7f6 f945 	bl	800047c <__aeabi_l2d>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	4620      	mov	r0, r4
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	f7f5 ffb5 	bl	8000168 <__aeabi_dsub>
 800a1fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a200:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a204:	ea43 0308 	orr.w	r3, r3, r8
 800a208:	4313      	orrs	r3, r2
 800a20a:	4604      	mov	r4, r0
 800a20c:	460d      	mov	r5, r1
 800a20e:	d066      	beq.n	800a2de <_strtod_l+0xba6>
 800a210:	a309      	add	r3, pc, #36	; (adr r3, 800a238 <_strtod_l+0xb00>)
 800a212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a216:	f7f6 fbd1 	bl	80009bc <__aeabi_dcmplt>
 800a21a:	2800      	cmp	r0, #0
 800a21c:	f47f acda 	bne.w	8009bd4 <_strtod_l+0x49c>
 800a220:	a307      	add	r3, pc, #28	; (adr r3, 800a240 <_strtod_l+0xb08>)
 800a222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a226:	4620      	mov	r0, r4
 800a228:	4629      	mov	r1, r5
 800a22a:	f7f6 fbe5 	bl	80009f8 <__aeabi_dcmpgt>
 800a22e:	2800      	cmp	r0, #0
 800a230:	f43f af7b 	beq.w	800a12a <_strtod_l+0x9f2>
 800a234:	e4ce      	b.n	8009bd4 <_strtod_l+0x49c>
 800a236:	bf00      	nop
 800a238:	94a03595 	.word	0x94a03595
 800a23c:	3fdfffff 	.word	0x3fdfffff
 800a240:	35afe535 	.word	0x35afe535
 800a244:	3fe00000 	.word	0x3fe00000
 800a248:	000fffff 	.word	0x000fffff
 800a24c:	7ff00000 	.word	0x7ff00000
 800a250:	7fefffff 	.word	0x7fefffff
 800a254:	3ff00000 	.word	0x3ff00000
 800a258:	7fe00000 	.word	0x7fe00000
 800a25c:	7c9fffff 	.word	0x7c9fffff
 800a260:	3fe00000 	.word	0x3fe00000
 800a264:	bff00000 	.word	0xbff00000
 800a268:	9b05      	ldr	r3, [sp, #20]
 800a26a:	b313      	cbz	r3, 800a2b2 <_strtod_l+0xb7a>
 800a26c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a26e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a272:	d81e      	bhi.n	800a2b2 <_strtod_l+0xb7a>
 800a274:	a326      	add	r3, pc, #152	; (adr r3, 800a310 <_strtod_l+0xbd8>)
 800a276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a27a:	4620      	mov	r0, r4
 800a27c:	4629      	mov	r1, r5
 800a27e:	f7f6 fba7 	bl	80009d0 <__aeabi_dcmple>
 800a282:	b190      	cbz	r0, 800a2aa <_strtod_l+0xb72>
 800a284:	4629      	mov	r1, r5
 800a286:	4620      	mov	r0, r4
 800a288:	f7f6 fbfe 	bl	8000a88 <__aeabi_d2uiz>
 800a28c:	2801      	cmp	r0, #1
 800a28e:	bf38      	it	cc
 800a290:	2001      	movcc	r0, #1
 800a292:	f7f6 f8a7 	bl	80003e4 <__aeabi_ui2d>
 800a296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a298:	4604      	mov	r4, r0
 800a29a:	460d      	mov	r5, r1
 800a29c:	b9d3      	cbnz	r3, 800a2d4 <_strtod_l+0xb9c>
 800a29e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2a2:	9012      	str	r0, [sp, #72]	; 0x48
 800a2a4:	9313      	str	r3, [sp, #76]	; 0x4c
 800a2a6:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800a2aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a2ac:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800a2b0:	1a9f      	subs	r7, r3, r2
 800a2b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2b6:	f7fe fe7d 	bl	8008fb4 <__ulp>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	460b      	mov	r3, r1
 800a2be:	4630      	mov	r0, r6
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	f7f6 f909 	bl	80004d8 <__aeabi_dmul>
 800a2c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a2ca:	f7f5 ff4f 	bl	800016c <__adddf3>
 800a2ce:	4680      	mov	r8, r0
 800a2d0:	4689      	mov	r9, r1
 800a2d2:	e77e      	b.n	800a1d2 <_strtod_l+0xa9a>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800a2dc:	e7e3      	b.n	800a2a6 <_strtod_l+0xb6e>
 800a2de:	a30e      	add	r3, pc, #56	; (adr r3, 800a318 <_strtod_l+0xbe0>)
 800a2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2e4:	f7f6 fb6a 	bl	80009bc <__aeabi_dcmplt>
 800a2e8:	e7a1      	b.n	800a22e <_strtod_l+0xaf6>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	930c      	str	r3, [sp, #48]	; 0x30
 800a2ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2f0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	f7ff ba65 	b.w	80097c2 <_strtod_l+0x8a>
 800a2f8:	2b65      	cmp	r3, #101	; 0x65
 800a2fa:	f43f ab5c 	beq.w	80099b6 <_strtod_l+0x27e>
 800a2fe:	2b45      	cmp	r3, #69	; 0x45
 800a300:	f43f ab59 	beq.w	80099b6 <_strtod_l+0x27e>
 800a304:	2201      	movs	r2, #1
 800a306:	f7ff bb8d 	b.w	8009a24 <_strtod_l+0x2ec>
 800a30a:	bf00      	nop
 800a30c:	f3af 8000 	nop.w
 800a310:	ffc00000 	.word	0xffc00000
 800a314:	41dfffff 	.word	0x41dfffff
 800a318:	94a03595 	.word	0x94a03595
 800a31c:	3fcfffff 	.word	0x3fcfffff

0800a320 <_strtod_r>:
 800a320:	4b01      	ldr	r3, [pc, #4]	; (800a328 <_strtod_r+0x8>)
 800a322:	f7ff ba09 	b.w	8009738 <_strtod_l>
 800a326:	bf00      	nop
 800a328:	2000049c 	.word	0x2000049c

0800a32c <_strtol_l.isra.0>:
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a332:	4686      	mov	lr, r0
 800a334:	d001      	beq.n	800a33a <_strtol_l.isra.0+0xe>
 800a336:	2b24      	cmp	r3, #36	; 0x24
 800a338:	d906      	bls.n	800a348 <_strtol_l.isra.0+0x1c>
 800a33a:	f7fa fca9 	bl	8004c90 <__errno>
 800a33e:	2316      	movs	r3, #22
 800a340:	6003      	str	r3, [r0, #0]
 800a342:	2000      	movs	r0, #0
 800a344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a348:	468c      	mov	ip, r1
 800a34a:	4e3a      	ldr	r6, [pc, #232]	; (800a434 <_strtol_l.isra.0+0x108>)
 800a34c:	4660      	mov	r0, ip
 800a34e:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a352:	5da5      	ldrb	r5, [r4, r6]
 800a354:	f015 0508 	ands.w	r5, r5, #8
 800a358:	d1f8      	bne.n	800a34c <_strtol_l.isra.0+0x20>
 800a35a:	2c2d      	cmp	r4, #45	; 0x2d
 800a35c:	d133      	bne.n	800a3c6 <_strtol_l.isra.0+0x9a>
 800a35e:	f04f 0801 	mov.w	r8, #1
 800a362:	f89c 4000 	ldrb.w	r4, [ip]
 800a366:	f100 0c02 	add.w	ip, r0, #2
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d05d      	beq.n	800a42a <_strtol_l.isra.0+0xfe>
 800a36e:	2b10      	cmp	r3, #16
 800a370:	d10c      	bne.n	800a38c <_strtol_l.isra.0+0x60>
 800a372:	2c30      	cmp	r4, #48	; 0x30
 800a374:	d10a      	bne.n	800a38c <_strtol_l.isra.0+0x60>
 800a376:	f89c 0000 	ldrb.w	r0, [ip]
 800a37a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a37e:	2858      	cmp	r0, #88	; 0x58
 800a380:	d14e      	bne.n	800a420 <_strtol_l.isra.0+0xf4>
 800a382:	2310      	movs	r3, #16
 800a384:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a388:	f10c 0c02 	add.w	ip, ip, #2
 800a38c:	2500      	movs	r5, #0
 800a38e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 800a392:	3f01      	subs	r7, #1
 800a394:	fbb7 f9f3 	udiv	r9, r7, r3
 800a398:	4628      	mov	r0, r5
 800a39a:	fb03 7a19 	mls	sl, r3, r9, r7
 800a39e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a3a2:	2e09      	cmp	r6, #9
 800a3a4:	d818      	bhi.n	800a3d8 <_strtol_l.isra.0+0xac>
 800a3a6:	4634      	mov	r4, r6
 800a3a8:	42a3      	cmp	r3, r4
 800a3aa:	dd24      	ble.n	800a3f6 <_strtol_l.isra.0+0xca>
 800a3ac:	2d00      	cmp	r5, #0
 800a3ae:	db1f      	blt.n	800a3f0 <_strtol_l.isra.0+0xc4>
 800a3b0:	4581      	cmp	r9, r0
 800a3b2:	d31d      	bcc.n	800a3f0 <_strtol_l.isra.0+0xc4>
 800a3b4:	d101      	bne.n	800a3ba <_strtol_l.isra.0+0x8e>
 800a3b6:	45a2      	cmp	sl, r4
 800a3b8:	db1a      	blt.n	800a3f0 <_strtol_l.isra.0+0xc4>
 800a3ba:	2501      	movs	r5, #1
 800a3bc:	fb00 4003 	mla	r0, r0, r3, r4
 800a3c0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a3c4:	e7eb      	b.n	800a39e <_strtol_l.isra.0+0x72>
 800a3c6:	2c2b      	cmp	r4, #43	; 0x2b
 800a3c8:	bf08      	it	eq
 800a3ca:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a3ce:	46a8      	mov	r8, r5
 800a3d0:	bf08      	it	eq
 800a3d2:	f100 0c02 	addeq.w	ip, r0, #2
 800a3d6:	e7c8      	b.n	800a36a <_strtol_l.isra.0+0x3e>
 800a3d8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a3dc:	2e19      	cmp	r6, #25
 800a3de:	d801      	bhi.n	800a3e4 <_strtol_l.isra.0+0xb8>
 800a3e0:	3c37      	subs	r4, #55	; 0x37
 800a3e2:	e7e1      	b.n	800a3a8 <_strtol_l.isra.0+0x7c>
 800a3e4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a3e8:	2e19      	cmp	r6, #25
 800a3ea:	d804      	bhi.n	800a3f6 <_strtol_l.isra.0+0xca>
 800a3ec:	3c57      	subs	r4, #87	; 0x57
 800a3ee:	e7db      	b.n	800a3a8 <_strtol_l.isra.0+0x7c>
 800a3f0:	f04f 35ff 	mov.w	r5, #4294967295
 800a3f4:	e7e4      	b.n	800a3c0 <_strtol_l.isra.0+0x94>
 800a3f6:	2d00      	cmp	r5, #0
 800a3f8:	da08      	bge.n	800a40c <_strtol_l.isra.0+0xe0>
 800a3fa:	2322      	movs	r3, #34	; 0x22
 800a3fc:	4638      	mov	r0, r7
 800a3fe:	f8ce 3000 	str.w	r3, [lr]
 800a402:	2a00      	cmp	r2, #0
 800a404:	d09e      	beq.n	800a344 <_strtol_l.isra.0+0x18>
 800a406:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a40a:	e007      	b.n	800a41c <_strtol_l.isra.0+0xf0>
 800a40c:	f1b8 0f00 	cmp.w	r8, #0
 800a410:	d000      	beq.n	800a414 <_strtol_l.isra.0+0xe8>
 800a412:	4240      	negs	r0, r0
 800a414:	2a00      	cmp	r2, #0
 800a416:	d095      	beq.n	800a344 <_strtol_l.isra.0+0x18>
 800a418:	2d00      	cmp	r5, #0
 800a41a:	d1f4      	bne.n	800a406 <_strtol_l.isra.0+0xda>
 800a41c:	6011      	str	r1, [r2, #0]
 800a41e:	e791      	b.n	800a344 <_strtol_l.isra.0+0x18>
 800a420:	2430      	movs	r4, #48	; 0x30
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1b2      	bne.n	800a38c <_strtol_l.isra.0+0x60>
 800a426:	2308      	movs	r3, #8
 800a428:	e7b0      	b.n	800a38c <_strtol_l.isra.0+0x60>
 800a42a:	2c30      	cmp	r4, #48	; 0x30
 800a42c:	d0a3      	beq.n	800a376 <_strtol_l.isra.0+0x4a>
 800a42e:	230a      	movs	r3, #10
 800a430:	e7ac      	b.n	800a38c <_strtol_l.isra.0+0x60>
 800a432:	bf00      	nop
 800a434:	0800c849 	.word	0x0800c849

0800a438 <_strtol_r>:
 800a438:	f7ff bf78 	b.w	800a32c <_strtol_l.isra.0>

0800a43c <_strtoll_l.isra.0>:
 800a43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a440:	4688      	mov	r8, r1
 800a442:	461f      	mov	r7, r3
 800a444:	460d      	mov	r5, r1
 800a446:	4691      	mov	r9, r2
 800a448:	b087      	sub	sp, #28
 800a44a:	4a46      	ldr	r2, [pc, #280]	; (800a564 <_strtoll_l.isra.0+0x128>)
 800a44c:	9005      	str	r0, [sp, #20]
 800a44e:	462b      	mov	r3, r5
 800a450:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a454:	5ca6      	ldrb	r6, [r4, r2]
 800a456:	f016 0608 	ands.w	r6, r6, #8
 800a45a:	d1f8      	bne.n	800a44e <_strtoll_l.isra.0+0x12>
 800a45c:	2c2d      	cmp	r4, #45	; 0x2d
 800a45e:	d147      	bne.n	800a4f0 <_strtoll_l.isra.0+0xb4>
 800a460:	2601      	movs	r6, #1
 800a462:	782c      	ldrb	r4, [r5, #0]
 800a464:	1c9d      	adds	r5, r3, #2
 800a466:	2f00      	cmp	r7, #0
 800a468:	d077      	beq.n	800a55a <_strtoll_l.isra.0+0x11e>
 800a46a:	2f10      	cmp	r7, #16
 800a46c:	d109      	bne.n	800a482 <_strtoll_l.isra.0+0x46>
 800a46e:	2c30      	cmp	r4, #48	; 0x30
 800a470:	d107      	bne.n	800a482 <_strtoll_l.isra.0+0x46>
 800a472:	782b      	ldrb	r3, [r5, #0]
 800a474:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a478:	2b58      	cmp	r3, #88	; 0x58
 800a47a:	d169      	bne.n	800a550 <_strtoll_l.isra.0+0x114>
 800a47c:	2710      	movs	r7, #16
 800a47e:	786c      	ldrb	r4, [r5, #1]
 800a480:	3502      	adds	r5, #2
 800a482:	f04f 32ff 	mov.w	r2, #4294967295
 800a486:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a48a:	1990      	adds	r0, r2, r6
 800a48c:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800a490:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 800a494:	463a      	mov	r2, r7
 800a496:	465b      	mov	r3, fp
 800a498:	e9cd 0100 	strd	r0, r1, [sp]
 800a49c:	f7f6 fc72 	bl	8000d84 <__aeabi_uldivmod>
 800a4a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4a4:	46ba      	mov	sl, r7
 800a4a6:	4696      	mov	lr, r2
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	2100      	movs	r1, #0
 800a4ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a4b2:	f1bc 0f09 	cmp.w	ip, #9
 800a4b6:	d820      	bhi.n	800a4fa <_strtoll_l.isra.0+0xbe>
 800a4b8:	4664      	mov	r4, ip
 800a4ba:	42a7      	cmp	r7, r4
 800a4bc:	dd2e      	ble.n	800a51c <_strtoll_l.isra.0+0xe0>
 800a4be:	1c5a      	adds	r2, r3, #1
 800a4c0:	d013      	beq.n	800a4ea <_strtoll_l.isra.0+0xae>
 800a4c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4c6:	428b      	cmp	r3, r1
 800a4c8:	bf08      	it	eq
 800a4ca:	4282      	cmpeq	r2, r0
 800a4cc:	d323      	bcc.n	800a516 <_strtoll_l.isra.0+0xda>
 800a4ce:	d101      	bne.n	800a4d4 <_strtoll_l.isra.0+0x98>
 800a4d0:	45a6      	cmp	lr, r4
 800a4d2:	db20      	blt.n	800a516 <_strtoll_l.isra.0+0xda>
 800a4d4:	fb0a f301 	mul.w	r3, sl, r1
 800a4d8:	fb00 330b 	mla	r3, r0, fp, r3
 800a4dc:	fbaa 0100 	umull	r0, r1, sl, r0
 800a4e0:	4419      	add	r1, r3
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	1900      	adds	r0, r0, r4
 800a4e6:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800a4ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4ee:	e7de      	b.n	800a4ae <_strtoll_l.isra.0+0x72>
 800a4f0:	2c2b      	cmp	r4, #43	; 0x2b
 800a4f2:	bf04      	itt	eq
 800a4f4:	782c      	ldrbeq	r4, [r5, #0]
 800a4f6:	1c9d      	addeq	r5, r3, #2
 800a4f8:	e7b5      	b.n	800a466 <_strtoll_l.isra.0+0x2a>
 800a4fa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a4fe:	f1bc 0f19 	cmp.w	ip, #25
 800a502:	d801      	bhi.n	800a508 <_strtoll_l.isra.0+0xcc>
 800a504:	3c37      	subs	r4, #55	; 0x37
 800a506:	e7d8      	b.n	800a4ba <_strtoll_l.isra.0+0x7e>
 800a508:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a50c:	f1bc 0f19 	cmp.w	ip, #25
 800a510:	d804      	bhi.n	800a51c <_strtoll_l.isra.0+0xe0>
 800a512:	3c57      	subs	r4, #87	; 0x57
 800a514:	e7d1      	b.n	800a4ba <_strtoll_l.isra.0+0x7e>
 800a516:	f04f 33ff 	mov.w	r3, #4294967295
 800a51a:	e7e6      	b.n	800a4ea <_strtoll_l.isra.0+0xae>
 800a51c:	1c5a      	adds	r2, r3, #1
 800a51e:	d10a      	bne.n	800a536 <_strtoll_l.isra.0+0xfa>
 800a520:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a524:	2322      	movs	r3, #34	; 0x22
 800a526:	9a05      	ldr	r2, [sp, #20]
 800a528:	6013      	str	r3, [r2, #0]
 800a52a:	f1b9 0f00 	cmp.w	r9, #0
 800a52e:	d10a      	bne.n	800a546 <_strtoll_l.isra.0+0x10a>
 800a530:	b007      	add	sp, #28
 800a532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a536:	b116      	cbz	r6, 800a53e <_strtoll_l.isra.0+0x102>
 800a538:	4240      	negs	r0, r0
 800a53a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a53e:	f1b9 0f00 	cmp.w	r9, #0
 800a542:	d0f5      	beq.n	800a530 <_strtoll_l.isra.0+0xf4>
 800a544:	b10b      	cbz	r3, 800a54a <_strtoll_l.isra.0+0x10e>
 800a546:	f105 38ff 	add.w	r8, r5, #4294967295
 800a54a:	f8c9 8000 	str.w	r8, [r9]
 800a54e:	e7ef      	b.n	800a530 <_strtoll_l.isra.0+0xf4>
 800a550:	2430      	movs	r4, #48	; 0x30
 800a552:	2f00      	cmp	r7, #0
 800a554:	d195      	bne.n	800a482 <_strtoll_l.isra.0+0x46>
 800a556:	2708      	movs	r7, #8
 800a558:	e793      	b.n	800a482 <_strtoll_l.isra.0+0x46>
 800a55a:	2c30      	cmp	r4, #48	; 0x30
 800a55c:	d089      	beq.n	800a472 <_strtoll_l.isra.0+0x36>
 800a55e:	270a      	movs	r7, #10
 800a560:	e78f      	b.n	800a482 <_strtoll_l.isra.0+0x46>
 800a562:	bf00      	nop
 800a564:	0800c849 	.word	0x0800c849

0800a568 <_strtoll_r>:
 800a568:	f7ff bf68 	b.w	800a43c <_strtoll_l.isra.0>

0800a56c <_strtoul_l.isra.0>:
 800a56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a570:	468c      	mov	ip, r1
 800a572:	4686      	mov	lr, r0
 800a574:	4e3a      	ldr	r6, [pc, #232]	; (800a660 <_strtoul_l.isra.0+0xf4>)
 800a576:	4660      	mov	r0, ip
 800a578:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a57c:	5da5      	ldrb	r5, [r4, r6]
 800a57e:	f015 0508 	ands.w	r5, r5, #8
 800a582:	d1f8      	bne.n	800a576 <_strtoul_l.isra.0+0xa>
 800a584:	2c2d      	cmp	r4, #45	; 0x2d
 800a586:	d134      	bne.n	800a5f2 <_strtoul_l.isra.0+0x86>
 800a588:	f04f 0801 	mov.w	r8, #1
 800a58c:	f89c 4000 	ldrb.w	r4, [ip]
 800a590:	f100 0c02 	add.w	ip, r0, #2
 800a594:	2b00      	cmp	r3, #0
 800a596:	d05e      	beq.n	800a656 <_strtoul_l.isra.0+0xea>
 800a598:	2b10      	cmp	r3, #16
 800a59a:	d10c      	bne.n	800a5b6 <_strtoul_l.isra.0+0x4a>
 800a59c:	2c30      	cmp	r4, #48	; 0x30
 800a59e:	d10a      	bne.n	800a5b6 <_strtoul_l.isra.0+0x4a>
 800a5a0:	f89c 0000 	ldrb.w	r0, [ip]
 800a5a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a5a8:	2858      	cmp	r0, #88	; 0x58
 800a5aa:	d14f      	bne.n	800a64c <_strtoul_l.isra.0+0xe0>
 800a5ac:	2310      	movs	r3, #16
 800a5ae:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800a5b2:	f10c 0c02 	add.w	ip, ip, #2
 800a5b6:	f04f 37ff 	mov.w	r7, #4294967295
 800a5ba:	fbb7 f7f3 	udiv	r7, r7, r3
 800a5be:	2500      	movs	r5, #0
 800a5c0:	fb03 f907 	mul.w	r9, r3, r7
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	ea6f 0909 	mvn.w	r9, r9
 800a5ca:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800a5ce:	2e09      	cmp	r6, #9
 800a5d0:	d818      	bhi.n	800a604 <_strtoul_l.isra.0+0x98>
 800a5d2:	4634      	mov	r4, r6
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	dd24      	ble.n	800a622 <_strtoul_l.isra.0+0xb6>
 800a5d8:	2d00      	cmp	r5, #0
 800a5da:	db1f      	blt.n	800a61c <_strtoul_l.isra.0+0xb0>
 800a5dc:	4287      	cmp	r7, r0
 800a5de:	d31d      	bcc.n	800a61c <_strtoul_l.isra.0+0xb0>
 800a5e0:	d101      	bne.n	800a5e6 <_strtoul_l.isra.0+0x7a>
 800a5e2:	45a1      	cmp	r9, r4
 800a5e4:	db1a      	blt.n	800a61c <_strtoul_l.isra.0+0xb0>
 800a5e6:	2501      	movs	r5, #1
 800a5e8:	fb00 4003 	mla	r0, r0, r3, r4
 800a5ec:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800a5f0:	e7eb      	b.n	800a5ca <_strtoul_l.isra.0+0x5e>
 800a5f2:	2c2b      	cmp	r4, #43	; 0x2b
 800a5f4:	bf08      	it	eq
 800a5f6:	f89c 4000 	ldrbeq.w	r4, [ip]
 800a5fa:	46a8      	mov	r8, r5
 800a5fc:	bf08      	it	eq
 800a5fe:	f100 0c02 	addeq.w	ip, r0, #2
 800a602:	e7c7      	b.n	800a594 <_strtoul_l.isra.0+0x28>
 800a604:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800a608:	2e19      	cmp	r6, #25
 800a60a:	d801      	bhi.n	800a610 <_strtoul_l.isra.0+0xa4>
 800a60c:	3c37      	subs	r4, #55	; 0x37
 800a60e:	e7e1      	b.n	800a5d4 <_strtoul_l.isra.0+0x68>
 800a610:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800a614:	2e19      	cmp	r6, #25
 800a616:	d804      	bhi.n	800a622 <_strtoul_l.isra.0+0xb6>
 800a618:	3c57      	subs	r4, #87	; 0x57
 800a61a:	e7db      	b.n	800a5d4 <_strtoul_l.isra.0+0x68>
 800a61c:	f04f 35ff 	mov.w	r5, #4294967295
 800a620:	e7e4      	b.n	800a5ec <_strtoul_l.isra.0+0x80>
 800a622:	2d00      	cmp	r5, #0
 800a624:	da07      	bge.n	800a636 <_strtoul_l.isra.0+0xca>
 800a626:	2322      	movs	r3, #34	; 0x22
 800a628:	f04f 30ff 	mov.w	r0, #4294967295
 800a62c:	f8ce 3000 	str.w	r3, [lr]
 800a630:	b942      	cbnz	r2, 800a644 <_strtoul_l.isra.0+0xd8>
 800a632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a636:	f1b8 0f00 	cmp.w	r8, #0
 800a63a:	d000      	beq.n	800a63e <_strtoul_l.isra.0+0xd2>
 800a63c:	4240      	negs	r0, r0
 800a63e:	2a00      	cmp	r2, #0
 800a640:	d0f7      	beq.n	800a632 <_strtoul_l.isra.0+0xc6>
 800a642:	b10d      	cbz	r5, 800a648 <_strtoul_l.isra.0+0xdc>
 800a644:	f10c 31ff 	add.w	r1, ip, #4294967295
 800a648:	6011      	str	r1, [r2, #0]
 800a64a:	e7f2      	b.n	800a632 <_strtoul_l.isra.0+0xc6>
 800a64c:	2430      	movs	r4, #48	; 0x30
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1b1      	bne.n	800a5b6 <_strtoul_l.isra.0+0x4a>
 800a652:	2308      	movs	r3, #8
 800a654:	e7af      	b.n	800a5b6 <_strtoul_l.isra.0+0x4a>
 800a656:	2c30      	cmp	r4, #48	; 0x30
 800a658:	d0a2      	beq.n	800a5a0 <_strtoul_l.isra.0+0x34>
 800a65a:	230a      	movs	r3, #10
 800a65c:	e7ab      	b.n	800a5b6 <_strtoul_l.isra.0+0x4a>
 800a65e:	bf00      	nop
 800a660:	0800c849 	.word	0x0800c849

0800a664 <_strtoul_r>:
 800a664:	f7ff bf82 	b.w	800a56c <_strtoul_l.isra.0>

0800a668 <_strtoull_l.isra.0>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	4688      	mov	r8, r1
 800a66e:	461e      	mov	r6, r3
 800a670:	460d      	mov	r5, r1
 800a672:	4691      	mov	r9, r2
 800a674:	b085      	sub	sp, #20
 800a676:	4a48      	ldr	r2, [pc, #288]	; (800a798 <_strtoull_l.isra.0+0x130>)
 800a678:	9003      	str	r0, [sp, #12]
 800a67a:	462b      	mov	r3, r5
 800a67c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a680:	5ca7      	ldrb	r7, [r4, r2]
 800a682:	f017 0708 	ands.w	r7, r7, #8
 800a686:	d1f8      	bne.n	800a67a <_strtoull_l.isra.0+0x12>
 800a688:	2c2d      	cmp	r4, #45	; 0x2d
 800a68a:	d14a      	bne.n	800a722 <_strtoull_l.isra.0+0xba>
 800a68c:	2701      	movs	r7, #1
 800a68e:	782c      	ldrb	r4, [r5, #0]
 800a690:	1c9d      	adds	r5, r3, #2
 800a692:	2e00      	cmp	r6, #0
 800a694:	d07c      	beq.n	800a790 <_strtoull_l.isra.0+0x128>
 800a696:	2e10      	cmp	r6, #16
 800a698:	d109      	bne.n	800a6ae <_strtoull_l.isra.0+0x46>
 800a69a:	2c30      	cmp	r4, #48	; 0x30
 800a69c:	d107      	bne.n	800a6ae <_strtoull_l.isra.0+0x46>
 800a69e:	782b      	ldrb	r3, [r5, #0]
 800a6a0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6a4:	2b58      	cmp	r3, #88	; 0x58
 800a6a6:	d16e      	bne.n	800a786 <_strtoull_l.isra.0+0x11e>
 800a6a8:	2610      	movs	r6, #16
 800a6aa:	786c      	ldrb	r4, [r5, #1]
 800a6ac:	3502      	adds	r5, #2
 800a6ae:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800a6b2:	4632      	mov	r2, r6
 800a6b4:	465b      	mov	r3, fp
 800a6b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ba:	f04f 31ff 	mov.w	r1, #4294967295
 800a6be:	f7f6 fb61 	bl	8000d84 <__aeabi_uldivmod>
 800a6c2:	e9cd 0100 	strd	r0, r1, [sp]
 800a6c6:	4632      	mov	r2, r6
 800a6c8:	465b      	mov	r3, fp
 800a6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ce:	f04f 31ff 	mov.w	r1, #4294967295
 800a6d2:	f7f6 fb57 	bl	8000d84 <__aeabi_uldivmod>
 800a6d6:	46b2      	mov	sl, r6
 800a6d8:	4696      	mov	lr, r2
 800a6da:	2300      	movs	r3, #0
 800a6dc:	2000      	movs	r0, #0
 800a6de:	2100      	movs	r1, #0
 800a6e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a6e4:	f1bc 0f09 	cmp.w	ip, #9
 800a6e8:	d820      	bhi.n	800a72c <_strtoull_l.isra.0+0xc4>
 800a6ea:	4664      	mov	r4, ip
 800a6ec:	42a6      	cmp	r6, r4
 800a6ee:	dd2e      	ble.n	800a74e <_strtoull_l.isra.0+0xe6>
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	db29      	blt.n	800a748 <_strtoull_l.isra.0+0xe0>
 800a6f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a6f8:	428b      	cmp	r3, r1
 800a6fa:	bf08      	it	eq
 800a6fc:	4282      	cmpeq	r2, r0
 800a6fe:	d323      	bcc.n	800a748 <_strtoull_l.isra.0+0xe0>
 800a700:	d101      	bne.n	800a706 <_strtoull_l.isra.0+0x9e>
 800a702:	45a6      	cmp	lr, r4
 800a704:	db20      	blt.n	800a748 <_strtoull_l.isra.0+0xe0>
 800a706:	fb0a f301 	mul.w	r3, sl, r1
 800a70a:	fb00 330b 	mla	r3, r0, fp, r3
 800a70e:	fbaa 0100 	umull	r0, r1, sl, r0
 800a712:	4419      	add	r1, r3
 800a714:	2301      	movs	r3, #1
 800a716:	1900      	adds	r0, r0, r4
 800a718:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800a71c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a720:	e7de      	b.n	800a6e0 <_strtoull_l.isra.0+0x78>
 800a722:	2c2b      	cmp	r4, #43	; 0x2b
 800a724:	bf04      	itt	eq
 800a726:	782c      	ldrbeq	r4, [r5, #0]
 800a728:	1c9d      	addeq	r5, r3, #2
 800a72a:	e7b2      	b.n	800a692 <_strtoull_l.isra.0+0x2a>
 800a72c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a730:	f1bc 0f19 	cmp.w	ip, #25
 800a734:	d801      	bhi.n	800a73a <_strtoull_l.isra.0+0xd2>
 800a736:	3c37      	subs	r4, #55	; 0x37
 800a738:	e7d8      	b.n	800a6ec <_strtoull_l.isra.0+0x84>
 800a73a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a73e:	f1bc 0f19 	cmp.w	ip, #25
 800a742:	d804      	bhi.n	800a74e <_strtoull_l.isra.0+0xe6>
 800a744:	3c57      	subs	r4, #87	; 0x57
 800a746:	e7d1      	b.n	800a6ec <_strtoull_l.isra.0+0x84>
 800a748:	f04f 33ff 	mov.w	r3, #4294967295
 800a74c:	e7e6      	b.n	800a71c <_strtoull_l.isra.0+0xb4>
 800a74e:	2b00      	cmp	r3, #0
 800a750:	da0c      	bge.n	800a76c <_strtoull_l.isra.0+0x104>
 800a752:	2322      	movs	r3, #34	; 0x22
 800a754:	9a03      	ldr	r2, [sp, #12]
 800a756:	f04f 30ff 	mov.w	r0, #4294967295
 800a75a:	f04f 31ff 	mov.w	r1, #4294967295
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	f1b9 0f00 	cmp.w	r9, #0
 800a764:	d10a      	bne.n	800a77c <_strtoull_l.isra.0+0x114>
 800a766:	b005      	add	sp, #20
 800a768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a76c:	b117      	cbz	r7, 800a774 <_strtoull_l.isra.0+0x10c>
 800a76e:	4240      	negs	r0, r0
 800a770:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800a774:	f1b9 0f00 	cmp.w	r9, #0
 800a778:	d0f5      	beq.n	800a766 <_strtoull_l.isra.0+0xfe>
 800a77a:	b10b      	cbz	r3, 800a780 <_strtoull_l.isra.0+0x118>
 800a77c:	f105 38ff 	add.w	r8, r5, #4294967295
 800a780:	f8c9 8000 	str.w	r8, [r9]
 800a784:	e7ef      	b.n	800a766 <_strtoull_l.isra.0+0xfe>
 800a786:	2430      	movs	r4, #48	; 0x30
 800a788:	2e00      	cmp	r6, #0
 800a78a:	d190      	bne.n	800a6ae <_strtoull_l.isra.0+0x46>
 800a78c:	2608      	movs	r6, #8
 800a78e:	e78e      	b.n	800a6ae <_strtoull_l.isra.0+0x46>
 800a790:	2c30      	cmp	r4, #48	; 0x30
 800a792:	d084      	beq.n	800a69e <_strtoull_l.isra.0+0x36>
 800a794:	260a      	movs	r6, #10
 800a796:	e78a      	b.n	800a6ae <_strtoull_l.isra.0+0x46>
 800a798:	0800c849 	.word	0x0800c849

0800a79c <_strtoull_r>:
 800a79c:	f7ff bf64 	b.w	800a668 <_strtoull_l.isra.0>

0800a7a0 <__ssprint_r>:
 800a7a0:	6893      	ldr	r3, [r2, #8]
 800a7a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7a6:	4680      	mov	r8, r0
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	4617      	mov	r7, r2
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d061      	beq.n	800a874 <__ssprint_r+0xd4>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	469b      	mov	fp, r3
 800a7b4:	f8d2 a000 	ldr.w	sl, [r2]
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	f1bb 0f00 	cmp.w	fp, #0
 800a7be:	d02b      	beq.n	800a818 <__ssprint_r+0x78>
 800a7c0:	68a6      	ldr	r6, [r4, #8]
 800a7c2:	45b3      	cmp	fp, r6
 800a7c4:	d342      	bcc.n	800a84c <__ssprint_r+0xac>
 800a7c6:	89a2      	ldrh	r2, [r4, #12]
 800a7c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a7cc:	d03e      	beq.n	800a84c <__ssprint_r+0xac>
 800a7ce:	6825      	ldr	r5, [r4, #0]
 800a7d0:	6921      	ldr	r1, [r4, #16]
 800a7d2:	eba5 0901 	sub.w	r9, r5, r1
 800a7d6:	6965      	ldr	r5, [r4, #20]
 800a7d8:	f109 0001 	add.w	r0, r9, #1
 800a7dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a7e4:	106d      	asrs	r5, r5, #1
 800a7e6:	4458      	add	r0, fp
 800a7e8:	4285      	cmp	r5, r0
 800a7ea:	bf38      	it	cc
 800a7ec:	4605      	movcc	r5, r0
 800a7ee:	0553      	lsls	r3, r2, #21
 800a7f0:	d545      	bpl.n	800a87e <__ssprint_r+0xde>
 800a7f2:	4629      	mov	r1, r5
 800a7f4:	4640      	mov	r0, r8
 800a7f6:	f7fd fe33 	bl	8008460 <_malloc_r>
 800a7fa:	4606      	mov	r6, r0
 800a7fc:	b9a0      	cbnz	r0, 800a828 <__ssprint_r+0x88>
 800a7fe:	230c      	movs	r3, #12
 800a800:	f8c8 3000 	str.w	r3, [r8]
 800a804:	89a3      	ldrh	r3, [r4, #12]
 800a806:	f04f 30ff 	mov.w	r0, #4294967295
 800a80a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a80e:	81a3      	strh	r3, [r4, #12]
 800a810:	2300      	movs	r3, #0
 800a812:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800a816:	e02f      	b.n	800a878 <__ssprint_r+0xd8>
 800a818:	f8da 3000 	ldr.w	r3, [sl]
 800a81c:	f8da b004 	ldr.w	fp, [sl, #4]
 800a820:	9301      	str	r3, [sp, #4]
 800a822:	f10a 0a08 	add.w	sl, sl, #8
 800a826:	e7c8      	b.n	800a7ba <__ssprint_r+0x1a>
 800a828:	464a      	mov	r2, r9
 800a82a:	6921      	ldr	r1, [r4, #16]
 800a82c:	f7fa fa5a 	bl	8004ce4 <memcpy>
 800a830:	89a2      	ldrh	r2, [r4, #12]
 800a832:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a836:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a83a:	81a2      	strh	r2, [r4, #12]
 800a83c:	6126      	str	r6, [r4, #16]
 800a83e:	444e      	add	r6, r9
 800a840:	6026      	str	r6, [r4, #0]
 800a842:	465e      	mov	r6, fp
 800a844:	6165      	str	r5, [r4, #20]
 800a846:	eba5 0509 	sub.w	r5, r5, r9
 800a84a:	60a5      	str	r5, [r4, #8]
 800a84c:	455e      	cmp	r6, fp
 800a84e:	bf28      	it	cs
 800a850:	465e      	movcs	r6, fp
 800a852:	9901      	ldr	r1, [sp, #4]
 800a854:	4632      	mov	r2, r6
 800a856:	6820      	ldr	r0, [r4, #0]
 800a858:	f000 fe48 	bl	800b4ec <memmove>
 800a85c:	68a2      	ldr	r2, [r4, #8]
 800a85e:	1b92      	subs	r2, r2, r6
 800a860:	60a2      	str	r2, [r4, #8]
 800a862:	6822      	ldr	r2, [r4, #0]
 800a864:	4432      	add	r2, r6
 800a866:	6022      	str	r2, [r4, #0]
 800a868:	68ba      	ldr	r2, [r7, #8]
 800a86a:	eba2 030b 	sub.w	r3, r2, fp
 800a86e:	60bb      	str	r3, [r7, #8]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1d1      	bne.n	800a818 <__ssprint_r+0x78>
 800a874:	2000      	movs	r0, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	b003      	add	sp, #12
 800a87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a87e:	462a      	mov	r2, r5
 800a880:	4640      	mov	r0, r8
 800a882:	f7fe fcf9 	bl	8009278 <_realloc_r>
 800a886:	4606      	mov	r6, r0
 800a888:	2800      	cmp	r0, #0
 800a88a:	d1d7      	bne.n	800a83c <__ssprint_r+0x9c>
 800a88c:	4640      	mov	r0, r8
 800a88e:	6921      	ldr	r1, [r4, #16]
 800a890:	f7fd fce8 	bl	8008264 <_free_r>
 800a894:	e7b3      	b.n	800a7fe <__ssprint_r+0x5e>

0800a896 <_sungetc_r>:
 800a896:	b538      	push	{r3, r4, r5, lr}
 800a898:	1c4b      	adds	r3, r1, #1
 800a89a:	4614      	mov	r4, r2
 800a89c:	d103      	bne.n	800a8a6 <_sungetc_r+0x10>
 800a89e:	f04f 35ff 	mov.w	r5, #4294967295
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	bd38      	pop	{r3, r4, r5, pc}
 800a8a6:	8993      	ldrh	r3, [r2, #12]
 800a8a8:	b2cd      	uxtb	r5, r1
 800a8aa:	f023 0320 	bic.w	r3, r3, #32
 800a8ae:	8193      	strh	r3, [r2, #12]
 800a8b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a8b2:	6852      	ldr	r2, [r2, #4]
 800a8b4:	b18b      	cbz	r3, 800a8da <_sungetc_r+0x44>
 800a8b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	dd08      	ble.n	800a8ce <_sungetc_r+0x38>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	1e5a      	subs	r2, r3, #1
 800a8c0:	6022      	str	r2, [r4, #0]
 800a8c2:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a8c6:	6863      	ldr	r3, [r4, #4]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	6063      	str	r3, [r4, #4]
 800a8cc:	e7e9      	b.n	800a8a2 <_sungetc_r+0xc>
 800a8ce:	4621      	mov	r1, r4
 800a8d0:	f000 f880 	bl	800a9d4 <__submore>
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d0f1      	beq.n	800a8bc <_sungetc_r+0x26>
 800a8d8:	e7e1      	b.n	800a89e <_sungetc_r+0x8>
 800a8da:	6921      	ldr	r1, [r4, #16]
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	b151      	cbz	r1, 800a8f6 <_sungetc_r+0x60>
 800a8e0:	4299      	cmp	r1, r3
 800a8e2:	d208      	bcs.n	800a8f6 <_sungetc_r+0x60>
 800a8e4:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800a8e8:	42a9      	cmp	r1, r5
 800a8ea:	d104      	bne.n	800a8f6 <_sungetc_r+0x60>
 800a8ec:	3b01      	subs	r3, #1
 800a8ee:	3201      	adds	r2, #1
 800a8f0:	6023      	str	r3, [r4, #0]
 800a8f2:	6062      	str	r2, [r4, #4]
 800a8f4:	e7d5      	b.n	800a8a2 <_sungetc_r+0xc>
 800a8f6:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800a8fa:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a8fe:	6323      	str	r3, [r4, #48]	; 0x30
 800a900:	2303      	movs	r3, #3
 800a902:	6363      	str	r3, [r4, #52]	; 0x34
 800a904:	4623      	mov	r3, r4
 800a906:	f803 5f42 	strb.w	r5, [r3, #66]!
 800a90a:	6023      	str	r3, [r4, #0]
 800a90c:	2301      	movs	r3, #1
 800a90e:	e7dc      	b.n	800a8ca <_sungetc_r+0x34>

0800a910 <__ssrefill_r>:
 800a910:	b510      	push	{r4, lr}
 800a912:	460c      	mov	r4, r1
 800a914:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800a916:	b169      	cbz	r1, 800a934 <__ssrefill_r+0x24>
 800a918:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a91c:	4299      	cmp	r1, r3
 800a91e:	d001      	beq.n	800a924 <__ssrefill_r+0x14>
 800a920:	f7fd fca0 	bl	8008264 <_free_r>
 800a924:	2000      	movs	r0, #0
 800a926:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a928:	6320      	str	r0, [r4, #48]	; 0x30
 800a92a:	6063      	str	r3, [r4, #4]
 800a92c:	b113      	cbz	r3, 800a934 <__ssrefill_r+0x24>
 800a92e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a930:	6023      	str	r3, [r4, #0]
 800a932:	bd10      	pop	{r4, pc}
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	f04f 30ff 	mov.w	r0, #4294967295
 800a93a:	6023      	str	r3, [r4, #0]
 800a93c:	2300      	movs	r3, #0
 800a93e:	6063      	str	r3, [r4, #4]
 800a940:	89a3      	ldrh	r3, [r4, #12]
 800a942:	f043 0320 	orr.w	r3, r3, #32
 800a946:	81a3      	strh	r3, [r4, #12]
 800a948:	e7f3      	b.n	800a932 <__ssrefill_r+0x22>

0800a94a <_sfread_r>:
 800a94a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a94e:	461f      	mov	r7, r3
 800a950:	4613      	mov	r3, r2
 800a952:	437b      	muls	r3, r7
 800a954:	4682      	mov	sl, r0
 800a956:	4688      	mov	r8, r1
 800a958:	4691      	mov	r9, r2
 800a95a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800a95c:	d027      	beq.n	800a9ae <_sfread_r+0x64>
 800a95e:	461e      	mov	r6, r3
 800a960:	e9d4 1500 	ldrd	r1, r5, [r4]
 800a964:	42b5      	cmp	r5, r6
 800a966:	d30b      	bcc.n	800a980 <_sfread_r+0x36>
 800a968:	4632      	mov	r2, r6
 800a96a:	4640      	mov	r0, r8
 800a96c:	f7fa f9ba 	bl	8004ce4 <memcpy>
 800a970:	6862      	ldr	r2, [r4, #4]
 800a972:	463b      	mov	r3, r7
 800a974:	1b92      	subs	r2, r2, r6
 800a976:	6062      	str	r2, [r4, #4]
 800a978:	6822      	ldr	r2, [r4, #0]
 800a97a:	4432      	add	r2, r6
 800a97c:	6022      	str	r2, [r4, #0]
 800a97e:	e016      	b.n	800a9ae <_sfread_r+0x64>
 800a980:	462a      	mov	r2, r5
 800a982:	4640      	mov	r0, r8
 800a984:	9301      	str	r3, [sp, #4]
 800a986:	f7fa f9ad 	bl	8004ce4 <memcpy>
 800a98a:	2300      	movs	r3, #0
 800a98c:	6822      	ldr	r2, [r4, #0]
 800a98e:	6063      	str	r3, [r4, #4]
 800a990:	442a      	add	r2, r5
 800a992:	4621      	mov	r1, r4
 800a994:	4650      	mov	r0, sl
 800a996:	6022      	str	r2, [r4, #0]
 800a998:	f7ff ffba 	bl	800a910 <__ssrefill_r>
 800a99c:	44a8      	add	r8, r5
 800a99e:	9b01      	ldr	r3, [sp, #4]
 800a9a0:	eba6 0b05 	sub.w	fp, r6, r5
 800a9a4:	b138      	cbz	r0, 800a9b6 <_sfread_r+0x6c>
 800a9a6:	441d      	add	r5, r3
 800a9a8:	1bad      	subs	r5, r5, r6
 800a9aa:	fbb5 f3f9 	udiv	r3, r5, r9
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	b003      	add	sp, #12
 800a9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b6:	465e      	mov	r6, fp
 800a9b8:	e7d2      	b.n	800a960 <_sfread_r+0x16>

0800a9ba <sysconf>:
 800a9ba:	2808      	cmp	r0, #8
 800a9bc:	b508      	push	{r3, lr}
 800a9be:	d006      	beq.n	800a9ce <sysconf+0x14>
 800a9c0:	f7fa f966 	bl	8004c90 <__errno>
 800a9c4:	2316      	movs	r3, #22
 800a9c6:	6003      	str	r3, [r0, #0]
 800a9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a9cc:	bd08      	pop	{r3, pc}
 800a9ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800a9d2:	e7fb      	b.n	800a9cc <sysconf+0x12>

0800a9d4 <__submore>:
 800a9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d8:	460c      	mov	r4, r1
 800a9da:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800a9dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800a9e0:	4299      	cmp	r1, r3
 800a9e2:	d11b      	bne.n	800aa1c <__submore+0x48>
 800a9e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a9e8:	f7fd fd3a 	bl	8008460 <_malloc_r>
 800a9ec:	b918      	cbnz	r0, 800a9f6 <__submore+0x22>
 800a9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9fa:	6363      	str	r3, [r4, #52]	; 0x34
 800a9fc:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800aa00:	6320      	str	r0, [r4, #48]	; 0x30
 800aa02:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800aa06:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800aa0a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800aa0e:	7043      	strb	r3, [r0, #1]
 800aa10:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800aa14:	7003      	strb	r3, [r0, #0]
 800aa16:	6020      	str	r0, [r4, #0]
 800aa18:	2000      	movs	r0, #0
 800aa1a:	e7ea      	b.n	800a9f2 <__submore+0x1e>
 800aa1c:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800aa1e:	0077      	lsls	r7, r6, #1
 800aa20:	463a      	mov	r2, r7
 800aa22:	f7fe fc29 	bl	8009278 <_realloc_r>
 800aa26:	4605      	mov	r5, r0
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	d0e0      	beq.n	800a9ee <__submore+0x1a>
 800aa2c:	eb00 0806 	add.w	r8, r0, r6
 800aa30:	4601      	mov	r1, r0
 800aa32:	4632      	mov	r2, r6
 800aa34:	4640      	mov	r0, r8
 800aa36:	f7fa f955 	bl	8004ce4 <memcpy>
 800aa3a:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800aa3e:	f8c4 8000 	str.w	r8, [r4]
 800aa42:	e7e9      	b.n	800aa18 <__submore+0x44>

0800aa44 <__ascii_wctomb>:
 800aa44:	4603      	mov	r3, r0
 800aa46:	4608      	mov	r0, r1
 800aa48:	b141      	cbz	r1, 800aa5c <__ascii_wctomb+0x18>
 800aa4a:	2aff      	cmp	r2, #255	; 0xff
 800aa4c:	d904      	bls.n	800aa58 <__ascii_wctomb+0x14>
 800aa4e:	228a      	movs	r2, #138	; 0x8a
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	601a      	str	r2, [r3, #0]
 800aa56:	4770      	bx	lr
 800aa58:	2001      	movs	r0, #1
 800aa5a:	700a      	strb	r2, [r1, #0]
 800aa5c:	4770      	bx	lr
	...

0800aa60 <__register_exitproc>:
 800aa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa64:	4d1c      	ldr	r5, [pc, #112]	; (800aad8 <__register_exitproc+0x78>)
 800aa66:	4606      	mov	r6, r0
 800aa68:	6828      	ldr	r0, [r5, #0]
 800aa6a:	4698      	mov	r8, r3
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	4691      	mov	r9, r2
 800aa70:	f7fd fcd2 	bl	8008418 <__retarget_lock_acquire_recursive>
 800aa74:	4b19      	ldr	r3, [pc, #100]	; (800aadc <__register_exitproc+0x7c>)
 800aa76:	4628      	mov	r0, r5
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800aa7e:	b91c      	cbnz	r4, 800aa88 <__register_exitproc+0x28>
 800aa80:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800aa84:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800aa88:	6865      	ldr	r5, [r4, #4]
 800aa8a:	6800      	ldr	r0, [r0, #0]
 800aa8c:	2d1f      	cmp	r5, #31
 800aa8e:	dd05      	ble.n	800aa9c <__register_exitproc+0x3c>
 800aa90:	f7fd fcc3 	bl	800841a <__retarget_lock_release_recursive>
 800aa94:	f04f 30ff 	mov.w	r0, #4294967295
 800aa98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa9c:	b19e      	cbz	r6, 800aac6 <__register_exitproc+0x66>
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800aaa4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800aaa8:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800aaac:	40aa      	lsls	r2, r5
 800aaae:	4313      	orrs	r3, r2
 800aab0:	2e02      	cmp	r6, #2
 800aab2:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800aab6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800aaba:	bf02      	ittt	eq
 800aabc:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800aac0:	431a      	orreq	r2, r3
 800aac2:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800aac6:	1c6b      	adds	r3, r5, #1
 800aac8:	3502      	adds	r5, #2
 800aaca:	6063      	str	r3, [r4, #4]
 800aacc:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800aad0:	f7fd fca3 	bl	800841a <__retarget_lock_release_recursive>
 800aad4:	2000      	movs	r0, #0
 800aad6:	e7df      	b.n	800aa98 <__register_exitproc+0x38>
 800aad8:	20000498 	.word	0x20000498
 800aadc:	0800c7c8 	.word	0x0800c7c8

0800aae0 <__assert_func>:
 800aae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aae2:	4614      	mov	r4, r2
 800aae4:	461a      	mov	r2, r3
 800aae6:	4b09      	ldr	r3, [pc, #36]	; (800ab0c <__assert_func+0x2c>)
 800aae8:	4605      	mov	r5, r0
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68d8      	ldr	r0, [r3, #12]
 800aaee:	b14c      	cbz	r4, 800ab04 <__assert_func+0x24>
 800aaf0:	4b07      	ldr	r3, [pc, #28]	; (800ab10 <__assert_func+0x30>)
 800aaf2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aaf6:	9100      	str	r1, [sp, #0]
 800aaf8:	462b      	mov	r3, r5
 800aafa:	4906      	ldr	r1, [pc, #24]	; (800ab14 <__assert_func+0x34>)
 800aafc:	f000 f95e 	bl	800adbc <fiprintf>
 800ab00:	f001 fa70 	bl	800bfe4 <abort>
 800ab04:	4b04      	ldr	r3, [pc, #16]	; (800ab18 <__assert_func+0x38>)
 800ab06:	461c      	mov	r4, r3
 800ab08:	e7f3      	b.n	800aaf2 <__assert_func+0x12>
 800ab0a:	bf00      	nop
 800ab0c:	20000068 	.word	0x20000068
 800ab10:	0800cb80 	.word	0x0800cb80
 800ab14:	0800cb8d 	.word	0x0800cb8d
 800ab18:	0800cbbb 	.word	0x0800cbbb

0800ab1c <_calloc_r>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	4351      	muls	r1, r2
 800ab20:	f7fd fc9e 	bl	8008460 <_malloc_r>
 800ab24:	4604      	mov	r4, r0
 800ab26:	b198      	cbz	r0, 800ab50 <_calloc_r+0x34>
 800ab28:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ab2c:	f022 0203 	bic.w	r2, r2, #3
 800ab30:	3a04      	subs	r2, #4
 800ab32:	2a24      	cmp	r2, #36	; 0x24
 800ab34:	d81b      	bhi.n	800ab6e <_calloc_r+0x52>
 800ab36:	2a13      	cmp	r2, #19
 800ab38:	d917      	bls.n	800ab6a <_calloc_r+0x4e>
 800ab3a:	2100      	movs	r1, #0
 800ab3c:	2a1b      	cmp	r2, #27
 800ab3e:	e9c0 1100 	strd	r1, r1, [r0]
 800ab42:	d807      	bhi.n	800ab54 <_calloc_r+0x38>
 800ab44:	f100 0308 	add.w	r3, r0, #8
 800ab48:	2200      	movs	r2, #0
 800ab4a:	e9c3 2200 	strd	r2, r2, [r3]
 800ab4e:	609a      	str	r2, [r3, #8]
 800ab50:	4620      	mov	r0, r4
 800ab52:	bd10      	pop	{r4, pc}
 800ab54:	2a24      	cmp	r2, #36	; 0x24
 800ab56:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800ab5a:	bf11      	iteee	ne
 800ab5c:	f100 0310 	addne.w	r3, r0, #16
 800ab60:	6101      	streq	r1, [r0, #16]
 800ab62:	f100 0318 	addeq.w	r3, r0, #24
 800ab66:	6141      	streq	r1, [r0, #20]
 800ab68:	e7ee      	b.n	800ab48 <_calloc_r+0x2c>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	e7ec      	b.n	800ab48 <_calloc_r+0x2c>
 800ab6e:	2100      	movs	r1, #0
 800ab70:	f7fa f8c6 	bl	8004d00 <memset>
 800ab74:	e7ec      	b.n	800ab50 <_calloc_r+0x34>
	...

0800ab78 <__sflush_r>:
 800ab78:	898b      	ldrh	r3, [r1, #12]
 800ab7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab7e:	4605      	mov	r5, r0
 800ab80:	0718      	lsls	r0, r3, #28
 800ab82:	460c      	mov	r4, r1
 800ab84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab88:	d45f      	bmi.n	800ac4a <__sflush_r+0xd2>
 800ab8a:	684b      	ldr	r3, [r1, #4]
 800ab8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	818a      	strh	r2, [r1, #12]
 800ab94:	dc05      	bgt.n	800aba2 <__sflush_r+0x2a>
 800ab96:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	dc02      	bgt.n	800aba2 <__sflush_r+0x2a>
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aba4:	2e00      	cmp	r6, #0
 800aba6:	d0f9      	beq.n	800ab9c <__sflush_r+0x24>
 800aba8:	2300      	movs	r3, #0
 800abaa:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abae:	682f      	ldr	r7, [r5, #0]
 800abb0:	602b      	str	r3, [r5, #0]
 800abb2:	d036      	beq.n	800ac22 <__sflush_r+0xaa>
 800abb4:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800abb6:	89a3      	ldrh	r3, [r4, #12]
 800abb8:	075a      	lsls	r2, r3, #29
 800abba:	d505      	bpl.n	800abc8 <__sflush_r+0x50>
 800abbc:	6863      	ldr	r3, [r4, #4]
 800abbe:	1ac0      	subs	r0, r0, r3
 800abc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800abc2:	b10b      	cbz	r3, 800abc8 <__sflush_r+0x50>
 800abc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800abc6:	1ac0      	subs	r0, r0, r3
 800abc8:	2300      	movs	r3, #0
 800abca:	4602      	mov	r2, r0
 800abcc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800abce:	4628      	mov	r0, r5
 800abd0:	69e1      	ldr	r1, [r4, #28]
 800abd2:	47b0      	blx	r6
 800abd4:	1c43      	adds	r3, r0, #1
 800abd6:	89a3      	ldrh	r3, [r4, #12]
 800abd8:	d106      	bne.n	800abe8 <__sflush_r+0x70>
 800abda:	6829      	ldr	r1, [r5, #0]
 800abdc:	291d      	cmp	r1, #29
 800abde:	d830      	bhi.n	800ac42 <__sflush_r+0xca>
 800abe0:	4a2b      	ldr	r2, [pc, #172]	; (800ac90 <__sflush_r+0x118>)
 800abe2:	40ca      	lsrs	r2, r1
 800abe4:	07d6      	lsls	r6, r2, #31
 800abe6:	d52c      	bpl.n	800ac42 <__sflush_r+0xca>
 800abe8:	2200      	movs	r2, #0
 800abea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800abee:	b21b      	sxth	r3, r3
 800abf0:	6062      	str	r2, [r4, #4]
 800abf2:	6922      	ldr	r2, [r4, #16]
 800abf4:	04d9      	lsls	r1, r3, #19
 800abf6:	81a3      	strh	r3, [r4, #12]
 800abf8:	6022      	str	r2, [r4, #0]
 800abfa:	d504      	bpl.n	800ac06 <__sflush_r+0x8e>
 800abfc:	1c42      	adds	r2, r0, #1
 800abfe:	d101      	bne.n	800ac04 <__sflush_r+0x8c>
 800ac00:	682b      	ldr	r3, [r5, #0]
 800ac02:	b903      	cbnz	r3, 800ac06 <__sflush_r+0x8e>
 800ac04:	6520      	str	r0, [r4, #80]	; 0x50
 800ac06:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ac08:	602f      	str	r7, [r5, #0]
 800ac0a:	2900      	cmp	r1, #0
 800ac0c:	d0c6      	beq.n	800ab9c <__sflush_r+0x24>
 800ac0e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ac12:	4299      	cmp	r1, r3
 800ac14:	d002      	beq.n	800ac1c <__sflush_r+0xa4>
 800ac16:	4628      	mov	r0, r5
 800ac18:	f7fd fb24 	bl	8008264 <_free_r>
 800ac1c:	2000      	movs	r0, #0
 800ac1e:	6320      	str	r0, [r4, #48]	; 0x30
 800ac20:	e7bd      	b.n	800ab9e <__sflush_r+0x26>
 800ac22:	69e1      	ldr	r1, [r4, #28]
 800ac24:	2301      	movs	r3, #1
 800ac26:	4628      	mov	r0, r5
 800ac28:	47b0      	blx	r6
 800ac2a:	1c41      	adds	r1, r0, #1
 800ac2c:	d1c3      	bne.n	800abb6 <__sflush_r+0x3e>
 800ac2e:	682b      	ldr	r3, [r5, #0]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d0c0      	beq.n	800abb6 <__sflush_r+0x3e>
 800ac34:	2b1d      	cmp	r3, #29
 800ac36:	d001      	beq.n	800ac3c <__sflush_r+0xc4>
 800ac38:	2b16      	cmp	r3, #22
 800ac3a:	d101      	bne.n	800ac40 <__sflush_r+0xc8>
 800ac3c:	602f      	str	r7, [r5, #0]
 800ac3e:	e7ad      	b.n	800ab9c <__sflush_r+0x24>
 800ac40:	89a3      	ldrh	r3, [r4, #12]
 800ac42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	e7a9      	b.n	800ab9e <__sflush_r+0x26>
 800ac4a:	690f      	ldr	r7, [r1, #16]
 800ac4c:	2f00      	cmp	r7, #0
 800ac4e:	d0a5      	beq.n	800ab9c <__sflush_r+0x24>
 800ac50:	079b      	lsls	r3, r3, #30
 800ac52:	bf18      	it	ne
 800ac54:	2300      	movne	r3, #0
 800ac56:	680e      	ldr	r6, [r1, #0]
 800ac58:	bf08      	it	eq
 800ac5a:	694b      	ldreq	r3, [r1, #20]
 800ac5c:	eba6 0807 	sub.w	r8, r6, r7
 800ac60:	600f      	str	r7, [r1, #0]
 800ac62:	608b      	str	r3, [r1, #8]
 800ac64:	f1b8 0f00 	cmp.w	r8, #0
 800ac68:	dd98      	ble.n	800ab9c <__sflush_r+0x24>
 800ac6a:	4643      	mov	r3, r8
 800ac6c:	463a      	mov	r2, r7
 800ac6e:	4628      	mov	r0, r5
 800ac70:	69e1      	ldr	r1, [r4, #28]
 800ac72:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac74:	47b0      	blx	r6
 800ac76:	2800      	cmp	r0, #0
 800ac78:	dc06      	bgt.n	800ac88 <__sflush_r+0x110>
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	e78a      	b.n	800ab9e <__sflush_r+0x26>
 800ac88:	4407      	add	r7, r0
 800ac8a:	eba8 0800 	sub.w	r8, r8, r0
 800ac8e:	e7e9      	b.n	800ac64 <__sflush_r+0xec>
 800ac90:	20400001 	.word	0x20400001

0800ac94 <_fflush_r>:
 800ac94:	b538      	push	{r3, r4, r5, lr}
 800ac96:	460c      	mov	r4, r1
 800ac98:	4605      	mov	r5, r0
 800ac9a:	b118      	cbz	r0, 800aca4 <_fflush_r+0x10>
 800ac9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ac9e:	b90b      	cbnz	r3, 800aca4 <_fflush_r+0x10>
 800aca0:	f000 f864 	bl	800ad6c <__sinit>
 800aca4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 800aca8:	b1b8      	cbz	r0, 800acda <_fflush_r+0x46>
 800acaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acac:	07db      	lsls	r3, r3, #31
 800acae:	d404      	bmi.n	800acba <_fflush_r+0x26>
 800acb0:	0581      	lsls	r1, r0, #22
 800acb2:	d402      	bmi.n	800acba <_fflush_r+0x26>
 800acb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acb6:	f7fd fbaf 	bl	8008418 <__retarget_lock_acquire_recursive>
 800acba:	4628      	mov	r0, r5
 800acbc:	4621      	mov	r1, r4
 800acbe:	f7ff ff5b 	bl	800ab78 <__sflush_r>
 800acc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acc4:	4605      	mov	r5, r0
 800acc6:	07da      	lsls	r2, r3, #31
 800acc8:	d405      	bmi.n	800acd6 <_fflush_r+0x42>
 800acca:	89a3      	ldrh	r3, [r4, #12]
 800accc:	059b      	lsls	r3, r3, #22
 800acce:	d402      	bmi.n	800acd6 <_fflush_r+0x42>
 800acd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acd2:	f7fd fba2 	bl	800841a <__retarget_lock_release_recursive>
 800acd6:	4628      	mov	r0, r5
 800acd8:	bd38      	pop	{r3, r4, r5, pc}
 800acda:	4605      	mov	r5, r0
 800acdc:	e7fb      	b.n	800acd6 <_fflush_r+0x42>
	...

0800ace0 <std>:
 800ace0:	2300      	movs	r3, #0
 800ace2:	b510      	push	{r4, lr}
 800ace4:	4604      	mov	r4, r0
 800ace6:	e9c0 3300 	strd	r3, r3, [r0]
 800acea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acee:	6083      	str	r3, [r0, #8]
 800acf0:	8181      	strh	r1, [r0, #12]
 800acf2:	6643      	str	r3, [r0, #100]	; 0x64
 800acf4:	81c2      	strh	r2, [r0, #14]
 800acf6:	6183      	str	r3, [r0, #24]
 800acf8:	4619      	mov	r1, r3
 800acfa:	2208      	movs	r2, #8
 800acfc:	305c      	adds	r0, #92	; 0x5c
 800acfe:	f7f9 ffff 	bl	8004d00 <memset>
 800ad02:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <std+0x40>)
 800ad04:	61e4      	str	r4, [r4, #28]
 800ad06:	6223      	str	r3, [r4, #32]
 800ad08:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <std+0x44>)
 800ad0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ad0e:	6263      	str	r3, [r4, #36]	; 0x24
 800ad10:	4b05      	ldr	r3, [pc, #20]	; (800ad28 <std+0x48>)
 800ad12:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad14:	4b05      	ldr	r3, [pc, #20]	; (800ad2c <std+0x4c>)
 800ad16:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad1c:	f7fd bb7a 	b.w	8008414 <__retarget_lock_init_recursive>
 800ad20:	08004da5 	.word	0x08004da5
 800ad24:	08004dcb 	.word	0x08004dcb
 800ad28:	08004e03 	.word	0x08004e03
 800ad2c:	08004e27 	.word	0x08004e27

0800ad30 <_cleanup_r>:
 800ad30:	4901      	ldr	r1, [pc, #4]	; (800ad38 <_cleanup_r+0x8>)
 800ad32:	f000 b855 	b.w	800ade0 <_fwalk_reent>
 800ad36:	bf00      	nop
 800ad38:	0800bff3 	.word	0x0800bff3

0800ad3c <__sfp_lock_acquire>:
 800ad3c:	4801      	ldr	r0, [pc, #4]	; (800ad44 <__sfp_lock_acquire+0x8>)
 800ad3e:	f7fd bb6b 	b.w	8008418 <__retarget_lock_acquire_recursive>
 800ad42:	bf00      	nop
 800ad44:	20001c53 	.word	0x20001c53

0800ad48 <__sfp_lock_release>:
 800ad48:	4801      	ldr	r0, [pc, #4]	; (800ad50 <__sfp_lock_release+0x8>)
 800ad4a:	f7fd bb66 	b.w	800841a <__retarget_lock_release_recursive>
 800ad4e:	bf00      	nop
 800ad50:	20001c53 	.word	0x20001c53

0800ad54 <__sinit_lock_acquire>:
 800ad54:	4801      	ldr	r0, [pc, #4]	; (800ad5c <__sinit_lock_acquire+0x8>)
 800ad56:	f7fd bb5f 	b.w	8008418 <__retarget_lock_acquire_recursive>
 800ad5a:	bf00      	nop
 800ad5c:	20001c4e 	.word	0x20001c4e

0800ad60 <__sinit_lock_release>:
 800ad60:	4801      	ldr	r0, [pc, #4]	; (800ad68 <__sinit_lock_release+0x8>)
 800ad62:	f7fd bb5a 	b.w	800841a <__retarget_lock_release_recursive>
 800ad66:	bf00      	nop
 800ad68:	20001c4e 	.word	0x20001c4e

0800ad6c <__sinit>:
 800ad6c:	b510      	push	{r4, lr}
 800ad6e:	4604      	mov	r4, r0
 800ad70:	f7ff fff0 	bl	800ad54 <__sinit_lock_acquire>
 800ad74:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ad76:	b11a      	cbz	r2, 800ad80 <__sinit+0x14>
 800ad78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad7c:	f7ff bff0 	b.w	800ad60 <__sinit_lock_release>
 800ad80:	4b0d      	ldr	r3, [pc, #52]	; (800adb8 <__sinit+0x4c>)
 800ad82:	2104      	movs	r1, #4
 800ad84:	63e3      	str	r3, [r4, #60]	; 0x3c
 800ad86:	2303      	movs	r3, #3
 800ad88:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800ad8c:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800ad90:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800ad94:	6860      	ldr	r0, [r4, #4]
 800ad96:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800ad9a:	f7ff ffa1 	bl	800ace0 <std>
 800ad9e:	2201      	movs	r2, #1
 800ada0:	2109      	movs	r1, #9
 800ada2:	68a0      	ldr	r0, [r4, #8]
 800ada4:	f7ff ff9c 	bl	800ace0 <std>
 800ada8:	2202      	movs	r2, #2
 800adaa:	2112      	movs	r1, #18
 800adac:	68e0      	ldr	r0, [r4, #12]
 800adae:	f7ff ff97 	bl	800ace0 <std>
 800adb2:	2301      	movs	r3, #1
 800adb4:	63a3      	str	r3, [r4, #56]	; 0x38
 800adb6:	e7df      	b.n	800ad78 <__sinit+0xc>
 800adb8:	0800ad31 	.word	0x0800ad31

0800adbc <fiprintf>:
 800adbc:	b40e      	push	{r1, r2, r3}
 800adbe:	b503      	push	{r0, r1, lr}
 800adc0:	4601      	mov	r1, r0
 800adc2:	ab03      	add	r3, sp, #12
 800adc4:	4805      	ldr	r0, [pc, #20]	; (800addc <fiprintf+0x20>)
 800adc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adca:	6800      	ldr	r0, [r0, #0]
 800adcc:	9301      	str	r3, [sp, #4]
 800adce:	f000 fbf1 	bl	800b5b4 <_vfiprintf_r>
 800add2:	b002      	add	sp, #8
 800add4:	f85d eb04 	ldr.w	lr, [sp], #4
 800add8:	b003      	add	sp, #12
 800adda:	4770      	bx	lr
 800addc:	20000068 	.word	0x20000068

0800ade0 <_fwalk_reent>:
 800ade0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ade4:	4606      	mov	r6, r0
 800ade6:	4688      	mov	r8, r1
 800ade8:	2700      	movs	r7, #0
 800adea:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800adee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adf2:	f1b9 0901 	subs.w	r9, r9, #1
 800adf6:	d505      	bpl.n	800ae04 <_fwalk_reent+0x24>
 800adf8:	6824      	ldr	r4, [r4, #0]
 800adfa:	2c00      	cmp	r4, #0
 800adfc:	d1f7      	bne.n	800adee <_fwalk_reent+0xe>
 800adfe:	4638      	mov	r0, r7
 800ae00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae04:	89ab      	ldrh	r3, [r5, #12]
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d907      	bls.n	800ae1a <_fwalk_reent+0x3a>
 800ae0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae0e:	3301      	adds	r3, #1
 800ae10:	d003      	beq.n	800ae1a <_fwalk_reent+0x3a>
 800ae12:	4629      	mov	r1, r5
 800ae14:	4630      	mov	r0, r6
 800ae16:	47c0      	blx	r8
 800ae18:	4307      	orrs	r7, r0
 800ae1a:	3568      	adds	r5, #104	; 0x68
 800ae1c:	e7e9      	b.n	800adf2 <_fwalk_reent+0x12>

0800ae1e <rshift>:
 800ae1e:	6903      	ldr	r3, [r0, #16]
 800ae20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae24:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae28:	f100 0414 	add.w	r4, r0, #20
 800ae2c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae30:	dd46      	ble.n	800aec0 <rshift+0xa2>
 800ae32:	f011 011f 	ands.w	r1, r1, #31
 800ae36:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae3a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae3e:	d10c      	bne.n	800ae5a <rshift+0x3c>
 800ae40:	4629      	mov	r1, r5
 800ae42:	f100 0710 	add.w	r7, r0, #16
 800ae46:	42b1      	cmp	r1, r6
 800ae48:	d335      	bcc.n	800aeb6 <rshift+0x98>
 800ae4a:	1a9b      	subs	r3, r3, r2
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	1eea      	subs	r2, r5, #3
 800ae50:	4296      	cmp	r6, r2
 800ae52:	bf38      	it	cc
 800ae54:	2300      	movcc	r3, #0
 800ae56:	4423      	add	r3, r4
 800ae58:	e015      	b.n	800ae86 <rshift+0x68>
 800ae5a:	46a1      	mov	r9, r4
 800ae5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae60:	f1c1 0820 	rsb	r8, r1, #32
 800ae64:	40cf      	lsrs	r7, r1
 800ae66:	f105 0e04 	add.w	lr, r5, #4
 800ae6a:	4576      	cmp	r6, lr
 800ae6c:	46f4      	mov	ip, lr
 800ae6e:	d816      	bhi.n	800ae9e <rshift+0x80>
 800ae70:	1a9b      	subs	r3, r3, r2
 800ae72:	009a      	lsls	r2, r3, #2
 800ae74:	3a04      	subs	r2, #4
 800ae76:	3501      	adds	r5, #1
 800ae78:	42ae      	cmp	r6, r5
 800ae7a:	bf38      	it	cc
 800ae7c:	2200      	movcc	r2, #0
 800ae7e:	18a3      	adds	r3, r4, r2
 800ae80:	50a7      	str	r7, [r4, r2]
 800ae82:	b107      	cbz	r7, 800ae86 <rshift+0x68>
 800ae84:	3304      	adds	r3, #4
 800ae86:	42a3      	cmp	r3, r4
 800ae88:	eba3 0204 	sub.w	r2, r3, r4
 800ae8c:	bf08      	it	eq
 800ae8e:	2300      	moveq	r3, #0
 800ae90:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae94:	6102      	str	r2, [r0, #16]
 800ae96:	bf08      	it	eq
 800ae98:	6143      	streq	r3, [r0, #20]
 800ae9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae9e:	f8dc c000 	ldr.w	ip, [ip]
 800aea2:	fa0c fc08 	lsl.w	ip, ip, r8
 800aea6:	ea4c 0707 	orr.w	r7, ip, r7
 800aeaa:	f849 7b04 	str.w	r7, [r9], #4
 800aeae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aeb2:	40cf      	lsrs	r7, r1
 800aeb4:	e7d9      	b.n	800ae6a <rshift+0x4c>
 800aeb6:	f851 cb04 	ldr.w	ip, [r1], #4
 800aeba:	f847 cf04 	str.w	ip, [r7, #4]!
 800aebe:	e7c2      	b.n	800ae46 <rshift+0x28>
 800aec0:	4623      	mov	r3, r4
 800aec2:	e7e0      	b.n	800ae86 <rshift+0x68>

0800aec4 <__hexdig_fun>:
 800aec4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800aec8:	2b09      	cmp	r3, #9
 800aeca:	d802      	bhi.n	800aed2 <__hexdig_fun+0xe>
 800aecc:	3820      	subs	r0, #32
 800aece:	b2c0      	uxtb	r0, r0
 800aed0:	4770      	bx	lr
 800aed2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800aed6:	2b05      	cmp	r3, #5
 800aed8:	d801      	bhi.n	800aede <__hexdig_fun+0x1a>
 800aeda:	3847      	subs	r0, #71	; 0x47
 800aedc:	e7f7      	b.n	800aece <__hexdig_fun+0xa>
 800aede:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800aee2:	2b05      	cmp	r3, #5
 800aee4:	d801      	bhi.n	800aeea <__hexdig_fun+0x26>
 800aee6:	3827      	subs	r0, #39	; 0x27
 800aee8:	e7f1      	b.n	800aece <__hexdig_fun+0xa>
 800aeea:	2000      	movs	r0, #0
 800aeec:	4770      	bx	lr
	...

0800aef0 <__gethex>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	b08b      	sub	sp, #44	; 0x2c
 800aef6:	9306      	str	r3, [sp, #24]
 800aef8:	4bb9      	ldr	r3, [pc, #740]	; (800b1e0 <__gethex+0x2f0>)
 800aefa:	9002      	str	r0, [sp, #8]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	468b      	mov	fp, r1
 800af00:	4618      	mov	r0, r3
 800af02:	4690      	mov	r8, r2
 800af04:	9303      	str	r3, [sp, #12]
 800af06:	f7f5 f923 	bl	8000150 <strlen>
 800af0a:	4682      	mov	sl, r0
 800af0c:	9b03      	ldr	r3, [sp, #12]
 800af0e:	f8db 2000 	ldr.w	r2, [fp]
 800af12:	4403      	add	r3, r0
 800af14:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800af18:	9307      	str	r3, [sp, #28]
 800af1a:	1c93      	adds	r3, r2, #2
 800af1c:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800af20:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800af24:	32fe      	adds	r2, #254	; 0xfe
 800af26:	18d1      	adds	r1, r2, r3
 800af28:	461f      	mov	r7, r3
 800af2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af2e:	9101      	str	r1, [sp, #4]
 800af30:	2830      	cmp	r0, #48	; 0x30
 800af32:	d0f8      	beq.n	800af26 <__gethex+0x36>
 800af34:	f7ff ffc6 	bl	800aec4 <__hexdig_fun>
 800af38:	4604      	mov	r4, r0
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d13a      	bne.n	800afb4 <__gethex+0xc4>
 800af3e:	4652      	mov	r2, sl
 800af40:	4638      	mov	r0, r7
 800af42:	9903      	ldr	r1, [sp, #12]
 800af44:	f000 faf2 	bl	800b52c <strncmp>
 800af48:	4605      	mov	r5, r0
 800af4a:	2800      	cmp	r0, #0
 800af4c:	d166      	bne.n	800b01c <__gethex+0x12c>
 800af4e:	f817 000a 	ldrb.w	r0, [r7, sl]
 800af52:	eb07 060a 	add.w	r6, r7, sl
 800af56:	f7ff ffb5 	bl	800aec4 <__hexdig_fun>
 800af5a:	2800      	cmp	r0, #0
 800af5c:	d060      	beq.n	800b020 <__gethex+0x130>
 800af5e:	4633      	mov	r3, r6
 800af60:	7818      	ldrb	r0, [r3, #0]
 800af62:	461f      	mov	r7, r3
 800af64:	2830      	cmp	r0, #48	; 0x30
 800af66:	f103 0301 	add.w	r3, r3, #1
 800af6a:	d0f9      	beq.n	800af60 <__gethex+0x70>
 800af6c:	f7ff ffaa 	bl	800aec4 <__hexdig_fun>
 800af70:	2301      	movs	r3, #1
 800af72:	fab0 f480 	clz	r4, r0
 800af76:	4635      	mov	r5, r6
 800af78:	0964      	lsrs	r4, r4, #5
 800af7a:	9301      	str	r3, [sp, #4]
 800af7c:	463a      	mov	r2, r7
 800af7e:	4616      	mov	r6, r2
 800af80:	7830      	ldrb	r0, [r6, #0]
 800af82:	3201      	adds	r2, #1
 800af84:	f7ff ff9e 	bl	800aec4 <__hexdig_fun>
 800af88:	2800      	cmp	r0, #0
 800af8a:	d1f8      	bne.n	800af7e <__gethex+0x8e>
 800af8c:	4652      	mov	r2, sl
 800af8e:	4630      	mov	r0, r6
 800af90:	9903      	ldr	r1, [sp, #12]
 800af92:	f000 facb 	bl	800b52c <strncmp>
 800af96:	b980      	cbnz	r0, 800afba <__gethex+0xca>
 800af98:	b94d      	cbnz	r5, 800afae <__gethex+0xbe>
 800af9a:	eb06 050a 	add.w	r5, r6, sl
 800af9e:	462a      	mov	r2, r5
 800afa0:	4616      	mov	r6, r2
 800afa2:	7830      	ldrb	r0, [r6, #0]
 800afa4:	3201      	adds	r2, #1
 800afa6:	f7ff ff8d 	bl	800aec4 <__hexdig_fun>
 800afaa:	2800      	cmp	r0, #0
 800afac:	d1f8      	bne.n	800afa0 <__gethex+0xb0>
 800afae:	1bad      	subs	r5, r5, r6
 800afb0:	00ad      	lsls	r5, r5, #2
 800afb2:	e004      	b.n	800afbe <__gethex+0xce>
 800afb4:	2400      	movs	r4, #0
 800afb6:	4625      	mov	r5, r4
 800afb8:	e7e0      	b.n	800af7c <__gethex+0x8c>
 800afba:	2d00      	cmp	r5, #0
 800afbc:	d1f7      	bne.n	800afae <__gethex+0xbe>
 800afbe:	7833      	ldrb	r3, [r6, #0]
 800afc0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800afc4:	2b50      	cmp	r3, #80	; 0x50
 800afc6:	d139      	bne.n	800b03c <__gethex+0x14c>
 800afc8:	7873      	ldrb	r3, [r6, #1]
 800afca:	2b2b      	cmp	r3, #43	; 0x2b
 800afcc:	d02a      	beq.n	800b024 <__gethex+0x134>
 800afce:	2b2d      	cmp	r3, #45	; 0x2d
 800afd0:	d02c      	beq.n	800b02c <__gethex+0x13c>
 800afd2:	f04f 0900 	mov.w	r9, #0
 800afd6:	1c71      	adds	r1, r6, #1
 800afd8:	7808      	ldrb	r0, [r1, #0]
 800afda:	f7ff ff73 	bl	800aec4 <__hexdig_fun>
 800afde:	1e43      	subs	r3, r0, #1
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	2b18      	cmp	r3, #24
 800afe4:	d82a      	bhi.n	800b03c <__gethex+0x14c>
 800afe6:	f1a0 0210 	sub.w	r2, r0, #16
 800afea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afee:	f7ff ff69 	bl	800aec4 <__hexdig_fun>
 800aff2:	1e43      	subs	r3, r0, #1
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	2b18      	cmp	r3, #24
 800aff8:	d91b      	bls.n	800b032 <__gethex+0x142>
 800affa:	f1b9 0f00 	cmp.w	r9, #0
 800affe:	d000      	beq.n	800b002 <__gethex+0x112>
 800b000:	4252      	negs	r2, r2
 800b002:	4415      	add	r5, r2
 800b004:	f8cb 1000 	str.w	r1, [fp]
 800b008:	b1d4      	cbz	r4, 800b040 <__gethex+0x150>
 800b00a:	9b01      	ldr	r3, [sp, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	bf14      	ite	ne
 800b010:	2700      	movne	r7, #0
 800b012:	2706      	moveq	r7, #6
 800b014:	4638      	mov	r0, r7
 800b016:	b00b      	add	sp, #44	; 0x2c
 800b018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b01c:	463e      	mov	r6, r7
 800b01e:	4625      	mov	r5, r4
 800b020:	2401      	movs	r4, #1
 800b022:	e7cc      	b.n	800afbe <__gethex+0xce>
 800b024:	f04f 0900 	mov.w	r9, #0
 800b028:	1cb1      	adds	r1, r6, #2
 800b02a:	e7d5      	b.n	800afd8 <__gethex+0xe8>
 800b02c:	f04f 0901 	mov.w	r9, #1
 800b030:	e7fa      	b.n	800b028 <__gethex+0x138>
 800b032:	230a      	movs	r3, #10
 800b034:	fb03 0202 	mla	r2, r3, r2, r0
 800b038:	3a10      	subs	r2, #16
 800b03a:	e7d6      	b.n	800afea <__gethex+0xfa>
 800b03c:	4631      	mov	r1, r6
 800b03e:	e7e1      	b.n	800b004 <__gethex+0x114>
 800b040:	4621      	mov	r1, r4
 800b042:	1bf3      	subs	r3, r6, r7
 800b044:	3b01      	subs	r3, #1
 800b046:	2b07      	cmp	r3, #7
 800b048:	dc0a      	bgt.n	800b060 <__gethex+0x170>
 800b04a:	9802      	ldr	r0, [sp, #8]
 800b04c:	f7fd fc90 	bl	8008970 <_Balloc>
 800b050:	4604      	mov	r4, r0
 800b052:	b940      	cbnz	r0, 800b066 <__gethex+0x176>
 800b054:	4602      	mov	r2, r0
 800b056:	21de      	movs	r1, #222	; 0xde
 800b058:	4b62      	ldr	r3, [pc, #392]	; (800b1e4 <__gethex+0x2f4>)
 800b05a:	4863      	ldr	r0, [pc, #396]	; (800b1e8 <__gethex+0x2f8>)
 800b05c:	f7ff fd40 	bl	800aae0 <__assert_func>
 800b060:	3101      	adds	r1, #1
 800b062:	105b      	asrs	r3, r3, #1
 800b064:	e7ef      	b.n	800b046 <__gethex+0x156>
 800b066:	f04f 0b00 	mov.w	fp, #0
 800b06a:	f100 0914 	add.w	r9, r0, #20
 800b06e:	f1ca 0301 	rsb	r3, sl, #1
 800b072:	f8cd 9010 	str.w	r9, [sp, #16]
 800b076:	f8cd b004 	str.w	fp, [sp, #4]
 800b07a:	9308      	str	r3, [sp, #32]
 800b07c:	42b7      	cmp	r7, r6
 800b07e:	d33f      	bcc.n	800b100 <__gethex+0x210>
 800b080:	9f04      	ldr	r7, [sp, #16]
 800b082:	9b01      	ldr	r3, [sp, #4]
 800b084:	f847 3b04 	str.w	r3, [r7], #4
 800b088:	eba7 0709 	sub.w	r7, r7, r9
 800b08c:	10bf      	asrs	r7, r7, #2
 800b08e:	6127      	str	r7, [r4, #16]
 800b090:	4618      	mov	r0, r3
 800b092:	f7fd fd2f 	bl	8008af4 <__hi0bits>
 800b096:	017f      	lsls	r7, r7, #5
 800b098:	f8d8 6000 	ldr.w	r6, [r8]
 800b09c:	1a3f      	subs	r7, r7, r0
 800b09e:	42b7      	cmp	r7, r6
 800b0a0:	dd62      	ble.n	800b168 <__gethex+0x278>
 800b0a2:	1bbf      	subs	r7, r7, r6
 800b0a4:	4639      	mov	r1, r7
 800b0a6:	4620      	mov	r0, r4
 800b0a8:	f7fe f8ab 	bl	8009202 <__any_on>
 800b0ac:	4682      	mov	sl, r0
 800b0ae:	b1a8      	cbz	r0, 800b0dc <__gethex+0x1ec>
 800b0b0:	f04f 0a01 	mov.w	sl, #1
 800b0b4:	1e7b      	subs	r3, r7, #1
 800b0b6:	1159      	asrs	r1, r3, #5
 800b0b8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b0bc:	f003 021f 	and.w	r2, r3, #31
 800b0c0:	fa0a f202 	lsl.w	r2, sl, r2
 800b0c4:	420a      	tst	r2, r1
 800b0c6:	d009      	beq.n	800b0dc <__gethex+0x1ec>
 800b0c8:	4553      	cmp	r3, sl
 800b0ca:	dd05      	ble.n	800b0d8 <__gethex+0x1e8>
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	1eb9      	subs	r1, r7, #2
 800b0d0:	f7fe f897 	bl	8009202 <__any_on>
 800b0d4:	2800      	cmp	r0, #0
 800b0d6:	d144      	bne.n	800b162 <__gethex+0x272>
 800b0d8:	f04f 0a02 	mov.w	sl, #2
 800b0dc:	4639      	mov	r1, r7
 800b0de:	4620      	mov	r0, r4
 800b0e0:	f7ff fe9d 	bl	800ae1e <rshift>
 800b0e4:	443d      	add	r5, r7
 800b0e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0ea:	42ab      	cmp	r3, r5
 800b0ec:	da4a      	bge.n	800b184 <__gethex+0x294>
 800b0ee:	4621      	mov	r1, r4
 800b0f0:	9802      	ldr	r0, [sp, #8]
 800b0f2:	f7fd fc62 	bl	80089ba <_Bfree>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b0fa:	27a3      	movs	r7, #163	; 0xa3
 800b0fc:	6013      	str	r3, [r2, #0]
 800b0fe:	e789      	b.n	800b014 <__gethex+0x124>
 800b100:	1e73      	subs	r3, r6, #1
 800b102:	9a07      	ldr	r2, [sp, #28]
 800b104:	9305      	str	r3, [sp, #20]
 800b106:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b10a:	4293      	cmp	r3, r2
 800b10c:	d019      	beq.n	800b142 <__gethex+0x252>
 800b10e:	f1bb 0f20 	cmp.w	fp, #32
 800b112:	d107      	bne.n	800b124 <__gethex+0x234>
 800b114:	9b04      	ldr	r3, [sp, #16]
 800b116:	9a01      	ldr	r2, [sp, #4]
 800b118:	f843 2b04 	str.w	r2, [r3], #4
 800b11c:	9304      	str	r3, [sp, #16]
 800b11e:	2300      	movs	r3, #0
 800b120:	469b      	mov	fp, r3
 800b122:	9301      	str	r3, [sp, #4]
 800b124:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b128:	f7ff fecc 	bl	800aec4 <__hexdig_fun>
 800b12c:	9b01      	ldr	r3, [sp, #4]
 800b12e:	f000 000f 	and.w	r0, r0, #15
 800b132:	fa00 f00b 	lsl.w	r0, r0, fp
 800b136:	4303      	orrs	r3, r0
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	f10b 0b04 	add.w	fp, fp, #4
 800b13e:	9b05      	ldr	r3, [sp, #20]
 800b140:	e00d      	b.n	800b15e <__gethex+0x26e>
 800b142:	9b05      	ldr	r3, [sp, #20]
 800b144:	9a08      	ldr	r2, [sp, #32]
 800b146:	4413      	add	r3, r2
 800b148:	42bb      	cmp	r3, r7
 800b14a:	d3e0      	bcc.n	800b10e <__gethex+0x21e>
 800b14c:	4618      	mov	r0, r3
 800b14e:	4652      	mov	r2, sl
 800b150:	9903      	ldr	r1, [sp, #12]
 800b152:	9309      	str	r3, [sp, #36]	; 0x24
 800b154:	f000 f9ea 	bl	800b52c <strncmp>
 800b158:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d1d7      	bne.n	800b10e <__gethex+0x21e>
 800b15e:	461e      	mov	r6, r3
 800b160:	e78c      	b.n	800b07c <__gethex+0x18c>
 800b162:	f04f 0a03 	mov.w	sl, #3
 800b166:	e7b9      	b.n	800b0dc <__gethex+0x1ec>
 800b168:	da09      	bge.n	800b17e <__gethex+0x28e>
 800b16a:	1bf7      	subs	r7, r6, r7
 800b16c:	4621      	mov	r1, r4
 800b16e:	463a      	mov	r2, r7
 800b170:	9802      	ldr	r0, [sp, #8]
 800b172:	f7fd fe07 	bl	8008d84 <__lshift>
 800b176:	4604      	mov	r4, r0
 800b178:	1bed      	subs	r5, r5, r7
 800b17a:	f100 0914 	add.w	r9, r0, #20
 800b17e:	f04f 0a00 	mov.w	sl, #0
 800b182:	e7b0      	b.n	800b0e6 <__gethex+0x1f6>
 800b184:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b188:	42a8      	cmp	r0, r5
 800b18a:	dd71      	ble.n	800b270 <__gethex+0x380>
 800b18c:	1b45      	subs	r5, r0, r5
 800b18e:	42ae      	cmp	r6, r5
 800b190:	dc34      	bgt.n	800b1fc <__gethex+0x30c>
 800b192:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d028      	beq.n	800b1ec <__gethex+0x2fc>
 800b19a:	2b03      	cmp	r3, #3
 800b19c:	d02a      	beq.n	800b1f4 <__gethex+0x304>
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d115      	bne.n	800b1ce <__gethex+0x2de>
 800b1a2:	42ae      	cmp	r6, r5
 800b1a4:	d113      	bne.n	800b1ce <__gethex+0x2de>
 800b1a6:	2e01      	cmp	r6, #1
 800b1a8:	d10b      	bne.n	800b1c2 <__gethex+0x2d2>
 800b1aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b1ae:	9a06      	ldr	r2, [sp, #24]
 800b1b0:	2762      	movs	r7, #98	; 0x62
 800b1b2:	6013      	str	r3, [r2, #0]
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	6123      	str	r3, [r4, #16]
 800b1b8:	f8c9 3000 	str.w	r3, [r9]
 800b1bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b1be:	601c      	str	r4, [r3, #0]
 800b1c0:	e728      	b.n	800b014 <__gethex+0x124>
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	1e71      	subs	r1, r6, #1
 800b1c6:	f7fe f81c 	bl	8009202 <__any_on>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d1ed      	bne.n	800b1aa <__gethex+0x2ba>
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	9802      	ldr	r0, [sp, #8]
 800b1d2:	f7fd fbf2 	bl	80089ba <_Bfree>
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b1da:	2750      	movs	r7, #80	; 0x50
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	e719      	b.n	800b014 <__gethex+0x124>
 800b1e0:	0800cc24 	.word	0x0800cc24
 800b1e4:	0800c956 	.word	0x0800c956
 800b1e8:	0800cbbc 	.word	0x0800cbbc
 800b1ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1ed      	bne.n	800b1ce <__gethex+0x2de>
 800b1f2:	e7da      	b.n	800b1aa <__gethex+0x2ba>
 800b1f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d1d7      	bne.n	800b1aa <__gethex+0x2ba>
 800b1fa:	e7e8      	b.n	800b1ce <__gethex+0x2de>
 800b1fc:	1e6f      	subs	r7, r5, #1
 800b1fe:	f1ba 0f00 	cmp.w	sl, #0
 800b202:	d132      	bne.n	800b26a <__gethex+0x37a>
 800b204:	b127      	cbz	r7, 800b210 <__gethex+0x320>
 800b206:	4639      	mov	r1, r7
 800b208:	4620      	mov	r0, r4
 800b20a:	f7fd fffa 	bl	8009202 <__any_on>
 800b20e:	4682      	mov	sl, r0
 800b210:	2101      	movs	r1, #1
 800b212:	117b      	asrs	r3, r7, #5
 800b214:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b218:	f007 071f 	and.w	r7, r7, #31
 800b21c:	fa01 f707 	lsl.w	r7, r1, r7
 800b220:	421f      	tst	r7, r3
 800b222:	f04f 0702 	mov.w	r7, #2
 800b226:	4629      	mov	r1, r5
 800b228:	4620      	mov	r0, r4
 800b22a:	bf18      	it	ne
 800b22c:	f04a 0a02 	orrne.w	sl, sl, #2
 800b230:	1b76      	subs	r6, r6, r5
 800b232:	f7ff fdf4 	bl	800ae1e <rshift>
 800b236:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b23a:	f1ba 0f00 	cmp.w	sl, #0
 800b23e:	d048      	beq.n	800b2d2 <__gethex+0x3e2>
 800b240:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b244:	2b02      	cmp	r3, #2
 800b246:	d015      	beq.n	800b274 <__gethex+0x384>
 800b248:	2b03      	cmp	r3, #3
 800b24a:	d017      	beq.n	800b27c <__gethex+0x38c>
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d109      	bne.n	800b264 <__gethex+0x374>
 800b250:	f01a 0f02 	tst.w	sl, #2
 800b254:	d006      	beq.n	800b264 <__gethex+0x374>
 800b256:	f8d9 0000 	ldr.w	r0, [r9]
 800b25a:	ea4a 0a00 	orr.w	sl, sl, r0
 800b25e:	f01a 0f01 	tst.w	sl, #1
 800b262:	d10e      	bne.n	800b282 <__gethex+0x392>
 800b264:	f047 0710 	orr.w	r7, r7, #16
 800b268:	e033      	b.n	800b2d2 <__gethex+0x3e2>
 800b26a:	f04f 0a01 	mov.w	sl, #1
 800b26e:	e7cf      	b.n	800b210 <__gethex+0x320>
 800b270:	2701      	movs	r7, #1
 800b272:	e7e2      	b.n	800b23a <__gethex+0x34a>
 800b274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b276:	f1c3 0301 	rsb	r3, r3, #1
 800b27a:	9315      	str	r3, [sp, #84]	; 0x54
 800b27c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0f0      	beq.n	800b264 <__gethex+0x374>
 800b282:	f04f 0c00 	mov.w	ip, #0
 800b286:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b28a:	f104 0314 	add.w	r3, r4, #20
 800b28e:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b292:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b296:	4618      	mov	r0, r3
 800b298:	f853 2b04 	ldr.w	r2, [r3], #4
 800b29c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b2a0:	d01c      	beq.n	800b2dc <__gethex+0x3ec>
 800b2a2:	3201      	adds	r2, #1
 800b2a4:	6002      	str	r2, [r0, #0]
 800b2a6:	2f02      	cmp	r7, #2
 800b2a8:	f104 0314 	add.w	r3, r4, #20
 800b2ac:	d13d      	bne.n	800b32a <__gethex+0x43a>
 800b2ae:	f8d8 2000 	ldr.w	r2, [r8]
 800b2b2:	3a01      	subs	r2, #1
 800b2b4:	42b2      	cmp	r2, r6
 800b2b6:	d10a      	bne.n	800b2ce <__gethex+0x3de>
 800b2b8:	2201      	movs	r2, #1
 800b2ba:	1171      	asrs	r1, r6, #5
 800b2bc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b2c0:	f006 061f 	and.w	r6, r6, #31
 800b2c4:	fa02 f606 	lsl.w	r6, r2, r6
 800b2c8:	421e      	tst	r6, r3
 800b2ca:	bf18      	it	ne
 800b2cc:	4617      	movne	r7, r2
 800b2ce:	f047 0720 	orr.w	r7, r7, #32
 800b2d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b2d4:	601c      	str	r4, [r3, #0]
 800b2d6:	9b06      	ldr	r3, [sp, #24]
 800b2d8:	601d      	str	r5, [r3, #0]
 800b2da:	e69b      	b.n	800b014 <__gethex+0x124>
 800b2dc:	4299      	cmp	r1, r3
 800b2de:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2e2:	d8d8      	bhi.n	800b296 <__gethex+0x3a6>
 800b2e4:	68a3      	ldr	r3, [r4, #8]
 800b2e6:	459b      	cmp	fp, r3
 800b2e8:	db17      	blt.n	800b31a <__gethex+0x42a>
 800b2ea:	6861      	ldr	r1, [r4, #4]
 800b2ec:	9802      	ldr	r0, [sp, #8]
 800b2ee:	3101      	adds	r1, #1
 800b2f0:	f7fd fb3e 	bl	8008970 <_Balloc>
 800b2f4:	4681      	mov	r9, r0
 800b2f6:	b918      	cbnz	r0, 800b300 <__gethex+0x410>
 800b2f8:	4602      	mov	r2, r0
 800b2fa:	2184      	movs	r1, #132	; 0x84
 800b2fc:	4b19      	ldr	r3, [pc, #100]	; (800b364 <__gethex+0x474>)
 800b2fe:	e6ac      	b.n	800b05a <__gethex+0x16a>
 800b300:	6922      	ldr	r2, [r4, #16]
 800b302:	f104 010c 	add.w	r1, r4, #12
 800b306:	3202      	adds	r2, #2
 800b308:	0092      	lsls	r2, r2, #2
 800b30a:	300c      	adds	r0, #12
 800b30c:	f7f9 fcea 	bl	8004ce4 <memcpy>
 800b310:	4621      	mov	r1, r4
 800b312:	9802      	ldr	r0, [sp, #8]
 800b314:	f7fd fb51 	bl	80089ba <_Bfree>
 800b318:	464c      	mov	r4, r9
 800b31a:	6923      	ldr	r3, [r4, #16]
 800b31c:	1c5a      	adds	r2, r3, #1
 800b31e:	6122      	str	r2, [r4, #16]
 800b320:	2201      	movs	r2, #1
 800b322:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b326:	615a      	str	r2, [r3, #20]
 800b328:	e7bd      	b.n	800b2a6 <__gethex+0x3b6>
 800b32a:	6922      	ldr	r2, [r4, #16]
 800b32c:	455a      	cmp	r2, fp
 800b32e:	dd0b      	ble.n	800b348 <__gethex+0x458>
 800b330:	2101      	movs	r1, #1
 800b332:	4620      	mov	r0, r4
 800b334:	f7ff fd73 	bl	800ae1e <rshift>
 800b338:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b33c:	3501      	adds	r5, #1
 800b33e:	42ab      	cmp	r3, r5
 800b340:	f6ff aed5 	blt.w	800b0ee <__gethex+0x1fe>
 800b344:	2701      	movs	r7, #1
 800b346:	e7c2      	b.n	800b2ce <__gethex+0x3de>
 800b348:	f016 061f 	ands.w	r6, r6, #31
 800b34c:	d0fa      	beq.n	800b344 <__gethex+0x454>
 800b34e:	449a      	add	sl, r3
 800b350:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b354:	f7fd fbce 	bl	8008af4 <__hi0bits>
 800b358:	f1c6 0620 	rsb	r6, r6, #32
 800b35c:	42b0      	cmp	r0, r6
 800b35e:	dbe7      	blt.n	800b330 <__gethex+0x440>
 800b360:	e7f0      	b.n	800b344 <__gethex+0x454>
 800b362:	bf00      	nop
 800b364:	0800c956 	.word	0x0800c956

0800b368 <L_shift>:
 800b368:	f1c2 0208 	rsb	r2, r2, #8
 800b36c:	0092      	lsls	r2, r2, #2
 800b36e:	b570      	push	{r4, r5, r6, lr}
 800b370:	f1c2 0620 	rsb	r6, r2, #32
 800b374:	6843      	ldr	r3, [r0, #4]
 800b376:	6804      	ldr	r4, [r0, #0]
 800b378:	fa03 f506 	lsl.w	r5, r3, r6
 800b37c:	432c      	orrs	r4, r5
 800b37e:	40d3      	lsrs	r3, r2
 800b380:	6004      	str	r4, [r0, #0]
 800b382:	f840 3f04 	str.w	r3, [r0, #4]!
 800b386:	4288      	cmp	r0, r1
 800b388:	d3f4      	bcc.n	800b374 <L_shift+0xc>
 800b38a:	bd70      	pop	{r4, r5, r6, pc}

0800b38c <__match>:
 800b38c:	b530      	push	{r4, r5, lr}
 800b38e:	6803      	ldr	r3, [r0, #0]
 800b390:	3301      	adds	r3, #1
 800b392:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b396:	b914      	cbnz	r4, 800b39e <__match+0x12>
 800b398:	6003      	str	r3, [r0, #0]
 800b39a:	2001      	movs	r0, #1
 800b39c:	bd30      	pop	{r4, r5, pc}
 800b39e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b3a6:	2d19      	cmp	r5, #25
 800b3a8:	bf98      	it	ls
 800b3aa:	3220      	addls	r2, #32
 800b3ac:	42a2      	cmp	r2, r4
 800b3ae:	d0f0      	beq.n	800b392 <__match+0x6>
 800b3b0:	2000      	movs	r0, #0
 800b3b2:	e7f3      	b.n	800b39c <__match+0x10>

0800b3b4 <__hexnan>:
 800b3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b8:	2500      	movs	r5, #0
 800b3ba:	680b      	ldr	r3, [r1, #0]
 800b3bc:	4682      	mov	sl, r0
 800b3be:	115e      	asrs	r6, r3, #5
 800b3c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b3c4:	f013 031f 	ands.w	r3, r3, #31
 800b3c8:	bf18      	it	ne
 800b3ca:	3604      	addne	r6, #4
 800b3cc:	1f37      	subs	r7, r6, #4
 800b3ce:	4690      	mov	r8, r2
 800b3d0:	46b9      	mov	r9, r7
 800b3d2:	463c      	mov	r4, r7
 800b3d4:	46ab      	mov	fp, r5
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	6801      	ldr	r1, [r0, #0]
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	f846 5c04 	str.w	r5, [r6, #-4]
 800b3e0:	9502      	str	r5, [sp, #8]
 800b3e2:	784a      	ldrb	r2, [r1, #1]
 800b3e4:	1c4b      	adds	r3, r1, #1
 800b3e6:	9303      	str	r3, [sp, #12]
 800b3e8:	b342      	cbz	r2, 800b43c <__hexnan+0x88>
 800b3ea:	4610      	mov	r0, r2
 800b3ec:	9105      	str	r1, [sp, #20]
 800b3ee:	9204      	str	r2, [sp, #16]
 800b3f0:	f7ff fd68 	bl	800aec4 <__hexdig_fun>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d14f      	bne.n	800b498 <__hexnan+0xe4>
 800b3f8:	9a04      	ldr	r2, [sp, #16]
 800b3fa:	9905      	ldr	r1, [sp, #20]
 800b3fc:	2a20      	cmp	r2, #32
 800b3fe:	d818      	bhi.n	800b432 <__hexnan+0x7e>
 800b400:	9b02      	ldr	r3, [sp, #8]
 800b402:	459b      	cmp	fp, r3
 800b404:	dd13      	ble.n	800b42e <__hexnan+0x7a>
 800b406:	454c      	cmp	r4, r9
 800b408:	d206      	bcs.n	800b418 <__hexnan+0x64>
 800b40a:	2d07      	cmp	r5, #7
 800b40c:	dc04      	bgt.n	800b418 <__hexnan+0x64>
 800b40e:	462a      	mov	r2, r5
 800b410:	4649      	mov	r1, r9
 800b412:	4620      	mov	r0, r4
 800b414:	f7ff ffa8 	bl	800b368 <L_shift>
 800b418:	4544      	cmp	r4, r8
 800b41a:	d950      	bls.n	800b4be <__hexnan+0x10a>
 800b41c:	2300      	movs	r3, #0
 800b41e:	f1a4 0904 	sub.w	r9, r4, #4
 800b422:	f844 3c04 	str.w	r3, [r4, #-4]
 800b426:	461d      	mov	r5, r3
 800b428:	464c      	mov	r4, r9
 800b42a:	f8cd b008 	str.w	fp, [sp, #8]
 800b42e:	9903      	ldr	r1, [sp, #12]
 800b430:	e7d7      	b.n	800b3e2 <__hexnan+0x2e>
 800b432:	2a29      	cmp	r2, #41	; 0x29
 800b434:	d156      	bne.n	800b4e4 <__hexnan+0x130>
 800b436:	3102      	adds	r1, #2
 800b438:	f8ca 1000 	str.w	r1, [sl]
 800b43c:	f1bb 0f00 	cmp.w	fp, #0
 800b440:	d050      	beq.n	800b4e4 <__hexnan+0x130>
 800b442:	454c      	cmp	r4, r9
 800b444:	d206      	bcs.n	800b454 <__hexnan+0xa0>
 800b446:	2d07      	cmp	r5, #7
 800b448:	dc04      	bgt.n	800b454 <__hexnan+0xa0>
 800b44a:	462a      	mov	r2, r5
 800b44c:	4649      	mov	r1, r9
 800b44e:	4620      	mov	r0, r4
 800b450:	f7ff ff8a 	bl	800b368 <L_shift>
 800b454:	4544      	cmp	r4, r8
 800b456:	d934      	bls.n	800b4c2 <__hexnan+0x10e>
 800b458:	4623      	mov	r3, r4
 800b45a:	f1a8 0204 	sub.w	r2, r8, #4
 800b45e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b462:	429f      	cmp	r7, r3
 800b464:	f842 1f04 	str.w	r1, [r2, #4]!
 800b468:	d2f9      	bcs.n	800b45e <__hexnan+0xaa>
 800b46a:	1b3b      	subs	r3, r7, r4
 800b46c:	f023 0303 	bic.w	r3, r3, #3
 800b470:	3304      	adds	r3, #4
 800b472:	3401      	adds	r4, #1
 800b474:	3e03      	subs	r6, #3
 800b476:	42b4      	cmp	r4, r6
 800b478:	bf88      	it	hi
 800b47a:	2304      	movhi	r3, #4
 800b47c:	2200      	movs	r2, #0
 800b47e:	4443      	add	r3, r8
 800b480:	f843 2b04 	str.w	r2, [r3], #4
 800b484:	429f      	cmp	r7, r3
 800b486:	d2fb      	bcs.n	800b480 <__hexnan+0xcc>
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	b91b      	cbnz	r3, 800b494 <__hexnan+0xe0>
 800b48c:	4547      	cmp	r7, r8
 800b48e:	d127      	bne.n	800b4e0 <__hexnan+0x12c>
 800b490:	2301      	movs	r3, #1
 800b492:	603b      	str	r3, [r7, #0]
 800b494:	2005      	movs	r0, #5
 800b496:	e026      	b.n	800b4e6 <__hexnan+0x132>
 800b498:	3501      	adds	r5, #1
 800b49a:	2d08      	cmp	r5, #8
 800b49c:	f10b 0b01 	add.w	fp, fp, #1
 800b4a0:	dd06      	ble.n	800b4b0 <__hexnan+0xfc>
 800b4a2:	4544      	cmp	r4, r8
 800b4a4:	d9c3      	bls.n	800b42e <__hexnan+0x7a>
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	2501      	movs	r5, #1
 800b4aa:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4ae:	3c04      	subs	r4, #4
 800b4b0:	6822      	ldr	r2, [r4, #0]
 800b4b2:	f000 000f 	and.w	r0, r0, #15
 800b4b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b4ba:	6022      	str	r2, [r4, #0]
 800b4bc:	e7b7      	b.n	800b42e <__hexnan+0x7a>
 800b4be:	2508      	movs	r5, #8
 800b4c0:	e7b5      	b.n	800b42e <__hexnan+0x7a>
 800b4c2:	9b01      	ldr	r3, [sp, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d0df      	beq.n	800b488 <__hexnan+0xd4>
 800b4c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b4cc:	f1c3 0320 	rsb	r3, r3, #32
 800b4d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b4d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b4d8:	401a      	ands	r2, r3
 800b4da:	f846 2c04 	str.w	r2, [r6, #-4]
 800b4de:	e7d3      	b.n	800b488 <__hexnan+0xd4>
 800b4e0:	3f04      	subs	r7, #4
 800b4e2:	e7d1      	b.n	800b488 <__hexnan+0xd4>
 800b4e4:	2004      	movs	r0, #4
 800b4e6:	b007      	add	sp, #28
 800b4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b4ec <memmove>:
 800b4ec:	4288      	cmp	r0, r1
 800b4ee:	b510      	push	{r4, lr}
 800b4f0:	eb01 0402 	add.w	r4, r1, r2
 800b4f4:	d902      	bls.n	800b4fc <memmove+0x10>
 800b4f6:	4284      	cmp	r4, r0
 800b4f8:	4623      	mov	r3, r4
 800b4fa:	d807      	bhi.n	800b50c <memmove+0x20>
 800b4fc:	1e43      	subs	r3, r0, #1
 800b4fe:	42a1      	cmp	r1, r4
 800b500:	d008      	beq.n	800b514 <memmove+0x28>
 800b502:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b506:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b50a:	e7f8      	b.n	800b4fe <memmove+0x12>
 800b50c:	4601      	mov	r1, r0
 800b50e:	4402      	add	r2, r0
 800b510:	428a      	cmp	r2, r1
 800b512:	d100      	bne.n	800b516 <memmove+0x2a>
 800b514:	bd10      	pop	{r4, pc}
 800b516:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b51a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b51e:	e7f7      	b.n	800b510 <memmove+0x24>

0800b520 <nan>:
 800b520:	2000      	movs	r0, #0
 800b522:	4901      	ldr	r1, [pc, #4]	; (800b528 <nan+0x8>)
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	7ff80000 	.word	0x7ff80000

0800b52c <strncmp>:
 800b52c:	b510      	push	{r4, lr}
 800b52e:	b16a      	cbz	r2, 800b54c <strncmp+0x20>
 800b530:	3901      	subs	r1, #1
 800b532:	1884      	adds	r4, r0, r2
 800b534:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b538:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d103      	bne.n	800b548 <strncmp+0x1c>
 800b540:	42a0      	cmp	r0, r4
 800b542:	d001      	beq.n	800b548 <strncmp+0x1c>
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1f5      	bne.n	800b534 <strncmp+0x8>
 800b548:	1a98      	subs	r0, r3, r2
 800b54a:	bd10      	pop	{r4, pc}
 800b54c:	4610      	mov	r0, r2
 800b54e:	e7fc      	b.n	800b54a <strncmp+0x1e>

0800b550 <__sprint_r>:
 800b550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b554:	6893      	ldr	r3, [r2, #8]
 800b556:	4680      	mov	r8, r0
 800b558:	460f      	mov	r7, r1
 800b55a:	4614      	mov	r4, r2
 800b55c:	b91b      	cbnz	r3, 800b566 <__sprint_r+0x16>
 800b55e:	4618      	mov	r0, r3
 800b560:	6053      	str	r3, [r2, #4]
 800b562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b566:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800b568:	049d      	lsls	r5, r3, #18
 800b56a:	d520      	bpl.n	800b5ae <__sprint_r+0x5e>
 800b56c:	6815      	ldr	r5, [r2, #0]
 800b56e:	3508      	adds	r5, #8
 800b570:	f04f 0900 	mov.w	r9, #0
 800b574:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800b578:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800b57c:	45ca      	cmp	sl, r9
 800b57e:	dc0b      	bgt.n	800b598 <__sprint_r+0x48>
 800b580:	68a0      	ldr	r0, [r4, #8]
 800b582:	f026 0603 	bic.w	r6, r6, #3
 800b586:	1b80      	subs	r0, r0, r6
 800b588:	60a0      	str	r0, [r4, #8]
 800b58a:	3508      	adds	r5, #8
 800b58c:	2800      	cmp	r0, #0
 800b58e:	d1ef      	bne.n	800b570 <__sprint_r+0x20>
 800b590:	2300      	movs	r3, #0
 800b592:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800b596:	e7e4      	b.n	800b562 <__sprint_r+0x12>
 800b598:	463a      	mov	r2, r7
 800b59a:	4640      	mov	r0, r8
 800b59c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800b5a0:	f000 fdbf 	bl	800c122 <_fputwc_r>
 800b5a4:	1c43      	adds	r3, r0, #1
 800b5a6:	d0f3      	beq.n	800b590 <__sprint_r+0x40>
 800b5a8:	f109 0901 	add.w	r9, r9, #1
 800b5ac:	e7e6      	b.n	800b57c <__sprint_r+0x2c>
 800b5ae:	f000 fde1 	bl	800c174 <__sfvwrite_r>
 800b5b2:	e7ed      	b.n	800b590 <__sprint_r+0x40>

0800b5b4 <_vfiprintf_r>:
 800b5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	b0bb      	sub	sp, #236	; 0xec
 800b5ba:	460f      	mov	r7, r1
 800b5bc:	461d      	mov	r5, r3
 800b5be:	461c      	mov	r4, r3
 800b5c0:	4681      	mov	r9, r0
 800b5c2:	9202      	str	r2, [sp, #8]
 800b5c4:	b118      	cbz	r0, 800b5ce <_vfiprintf_r+0x1a>
 800b5c6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b5c8:	b90b      	cbnz	r3, 800b5ce <_vfiprintf_r+0x1a>
 800b5ca:	f7ff fbcf 	bl	800ad6c <__sinit>
 800b5ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5d0:	07d8      	lsls	r0, r3, #31
 800b5d2:	d405      	bmi.n	800b5e0 <_vfiprintf_r+0x2c>
 800b5d4:	89bb      	ldrh	r3, [r7, #12]
 800b5d6:	0599      	lsls	r1, r3, #22
 800b5d8:	d402      	bmi.n	800b5e0 <_vfiprintf_r+0x2c>
 800b5da:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b5dc:	f7fc ff1c 	bl	8008418 <__retarget_lock_acquire_recursive>
 800b5e0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b5e4:	049a      	lsls	r2, r3, #18
 800b5e6:	d406      	bmi.n	800b5f6 <_vfiprintf_r+0x42>
 800b5e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b5ec:	81bb      	strh	r3, [r7, #12]
 800b5ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b5f4:	667b      	str	r3, [r7, #100]	; 0x64
 800b5f6:	89bb      	ldrh	r3, [r7, #12]
 800b5f8:	071e      	lsls	r6, r3, #28
 800b5fa:	d501      	bpl.n	800b600 <_vfiprintf_r+0x4c>
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	b9ab      	cbnz	r3, 800b62c <_vfiprintf_r+0x78>
 800b600:	4639      	mov	r1, r7
 800b602:	4648      	mov	r0, r9
 800b604:	f000 fc96 	bl	800bf34 <__swsetup_r>
 800b608:	b180      	cbz	r0, 800b62c <_vfiprintf_r+0x78>
 800b60a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b60c:	07d8      	lsls	r0, r3, #31
 800b60e:	d506      	bpl.n	800b61e <_vfiprintf_r+0x6a>
 800b610:	f04f 33ff 	mov.w	r3, #4294967295
 800b614:	9303      	str	r3, [sp, #12]
 800b616:	9803      	ldr	r0, [sp, #12]
 800b618:	b03b      	add	sp, #236	; 0xec
 800b61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b61e:	89bb      	ldrh	r3, [r7, #12]
 800b620:	0599      	lsls	r1, r3, #22
 800b622:	d4f5      	bmi.n	800b610 <_vfiprintf_r+0x5c>
 800b624:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b626:	f7fc fef8 	bl	800841a <__retarget_lock_release_recursive>
 800b62a:	e7f1      	b.n	800b610 <_vfiprintf_r+0x5c>
 800b62c:	89bb      	ldrh	r3, [r7, #12]
 800b62e:	f003 021a 	and.w	r2, r3, #26
 800b632:	2a0a      	cmp	r2, #10
 800b634:	d113      	bne.n	800b65e <_vfiprintf_r+0xaa>
 800b636:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b63a:	2a00      	cmp	r2, #0
 800b63c:	db0f      	blt.n	800b65e <_vfiprintf_r+0xaa>
 800b63e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b640:	07d2      	lsls	r2, r2, #31
 800b642:	d404      	bmi.n	800b64e <_vfiprintf_r+0x9a>
 800b644:	059e      	lsls	r6, r3, #22
 800b646:	d402      	bmi.n	800b64e <_vfiprintf_r+0x9a>
 800b648:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b64a:	f7fc fee6 	bl	800841a <__retarget_lock_release_recursive>
 800b64e:	462b      	mov	r3, r5
 800b650:	4639      	mov	r1, r7
 800b652:	4648      	mov	r0, r9
 800b654:	9a02      	ldr	r2, [sp, #8]
 800b656:	f000 fc2d 	bl	800beb4 <__sbprintf>
 800b65a:	9003      	str	r0, [sp, #12]
 800b65c:	e7db      	b.n	800b616 <_vfiprintf_r+0x62>
 800b65e:	2300      	movs	r3, #0
 800b660:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 800b664:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800b668:	ae11      	add	r6, sp, #68	; 0x44
 800b66a:	960e      	str	r6, [sp, #56]	; 0x38
 800b66c:	9308      	str	r3, [sp, #32]
 800b66e:	930a      	str	r3, [sp, #40]	; 0x28
 800b670:	9303      	str	r3, [sp, #12]
 800b672:	9b02      	ldr	r3, [sp, #8]
 800b674:	461d      	mov	r5, r3
 800b676:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b67a:	b10a      	cbz	r2, 800b680 <_vfiprintf_r+0xcc>
 800b67c:	2a25      	cmp	r2, #37	; 0x25
 800b67e:	d1f9      	bne.n	800b674 <_vfiprintf_r+0xc0>
 800b680:	9b02      	ldr	r3, [sp, #8]
 800b682:	ebb5 0803 	subs.w	r8, r5, r3
 800b686:	d00d      	beq.n	800b6a4 <_vfiprintf_r+0xf0>
 800b688:	e9c6 3800 	strd	r3, r8, [r6]
 800b68c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b68e:	4443      	add	r3, r8
 800b690:	9310      	str	r3, [sp, #64]	; 0x40
 800b692:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b694:	3301      	adds	r3, #1
 800b696:	2b07      	cmp	r3, #7
 800b698:	930f      	str	r3, [sp, #60]	; 0x3c
 800b69a:	dc75      	bgt.n	800b788 <_vfiprintf_r+0x1d4>
 800b69c:	3608      	adds	r6, #8
 800b69e:	9b03      	ldr	r3, [sp, #12]
 800b6a0:	4443      	add	r3, r8
 800b6a2:	9303      	str	r3, [sp, #12]
 800b6a4:	782b      	ldrb	r3, [r5, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	f000 83c6 	beq.w	800be38 <_vfiprintf_r+0x884>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	f04f 31ff 	mov.w	r1, #4294967295
 800b6b2:	469a      	mov	sl, r3
 800b6b4:	1c6a      	adds	r2, r5, #1
 800b6b6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b6ba:	9101      	str	r1, [sp, #4]
 800b6bc:	9304      	str	r3, [sp, #16]
 800b6be:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b6c2:	9202      	str	r2, [sp, #8]
 800b6c4:	f1a3 0220 	sub.w	r2, r3, #32
 800b6c8:	2a5a      	cmp	r2, #90	; 0x5a
 800b6ca:	f200 830e 	bhi.w	800bcea <_vfiprintf_r+0x736>
 800b6ce:	e8df f012 	tbh	[pc, r2, lsl #1]
 800b6d2:	0098      	.short	0x0098
 800b6d4:	030c030c 	.word	0x030c030c
 800b6d8:	030c00a0 	.word	0x030c00a0
 800b6dc:	030c030c 	.word	0x030c030c
 800b6e0:	030c0080 	.word	0x030c0080
 800b6e4:	00a3030c 	.word	0x00a3030c
 800b6e8:	030c00ad 	.word	0x030c00ad
 800b6ec:	00af00aa 	.word	0x00af00aa
 800b6f0:	00ca030c 	.word	0x00ca030c
 800b6f4:	00cd00cd 	.word	0x00cd00cd
 800b6f8:	00cd00cd 	.word	0x00cd00cd
 800b6fc:	00cd00cd 	.word	0x00cd00cd
 800b700:	00cd00cd 	.word	0x00cd00cd
 800b704:	030c00cd 	.word	0x030c00cd
 800b708:	030c030c 	.word	0x030c030c
 800b70c:	030c030c 	.word	0x030c030c
 800b710:	030c030c 	.word	0x030c030c
 800b714:	030c030c 	.word	0x030c030c
 800b718:	010500f7 	.word	0x010500f7
 800b71c:	030c030c 	.word	0x030c030c
 800b720:	030c030c 	.word	0x030c030c
 800b724:	030c030c 	.word	0x030c030c
 800b728:	030c030c 	.word	0x030c030c
 800b72c:	030c030c 	.word	0x030c030c
 800b730:	030c014b 	.word	0x030c014b
 800b734:	030c030c 	.word	0x030c030c
 800b738:	030c0191 	.word	0x030c0191
 800b73c:	030c026f 	.word	0x030c026f
 800b740:	028d030c 	.word	0x028d030c
 800b744:	030c030c 	.word	0x030c030c
 800b748:	030c030c 	.word	0x030c030c
 800b74c:	030c030c 	.word	0x030c030c
 800b750:	030c030c 	.word	0x030c030c
 800b754:	030c030c 	.word	0x030c030c
 800b758:	010700f7 	.word	0x010700f7
 800b75c:	030c030c 	.word	0x030c030c
 800b760:	00dd030c 	.word	0x00dd030c
 800b764:	00f10107 	.word	0x00f10107
 800b768:	00ea030c 	.word	0x00ea030c
 800b76c:	012e030c 	.word	0x012e030c
 800b770:	0180014d 	.word	0x0180014d
 800b774:	030c00f1 	.word	0x030c00f1
 800b778:	00960191 	.word	0x00960191
 800b77c:	030c0271 	.word	0x030c0271
 800b780:	0065030c 	.word	0x0065030c
 800b784:	0096030c 	.word	0x0096030c
 800b788:	4639      	mov	r1, r7
 800b78a:	4648      	mov	r0, r9
 800b78c:	aa0e      	add	r2, sp, #56	; 0x38
 800b78e:	f7ff fedf 	bl	800b550 <__sprint_r>
 800b792:	2800      	cmp	r0, #0
 800b794:	f040 832f 	bne.w	800bdf6 <_vfiprintf_r+0x842>
 800b798:	ae11      	add	r6, sp, #68	; 0x44
 800b79a:	e780      	b.n	800b69e <_vfiprintf_r+0xea>
 800b79c:	4a94      	ldr	r2, [pc, #592]	; (800b9f0 <_vfiprintf_r+0x43c>)
 800b79e:	f01a 0f20 	tst.w	sl, #32
 800b7a2:	9206      	str	r2, [sp, #24]
 800b7a4:	f000 8224 	beq.w	800bbf0 <_vfiprintf_r+0x63c>
 800b7a8:	3407      	adds	r4, #7
 800b7aa:	f024 0b07 	bic.w	fp, r4, #7
 800b7ae:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800b7b2:	f01a 0f01 	tst.w	sl, #1
 800b7b6:	d009      	beq.n	800b7cc <_vfiprintf_r+0x218>
 800b7b8:	ea54 0205 	orrs.w	r2, r4, r5
 800b7bc:	bf1f      	itttt	ne
 800b7be:	2230      	movne	r2, #48	; 0x30
 800b7c0:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 800b7c4:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 800b7c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b7cc:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b7d0:	e10b      	b.n	800b9ea <_vfiprintf_r+0x436>
 800b7d2:	4648      	mov	r0, r9
 800b7d4:	f7fc fe1a 	bl	800840c <_localeconv_r>
 800b7d8:	6843      	ldr	r3, [r0, #4]
 800b7da:	4618      	mov	r0, r3
 800b7dc:	930a      	str	r3, [sp, #40]	; 0x28
 800b7de:	f7f4 fcb7 	bl	8000150 <strlen>
 800b7e2:	9008      	str	r0, [sp, #32]
 800b7e4:	4648      	mov	r0, r9
 800b7e6:	f7fc fe11 	bl	800840c <_localeconv_r>
 800b7ea:	6883      	ldr	r3, [r0, #8]
 800b7ec:	9307      	str	r3, [sp, #28]
 800b7ee:	9b08      	ldr	r3, [sp, #32]
 800b7f0:	b12b      	cbz	r3, 800b7fe <_vfiprintf_r+0x24a>
 800b7f2:	9b07      	ldr	r3, [sp, #28]
 800b7f4:	b11b      	cbz	r3, 800b7fe <_vfiprintf_r+0x24a>
 800b7f6:	781b      	ldrb	r3, [r3, #0]
 800b7f8:	b10b      	cbz	r3, 800b7fe <_vfiprintf_r+0x24a>
 800b7fa:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800b7fe:	9a02      	ldr	r2, [sp, #8]
 800b800:	e75d      	b.n	800b6be <_vfiprintf_r+0x10a>
 800b802:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b806:	2b00      	cmp	r3, #0
 800b808:	d1f9      	bne.n	800b7fe <_vfiprintf_r+0x24a>
 800b80a:	2320      	movs	r3, #32
 800b80c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b810:	e7f5      	b.n	800b7fe <_vfiprintf_r+0x24a>
 800b812:	f04a 0a01 	orr.w	sl, sl, #1
 800b816:	e7f2      	b.n	800b7fe <_vfiprintf_r+0x24a>
 800b818:	f854 3b04 	ldr.w	r3, [r4], #4
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	9304      	str	r3, [sp, #16]
 800b820:	daed      	bge.n	800b7fe <_vfiprintf_r+0x24a>
 800b822:	425b      	negs	r3, r3
 800b824:	9304      	str	r3, [sp, #16]
 800b826:	f04a 0a04 	orr.w	sl, sl, #4
 800b82a:	e7e8      	b.n	800b7fe <_vfiprintf_r+0x24a>
 800b82c:	232b      	movs	r3, #43	; 0x2b
 800b82e:	e7ed      	b.n	800b80c <_vfiprintf_r+0x258>
 800b830:	9a02      	ldr	r2, [sp, #8]
 800b832:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b836:	2b2a      	cmp	r3, #42	; 0x2a
 800b838:	d112      	bne.n	800b860 <_vfiprintf_r+0x2ac>
 800b83a:	f854 0b04 	ldr.w	r0, [r4], #4
 800b83e:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800b842:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b846:	e7da      	b.n	800b7fe <_vfiprintf_r+0x24a>
 800b848:	200a      	movs	r0, #10
 800b84a:	9b01      	ldr	r3, [sp, #4]
 800b84c:	fb00 1303 	mla	r3, r0, r3, r1
 800b850:	9301      	str	r3, [sp, #4]
 800b852:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b856:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b85a:	2909      	cmp	r1, #9
 800b85c:	d9f4      	bls.n	800b848 <_vfiprintf_r+0x294>
 800b85e:	e730      	b.n	800b6c2 <_vfiprintf_r+0x10e>
 800b860:	2100      	movs	r1, #0
 800b862:	9101      	str	r1, [sp, #4]
 800b864:	e7f7      	b.n	800b856 <_vfiprintf_r+0x2a2>
 800b866:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800b86a:	e7c8      	b.n	800b7fe <_vfiprintf_r+0x24a>
 800b86c:	2100      	movs	r1, #0
 800b86e:	9a02      	ldr	r2, [sp, #8]
 800b870:	9104      	str	r1, [sp, #16]
 800b872:	200a      	movs	r0, #10
 800b874:	9904      	ldr	r1, [sp, #16]
 800b876:	3b30      	subs	r3, #48	; 0x30
 800b878:	fb00 3301 	mla	r3, r0, r1, r3
 800b87c:	9304      	str	r3, [sp, #16]
 800b87e:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b882:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b886:	2909      	cmp	r1, #9
 800b888:	d9f3      	bls.n	800b872 <_vfiprintf_r+0x2be>
 800b88a:	e71a      	b.n	800b6c2 <_vfiprintf_r+0x10e>
 800b88c:	9b02      	ldr	r3, [sp, #8]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	2b68      	cmp	r3, #104	; 0x68
 800b892:	bf01      	itttt	eq
 800b894:	9b02      	ldreq	r3, [sp, #8]
 800b896:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800b89a:	3301      	addeq	r3, #1
 800b89c:	9302      	streq	r3, [sp, #8]
 800b89e:	bf18      	it	ne
 800b8a0:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800b8a4:	e7ab      	b.n	800b7fe <_vfiprintf_r+0x24a>
 800b8a6:	9b02      	ldr	r3, [sp, #8]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	2b6c      	cmp	r3, #108	; 0x6c
 800b8ac:	d105      	bne.n	800b8ba <_vfiprintf_r+0x306>
 800b8ae:	9b02      	ldr	r3, [sp, #8]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	9302      	str	r3, [sp, #8]
 800b8b4:	f04a 0a20 	orr.w	sl, sl, #32
 800b8b8:	e7a1      	b.n	800b7fe <_vfiprintf_r+0x24a>
 800b8ba:	f04a 0a10 	orr.w	sl, sl, #16
 800b8be:	e79e      	b.n	800b7fe <_vfiprintf_r+0x24a>
 800b8c0:	46a3      	mov	fp, r4
 800b8c2:	2100      	movs	r1, #0
 800b8c4:	f85b 3b04 	ldr.w	r3, [fp], #4
 800b8c8:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800b8cc:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	460d      	mov	r5, r1
 800b8d4:	9301      	str	r3, [sp, #4]
 800b8d6:	f10d 0884 	add.w	r8, sp, #132	; 0x84
 800b8da:	e0a0      	b.n	800ba1e <_vfiprintf_r+0x46a>
 800b8dc:	f04a 0a10 	orr.w	sl, sl, #16
 800b8e0:	f01a 0f20 	tst.w	sl, #32
 800b8e4:	d010      	beq.n	800b908 <_vfiprintf_r+0x354>
 800b8e6:	3407      	adds	r4, #7
 800b8e8:	f024 0b07 	bic.w	fp, r4, #7
 800b8ec:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800b8f0:	2c00      	cmp	r4, #0
 800b8f2:	f175 0300 	sbcs.w	r3, r5, #0
 800b8f6:	da05      	bge.n	800b904 <_vfiprintf_r+0x350>
 800b8f8:	232d      	movs	r3, #45	; 0x2d
 800b8fa:	4264      	negs	r4, r4
 800b8fc:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800b900:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800b904:	2301      	movs	r3, #1
 800b906:	e03f      	b.n	800b988 <_vfiprintf_r+0x3d4>
 800b908:	f01a 0f10 	tst.w	sl, #16
 800b90c:	f104 0b04 	add.w	fp, r4, #4
 800b910:	d002      	beq.n	800b918 <_vfiprintf_r+0x364>
 800b912:	6824      	ldr	r4, [r4, #0]
 800b914:	17e5      	asrs	r5, r4, #31
 800b916:	e7eb      	b.n	800b8f0 <_vfiprintf_r+0x33c>
 800b918:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b91c:	6824      	ldr	r4, [r4, #0]
 800b91e:	d001      	beq.n	800b924 <_vfiprintf_r+0x370>
 800b920:	b224      	sxth	r4, r4
 800b922:	e7f7      	b.n	800b914 <_vfiprintf_r+0x360>
 800b924:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b928:	bf18      	it	ne
 800b92a:	b264      	sxtbne	r4, r4
 800b92c:	e7f2      	b.n	800b914 <_vfiprintf_r+0x360>
 800b92e:	f01a 0f20 	tst.w	sl, #32
 800b932:	f854 3b04 	ldr.w	r3, [r4], #4
 800b936:	d005      	beq.n	800b944 <_vfiprintf_r+0x390>
 800b938:	9a03      	ldr	r2, [sp, #12]
 800b93a:	4610      	mov	r0, r2
 800b93c:	17d1      	asrs	r1, r2, #31
 800b93e:	e9c3 0100 	strd	r0, r1, [r3]
 800b942:	e696      	b.n	800b672 <_vfiprintf_r+0xbe>
 800b944:	f01a 0f10 	tst.w	sl, #16
 800b948:	d002      	beq.n	800b950 <_vfiprintf_r+0x39c>
 800b94a:	9a03      	ldr	r2, [sp, #12]
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	e690      	b.n	800b672 <_vfiprintf_r+0xbe>
 800b950:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b954:	d002      	beq.n	800b95c <_vfiprintf_r+0x3a8>
 800b956:	9a03      	ldr	r2, [sp, #12]
 800b958:	801a      	strh	r2, [r3, #0]
 800b95a:	e68a      	b.n	800b672 <_vfiprintf_r+0xbe>
 800b95c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b960:	d0f3      	beq.n	800b94a <_vfiprintf_r+0x396>
 800b962:	9a03      	ldr	r2, [sp, #12]
 800b964:	701a      	strb	r2, [r3, #0]
 800b966:	e684      	b.n	800b672 <_vfiprintf_r+0xbe>
 800b968:	f04a 0a10 	orr.w	sl, sl, #16
 800b96c:	f01a 0f20 	tst.w	sl, #32
 800b970:	d01d      	beq.n	800b9ae <_vfiprintf_r+0x3fa>
 800b972:	3407      	adds	r4, #7
 800b974:	f024 0b07 	bic.w	fp, r4, #7
 800b978:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800b97c:	2300      	movs	r3, #0
 800b97e:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800b982:	2200      	movs	r2, #0
 800b984:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 800b988:	9a01      	ldr	r2, [sp, #4]
 800b98a:	3201      	adds	r2, #1
 800b98c:	f000 8261 	beq.w	800be52 <_vfiprintf_r+0x89e>
 800b990:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800b994:	9205      	str	r2, [sp, #20]
 800b996:	ea54 0205 	orrs.w	r2, r4, r5
 800b99a:	f040 8260 	bne.w	800be5e <_vfiprintf_r+0x8aa>
 800b99e:	9a01      	ldr	r2, [sp, #4]
 800b9a0:	2a00      	cmp	r2, #0
 800b9a2:	f000 8197 	beq.w	800bcd4 <_vfiprintf_r+0x720>
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	f040 825c 	bne.w	800be64 <_vfiprintf_r+0x8b0>
 800b9ac:	e136      	b.n	800bc1c <_vfiprintf_r+0x668>
 800b9ae:	f01a 0f10 	tst.w	sl, #16
 800b9b2:	f104 0b04 	add.w	fp, r4, #4
 800b9b6:	d001      	beq.n	800b9bc <_vfiprintf_r+0x408>
 800b9b8:	6824      	ldr	r4, [r4, #0]
 800b9ba:	e003      	b.n	800b9c4 <_vfiprintf_r+0x410>
 800b9bc:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800b9c0:	d002      	beq.n	800b9c8 <_vfiprintf_r+0x414>
 800b9c2:	8824      	ldrh	r4, [r4, #0]
 800b9c4:	2500      	movs	r5, #0
 800b9c6:	e7d9      	b.n	800b97c <_vfiprintf_r+0x3c8>
 800b9c8:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800b9cc:	d0f4      	beq.n	800b9b8 <_vfiprintf_r+0x404>
 800b9ce:	7824      	ldrb	r4, [r4, #0]
 800b9d0:	e7f8      	b.n	800b9c4 <_vfiprintf_r+0x410>
 800b9d2:	f647 0330 	movw	r3, #30768	; 0x7830
 800b9d6:	46a3      	mov	fp, r4
 800b9d8:	2500      	movs	r5, #0
 800b9da:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 800b9de:	4b04      	ldr	r3, [pc, #16]	; (800b9f0 <_vfiprintf_r+0x43c>)
 800b9e0:	f85b 4b04 	ldr.w	r4, [fp], #4
 800b9e4:	f04a 0a02 	orr.w	sl, sl, #2
 800b9e8:	9306      	str	r3, [sp, #24]
 800b9ea:	2302      	movs	r3, #2
 800b9ec:	e7c9      	b.n	800b982 <_vfiprintf_r+0x3ce>
 800b9ee:	bf00      	nop
 800b9f0:	0800c7dc 	.word	0x0800c7dc
 800b9f4:	46a3      	mov	fp, r4
 800b9f6:	2500      	movs	r5, #0
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	f85b 8b04 	ldr.w	r8, [fp], #4
 800b9fe:	1c5c      	adds	r4, r3, #1
 800ba00:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 800ba04:	f000 80cf 	beq.w	800bba6 <_vfiprintf_r+0x5f2>
 800ba08:	461a      	mov	r2, r3
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	4640      	mov	r0, r8
 800ba0e:	f7fc ff95 	bl	800893c <memchr>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	f000 8173 	beq.w	800bcfe <_vfiprintf_r+0x74a>
 800ba18:	eba0 0308 	sub.w	r3, r0, r8
 800ba1c:	9301      	str	r3, [sp, #4]
 800ba1e:	9b01      	ldr	r3, [sp, #4]
 800ba20:	42ab      	cmp	r3, r5
 800ba22:	bfb8      	it	lt
 800ba24:	462b      	movlt	r3, r5
 800ba26:	9305      	str	r3, [sp, #20]
 800ba28:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ba2c:	b113      	cbz	r3, 800ba34 <_vfiprintf_r+0x480>
 800ba2e:	9b05      	ldr	r3, [sp, #20]
 800ba30:	3301      	adds	r3, #1
 800ba32:	9305      	str	r3, [sp, #20]
 800ba34:	f01a 0302 	ands.w	r3, sl, #2
 800ba38:	9309      	str	r3, [sp, #36]	; 0x24
 800ba3a:	bf1e      	ittt	ne
 800ba3c:	9b05      	ldrne	r3, [sp, #20]
 800ba3e:	3302      	addne	r3, #2
 800ba40:	9305      	strne	r3, [sp, #20]
 800ba42:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800ba46:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba48:	d11f      	bne.n	800ba8a <_vfiprintf_r+0x4d6>
 800ba4a:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ba4e:	1a9c      	subs	r4, r3, r2
 800ba50:	2c00      	cmp	r4, #0
 800ba52:	dd1a      	ble.n	800ba8a <_vfiprintf_r+0x4d6>
 800ba54:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800ba58:	48b4      	ldr	r0, [pc, #720]	; (800bd2c <_vfiprintf_r+0x778>)
 800ba5a:	2c10      	cmp	r4, #16
 800ba5c:	f103 0301 	add.w	r3, r3, #1
 800ba60:	f106 0108 	add.w	r1, r6, #8
 800ba64:	6030      	str	r0, [r6, #0]
 800ba66:	f300 814c 	bgt.w	800bd02 <_vfiprintf_r+0x74e>
 800ba6a:	6074      	str	r4, [r6, #4]
 800ba6c:	2b07      	cmp	r3, #7
 800ba6e:	4414      	add	r4, r2
 800ba70:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800ba74:	f340 8157 	ble.w	800bd26 <_vfiprintf_r+0x772>
 800ba78:	4639      	mov	r1, r7
 800ba7a:	4648      	mov	r0, r9
 800ba7c:	aa0e      	add	r2, sp, #56	; 0x38
 800ba7e:	f7ff fd67 	bl	800b550 <__sprint_r>
 800ba82:	2800      	cmp	r0, #0
 800ba84:	f040 81b7 	bne.w	800bdf6 <_vfiprintf_r+0x842>
 800ba88:	ae11      	add	r6, sp, #68	; 0x44
 800ba8a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ba8e:	b173      	cbz	r3, 800baae <_vfiprintf_r+0x4fa>
 800ba90:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800ba94:	6032      	str	r2, [r6, #0]
 800ba96:	2201      	movs	r2, #1
 800ba98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba9a:	6072      	str	r2, [r6, #4]
 800ba9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ba9e:	3301      	adds	r3, #1
 800baa0:	3201      	adds	r2, #1
 800baa2:	2b07      	cmp	r3, #7
 800baa4:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800baa8:	f300 8146 	bgt.w	800bd38 <_vfiprintf_r+0x784>
 800baac:	3608      	adds	r6, #8
 800baae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab0:	b16b      	cbz	r3, 800bace <_vfiprintf_r+0x51a>
 800bab2:	aa0d      	add	r2, sp, #52	; 0x34
 800bab4:	6032      	str	r2, [r6, #0]
 800bab6:	2202      	movs	r2, #2
 800bab8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800baba:	6072      	str	r2, [r6, #4]
 800babc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800babe:	3301      	adds	r3, #1
 800bac0:	3202      	adds	r2, #2
 800bac2:	2b07      	cmp	r3, #7
 800bac4:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800bac8:	f300 813f 	bgt.w	800bd4a <_vfiprintf_r+0x796>
 800bacc:	3608      	adds	r6, #8
 800bace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bad0:	2b80      	cmp	r3, #128	; 0x80
 800bad2:	d11f      	bne.n	800bb14 <_vfiprintf_r+0x560>
 800bad4:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800bad8:	1a9c      	subs	r4, r3, r2
 800bada:	2c00      	cmp	r4, #0
 800badc:	dd1a      	ble.n	800bb14 <_vfiprintf_r+0x560>
 800bade:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800bae2:	4893      	ldr	r0, [pc, #588]	; (800bd30 <_vfiprintf_r+0x77c>)
 800bae4:	2c10      	cmp	r4, #16
 800bae6:	f103 0301 	add.w	r3, r3, #1
 800baea:	f106 0108 	add.w	r1, r6, #8
 800baee:	6030      	str	r0, [r6, #0]
 800baf0:	f300 8134 	bgt.w	800bd5c <_vfiprintf_r+0x7a8>
 800baf4:	6074      	str	r4, [r6, #4]
 800baf6:	2b07      	cmp	r3, #7
 800baf8:	4414      	add	r4, r2
 800bafa:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800bafe:	f340 813f 	ble.w	800bd80 <_vfiprintf_r+0x7cc>
 800bb02:	4639      	mov	r1, r7
 800bb04:	4648      	mov	r0, r9
 800bb06:	aa0e      	add	r2, sp, #56	; 0x38
 800bb08:	f7ff fd22 	bl	800b550 <__sprint_r>
 800bb0c:	2800      	cmp	r0, #0
 800bb0e:	f040 8172 	bne.w	800bdf6 <_vfiprintf_r+0x842>
 800bb12:	ae11      	add	r6, sp, #68	; 0x44
 800bb14:	9b01      	ldr	r3, [sp, #4]
 800bb16:	1aec      	subs	r4, r5, r3
 800bb18:	2c00      	cmp	r4, #0
 800bb1a:	dd1a      	ble.n	800bb52 <_vfiprintf_r+0x59e>
 800bb1c:	4d84      	ldr	r5, [pc, #528]	; (800bd30 <_vfiprintf_r+0x77c>)
 800bb1e:	2c10      	cmp	r4, #16
 800bb20:	e9dd 310f 	ldrd	r3, r1, [sp, #60]	; 0x3c
 800bb24:	f106 0208 	add.w	r2, r6, #8
 800bb28:	f103 0301 	add.w	r3, r3, #1
 800bb2c:	6035      	str	r5, [r6, #0]
 800bb2e:	f300 8129 	bgt.w	800bd84 <_vfiprintf_r+0x7d0>
 800bb32:	6074      	str	r4, [r6, #4]
 800bb34:	2b07      	cmp	r3, #7
 800bb36:	440c      	add	r4, r1
 800bb38:	e9cd 340f 	strd	r3, r4, [sp, #60]	; 0x3c
 800bb3c:	f340 8133 	ble.w	800bda6 <_vfiprintf_r+0x7f2>
 800bb40:	4639      	mov	r1, r7
 800bb42:	4648      	mov	r0, r9
 800bb44:	aa0e      	add	r2, sp, #56	; 0x38
 800bb46:	f7ff fd03 	bl	800b550 <__sprint_r>
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	f040 8153 	bne.w	800bdf6 <_vfiprintf_r+0x842>
 800bb50:	ae11      	add	r6, sp, #68	; 0x44
 800bb52:	9b01      	ldr	r3, [sp, #4]
 800bb54:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bb56:	6073      	str	r3, [r6, #4]
 800bb58:	4418      	add	r0, r3
 800bb5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb5c:	f8c6 8000 	str.w	r8, [r6]
 800bb60:	3301      	adds	r3, #1
 800bb62:	2b07      	cmp	r3, #7
 800bb64:	9010      	str	r0, [sp, #64]	; 0x40
 800bb66:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb68:	f300 811f 	bgt.w	800bdaa <_vfiprintf_r+0x7f6>
 800bb6c:	f106 0308 	add.w	r3, r6, #8
 800bb70:	f01a 0f04 	tst.w	sl, #4
 800bb74:	f040 8121 	bne.w	800bdba <_vfiprintf_r+0x806>
 800bb78:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800bb7c:	9905      	ldr	r1, [sp, #20]
 800bb7e:	428a      	cmp	r2, r1
 800bb80:	bfac      	ite	ge
 800bb82:	189b      	addge	r3, r3, r2
 800bb84:	185b      	addlt	r3, r3, r1
 800bb86:	9303      	str	r3, [sp, #12]
 800bb88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb8a:	b13b      	cbz	r3, 800bb9c <_vfiprintf_r+0x5e8>
 800bb8c:	4639      	mov	r1, r7
 800bb8e:	4648      	mov	r0, r9
 800bb90:	aa0e      	add	r2, sp, #56	; 0x38
 800bb92:	f7ff fcdd 	bl	800b550 <__sprint_r>
 800bb96:	2800      	cmp	r0, #0
 800bb98:	f040 812d 	bne.w	800bdf6 <_vfiprintf_r+0x842>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	465c      	mov	r4, fp
 800bba0:	930f      	str	r3, [sp, #60]	; 0x3c
 800bba2:	ae11      	add	r6, sp, #68	; 0x44
 800bba4:	e565      	b.n	800b672 <_vfiprintf_r+0xbe>
 800bba6:	4640      	mov	r0, r8
 800bba8:	f7f4 fad2 	bl	8000150 <strlen>
 800bbac:	9001      	str	r0, [sp, #4]
 800bbae:	e736      	b.n	800ba1e <_vfiprintf_r+0x46a>
 800bbb0:	f04a 0a10 	orr.w	sl, sl, #16
 800bbb4:	f01a 0f20 	tst.w	sl, #32
 800bbb8:	d006      	beq.n	800bbc8 <_vfiprintf_r+0x614>
 800bbba:	3407      	adds	r4, #7
 800bbbc:	f024 0b07 	bic.w	fp, r4, #7
 800bbc0:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e6dc      	b.n	800b982 <_vfiprintf_r+0x3ce>
 800bbc8:	f01a 0f10 	tst.w	sl, #16
 800bbcc:	f104 0b04 	add.w	fp, r4, #4
 800bbd0:	d001      	beq.n	800bbd6 <_vfiprintf_r+0x622>
 800bbd2:	6824      	ldr	r4, [r4, #0]
 800bbd4:	e003      	b.n	800bbde <_vfiprintf_r+0x62a>
 800bbd6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bbda:	d002      	beq.n	800bbe2 <_vfiprintf_r+0x62e>
 800bbdc:	8824      	ldrh	r4, [r4, #0]
 800bbde:	2500      	movs	r5, #0
 800bbe0:	e7f0      	b.n	800bbc4 <_vfiprintf_r+0x610>
 800bbe2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bbe6:	d0f4      	beq.n	800bbd2 <_vfiprintf_r+0x61e>
 800bbe8:	7824      	ldrb	r4, [r4, #0]
 800bbea:	e7f8      	b.n	800bbde <_vfiprintf_r+0x62a>
 800bbec:	4a51      	ldr	r2, [pc, #324]	; (800bd34 <_vfiprintf_r+0x780>)
 800bbee:	e5d6      	b.n	800b79e <_vfiprintf_r+0x1ea>
 800bbf0:	f01a 0f10 	tst.w	sl, #16
 800bbf4:	f104 0b04 	add.w	fp, r4, #4
 800bbf8:	d001      	beq.n	800bbfe <_vfiprintf_r+0x64a>
 800bbfa:	6824      	ldr	r4, [r4, #0]
 800bbfc:	e003      	b.n	800bc06 <_vfiprintf_r+0x652>
 800bbfe:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bc02:	d002      	beq.n	800bc0a <_vfiprintf_r+0x656>
 800bc04:	8824      	ldrh	r4, [r4, #0]
 800bc06:	2500      	movs	r5, #0
 800bc08:	e5d3      	b.n	800b7b2 <_vfiprintf_r+0x1fe>
 800bc0a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bc0e:	d0f4      	beq.n	800bbfa <_vfiprintf_r+0x646>
 800bc10:	7824      	ldrb	r4, [r4, #0]
 800bc12:	e7f8      	b.n	800bc06 <_vfiprintf_r+0x652>
 800bc14:	2d00      	cmp	r5, #0
 800bc16:	bf08      	it	eq
 800bc18:	2c0a      	cmpeq	r4, #10
 800bc1a:	d205      	bcs.n	800bc28 <_vfiprintf_r+0x674>
 800bc1c:	3430      	adds	r4, #48	; 0x30
 800bc1e:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 800bc22:	f10d 08e7 	add.w	r8, sp, #231	; 0xe7
 800bc26:	e13b      	b.n	800bea0 <_vfiprintf_r+0x8ec>
 800bc28:	f04f 0a00 	mov.w	sl, #0
 800bc2c:	ab3a      	add	r3, sp, #232	; 0xe8
 800bc2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bc30:	9b05      	ldr	r3, [sp, #20]
 800bc32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc36:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3a:	220a      	movs	r2, #10
 800bc3c:	4620      	mov	r0, r4
 800bc3e:	4629      	mov	r1, r5
 800bc40:	f103 38ff 	add.w	r8, r3, #4294967295
 800bc44:	2300      	movs	r3, #0
 800bc46:	f7f5 f89d 	bl	8000d84 <__aeabi_uldivmod>
 800bc4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc4c:	3230      	adds	r2, #48	; 0x30
 800bc4e:	f803 2c01 	strb.w	r2, [r3, #-1]
 800bc52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc54:	f10a 0a01 	add.w	sl, sl, #1
 800bc58:	b1d3      	cbz	r3, 800bc90 <_vfiprintf_r+0x6dc>
 800bc5a:	9b07      	ldr	r3, [sp, #28]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	4553      	cmp	r3, sl
 800bc60:	d116      	bne.n	800bc90 <_vfiprintf_r+0x6dc>
 800bc62:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800bc66:	d013      	beq.n	800bc90 <_vfiprintf_r+0x6dc>
 800bc68:	2d00      	cmp	r5, #0
 800bc6a:	bf08      	it	eq
 800bc6c:	2c0a      	cmpeq	r4, #10
 800bc6e:	d30f      	bcc.n	800bc90 <_vfiprintf_r+0x6dc>
 800bc70:	9b08      	ldr	r3, [sp, #32]
 800bc72:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bc74:	eba8 0803 	sub.w	r8, r8, r3
 800bc78:	461a      	mov	r2, r3
 800bc7a:	4640      	mov	r0, r8
 800bc7c:	f7fd fd28 	bl	80096d0 <strncpy>
 800bc80:	9b07      	ldr	r3, [sp, #28]
 800bc82:	785b      	ldrb	r3, [r3, #1]
 800bc84:	b1a3      	cbz	r3, 800bcb0 <_vfiprintf_r+0x6fc>
 800bc86:	f04f 0a00 	mov.w	sl, #0
 800bc8a:	9b07      	ldr	r3, [sp, #28]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	9307      	str	r3, [sp, #28]
 800bc90:	220a      	movs	r2, #10
 800bc92:	2300      	movs	r3, #0
 800bc94:	4620      	mov	r0, r4
 800bc96:	4629      	mov	r1, r5
 800bc98:	f7f5 f874 	bl	8000d84 <__aeabi_uldivmod>
 800bc9c:	2d00      	cmp	r5, #0
 800bc9e:	bf08      	it	eq
 800bca0:	2c0a      	cmpeq	r4, #10
 800bca2:	f0c0 80fd 	bcc.w	800bea0 <_vfiprintf_r+0x8ec>
 800bca6:	4604      	mov	r4, r0
 800bca8:	460d      	mov	r5, r1
 800bcaa:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 800bcae:	e7c3      	b.n	800bc38 <_vfiprintf_r+0x684>
 800bcb0:	469a      	mov	sl, r3
 800bcb2:	e7ed      	b.n	800bc90 <_vfiprintf_r+0x6dc>
 800bcb4:	9a06      	ldr	r2, [sp, #24]
 800bcb6:	f004 030f 	and.w	r3, r4, #15
 800bcba:	5cd3      	ldrb	r3, [r2, r3]
 800bcbc:	092a      	lsrs	r2, r5, #4
 800bcbe:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800bcc2:	0923      	lsrs	r3, r4, #4
 800bcc4:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800bcc8:	461c      	mov	r4, r3
 800bcca:	4615      	mov	r5, r2
 800bccc:	ea54 0305 	orrs.w	r3, r4, r5
 800bcd0:	d1f0      	bne.n	800bcb4 <_vfiprintf_r+0x700>
 800bcd2:	e0e5      	b.n	800bea0 <_vfiprintf_r+0x8ec>
 800bcd4:	b933      	cbnz	r3, 800bce4 <_vfiprintf_r+0x730>
 800bcd6:	f01a 0f01 	tst.w	sl, #1
 800bcda:	d003      	beq.n	800bce4 <_vfiprintf_r+0x730>
 800bcdc:	2330      	movs	r3, #48	; 0x30
 800bcde:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 800bce2:	e79e      	b.n	800bc22 <_vfiprintf_r+0x66e>
 800bce4:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 800bce8:	e0da      	b.n	800bea0 <_vfiprintf_r+0x8ec>
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	f000 80a4 	beq.w	800be38 <_vfiprintf_r+0x884>
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	46a3      	mov	fp, r4
 800bcf4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 800bcf8:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
 800bcfc:	e5e8      	b.n	800b8d0 <_vfiprintf_r+0x31c>
 800bcfe:	4605      	mov	r5, r0
 800bd00:	e68d      	b.n	800ba1e <_vfiprintf_r+0x46a>
 800bd02:	2010      	movs	r0, #16
 800bd04:	2b07      	cmp	r3, #7
 800bd06:	4402      	add	r2, r0
 800bd08:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800bd0c:	6070      	str	r0, [r6, #4]
 800bd0e:	dd07      	ble.n	800bd20 <_vfiprintf_r+0x76c>
 800bd10:	4639      	mov	r1, r7
 800bd12:	4648      	mov	r0, r9
 800bd14:	aa0e      	add	r2, sp, #56	; 0x38
 800bd16:	f7ff fc1b 	bl	800b550 <__sprint_r>
 800bd1a:	2800      	cmp	r0, #0
 800bd1c:	d16b      	bne.n	800bdf6 <_vfiprintf_r+0x842>
 800bd1e:	a911      	add	r1, sp, #68	; 0x44
 800bd20:	460e      	mov	r6, r1
 800bd22:	3c10      	subs	r4, #16
 800bd24:	e696      	b.n	800ba54 <_vfiprintf_r+0x4a0>
 800bd26:	460e      	mov	r6, r1
 800bd28:	e6af      	b.n	800ba8a <_vfiprintf_r+0x4d6>
 800bd2a:	bf00      	nop
 800bd2c:	0800cc30 	.word	0x0800cc30
 800bd30:	0800cc40 	.word	0x0800cc40
 800bd34:	0800c7ed 	.word	0x0800c7ed
 800bd38:	4639      	mov	r1, r7
 800bd3a:	4648      	mov	r0, r9
 800bd3c:	aa0e      	add	r2, sp, #56	; 0x38
 800bd3e:	f7ff fc07 	bl	800b550 <__sprint_r>
 800bd42:	2800      	cmp	r0, #0
 800bd44:	d157      	bne.n	800bdf6 <_vfiprintf_r+0x842>
 800bd46:	ae11      	add	r6, sp, #68	; 0x44
 800bd48:	e6b1      	b.n	800baae <_vfiprintf_r+0x4fa>
 800bd4a:	4639      	mov	r1, r7
 800bd4c:	4648      	mov	r0, r9
 800bd4e:	aa0e      	add	r2, sp, #56	; 0x38
 800bd50:	f7ff fbfe 	bl	800b550 <__sprint_r>
 800bd54:	2800      	cmp	r0, #0
 800bd56:	d14e      	bne.n	800bdf6 <_vfiprintf_r+0x842>
 800bd58:	ae11      	add	r6, sp, #68	; 0x44
 800bd5a:	e6b8      	b.n	800bace <_vfiprintf_r+0x51a>
 800bd5c:	2010      	movs	r0, #16
 800bd5e:	2b07      	cmp	r3, #7
 800bd60:	4402      	add	r2, r0
 800bd62:	e9cd 320f 	strd	r3, r2, [sp, #60]	; 0x3c
 800bd66:	6070      	str	r0, [r6, #4]
 800bd68:	dd07      	ble.n	800bd7a <_vfiprintf_r+0x7c6>
 800bd6a:	4639      	mov	r1, r7
 800bd6c:	4648      	mov	r0, r9
 800bd6e:	aa0e      	add	r2, sp, #56	; 0x38
 800bd70:	f7ff fbee 	bl	800b550 <__sprint_r>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d13e      	bne.n	800bdf6 <_vfiprintf_r+0x842>
 800bd78:	a911      	add	r1, sp, #68	; 0x44
 800bd7a:	460e      	mov	r6, r1
 800bd7c:	3c10      	subs	r4, #16
 800bd7e:	e6ae      	b.n	800bade <_vfiprintf_r+0x52a>
 800bd80:	460e      	mov	r6, r1
 800bd82:	e6c7      	b.n	800bb14 <_vfiprintf_r+0x560>
 800bd84:	2010      	movs	r0, #16
 800bd86:	2b07      	cmp	r3, #7
 800bd88:	4401      	add	r1, r0
 800bd8a:	e9cd 310f 	strd	r3, r1, [sp, #60]	; 0x3c
 800bd8e:	6070      	str	r0, [r6, #4]
 800bd90:	dd06      	ble.n	800bda0 <_vfiprintf_r+0x7ec>
 800bd92:	4639      	mov	r1, r7
 800bd94:	4648      	mov	r0, r9
 800bd96:	aa0e      	add	r2, sp, #56	; 0x38
 800bd98:	f7ff fbda 	bl	800b550 <__sprint_r>
 800bd9c:	bb58      	cbnz	r0, 800bdf6 <_vfiprintf_r+0x842>
 800bd9e:	aa11      	add	r2, sp, #68	; 0x44
 800bda0:	4616      	mov	r6, r2
 800bda2:	3c10      	subs	r4, #16
 800bda4:	e6bb      	b.n	800bb1e <_vfiprintf_r+0x56a>
 800bda6:	4616      	mov	r6, r2
 800bda8:	e6d3      	b.n	800bb52 <_vfiprintf_r+0x59e>
 800bdaa:	4639      	mov	r1, r7
 800bdac:	4648      	mov	r0, r9
 800bdae:	aa0e      	add	r2, sp, #56	; 0x38
 800bdb0:	f7ff fbce 	bl	800b550 <__sprint_r>
 800bdb4:	b9f8      	cbnz	r0, 800bdf6 <_vfiprintf_r+0x842>
 800bdb6:	ab11      	add	r3, sp, #68	; 0x44
 800bdb8:	e6da      	b.n	800bb70 <_vfiprintf_r+0x5bc>
 800bdba:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800bdbe:	1a54      	subs	r4, r2, r1
 800bdc0:	2c00      	cmp	r4, #0
 800bdc2:	f77f aed9 	ble.w	800bb78 <_vfiprintf_r+0x5c4>
 800bdc6:	2610      	movs	r6, #16
 800bdc8:	4d39      	ldr	r5, [pc, #228]	; (800beb0 <_vfiprintf_r+0x8fc>)
 800bdca:	2c10      	cmp	r4, #16
 800bdcc:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 800bdd0:	601d      	str	r5, [r3, #0]
 800bdd2:	f102 0201 	add.w	r2, r2, #1
 800bdd6:	dc1d      	bgt.n	800be14 <_vfiprintf_r+0x860>
 800bdd8:	605c      	str	r4, [r3, #4]
 800bdda:	2a07      	cmp	r2, #7
 800bddc:	440c      	add	r4, r1
 800bdde:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 800bde2:	f77f aec9 	ble.w	800bb78 <_vfiprintf_r+0x5c4>
 800bde6:	4639      	mov	r1, r7
 800bde8:	4648      	mov	r0, r9
 800bdea:	aa0e      	add	r2, sp, #56	; 0x38
 800bdec:	f7ff fbb0 	bl	800b550 <__sprint_r>
 800bdf0:	2800      	cmp	r0, #0
 800bdf2:	f43f aec1 	beq.w	800bb78 <_vfiprintf_r+0x5c4>
 800bdf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bdf8:	07d9      	lsls	r1, r3, #31
 800bdfa:	d405      	bmi.n	800be08 <_vfiprintf_r+0x854>
 800bdfc:	89bb      	ldrh	r3, [r7, #12]
 800bdfe:	059a      	lsls	r2, r3, #22
 800be00:	d402      	bmi.n	800be08 <_vfiprintf_r+0x854>
 800be02:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800be04:	f7fc fb09 	bl	800841a <__retarget_lock_release_recursive>
 800be08:	89bb      	ldrh	r3, [r7, #12]
 800be0a:	065b      	lsls	r3, r3, #25
 800be0c:	f57f ac03 	bpl.w	800b616 <_vfiprintf_r+0x62>
 800be10:	f7ff bbfe 	b.w	800b610 <_vfiprintf_r+0x5c>
 800be14:	3110      	adds	r1, #16
 800be16:	2a07      	cmp	r2, #7
 800be18:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 800be1c:	605e      	str	r6, [r3, #4]
 800be1e:	dc02      	bgt.n	800be26 <_vfiprintf_r+0x872>
 800be20:	3308      	adds	r3, #8
 800be22:	3c10      	subs	r4, #16
 800be24:	e7d1      	b.n	800bdca <_vfiprintf_r+0x816>
 800be26:	4639      	mov	r1, r7
 800be28:	4648      	mov	r0, r9
 800be2a:	aa0e      	add	r2, sp, #56	; 0x38
 800be2c:	f7ff fb90 	bl	800b550 <__sprint_r>
 800be30:	2800      	cmp	r0, #0
 800be32:	d1e0      	bne.n	800bdf6 <_vfiprintf_r+0x842>
 800be34:	ab11      	add	r3, sp, #68	; 0x44
 800be36:	e7f4      	b.n	800be22 <_vfiprintf_r+0x86e>
 800be38:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be3a:	b913      	cbnz	r3, 800be42 <_vfiprintf_r+0x88e>
 800be3c:	2300      	movs	r3, #0
 800be3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800be40:	e7d9      	b.n	800bdf6 <_vfiprintf_r+0x842>
 800be42:	4639      	mov	r1, r7
 800be44:	4648      	mov	r0, r9
 800be46:	aa0e      	add	r2, sp, #56	; 0x38
 800be48:	f7ff fb82 	bl	800b550 <__sprint_r>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d0f5      	beq.n	800be3c <_vfiprintf_r+0x888>
 800be50:	e7d1      	b.n	800bdf6 <_vfiprintf_r+0x842>
 800be52:	ea54 0205 	orrs.w	r2, r4, r5
 800be56:	f8cd a014 	str.w	sl, [sp, #20]
 800be5a:	f43f ada4 	beq.w	800b9a6 <_vfiprintf_r+0x3f2>
 800be5e:	2b01      	cmp	r3, #1
 800be60:	f43f aed8 	beq.w	800bc14 <_vfiprintf_r+0x660>
 800be64:	2b02      	cmp	r3, #2
 800be66:	f10d 08e8 	add.w	r8, sp, #232	; 0xe8
 800be6a:	f43f af23 	beq.w	800bcb4 <_vfiprintf_r+0x700>
 800be6e:	08e2      	lsrs	r2, r4, #3
 800be70:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800be74:	08e8      	lsrs	r0, r5, #3
 800be76:	f004 0307 	and.w	r3, r4, #7
 800be7a:	4605      	mov	r5, r0
 800be7c:	4614      	mov	r4, r2
 800be7e:	3330      	adds	r3, #48	; 0x30
 800be80:	ea54 0205 	orrs.w	r2, r4, r5
 800be84:	4641      	mov	r1, r8
 800be86:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800be8a:	d1f0      	bne.n	800be6e <_vfiprintf_r+0x8ba>
 800be8c:	9a05      	ldr	r2, [sp, #20]
 800be8e:	07d0      	lsls	r0, r2, #31
 800be90:	d506      	bpl.n	800bea0 <_vfiprintf_r+0x8ec>
 800be92:	2b30      	cmp	r3, #48	; 0x30
 800be94:	d004      	beq.n	800bea0 <_vfiprintf_r+0x8ec>
 800be96:	2330      	movs	r3, #48	; 0x30
 800be98:	f808 3c01 	strb.w	r3, [r8, #-1]
 800be9c:	f1a1 0802 	sub.w	r8, r1, #2
 800bea0:	ab3a      	add	r3, sp, #232	; 0xe8
 800bea2:	eba3 0308 	sub.w	r3, r3, r8
 800bea6:	9d01      	ldr	r5, [sp, #4]
 800bea8:	f8dd a014 	ldr.w	sl, [sp, #20]
 800beac:	9301      	str	r3, [sp, #4]
 800beae:	e5b6      	b.n	800ba1e <_vfiprintf_r+0x46a>
 800beb0:	0800cc30 	.word	0x0800cc30

0800beb4 <__sbprintf>:
 800beb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beb6:	461f      	mov	r7, r3
 800beb8:	898b      	ldrh	r3, [r1, #12]
 800beba:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 800bebe:	f023 0302 	bic.w	r3, r3, #2
 800bec2:	f8ad 300c 	strh.w	r3, [sp, #12]
 800bec6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800bec8:	4615      	mov	r5, r2
 800beca:	9319      	str	r3, [sp, #100]	; 0x64
 800becc:	89cb      	ldrh	r3, [r1, #14]
 800bece:	4606      	mov	r6, r0
 800bed0:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bed4:	69cb      	ldr	r3, [r1, #28]
 800bed6:	a816      	add	r0, sp, #88	; 0x58
 800bed8:	9307      	str	r3, [sp, #28]
 800beda:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800bedc:	460c      	mov	r4, r1
 800bede:	9309      	str	r3, [sp, #36]	; 0x24
 800bee0:	ab1a      	add	r3, sp, #104	; 0x68
 800bee2:	9300      	str	r3, [sp, #0]
 800bee4:	9304      	str	r3, [sp, #16]
 800bee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800beea:	9302      	str	r3, [sp, #8]
 800beec:	9305      	str	r3, [sp, #20]
 800beee:	2300      	movs	r3, #0
 800bef0:	9306      	str	r3, [sp, #24]
 800bef2:	f7fc fa8f 	bl	8008414 <__retarget_lock_init_recursive>
 800bef6:	462a      	mov	r2, r5
 800bef8:	463b      	mov	r3, r7
 800befa:	4669      	mov	r1, sp
 800befc:	4630      	mov	r0, r6
 800befe:	f7ff fb59 	bl	800b5b4 <_vfiprintf_r>
 800bf02:	1e05      	subs	r5, r0, #0
 800bf04:	db07      	blt.n	800bf16 <__sbprintf+0x62>
 800bf06:	4669      	mov	r1, sp
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f7fe fec3 	bl	800ac94 <_fflush_r>
 800bf0e:	2800      	cmp	r0, #0
 800bf10:	bf18      	it	ne
 800bf12:	f04f 35ff 	movne.w	r5, #4294967295
 800bf16:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800bf1a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800bf1c:	065b      	lsls	r3, r3, #25
 800bf1e:	bf42      	ittt	mi
 800bf20:	89a3      	ldrhmi	r3, [r4, #12]
 800bf22:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800bf26:	81a3      	strhmi	r3, [r4, #12]
 800bf28:	f7fc fa75 	bl	8008416 <__retarget_lock_close_recursive>
 800bf2c:	4628      	mov	r0, r5
 800bf2e:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800bf32:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bf34 <__swsetup_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4b2a      	ldr	r3, [pc, #168]	; (800bfe0 <__swsetup_r+0xac>)
 800bf38:	4605      	mov	r5, r0
 800bf3a:	6818      	ldr	r0, [r3, #0]
 800bf3c:	460c      	mov	r4, r1
 800bf3e:	b118      	cbz	r0, 800bf48 <__swsetup_r+0x14>
 800bf40:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bf42:	b90b      	cbnz	r3, 800bf48 <__swsetup_r+0x14>
 800bf44:	f7fe ff12 	bl	800ad6c <__sinit>
 800bf48:	89a3      	ldrh	r3, [r4, #12]
 800bf4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf4e:	0718      	lsls	r0, r3, #28
 800bf50:	d422      	bmi.n	800bf98 <__swsetup_r+0x64>
 800bf52:	06d9      	lsls	r1, r3, #27
 800bf54:	d407      	bmi.n	800bf66 <__swsetup_r+0x32>
 800bf56:	2309      	movs	r3, #9
 800bf58:	602b      	str	r3, [r5, #0]
 800bf5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bf5e:	f04f 30ff 	mov.w	r0, #4294967295
 800bf62:	81a3      	strh	r3, [r4, #12]
 800bf64:	e034      	b.n	800bfd0 <__swsetup_r+0x9c>
 800bf66:	0758      	lsls	r0, r3, #29
 800bf68:	d512      	bpl.n	800bf90 <__swsetup_r+0x5c>
 800bf6a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bf6c:	b141      	cbz	r1, 800bf80 <__swsetup_r+0x4c>
 800bf6e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800bf72:	4299      	cmp	r1, r3
 800bf74:	d002      	beq.n	800bf7c <__swsetup_r+0x48>
 800bf76:	4628      	mov	r0, r5
 800bf78:	f7fc f974 	bl	8008264 <_free_r>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	6323      	str	r3, [r4, #48]	; 0x30
 800bf80:	89a3      	ldrh	r3, [r4, #12]
 800bf82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bf86:	81a3      	strh	r3, [r4, #12]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	6063      	str	r3, [r4, #4]
 800bf8c:	6923      	ldr	r3, [r4, #16]
 800bf8e:	6023      	str	r3, [r4, #0]
 800bf90:	89a3      	ldrh	r3, [r4, #12]
 800bf92:	f043 0308 	orr.w	r3, r3, #8
 800bf96:	81a3      	strh	r3, [r4, #12]
 800bf98:	6923      	ldr	r3, [r4, #16]
 800bf9a:	b94b      	cbnz	r3, 800bfb0 <__swsetup_r+0x7c>
 800bf9c:	89a3      	ldrh	r3, [r4, #12]
 800bf9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bfa6:	d003      	beq.n	800bfb0 <__swsetup_r+0x7c>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f000 fa58 	bl	800c460 <__smakebuf_r>
 800bfb0:	89a0      	ldrh	r0, [r4, #12]
 800bfb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfb6:	f010 0301 	ands.w	r3, r0, #1
 800bfba:	d00a      	beq.n	800bfd2 <__swsetup_r+0x9e>
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	60a3      	str	r3, [r4, #8]
 800bfc0:	6963      	ldr	r3, [r4, #20]
 800bfc2:	425b      	negs	r3, r3
 800bfc4:	61a3      	str	r3, [r4, #24]
 800bfc6:	6923      	ldr	r3, [r4, #16]
 800bfc8:	b943      	cbnz	r3, 800bfdc <__swsetup_r+0xa8>
 800bfca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bfce:	d1c4      	bne.n	800bf5a <__swsetup_r+0x26>
 800bfd0:	bd38      	pop	{r3, r4, r5, pc}
 800bfd2:	0781      	lsls	r1, r0, #30
 800bfd4:	bf58      	it	pl
 800bfd6:	6963      	ldrpl	r3, [r4, #20]
 800bfd8:	60a3      	str	r3, [r4, #8]
 800bfda:	e7f4      	b.n	800bfc6 <__swsetup_r+0x92>
 800bfdc:	2000      	movs	r0, #0
 800bfde:	e7f7      	b.n	800bfd0 <__swsetup_r+0x9c>
 800bfe0:	20000068 	.word	0x20000068

0800bfe4 <abort>:
 800bfe4:	2006      	movs	r0, #6
 800bfe6:	b508      	push	{r3, lr}
 800bfe8:	f000 faa4 	bl	800c534 <raise>
 800bfec:	2001      	movs	r0, #1
 800bfee:	f7f5 fc92 	bl	8001916 <_exit>

0800bff2 <_fclose_r>:
 800bff2:	b570      	push	{r4, r5, r6, lr}
 800bff4:	4606      	mov	r6, r0
 800bff6:	460c      	mov	r4, r1
 800bff8:	b911      	cbnz	r1, 800c000 <_fclose_r+0xe>
 800bffa:	2500      	movs	r5, #0
 800bffc:	4628      	mov	r0, r5
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
 800c000:	b118      	cbz	r0, 800c00a <_fclose_r+0x18>
 800c002:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c004:	b90b      	cbnz	r3, 800c00a <_fclose_r+0x18>
 800c006:	f7fe feb1 	bl	800ad6c <__sinit>
 800c00a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c00c:	07d8      	lsls	r0, r3, #31
 800c00e:	d405      	bmi.n	800c01c <_fclose_r+0x2a>
 800c010:	89a3      	ldrh	r3, [r4, #12]
 800c012:	0599      	lsls	r1, r3, #22
 800c014:	d402      	bmi.n	800c01c <_fclose_r+0x2a>
 800c016:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c018:	f7fc f9fe 	bl	8008418 <__retarget_lock_acquire_recursive>
 800c01c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c020:	b93b      	cbnz	r3, 800c032 <_fclose_r+0x40>
 800c022:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800c024:	f015 0501 	ands.w	r5, r5, #1
 800c028:	d1e7      	bne.n	800bffa <_fclose_r+0x8>
 800c02a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c02c:	f7fc f9f5 	bl	800841a <__retarget_lock_release_recursive>
 800c030:	e7e4      	b.n	800bffc <_fclose_r+0xa>
 800c032:	4621      	mov	r1, r4
 800c034:	4630      	mov	r0, r6
 800c036:	f7fe fd9f 	bl	800ab78 <__sflush_r>
 800c03a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c03c:	4605      	mov	r5, r0
 800c03e:	b133      	cbz	r3, 800c04e <_fclose_r+0x5c>
 800c040:	4630      	mov	r0, r6
 800c042:	69e1      	ldr	r1, [r4, #28]
 800c044:	4798      	blx	r3
 800c046:	2800      	cmp	r0, #0
 800c048:	bfb8      	it	lt
 800c04a:	f04f 35ff 	movlt.w	r5, #4294967295
 800c04e:	89a3      	ldrh	r3, [r4, #12]
 800c050:	061a      	lsls	r2, r3, #24
 800c052:	d503      	bpl.n	800c05c <_fclose_r+0x6a>
 800c054:	4630      	mov	r0, r6
 800c056:	6921      	ldr	r1, [r4, #16]
 800c058:	f7fc f904 	bl	8008264 <_free_r>
 800c05c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c05e:	b141      	cbz	r1, 800c072 <_fclose_r+0x80>
 800c060:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c064:	4299      	cmp	r1, r3
 800c066:	d002      	beq.n	800c06e <_fclose_r+0x7c>
 800c068:	4630      	mov	r0, r6
 800c06a:	f7fc f8fb 	bl	8008264 <_free_r>
 800c06e:	2300      	movs	r3, #0
 800c070:	6323      	str	r3, [r4, #48]	; 0x30
 800c072:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c074:	b121      	cbz	r1, 800c080 <_fclose_r+0x8e>
 800c076:	4630      	mov	r0, r6
 800c078:	f7fc f8f4 	bl	8008264 <_free_r>
 800c07c:	2300      	movs	r3, #0
 800c07e:	6463      	str	r3, [r4, #68]	; 0x44
 800c080:	f7fe fe5c 	bl	800ad3c <__sfp_lock_acquire>
 800c084:	2300      	movs	r3, #0
 800c086:	81a3      	strh	r3, [r4, #12]
 800c088:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c08a:	07db      	lsls	r3, r3, #31
 800c08c:	d402      	bmi.n	800c094 <_fclose_r+0xa2>
 800c08e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c090:	f7fc f9c3 	bl	800841a <__retarget_lock_release_recursive>
 800c094:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c096:	f7fc f9be 	bl	8008416 <__retarget_lock_close_recursive>
 800c09a:	f7fe fe55 	bl	800ad48 <__sfp_lock_release>
 800c09e:	e7ad      	b.n	800bffc <_fclose_r+0xa>

0800c0a0 <__fputwc>:
 800c0a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0a4:	4680      	mov	r8, r0
 800c0a6:	460e      	mov	r6, r1
 800c0a8:	4615      	mov	r5, r2
 800c0aa:	f7fc f9a9 	bl	8008400 <__locale_mb_cur_max>
 800c0ae:	2801      	cmp	r0, #1
 800c0b0:	4604      	mov	r4, r0
 800c0b2:	d11b      	bne.n	800c0ec <__fputwc+0x4c>
 800c0b4:	1e73      	subs	r3, r6, #1
 800c0b6:	2bfe      	cmp	r3, #254	; 0xfe
 800c0b8:	d818      	bhi.n	800c0ec <__fputwc+0x4c>
 800c0ba:	f88d 6004 	strb.w	r6, [sp, #4]
 800c0be:	2700      	movs	r7, #0
 800c0c0:	f10d 0904 	add.w	r9, sp, #4
 800c0c4:	42a7      	cmp	r7, r4
 800c0c6:	d020      	beq.n	800c10a <__fputwc+0x6a>
 800c0c8:	68ab      	ldr	r3, [r5, #8]
 800c0ca:	f817 1009 	ldrb.w	r1, [r7, r9]
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	60ab      	str	r3, [r5, #8]
 800c0d4:	da04      	bge.n	800c0e0 <__fputwc+0x40>
 800c0d6:	69aa      	ldr	r2, [r5, #24]
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	db1a      	blt.n	800c112 <__fputwc+0x72>
 800c0dc:	290a      	cmp	r1, #10
 800c0de:	d018      	beq.n	800c112 <__fputwc+0x72>
 800c0e0:	682b      	ldr	r3, [r5, #0]
 800c0e2:	1c5a      	adds	r2, r3, #1
 800c0e4:	602a      	str	r2, [r5, #0]
 800c0e6:	7019      	strb	r1, [r3, #0]
 800c0e8:	3701      	adds	r7, #1
 800c0ea:	e7eb      	b.n	800c0c4 <__fputwc+0x24>
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	4640      	mov	r0, r8
 800c0f0:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800c0f4:	a901      	add	r1, sp, #4
 800c0f6:	f000 fa83 	bl	800c600 <_wcrtomb_r>
 800c0fa:	1c42      	adds	r2, r0, #1
 800c0fc:	4604      	mov	r4, r0
 800c0fe:	d1de      	bne.n	800c0be <__fputwc+0x1e>
 800c100:	4606      	mov	r6, r0
 800c102:	89ab      	ldrh	r3, [r5, #12]
 800c104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c108:	81ab      	strh	r3, [r5, #12]
 800c10a:	4630      	mov	r0, r6
 800c10c:	b003      	add	sp, #12
 800c10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c112:	462a      	mov	r2, r5
 800c114:	4640      	mov	r0, r8
 800c116:	f000 fa29 	bl	800c56c <__swbuf_r>
 800c11a:	1c43      	adds	r3, r0, #1
 800c11c:	d1e4      	bne.n	800c0e8 <__fputwc+0x48>
 800c11e:	4606      	mov	r6, r0
 800c120:	e7f3      	b.n	800c10a <__fputwc+0x6a>

0800c122 <_fputwc_r>:
 800c122:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800c124:	b570      	push	{r4, r5, r6, lr}
 800c126:	07db      	lsls	r3, r3, #31
 800c128:	4605      	mov	r5, r0
 800c12a:	460e      	mov	r6, r1
 800c12c:	4614      	mov	r4, r2
 800c12e:	d405      	bmi.n	800c13c <_fputwc_r+0x1a>
 800c130:	8993      	ldrh	r3, [r2, #12]
 800c132:	0598      	lsls	r0, r3, #22
 800c134:	d402      	bmi.n	800c13c <_fputwc_r+0x1a>
 800c136:	6d90      	ldr	r0, [r2, #88]	; 0x58
 800c138:	f7fc f96e 	bl	8008418 <__retarget_lock_acquire_recursive>
 800c13c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c140:	0499      	lsls	r1, r3, #18
 800c142:	d406      	bmi.n	800c152 <_fputwc_r+0x30>
 800c144:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c148:	81a3      	strh	r3, [r4, #12]
 800c14a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c14c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c150:	6663      	str	r3, [r4, #100]	; 0x64
 800c152:	4622      	mov	r2, r4
 800c154:	4628      	mov	r0, r5
 800c156:	4631      	mov	r1, r6
 800c158:	f7ff ffa2 	bl	800c0a0 <__fputwc>
 800c15c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c15e:	4605      	mov	r5, r0
 800c160:	07da      	lsls	r2, r3, #31
 800c162:	d405      	bmi.n	800c170 <_fputwc_r+0x4e>
 800c164:	89a3      	ldrh	r3, [r4, #12]
 800c166:	059b      	lsls	r3, r3, #22
 800c168:	d402      	bmi.n	800c170 <_fputwc_r+0x4e>
 800c16a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c16c:	f7fc f955 	bl	800841a <__retarget_lock_release_recursive>
 800c170:	4628      	mov	r0, r5
 800c172:	bd70      	pop	{r4, r5, r6, pc}

0800c174 <__sfvwrite_r>:
 800c174:	6893      	ldr	r3, [r2, #8]
 800c176:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17a:	4606      	mov	r6, r0
 800c17c:	460c      	mov	r4, r1
 800c17e:	4690      	mov	r8, r2
 800c180:	b91b      	cbnz	r3, 800c18a <__sfvwrite_r+0x16>
 800c182:	2000      	movs	r0, #0
 800c184:	b003      	add	sp, #12
 800c186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18a:	898b      	ldrh	r3, [r1, #12]
 800c18c:	0718      	lsls	r0, r3, #28
 800c18e:	d550      	bpl.n	800c232 <__sfvwrite_r+0xbe>
 800c190:	690b      	ldr	r3, [r1, #16]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d04d      	beq.n	800c232 <__sfvwrite_r+0xbe>
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	f8d8 7000 	ldr.w	r7, [r8]
 800c19c:	f013 0902 	ands.w	r9, r3, #2
 800c1a0:	d16c      	bne.n	800c27c <__sfvwrite_r+0x108>
 800c1a2:	f013 0301 	ands.w	r3, r3, #1
 800c1a6:	f000 809c 	beq.w	800c2e2 <__sfvwrite_r+0x16e>
 800c1aa:	4648      	mov	r0, r9
 800c1ac:	46ca      	mov	sl, r9
 800c1ae:	46cb      	mov	fp, r9
 800c1b0:	f1bb 0f00 	cmp.w	fp, #0
 800c1b4:	f000 8103 	beq.w	800c3be <__sfvwrite_r+0x24a>
 800c1b8:	b950      	cbnz	r0, 800c1d0 <__sfvwrite_r+0x5c>
 800c1ba:	465a      	mov	r2, fp
 800c1bc:	210a      	movs	r1, #10
 800c1be:	4650      	mov	r0, sl
 800c1c0:	f7fc fbbc 	bl	800893c <memchr>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	f000 80ff 	beq.w	800c3c8 <__sfvwrite_r+0x254>
 800c1ca:	3001      	adds	r0, #1
 800c1cc:	eba0 090a 	sub.w	r9, r0, sl
 800c1d0:	6820      	ldr	r0, [r4, #0]
 800c1d2:	6921      	ldr	r1, [r4, #16]
 800c1d4:	45d9      	cmp	r9, fp
 800c1d6:	464a      	mov	r2, r9
 800c1d8:	bf28      	it	cs
 800c1da:	465a      	movcs	r2, fp
 800c1dc:	4288      	cmp	r0, r1
 800c1de:	6963      	ldr	r3, [r4, #20]
 800c1e0:	f240 80f5 	bls.w	800c3ce <__sfvwrite_r+0x25a>
 800c1e4:	68a5      	ldr	r5, [r4, #8]
 800c1e6:	441d      	add	r5, r3
 800c1e8:	42aa      	cmp	r2, r5
 800c1ea:	f340 80f0 	ble.w	800c3ce <__sfvwrite_r+0x25a>
 800c1ee:	4651      	mov	r1, sl
 800c1f0:	462a      	mov	r2, r5
 800c1f2:	f7ff f97b 	bl	800b4ec <memmove>
 800c1f6:	6823      	ldr	r3, [r4, #0]
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	442b      	add	r3, r5
 800c1fc:	4630      	mov	r0, r6
 800c1fe:	6023      	str	r3, [r4, #0]
 800c200:	f7fe fd48 	bl	800ac94 <_fflush_r>
 800c204:	2800      	cmp	r0, #0
 800c206:	d167      	bne.n	800c2d8 <__sfvwrite_r+0x164>
 800c208:	ebb9 0905 	subs.w	r9, r9, r5
 800c20c:	f040 80f7 	bne.w	800c3fe <__sfvwrite_r+0x28a>
 800c210:	4621      	mov	r1, r4
 800c212:	4630      	mov	r0, r6
 800c214:	f7fe fd3e 	bl	800ac94 <_fflush_r>
 800c218:	2800      	cmp	r0, #0
 800c21a:	d15d      	bne.n	800c2d8 <__sfvwrite_r+0x164>
 800c21c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800c220:	44aa      	add	sl, r5
 800c222:	ebab 0b05 	sub.w	fp, fp, r5
 800c226:	1b55      	subs	r5, r2, r5
 800c228:	f8c8 5008 	str.w	r5, [r8, #8]
 800c22c:	2d00      	cmp	r5, #0
 800c22e:	d1bf      	bne.n	800c1b0 <__sfvwrite_r+0x3c>
 800c230:	e7a7      	b.n	800c182 <__sfvwrite_r+0xe>
 800c232:	4621      	mov	r1, r4
 800c234:	4630      	mov	r0, r6
 800c236:	f7ff fe7d 	bl	800bf34 <__swsetup_r>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	d0ab      	beq.n	800c196 <__sfvwrite_r+0x22>
 800c23e:	f04f 30ff 	mov.w	r0, #4294967295
 800c242:	e79f      	b.n	800c184 <__sfvwrite_r+0x10>
 800c244:	e9d7 b900 	ldrd	fp, r9, [r7]
 800c248:	3708      	adds	r7, #8
 800c24a:	f1b9 0f00 	cmp.w	r9, #0
 800c24e:	d0f9      	beq.n	800c244 <__sfvwrite_r+0xd0>
 800c250:	45d1      	cmp	r9, sl
 800c252:	464b      	mov	r3, r9
 800c254:	465a      	mov	r2, fp
 800c256:	bf28      	it	cs
 800c258:	4653      	movcs	r3, sl
 800c25a:	4630      	mov	r0, r6
 800c25c:	69e1      	ldr	r1, [r4, #28]
 800c25e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c260:	47a8      	blx	r5
 800c262:	2800      	cmp	r0, #0
 800c264:	dd38      	ble.n	800c2d8 <__sfvwrite_r+0x164>
 800c266:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c26a:	4483      	add	fp, r0
 800c26c:	eba9 0900 	sub.w	r9, r9, r0
 800c270:	1a18      	subs	r0, r3, r0
 800c272:	f8c8 0008 	str.w	r0, [r8, #8]
 800c276:	2800      	cmp	r0, #0
 800c278:	d1e7      	bne.n	800c24a <__sfvwrite_r+0xd6>
 800c27a:	e782      	b.n	800c182 <__sfvwrite_r+0xe>
 800c27c:	f04f 0b00 	mov.w	fp, #0
 800c280:	f8df a180 	ldr.w	sl, [pc, #384]	; 800c404 <__sfvwrite_r+0x290>
 800c284:	46d9      	mov	r9, fp
 800c286:	e7e0      	b.n	800c24a <__sfvwrite_r+0xd6>
 800c288:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800c28c:	3708      	adds	r7, #8
 800c28e:	f1ba 0f00 	cmp.w	sl, #0
 800c292:	d0f9      	beq.n	800c288 <__sfvwrite_r+0x114>
 800c294:	89a3      	ldrh	r3, [r4, #12]
 800c296:	68a2      	ldr	r2, [r4, #8]
 800c298:	0599      	lsls	r1, r3, #22
 800c29a:	6820      	ldr	r0, [r4, #0]
 800c29c:	d563      	bpl.n	800c366 <__sfvwrite_r+0x1f2>
 800c29e:	4552      	cmp	r2, sl
 800c2a0:	d836      	bhi.n	800c310 <__sfvwrite_r+0x19c>
 800c2a2:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800c2a6:	d033      	beq.n	800c310 <__sfvwrite_r+0x19c>
 800c2a8:	6921      	ldr	r1, [r4, #16]
 800c2aa:	6965      	ldr	r5, [r4, #20]
 800c2ac:	eba0 0b01 	sub.w	fp, r0, r1
 800c2b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c2b8:	f10b 0201 	add.w	r2, fp, #1
 800c2bc:	106d      	asrs	r5, r5, #1
 800c2be:	4452      	add	r2, sl
 800c2c0:	4295      	cmp	r5, r2
 800c2c2:	bf38      	it	cc
 800c2c4:	4615      	movcc	r5, r2
 800c2c6:	055b      	lsls	r3, r3, #21
 800c2c8:	d53d      	bpl.n	800c346 <__sfvwrite_r+0x1d2>
 800c2ca:	4629      	mov	r1, r5
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	f7fc f8c7 	bl	8008460 <_malloc_r>
 800c2d2:	b948      	cbnz	r0, 800c2e8 <__sfvwrite_r+0x174>
 800c2d4:	230c      	movs	r3, #12
 800c2d6:	6033      	str	r3, [r6, #0]
 800c2d8:	89a3      	ldrh	r3, [r4, #12]
 800c2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2de:	81a3      	strh	r3, [r4, #12]
 800c2e0:	e7ad      	b.n	800c23e <__sfvwrite_r+0xca>
 800c2e2:	4699      	mov	r9, r3
 800c2e4:	469a      	mov	sl, r3
 800c2e6:	e7d2      	b.n	800c28e <__sfvwrite_r+0x11a>
 800c2e8:	465a      	mov	r2, fp
 800c2ea:	6921      	ldr	r1, [r4, #16]
 800c2ec:	9001      	str	r0, [sp, #4]
 800c2ee:	f7f8 fcf9 	bl	8004ce4 <memcpy>
 800c2f2:	89a2      	ldrh	r2, [r4, #12]
 800c2f4:	9b01      	ldr	r3, [sp, #4]
 800c2f6:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c2fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c2fe:	81a2      	strh	r2, [r4, #12]
 800c300:	4652      	mov	r2, sl
 800c302:	6123      	str	r3, [r4, #16]
 800c304:	6165      	str	r5, [r4, #20]
 800c306:	445b      	add	r3, fp
 800c308:	eba5 050b 	sub.w	r5, r5, fp
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	60a5      	str	r5, [r4, #8]
 800c310:	4552      	cmp	r2, sl
 800c312:	bf28      	it	cs
 800c314:	4652      	movcs	r2, sl
 800c316:	4655      	mov	r5, sl
 800c318:	4649      	mov	r1, r9
 800c31a:	6820      	ldr	r0, [r4, #0]
 800c31c:	9201      	str	r2, [sp, #4]
 800c31e:	f7ff f8e5 	bl	800b4ec <memmove>
 800c322:	68a3      	ldr	r3, [r4, #8]
 800c324:	9a01      	ldr	r2, [sp, #4]
 800c326:	1a9b      	subs	r3, r3, r2
 800c328:	60a3      	str	r3, [r4, #8]
 800c32a:	6823      	ldr	r3, [r4, #0]
 800c32c:	441a      	add	r2, r3
 800c32e:	6022      	str	r2, [r4, #0]
 800c330:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800c334:	44a9      	add	r9, r5
 800c336:	ebaa 0a05 	sub.w	sl, sl, r5
 800c33a:	1b45      	subs	r5, r0, r5
 800c33c:	f8c8 5008 	str.w	r5, [r8, #8]
 800c340:	2d00      	cmp	r5, #0
 800c342:	d1a4      	bne.n	800c28e <__sfvwrite_r+0x11a>
 800c344:	e71d      	b.n	800c182 <__sfvwrite_r+0xe>
 800c346:	462a      	mov	r2, r5
 800c348:	4630      	mov	r0, r6
 800c34a:	f7fc ff95 	bl	8009278 <_realloc_r>
 800c34e:	4603      	mov	r3, r0
 800c350:	2800      	cmp	r0, #0
 800c352:	d1d5      	bne.n	800c300 <__sfvwrite_r+0x18c>
 800c354:	4630      	mov	r0, r6
 800c356:	6921      	ldr	r1, [r4, #16]
 800c358:	f7fb ff84 	bl	8008264 <_free_r>
 800c35c:	89a3      	ldrh	r3, [r4, #12]
 800c35e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c362:	81a3      	strh	r3, [r4, #12]
 800c364:	e7b6      	b.n	800c2d4 <__sfvwrite_r+0x160>
 800c366:	6923      	ldr	r3, [r4, #16]
 800c368:	4283      	cmp	r3, r0
 800c36a:	d302      	bcc.n	800c372 <__sfvwrite_r+0x1fe>
 800c36c:	6961      	ldr	r1, [r4, #20]
 800c36e:	4551      	cmp	r1, sl
 800c370:	d915      	bls.n	800c39e <__sfvwrite_r+0x22a>
 800c372:	4552      	cmp	r2, sl
 800c374:	bf28      	it	cs
 800c376:	4652      	movcs	r2, sl
 800c378:	4615      	mov	r5, r2
 800c37a:	4649      	mov	r1, r9
 800c37c:	f7ff f8b6 	bl	800b4ec <memmove>
 800c380:	68a3      	ldr	r3, [r4, #8]
 800c382:	6822      	ldr	r2, [r4, #0]
 800c384:	1b5b      	subs	r3, r3, r5
 800c386:	442a      	add	r2, r5
 800c388:	60a3      	str	r3, [r4, #8]
 800c38a:	6022      	str	r2, [r4, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d1cf      	bne.n	800c330 <__sfvwrite_r+0x1bc>
 800c390:	4621      	mov	r1, r4
 800c392:	4630      	mov	r0, r6
 800c394:	f7fe fc7e 	bl	800ac94 <_fflush_r>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d0c9      	beq.n	800c330 <__sfvwrite_r+0x1bc>
 800c39c:	e79c      	b.n	800c2d8 <__sfvwrite_r+0x164>
 800c39e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c3a2:	459a      	cmp	sl, r3
 800c3a4:	bf38      	it	cc
 800c3a6:	4653      	movcc	r3, sl
 800c3a8:	fb93 f3f1 	sdiv	r3, r3, r1
 800c3ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c3ae:	434b      	muls	r3, r1
 800c3b0:	464a      	mov	r2, r9
 800c3b2:	4630      	mov	r0, r6
 800c3b4:	69e1      	ldr	r1, [r4, #28]
 800c3b6:	47a8      	blx	r5
 800c3b8:	1e05      	subs	r5, r0, #0
 800c3ba:	dcb9      	bgt.n	800c330 <__sfvwrite_r+0x1bc>
 800c3bc:	e78c      	b.n	800c2d8 <__sfvwrite_r+0x164>
 800c3be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	3708      	adds	r7, #8
 800c3c6:	e6f3      	b.n	800c1b0 <__sfvwrite_r+0x3c>
 800c3c8:	f10b 0901 	add.w	r9, fp, #1
 800c3cc:	e700      	b.n	800c1d0 <__sfvwrite_r+0x5c>
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	dc08      	bgt.n	800c3e4 <__sfvwrite_r+0x270>
 800c3d2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c3d4:	4652      	mov	r2, sl
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	69e1      	ldr	r1, [r4, #28]
 800c3da:	47a8      	blx	r5
 800c3dc:	1e05      	subs	r5, r0, #0
 800c3de:	f73f af13 	bgt.w	800c208 <__sfvwrite_r+0x94>
 800c3e2:	e779      	b.n	800c2d8 <__sfvwrite_r+0x164>
 800c3e4:	4651      	mov	r1, sl
 800c3e6:	9201      	str	r2, [sp, #4]
 800c3e8:	f7ff f880 	bl	800b4ec <memmove>
 800c3ec:	9a01      	ldr	r2, [sp, #4]
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	4615      	mov	r5, r2
 800c3f2:	1a9b      	subs	r3, r3, r2
 800c3f4:	60a3      	str	r3, [r4, #8]
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	4413      	add	r3, r2
 800c3fa:	6023      	str	r3, [r4, #0]
 800c3fc:	e704      	b.n	800c208 <__sfvwrite_r+0x94>
 800c3fe:	2001      	movs	r0, #1
 800c400:	e70c      	b.n	800c21c <__sfvwrite_r+0xa8>
 800c402:	bf00      	nop
 800c404:	7ffffc00 	.word	0x7ffffc00

0800c408 <__swhatbuf_r>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	460e      	mov	r6, r1
 800c40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c410:	4614      	mov	r4, r2
 800c412:	2900      	cmp	r1, #0
 800c414:	461d      	mov	r5, r3
 800c416:	b096      	sub	sp, #88	; 0x58
 800c418:	da09      	bge.n	800c42e <__swhatbuf_r+0x26>
 800c41a:	2200      	movs	r2, #0
 800c41c:	89b3      	ldrh	r3, [r6, #12]
 800c41e:	602a      	str	r2, [r5, #0]
 800c420:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c424:	d116      	bne.n	800c454 <__swhatbuf_r+0x4c>
 800c426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c42a:	6023      	str	r3, [r4, #0]
 800c42c:	e015      	b.n	800c45a <__swhatbuf_r+0x52>
 800c42e:	466a      	mov	r2, sp
 800c430:	f000 f8fc 	bl	800c62c <_fstat_r>
 800c434:	2800      	cmp	r0, #0
 800c436:	dbf0      	blt.n	800c41a <__swhatbuf_r+0x12>
 800c438:	9a01      	ldr	r2, [sp, #4]
 800c43a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c43e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c442:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c446:	425a      	negs	r2, r3
 800c448:	415a      	adcs	r2, r3
 800c44a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c44e:	602a      	str	r2, [r5, #0]
 800c450:	6023      	str	r3, [r4, #0]
 800c452:	e002      	b.n	800c45a <__swhatbuf_r+0x52>
 800c454:	2340      	movs	r3, #64	; 0x40
 800c456:	4610      	mov	r0, r2
 800c458:	6023      	str	r3, [r4, #0]
 800c45a:	b016      	add	sp, #88	; 0x58
 800c45c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c460 <__smakebuf_r>:
 800c460:	898b      	ldrh	r3, [r1, #12]
 800c462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c464:	079d      	lsls	r5, r3, #30
 800c466:	4606      	mov	r6, r0
 800c468:	460c      	mov	r4, r1
 800c46a:	d507      	bpl.n	800c47c <__smakebuf_r+0x1c>
 800c46c:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	6123      	str	r3, [r4, #16]
 800c474:	2301      	movs	r3, #1
 800c476:	6163      	str	r3, [r4, #20]
 800c478:	b002      	add	sp, #8
 800c47a:	bd70      	pop	{r4, r5, r6, pc}
 800c47c:	466a      	mov	r2, sp
 800c47e:	ab01      	add	r3, sp, #4
 800c480:	f7ff ffc2 	bl	800c408 <__swhatbuf_r>
 800c484:	9900      	ldr	r1, [sp, #0]
 800c486:	4605      	mov	r5, r0
 800c488:	4630      	mov	r0, r6
 800c48a:	f7fb ffe9 	bl	8008460 <_malloc_r>
 800c48e:	b948      	cbnz	r0, 800c4a4 <__smakebuf_r+0x44>
 800c490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c494:	059a      	lsls	r2, r3, #22
 800c496:	d4ef      	bmi.n	800c478 <__smakebuf_r+0x18>
 800c498:	f023 0303 	bic.w	r3, r3, #3
 800c49c:	f043 0302 	orr.w	r3, r3, #2
 800c4a0:	81a3      	strh	r3, [r4, #12]
 800c4a2:	e7e3      	b.n	800c46c <__smakebuf_r+0xc>
 800c4a4:	4b0d      	ldr	r3, [pc, #52]	; (800c4dc <__smakebuf_r+0x7c>)
 800c4a6:	63f3      	str	r3, [r6, #60]	; 0x3c
 800c4a8:	89a3      	ldrh	r3, [r4, #12]
 800c4aa:	6020      	str	r0, [r4, #0]
 800c4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4b0:	81a3      	strh	r3, [r4, #12]
 800c4b2:	9b00      	ldr	r3, [sp, #0]
 800c4b4:	6120      	str	r0, [r4, #16]
 800c4b6:	6163      	str	r3, [r4, #20]
 800c4b8:	9b01      	ldr	r3, [sp, #4]
 800c4ba:	b15b      	cbz	r3, 800c4d4 <__smakebuf_r+0x74>
 800c4bc:	4630      	mov	r0, r6
 800c4be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4c2:	f000 f8c5 	bl	800c650 <_isatty_r>
 800c4c6:	b128      	cbz	r0, 800c4d4 <__smakebuf_r+0x74>
 800c4c8:	89a3      	ldrh	r3, [r4, #12]
 800c4ca:	f023 0303 	bic.w	r3, r3, #3
 800c4ce:	f043 0301 	orr.w	r3, r3, #1
 800c4d2:	81a3      	strh	r3, [r4, #12]
 800c4d4:	89a0      	ldrh	r0, [r4, #12]
 800c4d6:	4305      	orrs	r5, r0
 800c4d8:	81a5      	strh	r5, [r4, #12]
 800c4da:	e7cd      	b.n	800c478 <__smakebuf_r+0x18>
 800c4dc:	0800ad31 	.word	0x0800ad31

0800c4e0 <_raise_r>:
 800c4e0:	291f      	cmp	r1, #31
 800c4e2:	b538      	push	{r3, r4, r5, lr}
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	460d      	mov	r5, r1
 800c4e8:	d904      	bls.n	800c4f4 <_raise_r+0x14>
 800c4ea:	2316      	movs	r3, #22
 800c4ec:	6003      	str	r3, [r0, #0]
 800c4ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f2:	bd38      	pop	{r3, r4, r5, pc}
 800c4f4:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800c4f8:	b112      	cbz	r2, 800c500 <_raise_r+0x20>
 800c4fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c4fe:	b94b      	cbnz	r3, 800c514 <_raise_r+0x34>
 800c500:	4620      	mov	r0, r4
 800c502:	f000 f831 	bl	800c568 <_getpid_r>
 800c506:	462a      	mov	r2, r5
 800c508:	4601      	mov	r1, r0
 800c50a:	4620      	mov	r0, r4
 800c50c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c510:	f000 b818 	b.w	800c544 <_kill_r>
 800c514:	2b01      	cmp	r3, #1
 800c516:	d00a      	beq.n	800c52e <_raise_r+0x4e>
 800c518:	1c59      	adds	r1, r3, #1
 800c51a:	d103      	bne.n	800c524 <_raise_r+0x44>
 800c51c:	2316      	movs	r3, #22
 800c51e:	6003      	str	r3, [r0, #0]
 800c520:	2001      	movs	r0, #1
 800c522:	e7e6      	b.n	800c4f2 <_raise_r+0x12>
 800c524:	2400      	movs	r4, #0
 800c526:	4628      	mov	r0, r5
 800c528:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c52c:	4798      	blx	r3
 800c52e:	2000      	movs	r0, #0
 800c530:	e7df      	b.n	800c4f2 <_raise_r+0x12>
	...

0800c534 <raise>:
 800c534:	4b02      	ldr	r3, [pc, #8]	; (800c540 <raise+0xc>)
 800c536:	4601      	mov	r1, r0
 800c538:	6818      	ldr	r0, [r3, #0]
 800c53a:	f7ff bfd1 	b.w	800c4e0 <_raise_r>
 800c53e:	bf00      	nop
 800c540:	20000068 	.word	0x20000068

0800c544 <_kill_r>:
 800c544:	b538      	push	{r3, r4, r5, lr}
 800c546:	2300      	movs	r3, #0
 800c548:	4d06      	ldr	r5, [pc, #24]	; (800c564 <_kill_r+0x20>)
 800c54a:	4604      	mov	r4, r0
 800c54c:	4608      	mov	r0, r1
 800c54e:	4611      	mov	r1, r2
 800c550:	602b      	str	r3, [r5, #0]
 800c552:	f7f5 f9d0 	bl	80018f6 <_kill>
 800c556:	1c43      	adds	r3, r0, #1
 800c558:	d102      	bne.n	800c560 <_kill_r+0x1c>
 800c55a:	682b      	ldr	r3, [r5, #0]
 800c55c:	b103      	cbz	r3, 800c560 <_kill_r+0x1c>
 800c55e:	6023      	str	r3, [r4, #0]
 800c560:	bd38      	pop	{r3, r4, r5, pc}
 800c562:	bf00      	nop
 800c564:	20001c54 	.word	0x20001c54

0800c568 <_getpid_r>:
 800c568:	f7f5 b9be 	b.w	80018e8 <_getpid>

0800c56c <__swbuf_r>:
 800c56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c56e:	460e      	mov	r6, r1
 800c570:	4614      	mov	r4, r2
 800c572:	4605      	mov	r5, r0
 800c574:	b118      	cbz	r0, 800c57e <__swbuf_r+0x12>
 800c576:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c578:	b90b      	cbnz	r3, 800c57e <__swbuf_r+0x12>
 800c57a:	f7fe fbf7 	bl	800ad6c <__sinit>
 800c57e:	69a3      	ldr	r3, [r4, #24]
 800c580:	60a3      	str	r3, [r4, #8]
 800c582:	89a3      	ldrh	r3, [r4, #12]
 800c584:	0719      	lsls	r1, r3, #28
 800c586:	d529      	bpl.n	800c5dc <__swbuf_r+0x70>
 800c588:	6923      	ldr	r3, [r4, #16]
 800c58a:	b33b      	cbz	r3, 800c5dc <__swbuf_r+0x70>
 800c58c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c590:	b2f6      	uxtb	r6, r6
 800c592:	049a      	lsls	r2, r3, #18
 800c594:	4637      	mov	r7, r6
 800c596:	d52a      	bpl.n	800c5ee <__swbuf_r+0x82>
 800c598:	6823      	ldr	r3, [r4, #0]
 800c59a:	6920      	ldr	r0, [r4, #16]
 800c59c:	1a18      	subs	r0, r3, r0
 800c59e:	6963      	ldr	r3, [r4, #20]
 800c5a0:	4283      	cmp	r3, r0
 800c5a2:	dc04      	bgt.n	800c5ae <__swbuf_r+0x42>
 800c5a4:	4621      	mov	r1, r4
 800c5a6:	4628      	mov	r0, r5
 800c5a8:	f7fe fb74 	bl	800ac94 <_fflush_r>
 800c5ac:	b9e0      	cbnz	r0, 800c5e8 <__swbuf_r+0x7c>
 800c5ae:	68a3      	ldr	r3, [r4, #8]
 800c5b0:	3001      	adds	r0, #1
 800c5b2:	3b01      	subs	r3, #1
 800c5b4:	60a3      	str	r3, [r4, #8]
 800c5b6:	6823      	ldr	r3, [r4, #0]
 800c5b8:	1c5a      	adds	r2, r3, #1
 800c5ba:	6022      	str	r2, [r4, #0]
 800c5bc:	701e      	strb	r6, [r3, #0]
 800c5be:	6963      	ldr	r3, [r4, #20]
 800c5c0:	4283      	cmp	r3, r0
 800c5c2:	d004      	beq.n	800c5ce <__swbuf_r+0x62>
 800c5c4:	89a3      	ldrh	r3, [r4, #12]
 800c5c6:	07db      	lsls	r3, r3, #31
 800c5c8:	d506      	bpl.n	800c5d8 <__swbuf_r+0x6c>
 800c5ca:	2e0a      	cmp	r6, #10
 800c5cc:	d104      	bne.n	800c5d8 <__swbuf_r+0x6c>
 800c5ce:	4621      	mov	r1, r4
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	f7fe fb5f 	bl	800ac94 <_fflush_r>
 800c5d6:	b938      	cbnz	r0, 800c5e8 <__swbuf_r+0x7c>
 800c5d8:	4638      	mov	r0, r7
 800c5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5dc:	4621      	mov	r1, r4
 800c5de:	4628      	mov	r0, r5
 800c5e0:	f7ff fca8 	bl	800bf34 <__swsetup_r>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d0d1      	beq.n	800c58c <__swbuf_r+0x20>
 800c5e8:	f04f 37ff 	mov.w	r7, #4294967295
 800c5ec:	e7f4      	b.n	800c5d8 <__swbuf_r+0x6c>
 800c5ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c5f2:	81a3      	strh	r3, [r4, #12]
 800c5f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c5f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5fa:	6663      	str	r3, [r4, #100]	; 0x64
 800c5fc:	e7cc      	b.n	800c598 <__swbuf_r+0x2c>
	...

0800c600 <_wcrtomb_r>:
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	4c09      	ldr	r4, [pc, #36]	; (800c628 <_wcrtomb_r+0x28>)
 800c604:	4605      	mov	r5, r0
 800c606:	461e      	mov	r6, r3
 800c608:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800c60c:	b085      	sub	sp, #20
 800c60e:	b909      	cbnz	r1, 800c614 <_wcrtomb_r+0x14>
 800c610:	460a      	mov	r2, r1
 800c612:	a901      	add	r1, sp, #4
 800c614:	47b8      	blx	r7
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	bf01      	itttt	eq
 800c61a:	2300      	moveq	r3, #0
 800c61c:	6033      	streq	r3, [r6, #0]
 800c61e:	238a      	moveq	r3, #138	; 0x8a
 800c620:	602b      	streq	r3, [r5, #0]
 800c622:	b005      	add	sp, #20
 800c624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c626:	bf00      	nop
 800c628:	2000049c 	.word	0x2000049c

0800c62c <_fstat_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	2300      	movs	r3, #0
 800c630:	4d06      	ldr	r5, [pc, #24]	; (800c64c <_fstat_r+0x20>)
 800c632:	4604      	mov	r4, r0
 800c634:	4608      	mov	r0, r1
 800c636:	4611      	mov	r1, r2
 800c638:	602b      	str	r3, [r5, #0]
 800c63a:	f7f5 f9ba 	bl	80019b2 <_fstat>
 800c63e:	1c43      	adds	r3, r0, #1
 800c640:	d102      	bne.n	800c648 <_fstat_r+0x1c>
 800c642:	682b      	ldr	r3, [r5, #0]
 800c644:	b103      	cbz	r3, 800c648 <_fstat_r+0x1c>
 800c646:	6023      	str	r3, [r4, #0]
 800c648:	bd38      	pop	{r3, r4, r5, pc}
 800c64a:	bf00      	nop
 800c64c:	20001c54 	.word	0x20001c54

0800c650 <_isatty_r>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	2300      	movs	r3, #0
 800c654:	4d05      	ldr	r5, [pc, #20]	; (800c66c <_isatty_r+0x1c>)
 800c656:	4604      	mov	r4, r0
 800c658:	4608      	mov	r0, r1
 800c65a:	602b      	str	r3, [r5, #0]
 800c65c:	f7f5 f9b8 	bl	80019d0 <_isatty>
 800c660:	1c43      	adds	r3, r0, #1
 800c662:	d102      	bne.n	800c66a <_isatty_r+0x1a>
 800c664:	682b      	ldr	r3, [r5, #0]
 800c666:	b103      	cbz	r3, 800c66a <_isatty_r+0x1a>
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	bd38      	pop	{r3, r4, r5, pc}
 800c66c:	20001c54 	.word	0x20001c54

0800c670 <_init>:
 800c670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c672:	bf00      	nop
 800c674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c676:	bc08      	pop	{r3}
 800c678:	469e      	mov	lr, r3
 800c67a:	4770      	bx	lr

0800c67c <_fini>:
 800c67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c67e:	bf00      	nop
 800c680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c682:	bc08      	pop	{r3}
 800c684:	469e      	mov	lr, r3
 800c686:	4770      	bx	lr
